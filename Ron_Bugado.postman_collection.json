{
	"info": {
		"_postman_id": "042cc768-7965-45e9-9445-fd8ecc42994a",
		"name": "Ron_Bugado",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "36752981"
	},
	"item": [
		{
			"name": "Login - PBI-20518",
			"item": [
				{
					"name": "Login de Sucesso",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{url_base}}/api/login/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"login",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Login com email inválida",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{url_base}}/api/login/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"login",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Login com email e senha em branco",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verificar Status code é 400\", function () {\r",
									"\t\tpm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test(\"Validar mensagem e-mail é obrigatorio\", function () {\r",
									"    pm.expect(\"O campo e-mail é obrigatório.\").to.eql(pm.response.json().mail) \r",
									"}) \r",
									"\r",
									"pm.test(\"Validar mensagem senha é obrigatório\", function () {\r",
									"\t\tpm.expect(\"O campo senha é obrigatório.\").to.eql(pm.response.json().password);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"mail\": \"\",\r\n    \"password\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/login/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"login",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Login com email e senha inválidas",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verificar Status code é 400\", function () {\r",
									"\t\tpm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test(\"Validar mensagem e-mail e senha são inválidos\", function () {\r",
									"\t\tpm.expect(\"E-mail ou senha informados são inválidos.\").to.eql(pm.response.json().alert);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"mail\": \"{{email-invalido}}\",\r\n    \"password\": \"{{password-invalido}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/login/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"login",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Login com email em branco",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verificar Status code é 400\", function () {\r",
									"\t\tpm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test(\"Validar mensagem e-mail é obrigatório\", function () {\r",
									"\t\tpm.expect(\"O campo e-mail é obrigatório.\").to.eql(pm.response.json().mail);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"mail\": \"\",\r\n    \"password\": \"{{PasswordAdmin}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/login/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"login",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Login com senha em branco",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verificar Status code é 400\", function() {\r",
									"\t\tpm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test(\"Validar mensagem senha é obrigatório\", function() {\r",
									"\t\tpm.expect(\"O campo senha é obrigatório.\").to.eql(pm.response.json().password);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"mail\": \"{{email}}\",\r\n    \"password\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/login/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"login",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Login com senha inválida",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verificar Status code é 400\", function() {\r",
									"\t\tpm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test(\"Validar mensagem e-mail e senha são inválidos\", function() {\r",
									"\t\tpm.expect(\"E-mail ou senha informados são inválidos.\").to.eql(pm.response.json().alert);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"mail\": \"{{email}}\",\r\n    \"password\": \"{{password-invalido}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/login/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"login",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User - PBI 20519 (Cadastrar)",
			"item": [
				{
					"name": "Pré-Requisito",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"tokenAcesso\",pm.response.json().token)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"mail\": \"pegartoken@test.com.br\",\r\n  \"password\": \"1234@Test\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/login/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"login",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/login/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"mail\": \"sysadmin@qacoders.com\",\r\n  \"password\": \"1234@Test\"\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com Sucesso",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 201\", function(){\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Full Name é igual\", function(){\r",
									"    pm.expect(pm.response.json().user.fullName).to.equal(pm.environment.get(\"fullnameUser\"))\r",
									"})\r",
									"\r",
									"pm.test(\"Status é True\", function(){\r",
									"    pm.expect(pm.response.json().user.status).to.be.true;\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"CPF é igual\", function(){\r",
									"    pm.expect(pm.response.json().user.cpf).to.equal(pm.environment.get(\"cpf\"))\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"\r",
									"function randomCpf() {\r",
									"    let randomCpf = '';\r",
									"   \r",
									"    for (let i = 0; i < 11; i++) {\r",
									"        randomCpf += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCpf;\r",
									"}\r",
									"pm.environment.set(\"cpf\", randomCpf());\r",
									"\r",
									"\r",
									"function generatePassword() {\r",
									"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
									"    const comprimentoMinimo = 8;\r",
									"    const comprimentoMaximo = 12;\r",
									"    let senhaArray = [];\r",
									" \r",
									"    senhaArray.push(chars[Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]); \r",
									"    senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]); \r",
									"    \r",
									"    const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
									"    \r",
									"    for (let i = 0; i < comprimentoRestante; i++) {\r",
									"        senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);\r",
									"    }\r",
									"    return shuffleString(senhaArray.join(\"\"));\r",
									"}\r",
									"\r",
									"function shuffleString(string) {\r",
									"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
									"}\r",
									"pm.environment.set(\"passwordUser\", generatePassword());\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"fullName\": \"{{fullnameUser}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"{{cpf}}\",\r\n  \"password\": \"{{passwordUser}}\",\r\n  \"confirmPassword\": \"{{passwordUser}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/user/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"user",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/user/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczODUxNTU3MywiZXhwIjoxNzM4NjAxOTczfQ.iDJuFHAivxy5Yt5Qbmln_PBycJSAAVrAcjh8xaf_B3g' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"fullName\": \"Pegar Token\",\r\n  \"mail\": \"pegartoken@test.com.br\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"00022233344\",\r\n  \"password\": \"1234@Test\",\r\n  \"confirmPassword\": \"1234@Test\"\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com campo nome completo em branco",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Validar retorno da mensagem\", function() {\r",
									"    pm.expect(pm.response.json().error[0]).to.eql(\"O campo nome completo é obrigatório.\");\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"\r",
									"function randomCpf() {\r",
									"    let randomCpf = '';\r",
									"   \r",
									"    for (let i = 0; i < 11; i++) {\r",
									"        randomCpf += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCpf;\r",
									"}\r",
									"pm.environment.set(\"cpf\", randomCpf());\r",
									"\r",
									"\r",
									"function generatePassword() {\r",
									"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
									"    const comprimentoMinimo = 8;\r",
									"    const comprimentoMaximo = 12;\r",
									"    let senhaArray = [];\r",
									" \r",
									"    senhaArray.push(chars[Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]); \r",
									"    senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]); \r",
									"    \r",
									"    const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
									"    \r",
									"    for (let i = 0; i < comprimentoRestante; i++) {\r",
									"        senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);\r",
									"    }\r",
									"    return shuffleString(senhaArray.join(\"\"));\r",
									"}\r",
									"\r",
									"function shuffleString(string) {\r",
									"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
									"}\r",
									"pm.environment.set(\"passwordUser\", generatePassword());\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"fullName\": \"\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"{{cpf}}\",\r\n  \"password\": \"{{passwordUser}}\",\r\n  \"confirmPassword\": \"{{passwordUser}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/user/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"user",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/user/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczODUxNTU3MywiZXhwIjoxNzM4NjAxOTczfQ.iDJuFHAivxy5Yt5Qbmln_PBycJSAAVrAcjh8xaf_B3g' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"fullName\": \"Pegar Token\",\r\n  \"mail\": \"pegartoken@test.com.br\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"00022233344\",\r\n  \"password\": \"1234@Test\",\r\n  \"confirmPassword\": \"1234@Test\"\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com campo nome completo  com mais de 100 caracteres.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Validar retorno da mensagem\", function() {\r",
									"    pm.expect(pm.response.json().error[0]).to.eql(\"O nome completo deve ter no máximo 100 caracteres.\");\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameuserExc\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\")+ \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\") + \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\") + \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\") + \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\") + \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\") + \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\") + \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\") + \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\") + \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\") + \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\") + \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\") + \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\") + \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\") + \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\") + \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\") + \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"\r",
									"function randomCpf() {\r",
									"    let randomCpf = '';\r",
									"   \r",
									"    for (let i = 0; i < 11; i++) {\r",
									"        randomCpf += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCpf;\r",
									"}\r",
									"pm.environment.set(\"cpf\", randomCpf());\r",
									"\r",
									"\r",
									"function generatePassword() {\r",
									"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
									"    const comprimentoMinimo = 8;\r",
									"    const comprimentoMaximo = 12;\r",
									"    let senhaArray = [];\r",
									" \r",
									"    senhaArray.push(chars[Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]); \r",
									"    senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]); \r",
									"    \r",
									"    const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
									"    \r",
									"    for (let i = 0; i < comprimentoRestante; i++) {\r",
									"        senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);\r",
									"    }\r",
									"    return shuffleString(senhaArray.join(\"\"));\r",
									"}\r",
									"\r",
									"function shuffleString(string) {\r",
									"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
									"}\r",
									"pm.environment.set(\"passwordUser\", generatePassword());\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"fullName\": \"{{fullnameuserExc}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"{{cpf}}\",\r\n  \"password\": \"{{passwordUser}}\",\r\n  \"confirmPassword\": \"{{passwordUser}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/user/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"user",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/user/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczODUxNTU3MywiZXhwIjoxNzM4NjAxOTczfQ.iDJuFHAivxy5Yt5Qbmln_PBycJSAAVrAcjh8xaf_B3g' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"fullName\": \"Pegar Token\",\r\n  \"mail\": \"pegartoken@test.com.br\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"00022233344\",\r\n  \"password\": \"1234@Test\",\r\n  \"confirmPassword\": \"1234@Test\"\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com campo nome completo com nome alfanumérico.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Validar retorno da mensagem\", function() {\r",
									"    pm.expect(pm.response.json().error[0]).to.eql(\"O campo nome completo não deve conter números\");\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"\r",
									"function randomCpf() {\r",
									"    let randomCpf = '';\r",
									"   \r",
									"    for (let i = 0; i < 11; i++) {\r",
									"        randomCpf += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCpf;\r",
									"}\r",
									"pm.environment.set(\"cpf\", randomCpf());\r",
									"\r",
									"\r",
									"function generatePassword() {\r",
									"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
									"    const comprimentoMinimo = 8;\r",
									"    const comprimentoMaximo = 12;\r",
									"    let senhaArray = [];\r",
									" \r",
									"    senhaArray.push(chars[Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]); \r",
									"    senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]); \r",
									"    \r",
									"    const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
									"    \r",
									"    for (let i = 0; i < comprimentoRestante; i++) {\r",
									"        senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);\r",
									"    }\r",
									"    return shuffleString(senhaArray.join(\"\"));\r",
									"}\r",
									"\r",
									"function shuffleString(string) {\r",
									"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
									"}\r",
									"pm.environment.set(\"passwordUser\", generatePassword());\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"fullName\": \"Math3us Sou5a\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"{{cpf}}\",\r\n  \"password\": \"{{passwordUser}}\",\r\n  \"confirmPassword\": \"{{passwordUser}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/user/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"user",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/user/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczODUxNTU3MywiZXhwIjoxNzM4NjAxOTczfQ.iDJuFHAivxy5Yt5Qbmln_PBycJSAAVrAcjh8xaf_B3g' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"fullName\": \"Pegar Token\",\r\n  \"mail\": \"pegartoken@test.com.br\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"00022233344\",\r\n  \"password\": \"1234@Test\",\r\n  \"confirmPassword\": \"1234@Test\"\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com campo nome completo com caracteres especiais",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Validar retorno da mensagem\", function() {\r",
									"    pm.expect(pm.response.json().error[0]).to.eql(\"Informe o nome e sobrenome com as iniciais maiúscula e sem caracteres especiais.\");\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"\r",
									"function randomCpf() {\r",
									"    let randomCpf = '';\r",
									"   \r",
									"    for (let i = 0; i < 11; i++) {\r",
									"        randomCpf += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCpf;\r",
									"}\r",
									"pm.environment.set(\"cpf\", randomCpf());\r",
									"\r",
									"\r",
									"function generatePassword() {\r",
									"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
									"    const comprimentoMinimo = 8;\r",
									"    const comprimentoMaximo = 12;\r",
									"    let senhaArray = [];\r",
									" \r",
									"    senhaArray.push(chars[Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]); \r",
									"    senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]); \r",
									"    \r",
									"    const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
									"    \r",
									"    for (let i = 0; i < comprimentoRestante; i++) {\r",
									"        senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);\r",
									"    }\r",
									"    return shuffleString(senhaArray.join(\"\"));\r",
									"}\r",
									"\r",
									"function shuffleString(string) {\r",
									"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
									"}\r",
									"pm.environment.set(\"passwordUser\", generatePassword());\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"fullName\": \"M@atheus Sous@\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"{{cpf}}\",\r\n  \"password\": \"{{passwordUser}}\",\r\n  \"confirmPassword\": \"{{passwordUser}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/user/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"user",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/user/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczODUxNTU3MywiZXhwIjoxNzM4NjAxOTczfQ.iDJuFHAivxy5Yt5Qbmln_PBycJSAAVrAcjh8xaf_B3g' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"fullName\": \"Pegar Token\",\r\n  \"mail\": \"pegartoken@test.com.br\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"00022233344\",\r\n  \"password\": \"1234@Test\",\r\n  \"confirmPassword\": \"1234@Test\"\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com campo nome completo somente com primeiro nome.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Validar retorno da mensagem\", function() {\r",
									"    pm.expect(pm.response.json().error[0]).to.eql(\"Informe o nome e sobrenome.\");\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"\r",
									"function randomCpf() {\r",
									"    let randomCpf = '';\r",
									"   \r",
									"    for (let i = 0; i < 11; i++) {\r",
									"        randomCpf += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCpf;\r",
									"}\r",
									"pm.environment.set(\"cpf\", randomCpf());\r",
									"\r",
									"\r",
									"function generatePassword() {\r",
									"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
									"    const comprimentoMinimo = 8;\r",
									"    const comprimentoMaximo = 12;\r",
									"    let senhaArray = [];\r",
									" \r",
									"    senhaArray.push(chars[Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]); \r",
									"    senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]); \r",
									"    \r",
									"    const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
									"    \r",
									"    for (let i = 0; i < comprimentoRestante; i++) {\r",
									"        senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);\r",
									"    }\r",
									"    return shuffleString(senhaArray.join(\"\"));\r",
									"}\r",
									"\r",
									"function shuffleString(string) {\r",
									"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
									"}\r",
									"pm.environment.set(\"passwordUser\", generatePassword());\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"fullName\": \"Matheus\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"{{cpf}}\",\r\n  \"password\": \"{{passwordUser}}\",\r\n  \"confirmPassword\": \"{{passwordUser}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/user/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"user",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/user/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczODUxNTU3MywiZXhwIjoxNzM4NjAxOTczfQ.iDJuFHAivxy5Yt5Qbmln_PBycJSAAVrAcjh8xaf_B3g' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"fullName\": \"Pegar Token\",\r\n  \"mail\": \"pegartoken@test.com.br\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"00022233344\",\r\n  \"password\": \"1234@Test\",\r\n  \"confirmPassword\": \"1234@Test\"\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com campo nome completo com as letras minúsculas",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Validar retorno da mensagem\", function() {\r",
									"    pm.expect(pm.response.json().error[0]).to.eql(\"Informe o nome e sobrenome com as iniciais em letras maiúscula e sem caracteres especiais.\");\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"\r",
									"function randomCpf() {\r",
									"    let randomCpf = '';\r",
									"   \r",
									"    for (let i = 0; i < 11; i++) {\r",
									"        randomCpf += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCpf;\r",
									"}\r",
									"pm.environment.set(\"cpf\", randomCpf());\r",
									"\r",
									"\r",
									"function generatePassword() {\r",
									"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
									"    const comprimentoMinimo = 8;\r",
									"    const comprimentoMaximo = 12;\r",
									"    let senhaArray = [];\r",
									" \r",
									"    senhaArray.push(chars[Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]); \r",
									"    senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]); \r",
									"    \r",
									"    const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
									"    \r",
									"    for (let i = 0; i < comprimentoRestante; i++) {\r",
									"        senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);\r",
									"    }\r",
									"    return shuffleString(senhaArray.join(\"\"));\r",
									"}\r",
									"\r",
									"function shuffleString(string) {\r",
									"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
									"}\r",
									"pm.environment.set(\"passwordUser\", generatePassword());\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"fullName\": \"matheus sousa\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"{{cpf}}\",\r\n  \"password\": \"{{passwordUser}}\",\r\n  \"confirmPassword\": \"{{passwordUser}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/user/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"user",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/user/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczODUxNTU3MywiZXhwIjoxNzM4NjAxOTczfQ.iDJuFHAivxy5Yt5Qbmln_PBycJSAAVrAcjh8xaf_B3g' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"fullName\": \"Pegar Token\",\r\n  \"mail\": \"pegartoken@test.com.br\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"00022233344\",\r\n  \"password\": \"1234@Test\",\r\n  \"confirmPassword\": \"1234@Test\"\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com campo nome completo com as letras maiusculas",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"\r",
									"function randomCpf() {\r",
									"    let randomCpf = '';\r",
									"   \r",
									"    for (let i = 0; i < 11; i++) {\r",
									"        randomCpf += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCpf;\r",
									"}\r",
									"pm.environment.set(\"cpf\", randomCpf());\r",
									"\r",
									"\r",
									"function generatePassword() {\r",
									"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
									"    const comprimentoMinimo = 8;\r",
									"    const comprimentoMaximo = 12;\r",
									"    let senhaArray = [];\r",
									" \r",
									"    senhaArray.push(chars[Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]); \r",
									"    senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]); \r",
									"    \r",
									"    const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
									"    \r",
									"    for (let i = 0; i < comprimentoRestante; i++) {\r",
									"        senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);\r",
									"    }\r",
									"    return shuffleString(senhaArray.join(\"\"));\r",
									"}\r",
									"\r",
									"function shuffleString(string) {\r",
									"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
									"}\r",
									"pm.environment.set(\"passwordUser\", generatePassword());\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"fullName\": \"MATHEUS SOUSA\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"{{cpf}}\",\r\n  \"password\": \"{{passwordUser}}\",\r\n  \"confirmPassword\": \"{{passwordUser}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/user/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"user",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/user/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczODUxNTU3MywiZXhwIjoxNzM4NjAxOTczfQ.iDJuFHAivxy5Yt5Qbmln_PBycJSAAVrAcjh8xaf_B3g' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"fullName\": \"Pegar Token\",\r\n  \"mail\": \"pegartoken@test.com.br\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"00022233344\",\r\n  \"password\": \"1234@Test\",\r\n  \"confirmPassword\": \"1234@Test\"\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com campo nome  com mais de duas palavras composta",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 201\", function(){\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Full Name é igual\", function(){\r",
									"    pm.expect(pm.response.json().user.fullName).to.equal(pm.environment.get(\"fullnameGrande\"))\r",
									"})\r",
									"\r",
									"pm.test(\"Status é True\", function(){\r",
									"    pm.expect(pm.response.json().user.status).to.be.true;\r",
									"})\r",
									"\r",
									"pm.test(\"Mensagem de sucesso\",function(){\r",
									"    pm.expect(pm.response.json().msg).to.include(\"cadastro realizado com sucesso.\")\r",
									"})\r",
									"\r",
									"pm.test(\"CPF é igual\", function(){\r",
									"    pm.expect(pm.response.json().user.cpf).to.equal(pm.environment.get(\"cpf\"))\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameGrande\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\")  + \" \" +pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"\r",
									"function randomCpf() {\r",
									"    let randomCpf = '';\r",
									"   \r",
									"    for (let i = 0; i < 11; i++) {\r",
									"        randomCpf += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCpf;\r",
									"}\r",
									"pm.environment.set(\"cpf\", randomCpf());\r",
									"\r",
									"\r",
									"function generatePassword() {\r",
									"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
									"    const comprimentoMinimo = 8;\r",
									"    const comprimentoMaximo = 12;\r",
									"    let senhaArray = [];\r",
									" \r",
									"    senhaArray.push(chars[Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]); \r",
									"    senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]); \r",
									"    \r",
									"    const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
									"    \r",
									"    for (let i = 0; i < comprimentoRestante; i++) {\r",
									"        senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);\r",
									"    }\r",
									"    return shuffleString(senhaArray.join(\"\"));\r",
									"}\r",
									"\r",
									"function shuffleString(string) {\r",
									"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
									"}\r",
									"pm.environment.set(\"passwordUser\", generatePassword());\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"fullName\": \"{{fullnameGrande}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"{{cpf}}\",\r\n  \"password\": \"{{passwordUser}}\",\r\n  \"confirmPassword\": \"{{passwordUser}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/user/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"user",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/user/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczODUxNTU3MywiZXhwIjoxNzM4NjAxOTczfQ.iDJuFHAivxy5Yt5Qbmln_PBycJSAAVrAcjh8xaf_B3g' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"fullName\": \"Pegar Token\",\r\n  \"mail\": \"pegartoken@test.com.br\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"00022233344\",\r\n  \"password\": \"1234@Test\",\r\n  \"confirmPassword\": \"1234@Test\"\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com campo e-mail em branco",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"\r",
									"function randomCpf() {\r",
									"    let randomCpf = '';\r",
									"   \r",
									"    for (let i = 0; i < 11; i++) {\r",
									"        randomCpf += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCpf;\r",
									"}\r",
									"pm.environment.set(\"cpf\", randomCpf());\r",
									"\r",
									"\r",
									"function generatePassword() {\r",
									"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
									"    const comprimentoMinimo = 8;\r",
									"    const comprimentoMaximo = 12;\r",
									"    let senhaArray = [];\r",
									" \r",
									"    senhaArray.push(chars[Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]); \r",
									"    senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]); \r",
									"    \r",
									"    const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
									"    \r",
									"    for (let i = 0; i < comprimentoRestante; i++) {\r",
									"        senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);\r",
									"    }\r",
									"    return shuffleString(senhaArray.join(\"\"));\r",
									"}\r",
									"\r",
									"function shuffleString(string) {\r",
									"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
									"}\r",
									"pm.environment.set(\"passwordUser\", generatePassword());\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Validar retorno da mensagem\", function() {\r",
									"    pm.expect(pm.response.json().error[0]).to.eql(\"O campo e-mail é obrigatório.\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"fullName\": \"{{fullnameUser}}\",\r\n  \"mail\": \"\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"{{cpf}}\",\r\n  \"password\": \"{{passwordUser}}\",\r\n  \"confirmPassword\": \"{{passwordUser}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/user/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"user",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/user/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczODUxNTU3MywiZXhwIjoxNzM4NjAxOTczfQ.iDJuFHAivxy5Yt5Qbmln_PBycJSAAVrAcjh8xaf_B3g' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"fullName\": \"Pegar Token\",\r\n  \"mail\": \"pegartoken@test.com.br\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"00022233344\",\r\n  \"password\": \"1234@Test\",\r\n  \"confirmPassword\": \"1234@Test\"\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com campo e-mail com formato de e-mail inválido.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"\r",
									"function randomCpf() {\r",
									"    let randomCpf = '';\r",
									"   \r",
									"    for (let i = 0; i < 11; i++) {\r",
									"        randomCpf += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCpf;\r",
									"}\r",
									"pm.environment.set(\"cpf\", randomCpf());\r",
									"\r",
									"\r",
									"function generatePassword() {\r",
									"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
									"    const comprimentoMinimo = 8;\r",
									"    const comprimentoMaximo = 12;\r",
									"    let senhaArray = [];\r",
									" \r",
									"    senhaArray.push(chars[Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]); \r",
									"    senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]); \r",
									"    \r",
									"    const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
									"    \r",
									"    for (let i = 0; i < comprimentoRestante; i++) {\r",
									"        senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);\r",
									"    }\r",
									"    return shuffleString(senhaArray.join(\"\"));\r",
									"}\r",
									"\r",
									"function shuffleString(string) {\r",
									"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
									"}\r",
									"pm.environment.set(\"passwordUser\", generatePassword());\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Validar retorno da mensagem\", function() {\r",
									"    pm.expect(pm.response.json().error[0]).to.eql(\"O e-mail informado é inválido. Informe um e-mail no formato [nome@domínio.com].\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"fullName\": \"{{fullnameUser}}\",\r\n  \"mail\": \"testtest.com.br\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"{{cpf}}\",\r\n  \"password\": \"{{passwordUser}}\",\r\n  \"confirmPassword\": \"{{passwordUser}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/user/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"user",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/user/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczODUxNTU3MywiZXhwIjoxNzM4NjAxOTczfQ.iDJuFHAivxy5Yt5Qbmln_PBycJSAAVrAcjh8xaf_B3g' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"fullName\": \"Pegar Token\",\r\n  \"mail\": \"pegartoken@test.com.br\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"00022233344\",\r\n  \"password\": \"1234@Test\",\r\n  \"confirmPassword\": \"1234@Test\"\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com campo e-mail com espaço entre o domínio.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"\r",
									"function randomCpf() {\r",
									"    let randomCpf = '';\r",
									"   \r",
									"    for (let i = 0; i < 11; i++) {\r",
									"        randomCpf += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCpf;\r",
									"}\r",
									"pm.environment.set(\"cpf\", randomCpf());\r",
									"\r",
									"\r",
									"function generatePassword() {\r",
									"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
									"    const comprimentoMinimo = 8;\r",
									"    const comprimentoMaximo = 12;\r",
									"    let senhaArray = [];\r",
									" \r",
									"    senhaArray.push(chars[Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]); \r",
									"    senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]); \r",
									"    \r",
									"    const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
									"    \r",
									"    for (let i = 0; i < comprimentoRestante; i++) {\r",
									"        senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);\r",
									"    }\r",
									"    return shuffleString(senhaArray.join(\"\"));\r",
									"}\r",
									"\r",
									"function shuffleString(string) {\r",
									"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
									"}\r",
									"pm.environment.set(\"passwordUser\", generatePassword());\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Validar retorno da mensagem\", function() {\r",
									"    pm.expect(pm.response.json().error[0]).to.eql(\"O e-mail informado é inválido. Informe um e-mail no formato [nome@domínio.com].\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"fullName\": \"{{fullnameUser}}\",\r\n  \"mail\": \"test@ test.com.br\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"{{cpf}}\",\r\n  \"password\": \"{{passwordUser}}\",\r\n  \"confirmPassword\": \"{{passwordUser}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/user/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"user",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/user/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczODUxNTU3MywiZXhwIjoxNzM4NjAxOTczfQ.iDJuFHAivxy5Yt5Qbmln_PBycJSAAVrAcjh8xaf_B3g' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"fullName\": \"Pegar Token\",\r\n  \"mail\": \"pegartoken@test.com.br\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"00022233344\",\r\n  \"password\": \"1234@Test\",\r\n  \"confirmPassword\": \"1234@Test\"\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com Sucesso com domínio de outro países",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailuserPt\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.pt')\r",
									"\r",
									"\r",
									"function randomCpf() {\r",
									"    let randomCpf = '';\r",
									"   \r",
									"    for (let i = 0; i < 11; i++) {\r",
									"        randomCpf += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCpf;\r",
									"}\r",
									"pm.environment.set(\"cpf\", randomCpf());\r",
									"\r",
									"\r",
									"function generatePassword() {\r",
									"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
									"    const comprimentoMinimo = 8;\r",
									"    const comprimentoMaximo = 12;\r",
									"    let senhaArray = [];\r",
									" \r",
									"    senhaArray.push(chars[Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]); \r",
									"    senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]); \r",
									"    \r",
									"    const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
									"    \r",
									"    for (let i = 0; i < comprimentoRestante; i++) {\r",
									"        senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);\r",
									"    }\r",
									"    return shuffleString(senhaArray.join(\"\"));\r",
									"}\r",
									"\r",
									"function shuffleString(string) {\r",
									"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
									"}\r",
									"pm.environment.set(\"passwordUser\", generatePassword());\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 201\", function(){\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Full Name é igual\", function(){\r",
									"    pm.expect(pm.response.json().user.fullName).to.equal(pm.environment.get(\"fullnameUser\"))\r",
									"})\r",
									"\r",
									"pm.test(\"Status é True\", function(){\r",
									"    pm.expect(pm.response.json().user.status).to.be.true;\r",
									"})\r",
									"\r",
									"pm.test(\"Mensagem de sucesso\",function(){\r",
									"    pm.expect(pm.response.json().msg).to.include(\"cadastro realizado com sucesso.\")\r",
									"})\r",
									"\r",
									"pm.test(\"CPF é igual\", function(){\r",
									"    pm.expect(pm.response.json().user.cpf).to.equal(pm.environment.get(\"cpf\"))\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"fullName\": \"{{fullnameUser}}\",\r\n  \"mail\": \"{{mailuserPt}}\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"{{cpf}}\",\r\n  \"password\": \"{{passwordUser}}\",\r\n  \"confirmPassword\": \"{{passwordUser}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/user/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"user",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/user/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczODUxNTU3MywiZXhwIjoxNzM4NjAxOTczfQ.iDJuFHAivxy5Yt5Qbmln_PBycJSAAVrAcjh8xaf_B3g' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"fullName\": \"Pegar Token\",\r\n  \"mail\": \"pegartoken@test.com.br\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"00022233344\",\r\n  \"password\": \"1234@Test\",\r\n  \"confirmPassword\": \"1234@Test\"\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com campo e-mail com código inválido",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"\r",
									"function randomCpf() {\r",
									"    let randomCpf = '';\r",
									"   \r",
									"    for (let i = 0; i < 11; i++) {\r",
									"        randomCpf += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCpf;\r",
									"}\r",
									"pm.environment.set(\"cpf\", randomCpf());\r",
									"\r",
									"\r",
									"function generatePassword() {\r",
									"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
									"    const comprimentoMinimo = 8;\r",
									"    const comprimentoMaximo = 12;\r",
									"    let senhaArray = [];\r",
									" \r",
									"    senhaArray.push(chars[Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]); \r",
									"    senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]); \r",
									"    \r",
									"    const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
									"    \r",
									"    for (let i = 0; i < comprimentoRestante; i++) {\r",
									"        senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);\r",
									"    }\r",
									"    return shuffleString(senhaArray.join(\"\"));\r",
									"}\r",
									"\r",
									"function shuffleString(string) {\r",
									"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
									"}\r",
									"pm.environment.set(\"passwordUser\", generatePassword());\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Validar retorno da mensagem\", function() {\r",
									"    pm.expect(pm.response.json().error[0]).to.eql(\"O e-mail informado é inválido. Informe um e-mail no formato [nome@domínio.com].\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"fullName\": \"{{fullnameUser}}\",\r\n  \"mail\": \"test@test.brrras\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"{{cpf}}\",\r\n  \"password\": \"{{passwordUser}}\",\r\n  \"confirmPassword\": \"{{passwordUser}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/user/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"user",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/user/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczODUxNTU3MywiZXhwIjoxNzM4NjAxOTczfQ.iDJuFHAivxy5Yt5Qbmln_PBycJSAAVrAcjh8xaf_B3g' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"fullName\": \"Pegar Token\",\r\n  \"mail\": \"pegartoken@test.com.br\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"00022233344\",\r\n  \"password\": \"1234@Test\",\r\n  \"confirmPassword\": \"1234@Test\"\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com campo senha em branco.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"\r",
									"function randomCpf() {\r",
									"    let randomCpf = '';\r",
									"   \r",
									"    for (let i = 0; i < 11; i++) {\r",
									"        randomCpf += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCpf;\r",
									"}\r",
									"pm.environment.set(\"cpf\", randomCpf());\r",
									"\r",
									"\r",
									"function generatePassword() {\r",
									"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
									"    const comprimentoMinimo = 8;\r",
									"    const comprimentoMaximo = 12;\r",
									"    let senhaArray = [];\r",
									" \r",
									"    senhaArray.push(chars[Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]); \r",
									"    senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]); \r",
									"    \r",
									"    const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
									"    \r",
									"    for (let i = 0; i < comprimentoRestante; i++) {\r",
									"        senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);\r",
									"    }\r",
									"    return shuffleString(senhaArray.join(\"\"));\r",
									"}\r",
									"\r",
									"function shuffleString(string) {\r",
									"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
									"}\r",
									"pm.environment.set(\"passwordUser\", generatePassword());\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Validar retorno da mensagem\", function() {\r",
									"    pm.expect(pm.response.json().error[0]).to.eql(\"O campo senha é obrigatório\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"fullName\": \"{{fullnameUser}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"{{cpf}}\",\r\n  \"password\": \"\",\r\n  \"confirmPassword\": \"{{passwordUser}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/user/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"user",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/user/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczODUxNTU3MywiZXhwIjoxNzM4NjAxOTczfQ.iDJuFHAivxy5Yt5Qbmln_PBycJSAAVrAcjh8xaf_B3g' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"fullName\": \"Pegar Token\",\r\n  \"mail\": \"pegartoken@test.com.br\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"00022233344\",\r\n  \"password\": \"1234@Test\",\r\n  \"confirmPassword\": \"1234@Test\"\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com campo senha  com menos de 8 caracteres.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"\r",
									"function randomCpf() {\r",
									"    let randomCpf = '';\r",
									"   \r",
									"    for (let i = 0; i < 11; i++) {\r",
									"        randomCpf += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCpf;\r",
									"}\r",
									"pm.environment.set(\"cpf\", randomCpf());\r",
									"\r",
									"\r",
									"function generatePassword() {\r",
									"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
									"    const comprimentoMinimo = 8;\r",
									"    const comprimentoMaximo = 12;\r",
									"    let senhaArray = [];\r",
									" \r",
									"    senhaArray.push(chars[Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]); \r",
									"    senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]); \r",
									"    \r",
									"    const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
									"    \r",
									"    for (let i = 0; i < comprimentoRestante; i++) {\r",
									"        senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);\r",
									"    }\r",
									"    return shuffleString(senhaArray.join(\"\"));\r",
									"}\r",
									"\r",
									"function shuffleString(string) {\r",
									"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
									"}\r",
									"pm.environment.set(\"passwordUser\", generatePassword());\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Validar retorno da mensagem\", function() {\r",
									"    pm.expect(pm.response.json().error[0]).to.eql(\"Senha precisa conter: uma letra maiúscula, minúscula, número, e um caractere especial(@#$%).\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"fullName\": \"{{fullnameUser}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"{{cpf}}\",\r\n  \"password\": \"Asdf1@\",\r\n  \"confirmPassword\": \"Asdf1@\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/user/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"user",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/user/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczODUxNTU3MywiZXhwIjoxNzM4NjAxOTczfQ.iDJuFHAivxy5Yt5Qbmln_PBycJSAAVrAcjh8xaf_B3g' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"fullName\": \"Pegar Token\",\r\n  \"mail\": \"pegartoken@test.com.br\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"00022233344\",\r\n  \"password\": \"1234@Test\",\r\n  \"confirmPassword\": \"1234@Test\"\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com campo senha com mais de 12 caracteres.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"\r",
									"function randomCpf() {\r",
									"    let randomCpf = '';\r",
									"   \r",
									"    for (let i = 0; i < 11; i++) {\r",
									"        randomCpf += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCpf;\r",
									"}\r",
									"pm.environment.set(\"cpf\", randomCpf());\r",
									"\r",
									"\r",
									"function generatePassword() {\r",
									"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
									"    const comprimentoMinimo = 8;\r",
									"    const comprimentoMaximo = 12;\r",
									"    let senhaArray = [];\r",
									" \r",
									"    senhaArray.push(chars[Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]); \r",
									"    senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]); \r",
									"    \r",
									"    const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
									"    \r",
									"    for (let i = 0; i < comprimentoRestante; i++) {\r",
									"        senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);\r",
									"    }\r",
									"    return shuffleString(senhaArray.join(\"\"));\r",
									"}\r",
									"\r",
									"function shuffleString(string) {\r",
									"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
									"}\r",
									"pm.environment.set(\"passwordUser\", generatePassword());\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Validar retorno da mensagem\", function() {\r",
									"    pm.expect(pm.response.json().error[0]).to.eql(\"Senha precisa conter: uma letra maiúscula, minúscula, número, e um caractere especial(@#$%).\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"fullName\": \"{{fullnameUser}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"{{cpf}}\",\r\n  \"password\": \"Asdfg1@asdfgasdfg\",\r\n  \"confirmPassword\": \"Asdfg1@asdfgasdfg\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/user/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"user",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/user/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczODUxNTU3MywiZXhwIjoxNzM4NjAxOTczfQ.iDJuFHAivxy5Yt5Qbmln_PBycJSAAVrAcjh8xaf_B3g' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"fullName\": \"Pegar Token\",\r\n  \"mail\": \"pegartoken@test.com.br\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"00022233344\",\r\n  \"password\": \"1234@Test\",\r\n  \"confirmPassword\": \"1234@Test\"\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com campo senha sem letra maiuscula.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"\r",
									"function randomCpf() {\r",
									"    let randomCpf = '';\r",
									"   \r",
									"    for (let i = 0; i < 11; i++) {\r",
									"        randomCpf += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCpf;\r",
									"}\r",
									"pm.environment.set(\"cpf\", randomCpf());\r",
									"\r",
									"\r",
									"function generatePassword() {\r",
									"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
									"    const comprimentoMinimo = 8;\r",
									"    const comprimentoMaximo = 12;\r",
									"    let senhaArray = [];\r",
									" \r",
									"    senhaArray.push(chars[Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]); \r",
									"    senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]); \r",
									"    \r",
									"    const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
									"    \r",
									"    for (let i = 0; i < comprimentoRestante; i++) {\r",
									"        senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);\r",
									"    }\r",
									"    return shuffleString(senhaArray.join(\"\"));\r",
									"}\r",
									"\r",
									"function shuffleString(string) {\r",
									"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
									"}\r",
									"pm.environment.set(\"passwordUser\", generatePassword());\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Validar retorno da mensagem\", function() {\r",
									"    pm.expect(pm.response.json().error[0]).to.eql(\"Senha precisa conter: uma letra maiúscula, minúscula, número, e um caractere especial(@#$%).\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"fullName\": \"{{fullnameUser}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"{{cpf}}\",\r\n  \"password\": \"asdfgh1@\",\r\n  \"confirmPassword\": \"asdfgh1@\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/user/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"user",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/user/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczODUxNTU3MywiZXhwIjoxNzM4NjAxOTczfQ.iDJuFHAivxy5Yt5Qbmln_PBycJSAAVrAcjh8xaf_B3g' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"fullName\": \"Pegar Token\",\r\n  \"mail\": \"pegartoken@test.com.br\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"00022233344\",\r\n  \"password\": \"1234@Test\",\r\n  \"confirmPassword\": \"1234@Test\"\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com campo senha sem letra minúscula.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"\r",
									"function randomCpf() {\r",
									"    let randomCpf = '';\r",
									"   \r",
									"    for (let i = 0; i < 11; i++) {\r",
									"        randomCpf += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCpf;\r",
									"}\r",
									"pm.environment.set(\"cpf\", randomCpf());\r",
									"\r",
									"\r",
									"function generatePassword() {\r",
									"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
									"    const comprimentoMinimo = 8;\r",
									"    const comprimentoMaximo = 12;\r",
									"    let senhaArray = [];\r",
									" \r",
									"    senhaArray.push(chars[Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]); \r",
									"    senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]); \r",
									"    \r",
									"    const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
									"    \r",
									"    for (let i = 0; i < comprimentoRestante; i++) {\r",
									"        senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);\r",
									"    }\r",
									"    return shuffleString(senhaArray.join(\"\"));\r",
									"}\r",
									"\r",
									"function shuffleString(string) {\r",
									"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
									"}\r",
									"pm.environment.set(\"passwordUser\", generatePassword());\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Validar retorno da mensagem\", function() {\r",
									"    pm.expect(pm.response.json().error[0]).to.eql(\"Senha precisa conter: uma letra maiúscula, minúscula, número, e um caractere especial(@#$%).\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"fullName\": \"{{fullnameUser}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"{{cpf}}\",\r\n  \"password\": \"ASDFGH1@\",\r\n  \"confirmPassword\": \"ASDFGH1@\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/user/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"user",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/user/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczODUxNTU3MywiZXhwIjoxNzM4NjAxOTczfQ.iDJuFHAivxy5Yt5Qbmln_PBycJSAAVrAcjh8xaf_B3g' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"fullName\": \"Pegar Token\",\r\n  \"mail\": \"pegartoken@test.com.br\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"00022233344\",\r\n  \"password\": \"1234@Test\",\r\n  \"confirmPassword\": \"1234@Test\"\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com campo senha sem caracteres especiais.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"\r",
									"function randomCpf() {\r",
									"    let randomCpf = '';\r",
									"   \r",
									"    for (let i = 0; i < 11; i++) {\r",
									"        randomCpf += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCpf;\r",
									"}\r",
									"pm.environment.set(\"cpf\", randomCpf());\r",
									"\r",
									"\r",
									"function generatePassword() {\r",
									"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
									"    const comprimentoMinimo = 8;\r",
									"    const comprimentoMaximo = 12;\r",
									"    let senhaArray = [];\r",
									" \r",
									"    senhaArray.push(chars[Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]); \r",
									"    senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]); \r",
									"    \r",
									"    const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
									"    \r",
									"    for (let i = 0; i < comprimentoRestante; i++) {\r",
									"        senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);\r",
									"    }\r",
									"    return shuffleString(senhaArray.join(\"\"));\r",
									"}\r",
									"\r",
									"function shuffleString(string) {\r",
									"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
									"}\r",
									"pm.environment.set(\"passwordUser\", generatePassword());\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Validar retorno da mensagem\", function() {\r",
									"    pm.expect(pm.response.json().error[0]).to.eql(\"Senha precisa conter: uma letra maiúscula, minúscula, número, e um caractere especial(@#$%).\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"fullName\": \"{{fullnameUser}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"{{cpf}}\",\r\n  \"password\": \"Asdfgh12\",\r\n  \"confirmPassword\": \"Asdfgh12\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/user/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"user",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/user/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczODUxNTU3MywiZXhwIjoxNzM4NjAxOTczfQ.iDJuFHAivxy5Yt5Qbmln_PBycJSAAVrAcjh8xaf_B3g' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"fullName\": \"Pegar Token\",\r\n  \"mail\": \"pegartoken@test.com.br\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"00022233344\",\r\n  \"password\": \"1234@Test\",\r\n  \"confirmPassword\": \"1234@Test\"\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com campo senha sem número.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"\r",
									"function randomCpf() {\r",
									"    let randomCpf = '';\r",
									"   \r",
									"    for (let i = 0; i < 11; i++) {\r",
									"        randomCpf += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCpf;\r",
									"}\r",
									"pm.environment.set(\"cpf\", randomCpf());\r",
									"\r",
									"\r",
									"function generatePassword() {\r",
									"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
									"    const comprimentoMinimo = 8;\r",
									"    const comprimentoMaximo = 12;\r",
									"    let senhaArray = [];\r",
									" \r",
									"    senhaArray.push(chars[Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]); \r",
									"    senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]); \r",
									"    \r",
									"    const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
									"    \r",
									"    for (let i = 0; i < comprimentoRestante; i++) {\r",
									"        senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);\r",
									"    }\r",
									"    return shuffleString(senhaArray.join(\"\"));\r",
									"}\r",
									"\r",
									"function shuffleString(string) {\r",
									"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
									"}\r",
									"pm.environment.set(\"passwordUser\", generatePassword());\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Validar retorno da mensagem\", function() {\r",
									"    pm.expect(pm.response.json().error[0]).to.eql(\"Senha precisa conter: uma letra maiúscula, minúscula, número, e um caractere especial(@#$%).\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"fullName\": \"{{fullnameUser}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"{{cpf}}\",\r\n  \"password\": \"Asdfgh@as\",\r\n  \"confirmPassword\": \"Asdfgh@as\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/user/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"user",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/user/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczODUxNTU3MywiZXhwIjoxNzM4NjAxOTczfQ.iDJuFHAivxy5Yt5Qbmln_PBycJSAAVrAcjh8xaf_B3g' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"fullName\": \"Pegar Token\",\r\n  \"mail\": \"pegartoken@test.com.br\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"00022233344\",\r\n  \"password\": \"1234@Test\",\r\n  \"confirmPassword\": \"1234@Test\"\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com campo senha com carácter diferente do permitido.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"\r",
									"function randomCpf() {\r",
									"    let randomCpf = '';\r",
									"   \r",
									"    for (let i = 0; i < 11; i++) {\r",
									"        randomCpf += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCpf;\r",
									"}\r",
									"pm.environment.set(\"cpf\", randomCpf());\r",
									"\r",
									"\r",
									"function generatePassword() {\r",
									"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
									"    const comprimentoMinimo = 8;\r",
									"    const comprimentoMaximo = 12;\r",
									"    let senhaArray = [];\r",
									" \r",
									"    senhaArray.push(chars[Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]); \r",
									"    senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]); \r",
									"    \r",
									"    const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
									"    \r",
									"    for (let i = 0; i < comprimentoRestante; i++) {\r",
									"        senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);\r",
									"    }\r",
									"    return shuffleString(senhaArray.join(\"\"));\r",
									"}\r",
									"\r",
									"function shuffleString(string) {\r",
									"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
									"}\r",
									"pm.environment.set(\"passwordUser\", generatePassword());\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Validar retorno da mensagem\", function() {\r",
									"    pm.expect(pm.response.json().error[0]).to.eql(\"Senha precisa conter: uma letra maiúscula, minúscula, número, e um caractere especial(@#$%).\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"fullName\": \"{{fullnameUser}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"{{cpf}}\",\r\n  \"password\": \"Asdfgh1&\",\r\n  \"confirmPassword\": \"Asdfgh1&\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/user/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"user",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/user/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczODUxNTU3MywiZXhwIjoxNzM4NjAxOTczfQ.iDJuFHAivxy5Yt5Qbmln_PBycJSAAVrAcjh8xaf_B3g' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"fullName\": \"Pegar Token\",\r\n  \"mail\": \"pegartoken@test.com.br\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"00022233344\",\r\n  \"password\": \"1234@Test\",\r\n  \"confirmPassword\": \"1234@Test\"\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com campo confirmar senha em branco",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"\r",
									"function randomCpf() {\r",
									"    let randomCpf = '';\r",
									"   \r",
									"    for (let i = 0; i < 11; i++) {\r",
									"        randomCpf += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCpf;\r",
									"}\r",
									"pm.environment.set(\"cpf\", randomCpf());\r",
									"\r",
									"\r",
									"function generatePassword() {\r",
									"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
									"    const comprimentoMinimo = 8;\r",
									"    const comprimentoMaximo = 12;\r",
									"    let senhaArray = [];\r",
									" \r",
									"    senhaArray.push(chars[Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]); \r",
									"    senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]); \r",
									"    \r",
									"    const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
									"    \r",
									"    for (let i = 0; i < comprimentoRestante; i++) {\r",
									"        senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);\r",
									"    }\r",
									"    return shuffleString(senhaArray.join(\"\"));\r",
									"}\r",
									"\r",
									"function shuffleString(string) {\r",
									"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
									"}\r",
									"pm.environment.set(\"passwordUser\", generatePassword());\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Validar retorno da mensagem\", function() {\r",
									"    pm.expect(pm.response.json().error[0]).to.eql(\"O campo de confirmação de senha é obrigatório.\");\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"fullName\": \"{{fullnameUser}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"{{cpf}}\",\r\n  \"password\": \"{{passwordUser}}\",\r\n  \"confirmPassword\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/user/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"user",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/user/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczODUxNTU3MywiZXhwIjoxNzM4NjAxOTczfQ.iDJuFHAivxy5Yt5Qbmln_PBycJSAAVrAcjh8xaf_B3g' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"fullName\": \"Pegar Token\",\r\n  \"mail\": \"pegartoken@test.com.br\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"00022233344\",\r\n  \"password\": \"1234@Test\",\r\n  \"confirmPassword\": \"1234@Test\"\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com campo confirmar senha com senha  diferente do campo senha",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"\r",
									"function randomCpf() {\r",
									"    let randomCpf = '';\r",
									"   \r",
									"    for (let i = 0; i < 11; i++) {\r",
									"        randomCpf += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCpf;\r",
									"}\r",
									"pm.environment.set(\"cpf\", randomCpf());\r",
									"\r",
									"\r",
									"function generatePassword() {\r",
									"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
									"    const comprimentoMinimo = 8;\r",
									"    const comprimentoMaximo = 12;\r",
									"    let senhaArray = [];\r",
									" \r",
									"    senhaArray.push(chars[Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]); \r",
									"    senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]); \r",
									"    \r",
									"    const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
									"    \r",
									"    for (let i = 0; i < comprimentoRestante; i++) {\r",
									"        senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);\r",
									"    }\r",
									"    return shuffleString(senhaArray.join(\"\"));\r",
									"}\r",
									"\r",
									"function shuffleString(string) {\r",
									"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
									"}\r",
									"pm.environment.set(\"passwordUser\", generatePassword());\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Validar retorno da mensagem\", function() {\r",
									"    pm.expect(pm.response.json().error[0]).to.eql(\"As senhas não conferem.\");\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"fullName\": \"{{fullnameUser}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"{{cpf}}\",\r\n  \"password\": \"{{passwordUser}}\",\r\n  \"confirmPassword\": \"Asdfgh1@\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/user/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"user",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/user/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczODUxNTU3MywiZXhwIjoxNzM4NjAxOTczfQ.iDJuFHAivxy5Yt5Qbmln_PBycJSAAVrAcjh8xaf_B3g' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"fullName\": \"Pegar Token\",\r\n  \"mail\": \"pegartoken@test.com.br\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"00022233344\",\r\n  \"password\": \"1234@Test\",\r\n  \"confirmPassword\": \"1234@Test\"\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com campo Perfil de Acesso em branco",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"\r",
									"function randomCpf() {\r",
									"    let randomCpf = '';\r",
									"   \r",
									"    for (let i = 0; i < 11; i++) {\r",
									"        randomCpf += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCpf;\r",
									"}\r",
									"pm.environment.set(\"cpf\", randomCpf());\r",
									"\r",
									"\r",
									"function generatePassword() {\r",
									"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
									"    const comprimentoMinimo = 8;\r",
									"    const comprimentoMaximo = 12;\r",
									"    let senhaArray = [];\r",
									" \r",
									"    senhaArray.push(chars[Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]); \r",
									"    senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]); \r",
									"    \r",
									"    const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
									"    \r",
									"    for (let i = 0; i < comprimentoRestante; i++) {\r",
									"        senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);\r",
									"    }\r",
									"    return shuffleString(senhaArray.join(\"\"));\r",
									"}\r",
									"\r",
									"function shuffleString(string) {\r",
									"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
									"}\r",
									"pm.environment.set(\"passwordUser\", generatePassword());\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Validar retorno da mensagem\", function() {\r",
									"    pm.expect(pm.response.json().error[0]).to.eql(\"O campo perfil de acesso é obrigatório.\");\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"fullName\": \"{{fullnameUser}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"accessProfile\": \"\",\r\n  \"cpf\": \"{{cpf}}\",\r\n  \"password\": \"{{passwordUser}}\",\r\n  \"confirmPassword\": \"{{passwordUser}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/user/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"user",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/user/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczODUxNTU3MywiZXhwIjoxNzM4NjAxOTczfQ.iDJuFHAivxy5Yt5Qbmln_PBycJSAAVrAcjh8xaf_B3g' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"fullName\": \"Pegar Token\",\r\n  \"mail\": \"pegartoken@test.com.br\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"00022233344\",\r\n  \"password\": \"1234@Test\",\r\n  \"confirmPassword\": \"1234@Test\"\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com campo Perfil de Acesso diferente de ADMIN",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"\r",
									"function randomCpf() {\r",
									"    let randomCpf = '';\r",
									"   \r",
									"    for (let i = 0; i < 11; i++) {\r",
									"        randomCpf += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCpf;\r",
									"}\r",
									"pm.environment.set(\"cpf\", randomCpf());\r",
									"\r",
									"\r",
									"function generatePassword() {\r",
									"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
									"    const comprimentoMinimo = 8;\r",
									"    const comprimentoMaximo = 12;\r",
									"    let senhaArray = [];\r",
									" \r",
									"    senhaArray.push(chars[Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]); \r",
									"    senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]); \r",
									"    \r",
									"    const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
									"    \r",
									"    for (let i = 0; i < comprimentoRestante; i++) {\r",
									"        senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);\r",
									"    }\r",
									"    return shuffleString(senhaArray.join(\"\"));\r",
									"}\r",
									"\r",
									"function shuffleString(string) {\r",
									"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
									"}\r",
									"pm.environment.set(\"passwordUser\", generatePassword());\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Validar retorno da mensagem\", function() {\r",
									"    pm.expect(pm.response.json().error[0]).to.eql(\"O campo perfil de acesso deve ser preenchido de acordo com o seu cargo exemplo: ADMIN.\");\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"fullName\": \"{{fullnameUser}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"accessProfile\": \"USER\",\r\n  \"cpf\": \"{{cpf}}\",\r\n  \"password\": \"{{passwordUser}}\",\r\n  \"confirmPassword\": \"{{passwordUser}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/user/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"user",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/user/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczODUxNTU3MywiZXhwIjoxNzM4NjAxOTczfQ.iDJuFHAivxy5Yt5Qbmln_PBycJSAAVrAcjh8xaf_B3g' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"fullName\": \"Pegar Token\",\r\n  \"mail\": \"pegartoken@test.com.br\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"00022233344\",\r\n  \"password\": \"1234@Test\",\r\n  \"confirmPassword\": \"1234@Test\"\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com campo CPF em branco",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Validar retorno da mensagem\", function() {\r",
									"    pm.expect(pm.response.json().error[0]).to.eql(\"O campo CPF é obrigatório!\")\r",
									"    \r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"\r",
									"function randomCpf() {\r",
									"    let randomCpf = '';\r",
									"   \r",
									"    for (let i = 0; i < 11; i++) {\r",
									"        randomCpf += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCpf;\r",
									"}\r",
									"pm.environment.set(\"cpf\", randomCpf());\r",
									"\r",
									"\r",
									"function generatePassword() {\r",
									"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
									"    const comprimentoMinimo = 8;\r",
									"    const comprimentoMaximo = 12;\r",
									"    let senhaArray = [];\r",
									" \r",
									"    senhaArray.push(chars[Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]); \r",
									"    senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]); \r",
									"    \r",
									"    const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
									"    \r",
									"    for (let i = 0; i < comprimentoRestante; i++) {\r",
									"        senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);\r",
									"    }\r",
									"    return shuffleString(senhaArray.join(\"\"));\r",
									"}\r",
									"\r",
									"function shuffleString(string) {\r",
									"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
									"}\r",
									"pm.environment.set(\"passwordUser\", generatePassword());\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"fullName\": \"{{fullnameUser}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"\",\r\n  \"password\": \"{{passwordUser}}\",\r\n  \"confirmPassword\": \"{{passwordUser}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/user/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"user",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/user/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczODUxNTU3MywiZXhwIjoxNzM4NjAxOTczfQ.iDJuFHAivxy5Yt5Qbmln_PBycJSAAVrAcjh8xaf_B3g' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"fullName\": \"Pegar Token\",\r\n  \"mail\": \"pegartoken@test.com.br\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"00022233344\",\r\n  \"password\": \"1234@Test\",\r\n  \"confirmPassword\": \"1234@Test\"\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com campo CPF ja cadastrado",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"\r",
									"function randomCpf() {\r",
									"    let randomCpf = '';\r",
									"   \r",
									"    for (let i = 0; i < 11; i++) {\r",
									"        randomCpf += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCpf;\r",
									"}\r",
									"pm.environment.set(\"cpf\", randomCpf());\r",
									"\r",
									"\r",
									"function generatePassword() {\r",
									"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
									"    const comprimentoMinimo = 8;\r",
									"    const comprimentoMaximo = 12;\r",
									"    let senhaArray = [];\r",
									" \r",
									"    senhaArray.push(chars[Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]); \r",
									"    senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]); \r",
									"    senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]); \r",
									"    \r",
									"    const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
									"    \r",
									"    for (let i = 0; i < comprimentoRestante; i++) {\r",
									"        senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);\r",
									"    }\r",
									"    return shuffleString(senhaArray.join(\"\"));\r",
									"}\r",
									"\r",
									"function shuffleString(string) {\r",
									"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
									"}\r",
									"pm.environment.set(\"passwordUser\", generatePassword());\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 409\", function(){\r",
									"    pm.response.to.have.status(409);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validar retorno da mensagem\", function() {\r",
									"    pm.expect(pm.response.json().alert[0]).to.eql(\"O cpf informado já existe em nossa base de dados.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"fullName\": \"{{fullnameUser}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"11111111111\",\r\n  \"password\": \"{{passwordUser}}\",\r\n  \"confirmPassword\": \"{{passwordUser}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/user/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"user",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/user/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczODUxNTU3MywiZXhwIjoxNzM4NjAxOTczfQ.iDJuFHAivxy5Yt5Qbmln_PBycJSAAVrAcjh8xaf_B3g' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"fullName\": \"Pegar Token\",\r\n  \"mail\": \"pegartoken@test.com.br\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"00022233344\",\r\n  \"password\": \"1234@Test\",\r\n  \"confirmPassword\": \"1234@Test\"\r\n}'"
					},
					"response": []
				}
			]
		},
		{
			"name": "User - PBI 20520 (Listar)",
			"item": [
				{
					"name": "Pre-Requisito",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"tokenAcesso\",pm.response.json().token)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"mail\": \"pegartoken@test.com.br\",\r\n  \"password\": \"1234@Test\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/login/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"login",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Listar Usuário por id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Resposta contém o ID do usuário\", function () {\r",
									"    var responseJson = pm.response.json();\r",
									"    pm.expect(responseJson._id).to.eql('680ac1c8248f62e2b736f609'); // Troque o ID pelo valor que você passou\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							}
						],
						"url": {
							"raw": "https://ron-bugado.qacoders.dev.br/api/user/680ac1c8248f62e2b736f609",
							"protocol": "https",
							"host": [
								"ron-bugado",
								"qacoders",
								"dev",
								"br"
							],
							"path": [
								"api",
								"user",
								"680ac1c8248f62e2b736f609"
							]
						},
						"description": "Generated from cURL: curl -X 'GET' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/user/680ac1c8248f62e2b736f609' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTc0NTUzNTM3MiwiZXhwIjoxNzQ1NjIxNzcyfQ.BAvY5k9mga3AlUBGNynz8Daj1sBFst9LPs_8yFzsrW0'"
					},
					"response": []
				},
				{
					"name": "Listar usuarios",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							}
						],
						"url": {
							"raw": "https://ron-bugado.qacoders.dev.br/api/user/",
							"protocol": "https",
							"host": [
								"ron-bugado",
								"qacoders",
								"dev",
								"br"
							],
							"path": [
								"api",
								"user",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'GET' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/user/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTc0NTUzNTM3MiwiZXhwIjoxNzQ1NjIxNzcyfQ.BAvY5k9mga3AlUBGNynz8Daj1sBFst9LPs_8yFzsrW0'"
					},
					"response": []
				}
			]
		},
		{
			"name": "User - PBI 20521 (Excluir Cadastro)",
			"item": [
				{
					"name": "Login com usuário de teste",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"TestUserToken\", pm.response.json().token);\r",
									"\r",
									"pm.test(\"Verificar Status code é 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validar mensagem autenticado com sucesso2\", function () {\r",
									"    let fullName =  pm.response.json().user.fullName\r",
									"    pm.expect(\"Olá \" + fullName + \", autenticação autorizada com sucesso!\").to.eql(pm.response.json().msg);\r",
									"})\r",
									"\r",
									"pm.test(\"Verificar se E-mail da requisição e o mesmo da resposta\", () => {\r",
									"    pm.expect(pm.environment.get(\"TestUserEmail\")).to.eql(pm.response.json().user.mail);\r",
									"});\r",
									"\r",
									"pm.test(\"Verificar se token existe na resposta\", function () {\r",
									"    pm.expect(pm.response.json().token).to.exist;\r",
									"});\r",
									"\r",
									"pm.test(\"Verificar user status é true\", function () {\r",
									"    pm.expect(true).to.eql(pm.response.json().user.status);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"mail\": \"{{TestUserEmail}}\",\r\n    \"password\": \"{{TestUserPassword}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/login/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"login",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Cadastrar novo usuário sucesso",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function gerarCpf() {",
									"  const num1 = aleatorio(); ",
									"  const num2 = aleatorio();",
									"  const num3 = aleatorio();",
									"  const dig1 = dig(num1, num2, num3); ",
									"  const dig2 = dig(num1, num2, num3, dig1);",
									"  return `${num1}${num2}${num3}${dig1}${dig2}`;",
									"}",
									" ",
									"function dig(n1, n2, n3, n4) {",
									"  const nums = n1.split(\"\").concat(n2.split(\"\"), n3.split(\"\"));",
									"  if (n4 !== undefined){ ",
									"    nums[9] = n4;",
									"  }",
									"  let x = 0;",
									"  for (let i = (n4 !== undefined ? 11:10), j = 0; i >= 2; i--, j++) {",
									"    x += parseInt(nums[j]) * i;",
									"  }",
									"  const y = x % 11;",
									"  return y < 2 ? 0 : 11 - y;",
									"}",
									"",
									"function aleatorio() {",
									"  const aleat = Math.floor(Math.random() * 999);",
									"  return (\"\" + aleat).padStart(3, '0');",
									"}",
									"pm.environment.set(\"CPF\", gerarCpf());",
									"",
									"function firstName() {",
									"    let firstName = nomes = [",
									"    \"Andre\", \"Luiza\", \"Vanessa\", \"Lula\", \"Carlos\", \"Maria\", \"João\", \"Paula\", ",
									"    \"Ana\", \"Pedro\", \"Lucas\", \"Beatriz\", \"Felipe\", \"Camila\", \"Gabriel\", \"Juliana\", ",
									"    \"Rafael\", \"Fernanda\", \"Ricardo\", \"Larissa\", \"Gustavo\", \"Mariana\", \"Eduardo\", ",
									"    \"Renata\", \"Victor\", \"Simone\", \"Sofia\", \"Bruno\", \"Isabela\", \"Mário\", \"Tatiane\", ",
									"    \"Júlio\", \"Tânia\", \"Sérgio\", \"Luciana\", \"Thiago\", \"Cláudia\", \"Hugo\", \"Giovana\", ",
									"    \"César\", \"Larissa\", \"Marcelo\", \"Elaine\", \"Vitor\", \"Mônica\", \"Alexandre\", \"Letícia\", ",
									"    \"Daniel\", \"Carla\", \"Fernando\", \"Patrícia\", \"Sérgio\", \"Viviane\", \"Marcos\", \"Cíntia\", ",
									"    \"Roberto\", \"Kátia\", \"Diogo\", \"Marília\", \"Túlio\", \"Paulo\", \"Adriana\", \"Jaqueline\", ",
									"    \"Reginaldo\", \"Sílvia\", \"Renato\", \"Isis\", \"Sônia\", \"Alexia\", \"Aline\", \"Rogério\", ",
									"    \"Tatiane\", \"Ricardo\", \"Gisele\", \"Fábio\", \"Eunice\", \"Raul\", \"Milene\", \"Ricardo\", ",
									"    \"Marcelo\", \"Daniela\", \"Kelly\", \"Cássio\", \"Cláudia\", \"Francisco\", \"Alessandra\", ",
									"    \"Gisele\", \"Gustavo\", \"Clara\", \"Tatiane\", \"Joana\", \"Carlos\", \"Aline\", \"Viviane\", ",
									"    \"Júlia\", \"André\", \"Luciano\", \"Alicia\", \"Eliane\", \"Marcio\", \"Rogério\", \"Eliete\", ",
									"    \"Jéssica\", \"Simone\", \"Thiago\", \"Luiz\", \"Carlos\", \"Rafaela\", \"Marcela\", \"Jonas\", ",
									"    \"Lúcia\", \"Marcos\", \"Sônia\", \"Eduarda\", \"Livia\"",
									"]",
									"    let randomItem = firstName[Math.floor(Math.random() * firstName.length)];",
									"    return randomItem;",
									"}",
									"pm.environment.set(\"FirstName\", firstName());",
									"",
									"function lastName() {",
									"    var lastName = [",
									"    \"Silva\", \"Santos\", \"Oliveira\", \"Pereira\", \"Costa\", \"Rodrigues\", \"Almeida\", ",
									"    \"Martins\", \"Souza\", \"Lima\", \"Gomes\", \"Ribeiro\", \"Carvalho\", \"Fernandes\", \"Araujo\", ",
									"    \"Barbosa\", \"Melo\", \"Dias\", \"Cavalcanti\", \"Nascimento\", \"Pinto\", \"Vieira\", \"Teixeira\", ",
									"    \"Ramos\", \"Faria\", \"Moura\", \"Campos\", \"Machado\", \"Monteiro\", \"Santiago\", \"Nascimento\", ",
									"    \"Brandão\", \"Cunha\", \"Freitas\", \"Serrano\", \"Queiroz\", \"Duarte\", \"Mendes\", \"Cardoso\", ",
									"    \"Lopes\", \"Martins\", \"Batista\", \"Siqueira\", \"Moreira\", \"Figueiredo\", \"Andrade\", \"Araújo\", ",
									"    \"Borges\", \"Lima\", \"Cunha\", \"Costa\", \"Batista\", \"Correia\", \"Silveira\", \"Bastos\", \"Leal\", ",
									"    \"Ferreira\", \"Gonçalves\", \"Tavares\", \"Queiroz\", \"Lima\", \"Campos\", \"Carneiro\", \"Santos\", ",
									"    \"Vasconcelos\", \"Vieira\", \"Farias\", \"Souza\", \"Pereira\", \"Tavares\", \"Silva\", \"Alves\", ",
									"    \"Xavier\", \"Soares\", \"Barbosa\", \"Lima\", \"Menezes\", \"Ribeiro\", \"Pimentel\", \"Santos\", ",
									"    \"Dias\", \"Castro\", \"Melo\", \"Pinto\", \"Machado\", \"Pinheiro\", \"Guerra\", \"Alves\", ",
									"    \"Freitas\", \"Cavalcanti\", \"Montez\", \"Pereira\", \"Gomes\", \"Santos\", \"Costa\", ",
									"    \"Ribeiro\", \"Teixeira\", \"Azevedo\", \"Martins\", \"Ramos\", \"Ribeiro\", \"Cardoso\", \"Lima\", ",
									"    \"Monteiro\", \"Leão\", \"Lopes\", \"Melo\", \"Brandão\", \"Borges\", \"Ribeiro\", \"Moraes\", ",
									"    \"Figueira\", \"Silva\", \"Tavares\", \"Cavalcante\", \"Mendes\", \"Siqueira\", \"Machado\"",
									"]",
									"",
									"    let randomItem = lastName[Math.floor(Math.random() * lastName.length)];",
									"    return randomItem;",
									"}",
									"pm.environment.set(\"LastName\", lastName());",
									"",
									"pm.environment.set(\"FullName\", pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"));",
									"",
									"let name = pm.environment.get(\"FullName\");",
									"",
									"function fullNameFormat(str) {",
									"  return str",
									"    .normalize('NFD') // Normaliza a string para decompor os caracteres acentuados",
									"    .replace(/[\\u0300-\\u036f]/g, '') // Remove os caracteres acentuados",
									"    .replace(/\\s+/g, '') // Remove os espaços em branco",
									"    .toLowerCase(); // Converte para minúsculas",
									"}",
									"",
									"function provedorEmail () {",
									"    let provedorEmail = [",
									"        \"@gmail.com\", \"@outlook.com\", \"@yahoo.com\", \"@gmail.com.br\", \"@hotmail.com.br\", \"@uol.com.br\", \"@bol.com.br\", \"@terra.br\", \"@oi.com.br\", \"@empresa.com.br\", \"@universidade.edu.br\"",
									"    ]",
									"    let randomItem = provedorEmail[Math.floor(Math.random() * provedorEmail.length)];",
									"    return randomItem;",
									"}",
									"",
									"pm.environment.set(\"NewUserEmail\", fullNameFormat(name) + provedorEmail());",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									" pm.environment.set(\"NewUserId\", pm.response.json().user._id)",
									"",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Check message is true\", function () {",
									"    pm.expect(\"Olá \" + pm.environment.get(\"FullName\") + \", cadastro realizado com sucesso.\").to.eql(pm.response.json().msg)",
									"});",
									"",
									"pm.test(\"Check FullName is true\", function () {",
									"    pm.expect(pm.environment.get(\"FullName\")).to.eql(pm.response.json().user.fullName);",
									"});",
									"",
									"pm.test(\"Check mail is true\", function () {",
									"    pm.expect(pm.environment.get(\"NewUserEmail\")).to.eql(pm.response.json().user.mail)",
									"});",
									"",
									"pm.test(\"Check CPF is true\", function () {",
									"    pm.expect(pm.environment.get(\"CPF\")).to.eql(pm.response.json().user.cpf)",
									"    ",
									"});",
									"",
									"pm.test(\"Check status is true\", function () {",
									"    pm.expect(true).to.eql(pm.response.json().user.status)",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"fullName\": \"{{FullName}}\",\n  \"mail\": \"{{NewUserEmail}}\",\n  \"accessProfile\": \"ADMIN\",\n  \"cpf\": \"{{CPF}}\",\n  \"password\": \"{{NewUserPassword}}\",\n  \"confirmPassword\": \"{{NewUserPassword}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/user?token={{TestUserToken}}",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"user"
							],
							"query": [
								{
									"key": "token",
									"value": "{{TestUserToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Buscar por id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verificar Status code é 200\", function () {",
									"\t\tpm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Validar id novo usuário do request e o mesmo do response\", function () {",
									"    pm.expect(pm.environment.get(\"NewUserId\")).to.eql(pm.response.json()._id);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://ron-bugado.qacoders.dev.br/api/user/{{NewUserId}}?token={{TestUserToken}}",
							"protocol": "https",
							"host": [
								"ron-bugado",
								"qacoders",
								"dev",
								"br"
							],
							"path": [
								"api",
								"user",
								"{{NewUserId}}"
							],
							"query": [
								{
									"key": "token",
									"value": "{{TestUserToken}}"
								}
							]
						},
						"description": "Generated from cURL: curl -X 'GET' \\\n  'https://ron-bugado.qacoders.dev.br/api/user/67a0b9fb4b03e1eb32f2ef58?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczODU4NjUzMSwiZXhwIjoxNzM4NjcyOTMxfQ.-CNZoUm81M6315TwcwqBLyXQNc2MZUmCY1LkZUIRLKk' \\\n  -H 'accept: application/json'"
					},
					"response": []
				},
				{
					"name": "Excluir Cadastro de Usuário com sucesso",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verificar Status code é 200\", function () {",
									"\t\tpm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Validar mensagem deletado com sucesso\", function () {",
									"    pm.expect(\"Usuário deletado com sucesso!.\").to.eql(pm.response.json().msg);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://ron-bugado.qacoders.dev.br/api/user/{{NewUserId}}?token={{TestUserToken}}",
							"protocol": "https",
							"host": [
								"ron-bugado",
								"qacoders",
								"dev",
								"br"
							],
							"path": [
								"api",
								"user",
								"{{NewUserId}}"
							],
							"query": [
								{
									"key": "token",
									"value": "{{TestUserToken}}"
								}
							]
						},
						"description": "Generated from cURL: curl -X 'DELETE' \\\n  'https://ron-bugado.qacoders.dev.br/api/user/679ecae44b03e1eb32f2eaca?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczODQ1OTU3NCwiZXhwIjoxNzM4NTQ1OTc0fQ.n9Y23f_e72stkU517aqcaBCHR1AJTc0WK53Zxil1Bbo' \\\n  -H 'accept: application/json'"
					},
					"response": []
				},
				{
					"name": "Login - Verificar se usuário foi excluído",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verificar Status code é 400\", function () {\r",
									"\t\tpm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Validar mensagem e-mail e senha são inválidos\", function () {\r",
									"\t\tpm.expect(\"E-mail ou senha informados são inválidos.\").to.eql(pm.response.json().alert);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"mail\": \"{{NewUserEmail}}\",\r\n    \"password\": \"{{NewUserPassword}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/login/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"login",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Excluir Cadastro de Usuário com id inválido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verificar Status code é 400\", function () {",
									"\t\tpm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Validar mensagem usuário não existe\", function () {",
									"    pm.expect(\"Esse usuário não existe em nossa base de dados.\").to.eql(pm.response.json().alert[0]);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://ron-bugado.qacoders.dev.br/api/user/{{NewUserIDInvalido}}?token={{TestUserToken}}&=",
							"protocol": "https",
							"host": [
								"ron-bugado",
								"qacoders",
								"dev",
								"br"
							],
							"path": [
								"api",
								"user",
								"{{NewUserIDInvalido}}"
							],
							"query": [
								{
									"key": "token",
									"value": "{{TestUserToken}}"
								},
								{
									"key": "",
									"value": ""
								}
							]
						},
						"description": "Generated from cURL: curl -X 'DELETE' \\\n  'https://ron-bugado.qacoders.dev.br/api/user/679ecae44b03e1eb32f2eaca?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczODQ1OTU3NCwiZXhwIjoxNzM4NTQ1OTc0fQ.n9Y23f_e72stkU517aqcaBCHR1AJTc0WK53Zxil1Bbo' \\\n  -H 'accept: application/json'"
					},
					"response": []
				},
				{
					"name": "Excluir Cadastro de Usuário com token inválido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verificar Status code é 403\", function () {",
									"\t\tpm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Validar mensagem falha na autenticação\", function () {",
									"    pm.expect(\"Failed to authenticate token.\").to.eql(pm.response.json().error[0]);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://ron-bugado.qacoders.dev.br/api/user/{{NewUserId}}?token={{TestUserTokenInvalido}}",
							"protocol": "https",
							"host": [
								"ron-bugado",
								"qacoders",
								"dev",
								"br"
							],
							"path": [
								"api",
								"user",
								"{{NewUserId}}"
							],
							"query": [
								{
									"key": "token",
									"value": "{{TestUserTokenInvalido}}"
								}
							]
						},
						"description": "Generated from cURL: curl -X 'DELETE' \\\n  'https://ron-bugado.qacoders.dev.br/api/user/679ecae44b03e1eb32f2eaca?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczODQ1OTU3NCwiZXhwIjoxNzM4NTQ1OTc0fQ.n9Y23f_e72stkU517aqcaBCHR1AJTc0WK53Zxil1Bbo' \\\n  -H 'accept: application/json'"
					},
					"response": []
				}
			]
		},
		{
			"name": "User - PBI 20522 (Editar Cadastro de Usuário)",
			"item": [
				{
					"name": "Editar status /api/user/status/{id}",
					"item": [
						{
							"name": "Login Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"tokenAcesso\",pm.response.json().token)",
											"pm.environment.set(\"_IdAdminTest\", pm.response.json().user._id)",
											"pm.environment.set(\"MailAdminTest\", pm.response.json().user.mail)"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"mail\": \"{{TestUserEmail}}\",\r\n    \"password\": \"{{TestUserPassword}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/api/login/",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"login",
										""
									]
								},
								"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/login/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"mail\": \"sysadmin@qacoders.com\",\r\n  \"password\": \"1234@Test\"\r\n}'"
							},
							"response": []
						},
						{
							"name": "Cadastrar novo usuário sucesso",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function gerarCpf() {",
											"  const num1 = aleatorio(); ",
											"  const num2 = aleatorio();",
											"  const num3 = aleatorio();",
											"  const dig1 = dig(num1, num2, num3); ",
											"  const dig2 = dig(num1, num2, num3, dig1);",
											"  return `${num1}${num2}${num3}${dig1}${dig2}`;",
											"}",
											" ",
											"function dig(n1, n2, n3, n4) {",
											"  const nums = n1.split(\"\").concat(n2.split(\"\"), n3.split(\"\"));",
											"  if (n4 !== undefined){ ",
											"    nums[9] = n4;",
											"  }",
											"  let x = 0;",
											"  for (let i = (n4 !== undefined ? 11:10), j = 0; i >= 2; i--, j++) {",
											"    x += parseInt(nums[j]) * i;",
											"  }",
											"  const y = x % 11;",
											"  return y < 2 ? 0 : 11 - y;",
											"}",
											"",
											"function aleatorio() {",
											"  const aleat = Math.floor(Math.random() * 999);",
											"  return (\"\" + aleat).padStart(3, '0');",
											"}",
											"pm.environment.set(\"CPF\", gerarCpf());",
											"",
											"function firstName() {",
											"    let firstName = nomes = [",
											"    \"Andre\", \"Luiza\", \"Vanessa\", \"Lula\", \"Carlos\", \"Maria\", \"João\", \"Paula\", ",
											"    \"Ana\", \"Pedro\", \"Lucas\", \"Beatriz\", \"Felipe\", \"Camila\", \"Gabriel\", \"Juliana\", ",
											"    \"Rafael\", \"Fernanda\", \"Ricardo\", \"Larissa\", \"Gustavo\", \"Mariana\", \"Eduardo\", ",
											"    \"Renata\", \"Victor\", \"Simone\", \"Sofia\", \"Bruno\", \"Isabela\", \"Mário\", \"Tatiane\", ",
											"    \"Júlio\", \"Tânia\", \"Sérgio\", \"Luciana\", \"Thiago\", \"Cláudia\", \"Hugo\", \"Giovana\", ",
											"    \"César\", \"Larissa\", \"Marcelo\", \"Elaine\", \"Vitor\", \"Mônica\", \"Alexandre\", \"Letícia\", ",
											"    \"Daniel\", \"Carla\", \"Fernando\", \"Patrícia\", \"Sérgio\", \"Viviane\", \"Marcos\", \"Cíntia\", ",
											"    \"Roberto\", \"Kátia\", \"Diogo\", \"Marília\", \"Túlio\", \"Paulo\", \"Adriana\", \"Jaqueline\", ",
											"    \"Reginaldo\", \"Sílvia\", \"Renato\", \"Isis\", \"Sônia\", \"Alexia\", \"Aline\", \"Rogério\", ",
											"    \"Tatiane\", \"Ricardo\", \"Gisele\", \"Fábio\", \"Eunice\", \"Raul\", \"Milene\", \"Ricardo\", ",
											"    \"Marcelo\", \"Daniela\", \"Kelly\", \"Cássio\", \"Cláudia\", \"Francisco\", \"Alessandra\", ",
											"    \"Gisele\", \"Gustavo\", \"Clara\", \"Tatiane\", \"Joana\", \"Carlos\", \"Aline\", \"Viviane\", ",
											"    \"Júlia\", \"André\", \"Luciano\", \"Alicia\", \"Eliane\", \"Marcio\", \"Rogério\", \"Eliete\", ",
											"    \"Jéssica\", \"Simone\", \"Thiago\", \"Luiz\", \"Carlos\", \"Rafaela\", \"Marcela\", \"Jonas\", ",
											"    \"Lúcia\", \"Marcos\", \"Sônia\", \"Eduarda\", \"Livia\"",
											"]",
											"    let randomItem = firstName[Math.floor(Math.random() * firstName.length)];",
											"    return randomItem;",
											"}",
											"pm.environment.set(\"FirstName\", firstName());",
											"",
											"function lastName() {",
											"    var lastName = [",
											"    \"Silva\", \"Santos\", \"Oliveira\", \"Pereira\", \"Costa\", \"Rodrigues\", \"Almeida\", ",
											"    \"Martins\", \"Souza\", \"Lima\", \"Gomes\", \"Ribeiro\", \"Carvalho\", \"Fernandes\", \"Araujo\", ",
											"    \"Barbosa\", \"Melo\", \"Dias\", \"Cavalcanti\", \"Nascimento\", \"Pinto\", \"Vieira\", \"Teixeira\", ",
											"    \"Ramos\", \"Faria\", \"Moura\", \"Campos\", \"Machado\", \"Monteiro\", \"Santiago\", \"Nascimento\", ",
											"    \"Brandão\", \"Cunha\", \"Freitas\", \"Serrano\", \"Queiroz\", \"Duarte\", \"Mendes\", \"Cardoso\", ",
											"    \"Lopes\", \"Martins\", \"Batista\", \"Siqueira\", \"Moreira\", \"Figueiredo\", \"Andrade\", \"Araújo\", ",
											"    \"Borges\", \"Lima\", \"Cunha\", \"Costa\", \"Batista\", \"Correia\", \"Silveira\", \"Bastos\", \"Leal\", ",
											"    \"Ferreira\", \"Gonçalves\", \"Tavares\", \"Queiroz\", \"Lima\", \"Campos\", \"Carneiro\", \"Santos\", ",
											"    \"Vasconcelos\", \"Vieira\", \"Farias\", \"Souza\", \"Pereira\", \"Tavares\", \"Silva\", \"Alves\", ",
											"    \"Xavier\", \"Soares\", \"Barbosa\", \"Lima\", \"Menezes\", \"Ribeiro\", \"Pimentel\", \"Santos\", ",
											"    \"Dias\", \"Castro\", \"Melo\", \"Pinto\", \"Machado\", \"Pinheiro\", \"Guerra\", \"Alves\", ",
											"    \"Freitas\", \"Cavalcanti\", \"Montez\", \"Pereira\", \"Gomes\", \"Santos\", \"Costa\", ",
											"    \"Ribeiro\", \"Teixeira\", \"Azevedo\", \"Martins\", \"Ramos\", \"Ribeiro\", \"Cardoso\", \"Lima\", ",
											"    \"Monteiro\", \"Leão\", \"Lopes\", \"Melo\", \"Brandão\", \"Borges\", \"Ribeiro\", \"Moraes\", ",
											"    \"Figueira\", \"Silva\", \"Tavares\", \"Cavalcante\", \"Mendes\", \"Siqueira\", \"Machado\"",
											"]",
											"",
											"    let randomItem = lastName[Math.floor(Math.random() * lastName.length)];",
											"    return randomItem;",
											"}",
											"pm.environment.set(\"LastName\", lastName());",
											"",
											"pm.environment.set(\"FullName\", pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"));",
											"",
											"let name = pm.environment.get(\"FullName\");",
											"",
											"function fullNameFormat(str) {",
											"  return str",
											"    .normalize('NFD') // Normaliza a string para decompor os caracteres acentuados",
											"    .replace(/[\\u0300-\\u036f]/g, '') // Remove os caracteres acentuados",
											"    .replace(/\\s+/g, '') // Remove os espaços em branco",
											"    .toLowerCase(); // Converte para minúsculas",
											"}",
											"",
											"function provedorEmail () {",
											"    let provedorEmail = [",
											"        \"@gmail.com\", \"@outlook.com\", \"@yahoo.com\", \"@gmail.com.br\", \"@hotmail.com.br\", \"@uol.com.br\", \"@bol.com.br\", \"@terra.br\", \"@oi.com.br\", \"@empresa.com.br\", \"@universidade.edu.br\"",
											"    ]",
											"    let randomItem = provedorEmail[Math.floor(Math.random() * provedorEmail.length)];",
											"    return randomItem;",
											"}",
											"",
											"pm.environment.set(\"NewUserEmail\", fullNameFormat(name) + provedorEmail());",
											"",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"IdNewUserUpdate\", pm.response.json().user._id);",
											"pm.environment.set(\"FullNameNewUserUpdate\", pm.response.json().user.fullName);",
											"pm.environment.set(\"MailNewUserUpdate\", pm.response.json().user.mail);",
											"pm.environment.set(\"AccessProfilelNewUserUpdate\", pm.response.json().user.accessProfile);",
											"pm.environment.set(\"CPFNewUserUpdate\", pm.response.json().user.cpf);",
											"pm.environment.set(\"StatusNewUserUpdate\", pm.response.json().user.status);",
											"pm.environment.set(\"RegistrationDate\", pm.response.json().user.audit[0].registrationDate)",
											"pm.environment.set(\"RegistrationNumber\", pm.response.json().user.audit[0].registrationNumber)",
											"pm.environment.set(\"RegistrationId\", pm.response.json().user.audit[0]._id)",
											"",
											"",
											"",
											"pm.test(\"Veriificar se o status é 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Validar mensagem de sucesso\", function () {",
											"    pm.expect(pm.response.json().msg).to.eql(\"Olá \" + pm.environment.get(\"FullName\") + \", cadastro realizado com sucesso.\");",
											"});",
											"",
											"pm.test(\"Validar se fullName do request e o mesmo do response\", function () {",
											"    pm.expect(pm.response.json().user.fullName).to.eql(pm.environment.get(\"FullName\"));",
											"});",
											"",
											"pm.test(\"Validar se mail do request e o mesmo do response\", function () {",
											"    pm.expect(pm.response.json().user.mail).to.eql(pm.environment.get(\"NewUserEmail\"));",
											"});",
											"",
											"pm.test(\"Validar se CPF do request e o mesmo do response\", function () {",
											"    pm.expect(pm.response.json().user.cpf).to.eql(pm.environment.get(\"CPF\"));",
											"});",
											"",
											"pm.test(\"Validar se status é true\", function () {",
											"    pm.expect(pm.response.json().user.status).to.eql(true);",
											"});",
											"",
											"pm.test(\"Validar que id adminTest é o mesmo userId da auditoria\", function () {",
											"     pm.expect(pm.response.json().user.audit[0].registeredBy.userId).to.eql(pm.environment.get(\"_IdAdminTest\"));",
											"});",
											"",
											"pm.test(\"Validar que e-mail AdminTest é o mesmo userLogin da auditoria\", function () {",
											"     pm.expect(pm.response.json().user.audit[0].registeredBy.userLogin).to.eql(pm.environment.get(\"MailAdminTest\"));",
											"});",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"fullName\": \"{{FullName}}\",\n  \"mail\": \"{{NewUserEmail}}\",\n  \"accessProfile\": \"ADMIN\",\n  \"cpf\": \"{{CPF}}\",\n  \"password\": \"{{NewUserPassword}}\",\n  \"confirmPassword\": \"{{NewUserPassword}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/api/user?token={{tokenAcesso}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"user"
									],
									"query": [
										{
											"key": "token",
											"value": "{{tokenAcesso}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar usuário pelo id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verificar se o status code é 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validar se userId é o mesmo do cadastro\", function () {",
											"    pm.expect(pm.response.json()._id).to.eql(pm.environment.get(\"IdNewUserUpdate\"));",
											"});",
											"",
											"pm.test(\"Validar se fullName é o mesmo do cadastro\", function () {",
											"    pm.expect(pm.response.json().fullName).to.eql(pm.environment.get(\"FullNameNewUserUpdate\"));",
											"});",
											"",
											"pm.test(\"Validar se e-mail é o mesmo do cadastro\", function () {",
											"    pm.expect(pm.response.json().mail).to.eql(pm.environment.get(\"MailNewUserUpdate\"));",
											"});",
											"",
											"pm.test(\"Validar se accessProfile é o mesmo do cadastro\", function () {",
											"    pm.expect(pm.response.json().accessProfile).to.eql(pm.environment.get(\"AccessProfilelNewUserUpdate\"));",
											"});",
											"",
											"pm.test(\"Validar se CPF é o mesmo do cadastro\", function () {",
											"    pm.expect(pm.response.json().cpf).to.eql(pm.environment.get(\"CPFNewUserUpdate\"));",
											"});",
											"",
											"pm.test(\"Validar se status é o mesmo do cadastro\", function () {",
											"    pm.expect(pm.response.json().status).to.eql(pm.environment.get(\"StatusNewUserUpdate\"));",
											"});",
											"",
											"",
											"pm.test(\"Validar userId do campo registeredBy é o mesmo id do AdminTest\", function (){",
											"    pm.expect(pm.response.json().audit[0].registeredBy.userId).to.eql(pm.environment.get(\"_IdAdminTest\"));",
											"});",
											"",
											"pm.test(\"Validar userLogin do campo registeredBy é o mesmo e-mail do AdminTest\", function (){",
											"    pm.expect(pm.response.json().audit[0].registeredBy.userLogin).to.eql(pm.environment.get(\"MailAdminTest\"));",
											"});",
											"",
											"",
											"pm.test(\"Validar registrationDate da audit é o mesmo do cadastro\", function (){",
											"    pm.expect(pm.response.json().audit[0].registrationDate).to.eql(pm.environment.get(\"RegistrationDate\"));",
											"});",
											"",
											"pm.test(\"Validar registrationNumber da audit é o mesmo do cadastro\", function (){",
											"    pm.expect(pm.response.json().audit[0].registrationNumber).to.eql(pm.environment.get(\"RegistrationNumber\"));",
											"});",
											"",
											"pm.test(\"Validar registrationId da audit é o mesmo do cadastro\", function (){",
											"    pm.expect(pm.response.json().audit[0]._id).to.eql(pm.environment.get(\"RegistrationId\"));",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenAcesso}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url_base}}/api/user/{{IdNewUserUpdate}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"user",
										"{{IdNewUserUpdate}}"
									],
									"query": [
										{
											"key": "token",
											"value": "{{tokenAcesso}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar status para false com sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verificar se o status code é 200\", function(){",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validar mensagem: Status atualizados para false com sucesso!\",function(){",
											"    pm.expect(pm.response.json().msg).to.equal(\"Status do usuario atualizado com sucesso para status false.\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"status\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/api/user/status/{{IdNewUserUpdate}}?token={{tokenAcesso}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"user",
										"status",
										"{{IdNewUserUpdate}}"
									],
									"query": [
										{
											"key": "token",
											"value": "{{tokenAcesso}}"
										}
									]
								},
								"description": "Generated from cURL: curl -X 'PUT' \\\n  'https://ron-bugado.qacoders.dev.br/api/user/status/67b28c5e948d994f28952a4d?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NzlhMzVmN2ViMzViNTQzYzI3NjliYTkiLCJmdWxsTmFtZSI6IkFuZHLDqSBNaW5hdG8iLCJtYWlsIjoiYW5kcmUubWluYXRvQHRlc3QuY29tLmJyIiwicGFzc3dvcmQiOiIkMmIkMTAkL0d3V0dxTFg5di9MNEVmdk9jbEsuLlouaHhWTWlITkQ3UzExZnhpTW1wSXdPZ2RtbTFYYkciLCJhY2Nlc3NQcm9maWxlIjoiQURNSU4iLCJjcGYiOiIxNzk4NTY5MjM5OCIsInN0YXR1cyI6dHJ1ZSwiYXVkaXQiOlt7InJlZ2lzdGVyZWRCeSI6eyJ1c2VySWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJ1c2VyTG9naW4iOiJzeXNhZG1pbkBxYWNvZGVycy5jb20ifSwicmVnaXN0cmF0aW9uRGF0ZSI6InF1YXJ0YS1mZWlyYSwgMjkvMDEvMjAyNSwgMTE6MDY6NDcgQlJUIiwicmVnaXN0cmF0aW9uTnVtYmVyIjoiUWFDb2RlcnMtMjYwIiwiX2lkIjoiNjc5YTM1ZjdlYjM1YjU0M2MyNzY5YmFhIn1dLCJfX3YiOjAsImlhdCI6MTczOTgyNDU4MSwiZXhwIjoxNzM5OTEwOTgxfQ.vzjf5c9Dbyekd_Uf0g5wAvMY5rAk1hCB3wmLoaWYb0g' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"status\": true\n}'"
							},
							"response": []
						},
						{
							"name": "Buscar usuário pelo id status editado para false",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verificar se o status code é 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validar se userId é o mesmo do cadastro\", function () {",
											"    pm.expect(pm.response.json()._id).to.eql(pm.environment.get(\"IdNewUserUpdate\"));",
											"});",
											"",
											"pm.test(\"Validar se fullName é o mesmo do cadastro\", function () {",
											"    pm.expect(pm.response.json().fullName).to.eql(pm.environment.get(\"FullNameNewUserUpdate\"));",
											"});",
											"",
											"pm.test(\"Validar se e-mail é o mesmo do cadastro\", function () {",
											"    pm.expect(pm.response.json().mail).to.eql(pm.environment.get(\"MailNewUserUpdate\"));",
											"});",
											"",
											"pm.test(\"Validar se accessProfile é o mesmo do cadastro\", function () {",
											"    pm.expect(pm.response.json().accessProfile).to.eql(pm.environment.get(\"AccessProfilelNewUserUpdate\"));",
											"});",
											"",
											"pm.test(\"Validar se CPF é o mesmo do cadastro\", function () {",
											"    pm.expect(pm.response.json().cpf).to.eql(pm.environment.get(\"CPFNewUserUpdate\"));",
											"});",
											"",
											"pm.test(\"Validar se status é alterou para false\", function () {",
											"    pm.expect(pm.response.json().status).to.eql(false);",
											"});",
											"",
											"",
											"pm.test(\"Validar userId do campo registeredBy é o mesmo id do AdminTest\", function (){",
											"    pm.expect(pm.response.json().audit[0].registeredBy.userId).to.eql(pm.environment.get(\"_IdAdminTest\"));",
											"});",
											"",
											"pm.test(\"Validar userLogin do campo registeredBy é o mesmo e-mail do AdminTest\", function (){",
											"    pm.expect(pm.response.json().audit[0].registeredBy.userLogin).to.eql(pm.environment.get(\"MailAdminTest\"));",
											"});",
											"",
											"",
											"pm.test(\"Validar registrationDate da audit é o mesmo do cadastro\", function (){",
											"    pm.expect(pm.response.json().audit[0].registrationDate).to.eql(pm.environment.get(\"RegistrationDate\"));",
											"});",
											"",
											"pm.test(\"Validar registrationNumber da audit é o mesmo do cadastro\", function (){",
											"    pm.expect(pm.response.json().audit[0].registrationNumber).to.eql(pm.environment.get(\"RegistrationNumber\"));",
											"});",
											"",
											"pm.test(\"Validar registrationId da audit é o mesmo do cadastro\", function (){",
											"    pm.expect(pm.response.json().audit[0]._id).to.eql(pm.environment.get(\"RegistrationId\"));",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenAcesso}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url_base}}/api/user/{{IdNewUserUpdate}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"user",
										"{{IdNewUserUpdate}}"
									],
									"query": [
										{
											"key": "token",
											"value": "{{tokenAcesso}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar usuário pelo id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verificar se o status code é 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validar se userId é o mesmo do cadastro\", function () {",
											"    pm.expect(pm.response.json()._id).to.eql(pm.environment.get(\"IdNewUserUpdate\"));",
											"});",
											"",
											"pm.test(\"Validar se fullName é o mesmo do cadastro\", function () {",
											"    pm.expect(pm.response.json().fullName).to.eql(pm.environment.get(\"FullNameNewUserUpdate\"));",
											"});",
											"",
											"pm.test(\"Validar se e-mail é o mesmo do cadastro\", function () {",
											"    pm.expect(pm.response.json().mail).to.eql(pm.environment.get(\"MailNewUserUpdate\"));",
											"});",
											"",
											"pm.test(\"Validar se accessProfile é o mesmo do cadastro\", function () {",
											"    pm.expect(pm.response.json().accessProfile).to.eql(pm.environment.get(\"AccessProfilelNewUserUpdate\"));",
											"});",
											"",
											"pm.test(\"Validar se CPF é o mesmo do cadastro\", function () {",
											"    pm.expect(pm.response.json().cpf).to.eql(pm.environment.get(\"CPFNewUserUpdate\"));",
											"});",
											"",
											"pm.test(\"Validar se status é false\", function () {",
											"    pm.expect(pm.response.json().status).to.eql(false);",
											"});",
											"",
											"",
											"pm.test(\"Validar userId do campo registeredBy é o mesmo id do AdminTest\", function (){",
											"    pm.expect(pm.response.json().audit[0].registeredBy.userId).to.eql(pm.environment.get(\"_IdAdminTest\"));",
											"});",
											"",
											"pm.test(\"Validar userLogin do campo registeredBy é o mesmo e-mail do AdminTest\", function (){",
											"    pm.expect(pm.response.json().audit[0].registeredBy.userLogin).to.eql(pm.environment.get(\"MailAdminTest\"));",
											"});",
											"",
											"",
											"pm.test(\"Validar registrationDate da audit é o mesmo do cadastro\", function (){",
											"    pm.expect(pm.response.json().audit[0].registrationDate).to.eql(pm.environment.get(\"RegistrationDate\"));",
											"});",
											"",
											"pm.test(\"Validar registrationNumber da audit é o mesmo do cadastro\", function (){",
											"    pm.expect(pm.response.json().audit[0].registrationNumber).to.eql(pm.environment.get(\"RegistrationNumber\"));",
											"});",
											"",
											"pm.test(\"Validar registrationId da audit é o mesmo do cadastro\", function (){",
											"    pm.expect(pm.response.json().audit[0]._id).to.eql(pm.environment.get(\"RegistrationId\"));",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenAcesso}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url_base}}/api/user/{{IdNewUserUpdate}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"user",
										"{{IdNewUserUpdate}}"
									],
									"query": [
										{
											"key": "token",
											"value": "{{tokenAcesso}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar status para true com sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verificar se o status code é 200\", function(){",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validar mensagem: Status atualizados para true com sucesso!\",function(){",
											"    pm.expect(pm.response.json().msg).to.equal(\"Status do usuario atualizado com sucesso para status true.\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"status\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/api/user/status/{{IdNewUserUpdate}}?token={{tokenAcesso}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"user",
										"status",
										"{{IdNewUserUpdate}}"
									],
									"query": [
										{
											"key": "token",
											"value": "{{tokenAcesso}}"
										}
									]
								},
								"description": "Generated from cURL: curl -X 'PUT' \\\n  'https://ron-bugado.qacoders.dev.br/api/user/status/67b28c5e948d994f28952a4d?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NzlhMzVmN2ViMzViNTQzYzI3NjliYTkiLCJmdWxsTmFtZSI6IkFuZHLDqSBNaW5hdG8iLCJtYWlsIjoiYW5kcmUubWluYXRvQHRlc3QuY29tLmJyIiwicGFzc3dvcmQiOiIkMmIkMTAkL0d3V0dxTFg5di9MNEVmdk9jbEsuLlouaHhWTWlITkQ3UzExZnhpTW1wSXdPZ2RtbTFYYkciLCJhY2Nlc3NQcm9maWxlIjoiQURNSU4iLCJjcGYiOiIxNzk4NTY5MjM5OCIsInN0YXR1cyI6dHJ1ZSwiYXVkaXQiOlt7InJlZ2lzdGVyZWRCeSI6eyJ1c2VySWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJ1c2VyTG9naW4iOiJzeXNhZG1pbkBxYWNvZGVycy5jb20ifSwicmVnaXN0cmF0aW9uRGF0ZSI6InF1YXJ0YS1mZWlyYSwgMjkvMDEvMjAyNSwgMTE6MDY6NDcgQlJUIiwicmVnaXN0cmF0aW9uTnVtYmVyIjoiUWFDb2RlcnMtMjYwIiwiX2lkIjoiNjc5YTM1ZjdlYjM1YjU0M2MyNzY5YmFhIn1dLCJfX3YiOjAsImlhdCI6MTczOTgyNDU4MSwiZXhwIjoxNzM5OTEwOTgxfQ.vzjf5c9Dbyekd_Uf0g5wAvMY5rAk1hCB3wmLoaWYb0g' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"status\": true\n}'"
							},
							"response": []
						},
						{
							"name": "Buscar usuário pelo id status editado para true",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verificar se o status code é 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validar se userId é o mesmo do cadastro\", function () {",
											"    pm.expect(pm.response.json()._id).to.eql(pm.environment.get(\"IdNewUserUpdate\"));",
											"});",
											"",
											"pm.test(\"Validar se fullName é o mesmo do cadastro\", function () {",
											"    pm.expect(pm.response.json().fullName).to.eql(pm.environment.get(\"FullNameNewUserUpdate\"));",
											"});",
											"",
											"pm.test(\"Validar se e-mail é o mesmo do cadastro\", function () {",
											"    pm.expect(pm.response.json().mail).to.eql(pm.environment.get(\"MailNewUserUpdate\"));",
											"});",
											"",
											"pm.test(\"Validar se accessProfile é o mesmo do cadastro\", function () {",
											"    pm.expect(pm.response.json().accessProfile).to.eql(pm.environment.get(\"AccessProfilelNewUserUpdate\"));",
											"});",
											"",
											"pm.test(\"Validar se CPF é o mesmo do cadastro\", function () {",
											"    pm.expect(pm.response.json().cpf).to.eql(pm.environment.get(\"CPFNewUserUpdate\"));",
											"});",
											"",
											"pm.test(\"Validar se status é alterou para true com sucesso\", function () {",
											"    pm.expect(pm.response.json().status).to.eql(true);",
											"});",
											"",
											"",
											"pm.test(\"Validar userId do campo registeredBy é o mesmo id do AdminTest\", function (){",
											"    pm.expect(pm.response.json().audit[0].registeredBy.userId).to.eql(pm.environment.get(\"_IdAdminTest\"));",
											"});",
											"",
											"pm.test(\"Validar userLogin do campo registeredBy é o mesmo e-mail do AdminTest\", function (){",
											"    pm.expect(pm.response.json().audit[0].registeredBy.userLogin).to.eql(pm.environment.get(\"MailAdminTest\"));",
											"});",
											"",
											"",
											"pm.test(\"Validar registrationDate da audit é o mesmo do cadastro\", function (){",
											"    pm.expect(pm.response.json().audit[0].registrationDate).to.eql(pm.environment.get(\"RegistrationDate\"));",
											"});",
											"",
											"pm.test(\"Validar registrationNumber da audit é o mesmo do cadastro\", function (){",
											"    pm.expect(pm.response.json().audit[0].registrationNumber).to.eql(pm.environment.get(\"RegistrationNumber\"));",
											"});",
											"",
											"pm.test(\"Validar registrationId da audit é o mesmo do cadastro\", function (){",
											"    pm.expect(pm.response.json().audit[0]._id).to.eql(pm.environment.get(\"RegistrationId\"));",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenAcesso}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url_base}}/api/user/{{IdNewUserUpdate}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"user",
										"{{IdNewUserUpdate}}"
									],
									"query": [
										{
											"key": "token",
											"value": "{{tokenAcesso}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar usuário pelo id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verificar se o status code é 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validar se userId é o mesmo do cadastro\", function () {",
											"    pm.expect(pm.response.json()._id).to.eql(pm.environment.get(\"IdNewUserUpdate\"));",
											"});",
											"",
											"pm.test(\"Validar se fullName é o mesmo do cadastro\", function () {",
											"    pm.expect(pm.response.json().fullName).to.eql(pm.environment.get(\"FullNameNewUserUpdate\"));",
											"});",
											"",
											"pm.test(\"Validar se e-mail é o mesmo do cadastro\", function () {",
											"    pm.expect(pm.response.json().mail).to.eql(pm.environment.get(\"MailNewUserUpdate\"));",
											"});",
											"",
											"pm.test(\"Validar se accessProfile é o mesmo do cadastro\", function () {",
											"    pm.expect(pm.response.json().accessProfile).to.eql(pm.environment.get(\"AccessProfilelNewUserUpdate\"));",
											"});",
											"",
											"pm.test(\"Validar se CPF é o mesmo do cadastro\", function () {",
											"    pm.expect(pm.response.json().cpf).to.eql(pm.environment.get(\"CPFNewUserUpdate\"));",
											"});",
											"",
											"pm.test(\"Validar se status é true\", function () {",
											"    pm.expect(pm.response.json().status).to.eql(true);",
											"});",
											"",
											"",
											"pm.test(\"Validar userId do campo registeredBy é o mesmo id do AdminTest\", function (){",
											"    pm.expect(pm.response.json().audit[0].registeredBy.userId).to.eql(pm.environment.get(\"_IdAdminTest\"));",
											"});",
											"",
											"pm.test(\"Validar userLogin do campo registeredBy é o mesmo e-mail do AdminTest\", function (){",
											"    pm.expect(pm.response.json().audit[0].registeredBy.userLogin).to.eql(pm.environment.get(\"MailAdminTest\"));",
											"});",
											"",
											"",
											"pm.test(\"Validar registrationDate da audit é o mesmo do cadastro\", function (){",
											"    pm.expect(pm.response.json().audit[0].registrationDate).to.eql(pm.environment.get(\"RegistrationDate\"));",
											"});",
											"",
											"pm.test(\"Validar registrationNumber da audit é o mesmo do cadastro\", function (){",
											"    pm.expect(pm.response.json().audit[0].registrationNumber).to.eql(pm.environment.get(\"RegistrationNumber\"));",
											"});",
											"",
											"pm.test(\"Validar registrationId da audit é o mesmo do cadastro\", function (){",
											"    pm.expect(pm.response.json().audit[0]._id).to.eql(pm.environment.get(\"RegistrationId\"));",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenAcesso}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url_base}}/api/user/{{IdNewUserUpdate}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"user",
										"{{IdNewUserUpdate}}"
									],
									"query": [
										{
											"key": "token",
											"value": "{{tokenAcesso}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar status do usuário enviando atributo extra",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verificar se o status code é 200\", function(){",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validar mensagem: Status foi atualizados com sucesso!\",function(){",
											"    pm.expect(pm.response.json().msg).to.equal(\"Status do usuario atualizado com sucesso para status false.\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let caracteresMaiuscula = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';",
											"let caracteresMinusculo = 'abcdefghijklmnopqrstuvwxyz';",
											"let caracteresEspeciais = '@#$%';",
											"let caracteresNumericos = '123456789'",
											"",
											"// Função para gerar um caractere aleatório de um conjunto",
											"function getRandomCharacter(set) {",
											"    const randomIndex = Math.floor(Math.random() * set.length);",
											"    return set[randomIndex];",
											"}",
											"",
											"// Função para gerar a senha",
											"function generatePassword() {",
											"    let password = '';",
											"",
											"    // Garantir que a senha tenha pelo menos 2 caracteres maiúsculos",
											"    for (let i = 0; i < 2; i++) {",
											"        password += getRandomCharacter(caracteresMaiuscula);",
											"    }",
											"",
											"    // Garantir que a senha tenha pelo menos 3 caracteres minúsculos",
											"    for (let i = 0; i < 3; i++) {",
											"        password += getRandomCharacter(caracteresMinusculo);",
											"    }",
											"",
											"    // Garantir que a senha tenha pelo menos 1 caractere especial",
											"    password += getRandomCharacter(caracteresEspeciais);",
											"",
											"    // Garantir que a senha tenha pelo menos 1 caractere numérico",
											"    password += getRandomCharacter(caracteresNumericos);",
											"",
											"    // Preencher os 10 caracteres com caracteres aleatórios dos conjuntos definidos",
											"    while (password.length < 10) {",
											"        let allChars = caracteresMaiuscula + caracteresMinusculo + caracteresEspeciais + caracteresNumericos;",
											"        password += getRandomCharacter(allChars);",
											"    }",
											"",
											"    // Embaralhar a senha",
											"    let shuffledPassword = password.split('').sort(() => Math.random() - 0.5).join('');",
											"",
											"    return shuffledPassword;",
											"}",
											"",
											"// Gerar a senha e salvar no ambiente",
											"const password = generatePassword();",
											"pm.environment.set('DynamicPassword', password);",
											"",
											"function editarSobreNome() {",
											"    var editarSobreNome = [",
											"    \"dos Santos\", \"da Silva\", \"da Mota\", \"de Figueiredo\", \"dos Anjos\", ",
											"    \"da Costa\", \"de Almeida\", \"dos Reis\", \"da Rocha\", \"de Oliveira\", ",
											"    \"dos Santos Silva\", \"da Luz\", \"de Souza\", \"da Cunha\", \"dos Santos Costa\", ",
											"    \"da Paz\", \"de Carvalho\", \"dos Santos Lima\", \"da Silva Ribeiro\", \"de Sá\", ",
											"    \"da Cunha Oliveira\", \"de Moraes\", \"dos Santos Rodrigues\", \"da Silva Oliveira\", ",
											"    \"de Castro\", \"dos Santos Alves\", \"da Silva Costa\", \"de Lima\", \"da Rocha Silva\", ",
											"    \"de Andrade\", \"dos Santos Pereira\", \"da Silva Ferreira\", \"de Macedo\", \"da Silva Martins\", ",
											"    \"de Brito\", \"da Silva Barros\", \"dos Santos Cardoso\", \"da Silva Santana\", \"de Araújo\", ",
											"    \"dos Santos Gomes\", \"da Silva Campos\", \"de Medeiros\", \"da Silva Souza\", \"de Oliveira Lima\", ",
											"    \"dos Santos Tavares\", \"da Silva Nogueira\", \"de Lima Souza\", \"dos Santos Pires\", \"da Silva Brito\", ",
											"    \"de Bastos\"",
											"]",
											"",
											"    let randomItem = editarSobreNome[Math.floor(Math.random() * editarSobreNome.length)];",
											"    return randomItem;",
											"}",
											"",
											"pm.environment.set(\"EditarFullName\", pm.environment.get(\"FullName\") + \" \" + editarSobreNome());",
											"",
											"function criarEmail(nomeCompleto) {",
											"    // Função para escolher um domínio aleatório",
											"    function dominio() {",
											"        const dominios = [",
											"            \"@gmail.com\",",
											"            \"@gmail.com.br\",",
											"            \"@uol.br\",",
											"            \"@hotmail.com\",",
											"            \"@outlook.com\",",
											"            \"@yahoo.com\",",
											"            \"@yahoo.com.br\",",
											"            \"@live.com\",",
											"            \"@icloud.com\",",
											"            \"@bol.com.br\",",
											"            \"@terra.com.br\"",
											"        ];",
											"        let randomItem = dominios[Math.floor(Math.random() * dominios.length)]; // Acessando corretamente o array",
											"        return randomItem;",
											"    }",
											"",
											"    const nomes = nomeCompleto.split(\" \");",
											"    const primeiroNome = nomes[0].normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\").toLowerCase();",
											"    const ultimoNome = nomes[nomes.length - 1].normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\").toLowerCase();",
											"    const email = primeiroNome + \".\" + ultimoNome + dominio(); // Chamando a função dominio()",
											"    return email;",
											"}",
											"",
											"// Exemplo de uso:",
											"const nomeCompleto = pm.environment.get(\"EditarFullName\")",
											"const email = criarEmail(nomeCompleto);",
											"",
											"pm.environment.set(\"EditarEmail\", email)",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"accessProfile\": \"{{AccessProfileAluno}}\",\n   \"status\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/api/user/status/{{IdNewUserUpdate}}?token={{tokenAcesso}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"user",
										"status",
										"{{IdNewUserUpdate}}"
									],
									"query": [
										{
											"key": "token",
											"value": "{{tokenAcesso}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar usuário pelo id enviando atributos extras",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verificar se o status code é 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validar se userId é o mesmo do cadastro\", function () {",
											"    pm.expect(pm.response.json()._id).to.eql(pm.environment.get(\"IdNewUserUpdate\"));",
											"});",
											"",
											"pm.test(\"Validar se fullName é o mesmo do cadastro\", function () {",
											"    pm.expect(pm.response.json().fullName).to.eql(pm.environment.get(\"FullNameNewUserUpdate\"));",
											"});",
											"",
											"pm.test(\"Validar se e-mail é o mesmo do cadastro\", function () {",
											"    pm.expect(pm.response.json().mail).to.eql(pm.environment.get(\"MailNewUserUpdate\"));",
											"});",
											"",
											"pm.test(\"Validar se accessProfile é diferente de aluno\", function () {",
											"    pm.expect(pm.response.json().accessProfile).not.to.eql(pm.environment.get(\"AccessProfileAluno\"));",
											"});",
											"",
											"pm.test(\"Validar se CPF é o mesmo do cadastro\", function () {",
											"    pm.expect(pm.response.json().cpf).to.eql(pm.environment.get(\"CPFNewUserUpdate\"));",
											"});",
											"",
											"pm.test(\"Validar se status é o status atualizou para false com sucesso\", function () {",
											"    pm.expect(pm.response.json().status).to.eql(false);",
											"});",
											"",
											"",
											"pm.test(\"Validar userId do campo registeredBy é o mesmo id do AdminTest\", function (){",
											"    pm.expect(pm.response.json().audit[0].registeredBy.userId).to.eql(pm.environment.get(\"_IdAdminTest\"));",
											"});",
											"",
											"pm.test(\"Validar userLogin do campo registeredBy é o mesmo e-mail do AdminTest\", function (){",
											"    pm.expect(pm.response.json().audit[0].registeredBy.userLogin).to.eql(pm.environment.get(\"MailAdminTest\"));",
											"});",
											"",
											"",
											"pm.test(\"Validar registrationDate da audit é o mesmo do cadastro\", function (){",
											"    pm.expect(pm.response.json().audit[0].registrationDate).to.eql(pm.environment.get(\"RegistrationDate\"));",
											"});",
											"",
											"pm.test(\"Validar registrationNumber da audit é o mesmo do cadastro\", function (){",
											"    pm.expect(pm.response.json().audit[0].registrationNumber).to.eql(pm.environment.get(\"RegistrationNumber\"));",
											"});",
											"",
											"pm.test(\"Validar registrationId da audit é o mesmo do cadastro\", function (){",
											"    pm.expect(pm.response.json().audit[0]._id).to.eql(pm.environment.get(\"RegistrationId\"));",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenAcesso}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url_base}}/api/user/{{IdNewUserUpdate}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"user",
										"{{IdNewUserUpdate}}"
									],
									"query": [
										{
											"key": "token",
											"value": "{{tokenAcesso}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar status enviando token inválido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verificar se o status code é 403\", function(){",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Validar mensagem de erro\",function(){",
											"    pm.expect(pm.response.json().error[0]).to.equal(\"Failed to authenticate token.\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"status\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/api/user/status/{{IdNewUserUpdate}}?token={{tokenAcessoInvalido}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"user",
										"status",
										"{{IdNewUserUpdate}}"
									],
									"query": [
										{
											"key": "token",
											"value": "{{tokenAcessoInvalido}}"
										}
									]
								},
								"description": "Generated from cURL: curl -X 'PUT' \\\n  'https://ron-bugado.qacoders.dev.br/api/user/status/67b28c5e948d994f28952a4d?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NzlhMzVmN2ViMzViNTQzYzI3NjliYTkiLCJmdWxsTmFtZSI6IkFuZHLDqSBNaW5hdG8iLCJtYWlsIjoiYW5kcmUubWluYXRvQHRlc3QuY29tLmJyIiwicGFzc3dvcmQiOiIkMmIkMTAkL0d3V0dxTFg5di9MNEVmdk9jbEsuLlouaHhWTWlITkQ3UzExZnhpTW1wSXdPZ2RtbTFYYkciLCJhY2Nlc3NQcm9maWxlIjoiQURNSU4iLCJjcGYiOiIxNzk4NTY5MjM5OCIsInN0YXR1cyI6dHJ1ZSwiYXVkaXQiOlt7InJlZ2lzdGVyZWRCeSI6eyJ1c2VySWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJ1c2VyTG9naW4iOiJzeXNhZG1pbkBxYWNvZGVycy5jb20ifSwicmVnaXN0cmF0aW9uRGF0ZSI6InF1YXJ0YS1mZWlyYSwgMjkvMDEvMjAyNSwgMTE6MDY6NDcgQlJUIiwicmVnaXN0cmF0aW9uTnVtYmVyIjoiUWFDb2RlcnMtMjYwIiwiX2lkIjoiNjc5YTM1ZjdlYjM1YjU0M2MyNzY5YmFhIn1dLCJfX3YiOjAsImlhdCI6MTczOTgyNDU4MSwiZXhwIjoxNzM5OTEwOTgxfQ.vzjf5c9Dbyekd_Uf0g5wAvMY5rAk1hCB3wmLoaWYb0g' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"status\": true\n}'"
							},
							"response": []
						},
						{
							"name": "Editar status enviando id inválido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verificar se o status code é 404\", function(){",
											"    pm.response.to.have.status(404);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"status\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/api/user/status/{{NewUserIDInvalido}}?token={{tokenAcesso}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"user",
										"status",
										"{{NewUserIDInvalido}}"
									],
									"query": [
										{
											"key": "token",
											"value": "{{tokenAcesso}}"
										}
									]
								},
								"description": "Generated from cURL: curl -X 'PUT' \\\n  'https://ron-bugado.qacoders.dev.br/api/user/status/67b28c5e948d994f28952a4d?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NzlhMzVmN2ViMzViNTQzYzI3NjliYTkiLCJmdWxsTmFtZSI6IkFuZHLDqSBNaW5hdG8iLCJtYWlsIjoiYW5kcmUubWluYXRvQHRlc3QuY29tLmJyIiwicGFzc3dvcmQiOiIkMmIkMTAkL0d3V0dxTFg5di9MNEVmdk9jbEsuLlouaHhWTWlITkQ3UzExZnhpTW1wSXdPZ2RtbTFYYkciLCJhY2Nlc3NQcm9maWxlIjoiQURNSU4iLCJjcGYiOiIxNzk4NTY5MjM5OCIsInN0YXR1cyI6dHJ1ZSwiYXVkaXQiOlt7InJlZ2lzdGVyZWRCeSI6eyJ1c2VySWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJ1c2VyTG9naW4iOiJzeXNhZG1pbkBxYWNvZGVycy5jb20ifSwicmVnaXN0cmF0aW9uRGF0ZSI6InF1YXJ0YS1mZWlyYSwgMjkvMDEvMjAyNSwgMTE6MDY6NDcgQlJUIiwicmVnaXN0cmF0aW9uTnVtYmVyIjoiUWFDb2RlcnMtMjYwIiwiX2lkIjoiNjc5YTM1ZjdlYjM1YjU0M2MyNzY5YmFhIn1dLCJfX3YiOjAsImlhdCI6MTczOTgyNDU4MSwiZXhwIjoxNzM5OTEwOTgxfQ.vzjf5c9Dbyekd_Uf0g5wAvMY5rAk1hCB3wmLoaWYb0g' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"status\": true\n}'"
							},
							"response": []
						}
					]
				},
				{
					"name": "Editar Senha e confirmar senha /api/user/password/{id}",
					"item": [
						{
							"name": "Login Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"tokenAcesso\",pm.response.json().token)",
											"pm.environment.set(\"_IdAdminTest\", pm.response.json().user._id)",
											"pm.environment.set(\"MailAdminTest\", pm.response.json().user.mail)"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"mail\": \"{{TestUserEmail}}\",\r\n    \"password\": \"{{TestUserPassword}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/api/login/",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"login",
										""
									]
								},
								"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/login/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"mail\": \"sysadmin@qacoders.com\",\r\n  \"password\": \"1234@Test\"\r\n}'"
							},
							"response": []
						},
						{
							"name": "Cadastrar novo usuário sucesso",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function gerarCpf() {",
											"  const num1 = aleatorio(); ",
											"  const num2 = aleatorio();",
											"  const num3 = aleatorio();",
											"  const dig1 = dig(num1, num2, num3); ",
											"  const dig2 = dig(num1, num2, num3, dig1);",
											"  return `${num1}${num2}${num3}${dig1}${dig2}`;",
											"}",
											" ",
											"function dig(n1, n2, n3, n4) {",
											"  const nums = n1.split(\"\").concat(n2.split(\"\"), n3.split(\"\"));",
											"  if (n4 !== undefined){ ",
											"    nums[9] = n4;",
											"  }",
											"  let x = 0;",
											"  for (let i = (n4 !== undefined ? 11:10), j = 0; i >= 2; i--, j++) {",
											"    x += parseInt(nums[j]) * i;",
											"  }",
											"  const y = x % 11;",
											"  return y < 2 ? 0 : 11 - y;",
											"}",
											"",
											"function aleatorio() {",
											"  const aleat = Math.floor(Math.random() * 999);",
											"  return (\"\" + aleat).padStart(3, '0');",
											"}",
											"pm.environment.set(\"CPF\", gerarCpf());",
											"",
											"function firstName() {",
											"    let firstName = nomes = [",
											"    \"Andre\", \"Luiza\", \"Vanessa\", \"Lula\", \"Carlos\", \"Maria\", \"João\", \"Paula\", ",
											"    \"Ana\", \"Pedro\", \"Lucas\", \"Beatriz\", \"Felipe\", \"Camila\", \"Gabriel\", \"Juliana\", ",
											"    \"Rafael\", \"Fernanda\", \"Ricardo\", \"Larissa\", \"Gustavo\", \"Mariana\", \"Eduardo\", ",
											"    \"Renata\", \"Victor\", \"Simone\", \"Sofia\", \"Bruno\", \"Isabela\", \"Mário\", \"Tatiane\", ",
											"    \"Júlio\", \"Tânia\", \"Sérgio\", \"Luciana\", \"Thiago\", \"Cláudia\", \"Hugo\", \"Giovana\", ",
											"    \"César\", \"Larissa\", \"Marcelo\", \"Elaine\", \"Vitor\", \"Mônica\", \"Alexandre\", \"Letícia\", ",
											"    \"Daniel\", \"Carla\", \"Fernando\", \"Patrícia\", \"Sérgio\", \"Viviane\", \"Marcos\", \"Cíntia\", ",
											"    \"Roberto\", \"Kátia\", \"Diogo\", \"Marília\", \"Túlio\", \"Paulo\", \"Adriana\", \"Jaqueline\", ",
											"    \"Reginaldo\", \"Sílvia\", \"Renato\", \"Isis\", \"Sônia\", \"Alexia\", \"Aline\", \"Rogério\", ",
											"    \"Tatiane\", \"Ricardo\", \"Gisele\", \"Fábio\", \"Eunice\", \"Raul\", \"Milene\", \"Ricardo\", ",
											"    \"Marcelo\", \"Daniela\", \"Kelly\", \"Cássio\", \"Cláudia\", \"Francisco\", \"Alessandra\", ",
											"    \"Gisele\", \"Gustavo\", \"Clara\", \"Tatiane\", \"Joana\", \"Carlos\", \"Aline\", \"Viviane\", ",
											"    \"Júlia\", \"André\", \"Luciano\", \"Alicia\", \"Eliane\", \"Marcio\", \"Rogério\", \"Eliete\", ",
											"    \"Jéssica\", \"Simone\", \"Thiago\", \"Luiz\", \"Carlos\", \"Rafaela\", \"Marcela\", \"Jonas\", ",
											"    \"Lúcia\", \"Marcos\", \"Sônia\", \"Eduarda\", \"Livia\"",
											"]",
											"    let randomItem = firstName[Math.floor(Math.random() * firstName.length)];",
											"    return randomItem;",
											"}",
											"pm.environment.set(\"FirstName\", firstName());",
											"",
											"function lastName() {",
											"    var lastName = [",
											"    \"Silva\", \"Santos\", \"Oliveira\", \"Pereira\", \"Costa\", \"Rodrigues\", \"Almeida\", ",
											"    \"Martins\", \"Souza\", \"Lima\", \"Gomes\", \"Ribeiro\", \"Carvalho\", \"Fernandes\", \"Araujo\", ",
											"    \"Barbosa\", \"Melo\", \"Dias\", \"Cavalcanti\", \"Nascimento\", \"Pinto\", \"Vieira\", \"Teixeira\", ",
											"    \"Ramos\", \"Faria\", \"Moura\", \"Campos\", \"Machado\", \"Monteiro\", \"Santiago\", \"Nascimento\", ",
											"    \"Brandão\", \"Cunha\", \"Freitas\", \"Serrano\", \"Queiroz\", \"Duarte\", \"Mendes\", \"Cardoso\", ",
											"    \"Lopes\", \"Martins\", \"Batista\", \"Siqueira\", \"Moreira\", \"Figueiredo\", \"Andrade\", \"Araújo\", ",
											"    \"Borges\", \"Lima\", \"Cunha\", \"Costa\", \"Batista\", \"Correia\", \"Silveira\", \"Bastos\", \"Leal\", ",
											"    \"Ferreira\", \"Gonçalves\", \"Tavares\", \"Queiroz\", \"Lima\", \"Campos\", \"Carneiro\", \"Santos\", ",
											"    \"Vasconcelos\", \"Vieira\", \"Farias\", \"Souza\", \"Pereira\", \"Tavares\", \"Silva\", \"Alves\", ",
											"    \"Xavier\", \"Soares\", \"Barbosa\", \"Lima\", \"Menezes\", \"Ribeiro\", \"Pimentel\", \"Santos\", ",
											"    \"Dias\", \"Castro\", \"Melo\", \"Pinto\", \"Machado\", \"Pinheiro\", \"Guerra\", \"Alves\", ",
											"    \"Freitas\", \"Cavalcanti\", \"Montez\", \"Pereira\", \"Gomes\", \"Santos\", \"Costa\", ",
											"    \"Ribeiro\", \"Teixeira\", \"Azevedo\", \"Martins\", \"Ramos\", \"Ribeiro\", \"Cardoso\", \"Lima\", ",
											"    \"Monteiro\", \"Leão\", \"Lopes\", \"Melo\", \"Brandão\", \"Borges\", \"Ribeiro\", \"Moraes\", ",
											"    \"Figueira\", \"Silva\", \"Tavares\", \"Cavalcante\", \"Mendes\", \"Siqueira\", \"Machado\"",
											"]",
											"",
											"    let randomItem = lastName[Math.floor(Math.random() * lastName.length)];",
											"    return randomItem;",
											"}",
											"pm.environment.set(\"LastName\", lastName());",
											"",
											"pm.environment.set(\"FullName\", pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"));",
											"",
											"let name = pm.environment.get(\"FullName\");",
											"",
											"function fullNameFormat(str) {",
											"  return str",
											"    .normalize('NFD') // Normaliza a string para decompor os caracteres acentuados",
											"    .replace(/[\\u0300-\\u036f]/g, '') // Remove os caracteres acentuados",
											"    .replace(/\\s+/g, '') // Remove os espaços em branco",
											"    .toLowerCase(); // Converte para minúsculas",
											"}",
											"",
											"function provedorEmail () {",
											"    let provedorEmail = [",
											"        \"@gmail.com\", \"@outlook.com\", \"@yahoo.com\", \"@gmail.com.br\", \"@hotmail.com.br\", \"@uol.com.br\", \"@bol.com.br\", \"@terra.br\", \"@oi.com.br\", \"@empresa.com.br\", \"@universidade.edu.br\"",
											"    ]",
											"    let randomItem = provedorEmail[Math.floor(Math.random() * provedorEmail.length)];",
											"    return randomItem;",
											"}",
											"",
											"pm.environment.set(\"NewUserEmail\", fullNameFormat(name) + provedorEmail());",
											"",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"IdNewUserUpdate\", pm.response.json().user._id);",
											"pm.environment.set(\"FullNameNewUserUpdate\", pm.response.json().user.fullName);",
											"pm.environment.set(\"MailNewUserUpdate\", pm.response.json().user.mail);",
											"pm.environment.set(\"AccessProfilelNewUserUpdate\", pm.response.json().user.accessProfile);",
											"pm.environment.set(\"CPFNewUserUpdate\", pm.response.json().user.cpf);",
											"pm.environment.set(\"StatusNewUserUpdate\", pm.response.json().user.status);",
											"pm.environment.set(\"RegistrationDate\", pm.response.json().user.audit[0].registrationDate)",
											"pm.environment.set(\"RegistrationNumber\", pm.response.json().user.audit[0].registrationNumber)",
											"pm.environment.set(\"RegistrationId\", pm.response.json().user.audit[0]._id)",
											"",
											"",
											"",
											"pm.test(\"Veriificar se o status é 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Validar mensagem de sucesso\", function () {",
											"    pm.expect(pm.response.json().msg).to.eql(\"Olá \" + pm.environment.get(\"FullName\") + \", cadastro realizado com sucesso.\");",
											"});",
											"",
											"pm.test(\"Validar se fullName do request e o mesmo do response\", function () {",
											"    pm.expect(pm.response.json().user.fullName).to.eql(pm.environment.get(\"FullName\"));",
											"});",
											"",
											"pm.test(\"Validar se mail do request e o mesmo do response\", function () {",
											"    pm.expect(pm.response.json().user.mail).to.eql(pm.environment.get(\"NewUserEmail\"));",
											"});",
											"",
											"pm.test(\"Validar se CPF do request e o mesmo do response\", function () {",
											"    pm.expect(pm.response.json().user.cpf).to.eql(pm.environment.get(\"CPF\"));",
											"});",
											"",
											"pm.test(\"Validar se status é true\", function () {",
											"    pm.expect(pm.response.json().user.status).to.eql(true);",
											"});",
											"",
											"pm.test(\"Validar que id adminTest é o mesmo userId da auditoria\", function () {",
											"     pm.expect(pm.response.json().user.audit[0].registeredBy.userId).to.eql(pm.environment.get(\"_IdAdminTest\"));",
											"});",
											"",
											"pm.test(\"Validar que e-mail AdminTest é o mesmo userLogin da auditoria\", function () {",
											"     pm.expect(pm.response.json().user.audit[0].registeredBy.userLogin).to.eql(pm.environment.get(\"MailAdminTest\"));",
											"});",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"fullName\": \"{{FullName}}\",\n  \"mail\": \"{{NewUserEmail}}\",\n  \"accessProfile\": \"ADMIN\",\n  \"cpf\": \"{{CPF}}\",\n  \"password\": \"{{NewUserPassword}}\",\n  \"confirmPassword\": \"{{NewUserPassword}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/api/user?token={{tokenAcesso}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"user"
									],
									"query": [
										{
											"key": "token",
											"value": "{{tokenAcesso}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar usuário pelo id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verificar se o status code é 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validar se userId é o mesmo do cadastro\", function () {",
											"    pm.expect(pm.response.json()._id).to.eql(pm.environment.get(\"IdNewUserUpdate\"));",
											"});",
											"",
											"pm.test(\"Validar se fullName é o mesmo do cadastro\", function () {",
											"    pm.expect(pm.response.json().fullName).to.eql(pm.environment.get(\"FullNameNewUserUpdate\"));",
											"});",
											"",
											"pm.test(\"Validar se e-mail é o mesmo do cadastro\", function () {",
											"    pm.expect(pm.response.json().mail).to.eql(pm.environment.get(\"MailNewUserUpdate\"));",
											"});",
											"",
											"pm.test(\"Validar se accessProfile é o mesmo do cadastro\", function () {",
											"    pm.expect(pm.response.json().accessProfile).to.eql(pm.environment.get(\"AccessProfilelNewUserUpdate\"));",
											"});",
											"",
											"pm.test(\"Validar se CPF é o mesmo do cadastro\", function () {",
											"    pm.expect(pm.response.json().cpf).to.eql(pm.environment.get(\"CPFNewUserUpdate\"));",
											"});",
											"",
											"pm.test(\"Validar se status é o mesmo do cadastro\", function () {",
											"    pm.expect(pm.response.json().status).to.eql(pm.environment.get(\"StatusNewUserUpdate\"));",
											"});",
											"",
											"",
											"pm.test(\"Validar userId do campo registeredBy é o mesmo id do AdminTest\", function (){",
											"    pm.expect(pm.response.json().audit[0].registeredBy.userId).to.eql(pm.environment.get(\"_IdAdminTest\"));",
											"});",
											"",
											"pm.test(\"Validar userLogin do campo registeredBy é o mesmo e-mail do AdminTest\", function (){",
											"    pm.expect(pm.response.json().audit[0].registeredBy.userLogin).to.eql(pm.environment.get(\"MailAdminTest\"));",
											"});",
											"",
											"",
											"pm.test(\"Validar registrationDate da audit é o mesmo do cadastro\", function (){",
											"    pm.expect(pm.response.json().audit[0].registrationDate).to.eql(pm.environment.get(\"RegistrationDate\"));",
											"});",
											"",
											"pm.test(\"Validar registrationNumber da audit é o mesmo do cadastro\", function (){",
											"    pm.expect(pm.response.json().audit[0].registrationNumber).to.eql(pm.environment.get(\"RegistrationNumber\"));",
											"});",
											"",
											"pm.test(\"Validar registrationId da audit é o mesmo do cadastro\", function (){",
											"    pm.expect(pm.response.json().audit[0]._id).to.eql(pm.environment.get(\"RegistrationId\"));",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenAcesso}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url_base}}/api/user/{{IdNewUserUpdate}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"user",
										"{{IdNewUserUpdate}}"
									],
									"query": [
										{
											"key": "token",
											"value": "{{tokenAcesso}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar senha com sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verificar se o status code é 200\", function(){",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validar retorno da mensagem\", function() {",
											"    pm.expect(pm.response.json().msg).to.eql(\"Senha atualizada com sucesso!\");",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let caracteresMaiuscula = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';",
											"let caracteresMinusculo = 'abcdefghijklmnopqrstuvwxyz';",
											"let caracteresEspeciais = '@#$%';",
											"let caracteresNumericos = '123456789'",
											"",
											"// Função para gerar um caractere aleatório de um conjunto",
											"function getRandomCharacter(set) {",
											"    const randomIndex = Math.floor(Math.random() * set.length);",
											"    return set[randomIndex];",
											"}",
											"",
											"// Função para gerar a senha",
											"function generatePassword() {",
											"    let password = '';",
											"",
											"    // Garantir que a senha tenha pelo menos 2 caracteres maiúsculos",
											"    for (let i = 0; i < 2; i++) {",
											"        password += getRandomCharacter(caracteresMaiuscula);",
											"    }",
											"",
											"    // Garantir que a senha tenha pelo menos 3 caracteres minúsculos",
											"    for (let i = 0; i < 3; i++) {",
											"        password += getRandomCharacter(caracteresMinusculo);",
											"    }",
											"",
											"    // Garantir que a senha tenha pelo menos 1 caractere especial",
											"    password += getRandomCharacter(caracteresEspeciais);",
											"",
											"    // Garantir que a senha tenha pelo menos 1 caractere numérico",
											"    password += getRandomCharacter(caracteresNumericos);",
											"",
											"    // Preencher os 10 caracteres com caracteres aleatórios dos conjuntos definidos",
											"    while (password.length < 10) {",
											"        let allChars = caracteresMaiuscula + caracteresMinusculo + caracteresEspeciais + caracteresNumericos;",
											"        password += getRandomCharacter(allChars);",
											"    }",
											"",
											"    // Embaralhar a senha",
											"    let shuffledPassword = password.split('').sort(() => Math.random() - 0.5).join('');",
											"",
											"    return shuffledPassword;",
											"}",
											"",
											"// Gerar a senha e salvar no ambiente",
											"const password = generatePassword();",
											"pm.environment.set('DynamicPassword', password);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenAcesso}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"password\": \"{{DynamicPassword}}\",\n    \"confirmPassword\": \"{{DynamicPassword}}\"\n}\n\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/api/user/password/{{IdNewUserUpdate}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"user",
										"password",
										"{{IdNewUserUpdate}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar usuário editado pelo id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verificar se o status code é 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validar se userId é o mesmo do cadastro\", function () {",
											"    pm.expect(pm.response.json()._id).to.eql(pm.environment.get(\"IdNewUserUpdate\"));",
											"});",
											"",
											"pm.test(\"Validar se fullName é o mesmo do cadastro\", function () {",
											"    pm.expect(pm.response.json().fullName).to.eql(pm.environment.get(\"FullNameNewUserUpdate\"));",
											"});",
											"",
											"pm.test(\"Validar se e-mail é o mesmo do cadastro\", function () {",
											"    pm.expect(pm.response.json().mail).to.eql(pm.environment.get(\"MailNewUserUpdate\"));",
											"});",
											"",
											"pm.test(\"Validar se accessProfile é o mesmo do cadastro\", function () {",
											"    pm.expect(pm.response.json().accessProfile).to.eql(pm.environment.get(\"AccessProfilelNewUserUpdate\"));",
											"});",
											"",
											"pm.test(\"Validar se CPF é o mesmo do cadastro\", function () {",
											"    pm.expect(pm.response.json().cpf).to.eql(pm.environment.get(\"CPFNewUserUpdate\"));",
											"});",
											"",
											"pm.test(\"Validar se status é o mesmo do cadastro\", function () {",
											"    pm.expect(pm.response.json().status).to.eql(pm.environment.get(\"StatusNewUserUpdate\"));",
											"});",
											"",
											"",
											"pm.test(\"Validar userId do campo registeredBy é o mesmo id do AdminTest\", function (){",
											"    pm.expect(pm.response.json().audit[0].registeredBy.userId).to.eql(pm.environment.get(\"_IdAdminTest\"));",
											"});",
											"",
											"pm.test(\"Validar userLogin do campo registeredBy é o mesmo e-mail do AdminTest\", function (){",
											"    pm.expect(pm.response.json().audit[0].registeredBy.userLogin).to.eql(pm.environment.get(\"MailAdminTest\"));",
											"});",
											"",
											"",
											"pm.test(\"Validar registrationDate da audit é o mesmo do cadastro\", function (){",
											"    pm.expect(pm.response.json().audit[0].registrationDate).to.eql(pm.environment.get(\"RegistrationDate\"));",
											"});",
											"",
											"pm.test(\"Validar registrationNumber da audit é o mesmo do cadastro\", function (){",
											"    pm.expect(pm.response.json().audit[0].registrationNumber).to.eql(pm.environment.get(\"RegistrationNumber\"));",
											"});",
											"",
											"pm.test(\"Validar registrationId da audit é o mesmo do cadastro\", function (){",
											"    pm.expect(pm.response.json().audit[0]._id).to.eql(pm.environment.get(\"RegistrationId\"));",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenAcesso}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url_base}}/api/user/{{IdNewUserUpdate}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"user",
										"{{IdNewUserUpdate}}"
									],
									"query": [
										{
											"key": "token",
											"value": "{{tokenAcesso}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar senha do usuário com 7 caracteres",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verificar se o status code é 400\", function(){",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Validar mensagem: Que a senha está fora do padrão\", function() {",
											"    pm.expect(pm.response.json().error[1]).to.eql(\"Senha precisa ter: uma letra maiúscula, uma letra minúscula, um número, um caractere especial(@#$%) e tamanho entre 8-12.\");",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let caracteresMaiuscula = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';",
											"let caracteresMinusculo = 'abcdefghijklmnopqrstuvwxyz';",
											"let caracteresEspeciais = '@#$%';",
											"let caracteresNumericos = '123456789'",
											"",
											"// Função para gerar um caractere aleatório de um conjunto",
											"function getRandomCharacter(set) {",
											"    const randomIndex = Math.floor(Math.random() * set.length);",
											"    return set[randomIndex];",
											"}",
											"",
											"// Função para gerar a senha",
											"function generatePassword() {",
											"    let password = '';",
											"",
											"    // Garantir que a senha tenha pelo menos 1 caractere maiúsculo",
											"    password += getRandomCharacter(caracteresMaiuscula);",
											"",
											"    // Garantir que a senha tenha pelo menos 2 caracteres minúsculos",
											"    for (let i = 0; i < 2; i++) {",
											"        password += getRandomCharacter(caracteresMinusculo);",
											"    }",
											"",
											"    // Garantir que a senha tenha pelo menos 1 caractere especial",
											"    password += getRandomCharacter(caracteresEspeciais);",
											"",
											"    // Garantir que a senha tenha pelo menos 1 caractere numérico",
											"    password += getRandomCharacter(caracteresNumericos);",
											"",
											"    // Preencher os 7 caracteres com caracteres aleatórios dos conjuntos definidos",
											"    while (password.length < 7) {",
											"        let allChars = caracteresMaiuscula + caracteresMinusculo + caracteresEspeciais + caracteresNumericos;",
											"        password += getRandomCharacter(allChars);",
											"    }",
											"",
											"    // Embaralhar a senha",
											"    let shuffledPassword = password.split('').sort(() => Math.random() - 0.5).join('');",
											"",
											"    return shuffledPassword;",
											"}",
											"",
											"// Gerar a senha e salvar no ambiente",
											"const password = generatePassword();",
											"pm.environment.set('DynamicPassword7Caracteres', password);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenAcesso}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"password\": \"{{DynamicPassword7Caracteres}}\",\n    \"confirmPassword\": \"{{DynamicPassword7Caracteres}}\"\n}\n\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/api/user/password/{{IdNewUserUpdate}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"user",
										"password",
										"{{IdNewUserUpdate}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar usuário pelo id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verificar se o status code é 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.environment.set(\"SenhaAtual\", pm.response.json().password)",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenAcesso}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url_base}}/api/user/{{IdNewUserUpdate}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"user",
										"{{IdNewUserUpdate}}"
									],
									"query": [
										{
											"key": "token",
											"value": "{{tokenAcesso}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar senha do usuário com 8 caracteres",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verificar se o status code é 200\", function(){",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validar mensagem: 'Senha atualizada com sucesso!'\", function() {",
											"    pm.expect(pm.response.json().msg).to.eql(\"Senha atualizada com sucesso!\");",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let caracteresMaiuscula = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';",
											"let caracteresMinusculo = 'abcdefghijklmnopqrstuvwxyz';",
											"let caracteresEspeciais = '@#$%';",
											"let caracteresNumericos = '123456789'",
											"",
											"// Função para gerar um caractere aleatório de um conjunto",
											"function getRandomCharacter(set) {",
											"    const randomIndex = Math.floor(Math.random() * set.length);",
											"    return set[randomIndex];",
											"}",
											"",
											"// Função para gerar a senha",
											"function generatePassword() {",
											"    let password = '';",
											"",
											"    // Garantir que a senha tenha pelo menos 2 caracteres maiúsculos",
											"    for (let i = 0; i < 2; i++) {",
											"        password += getRandomCharacter(caracteresMaiuscula);",
											"    }",
											"",
											"    // Garantir que a senha tenha pelo menos 3 caracteres minúsculos",
											"    for (let i = 0; i < 3; i++) {",
											"        password += getRandomCharacter(caracteresMinusculo);",
											"    }",
											"",
											"    // Garantir que a senha tenha pelo menos 1 caractere especial",
											"    password += getRandomCharacter(caracteresEspeciais);",
											"",
											"    // Garantir que a senha tenha pelo menos 1 caractere numérico",
											"    password += getRandomCharacter(caracteresNumericos);",
											"",
											"    // Preencher os 8 caracteres com caracteres aleatórios dos conjuntos definidos",
											"    while (password.length < 8) {",
											"        let allChars = caracteresMaiuscula + caracteresMinusculo + caracteresEspeciais + caracteresNumericos;",
											"        password += getRandomCharacter(allChars);",
											"    }",
											"",
											"    // Embaralhar a senha",
											"    let shuffledPassword = password.split('').sort(() => Math.random() - 0.5).join('');",
											"",
											"    return shuffledPassword;",
											"}",
											"",
											"// Gerar a senha e salvar no ambiente",
											"const password = generatePassword();",
											"pm.environment.set('DynamicPassword8Caracteres', password);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenAcesso}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"password\": \"{{DynamicPassword8Caracteres}}\",\n    \"confirmPassword\": \"{{DynamicPassword8Caracteres}}\"\n}\n\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/api/user/password/{{IdNewUserUpdate}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"user",
										"password",
										"{{IdNewUserUpdate}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar usuário pelo id após alterar a senha",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verificar se o status code é 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validar se hash da senha foi alterado\", function () {",
											"     pm.expect(pm.response.json().password).not.to.eql(pm.environment.get(\"SenhaAtual\"))",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenAcesso}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url_base}}/api/user/{{IdNewUserUpdate}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"user",
										"{{IdNewUserUpdate}}"
									],
									"query": [
										{
											"key": "token",
											"value": "{{tokenAcesso}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar senha do usuário enviando 13 caracteres",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verificar se o status code é 400\", function(){",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Validar mensagem: Que a senha está fora do padrão\", function() {",
											"    pm.expect(pm.response.json().error[0]).to.eql(\"Senha precisa ter: uma letra maiúscula, uma letra minúscula, um número, um caractere especial(@#$%) e tamanho entre 8-12.\");",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let caracteresMaiuscula = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';",
											"let caracteresMinusculo = 'abcdefghijklmnopqrstuvwxyz';",
											"let caracteresEspeciais = '@#$%';",
											"let caracteresNumericos = '123456789'",
											"",
											"// Função para gerar um caractere aleatório de um conjunto",
											"function getRandomCharacter(set) {",
											"    const randomIndex = Math.floor(Math.random() * set.length);",
											"    return set[randomIndex];",
											"}",
											"",
											"// Função para gerar a senha",
											"function generatePassword() {",
											"    let password = '';",
											"",
											"    // Garantir que a senha tenha pelo menos 3 caracteres maiúsculos",
											"    for (let i = 0; i < 3; i++) {",
											"        password += getRandomCharacter(caracteresMaiuscula);",
											"    }",
											"",
											"    // Garantir que a senha tenha pelo menos 4 caracteres minúsculos",
											"    for (let i = 0; i < 4; i++) {",
											"        password += getRandomCharacter(caracteresMinusculo);",
											"    }",
											"",
											"    // Garantir que a senha tenha pelo menos 3 caracteres especiais",
											"    for (let i = 0; i < 3; i++) {",
											"        password += getRandomCharacter(caracteresEspeciais);",
											"    }",
											"",
											"    // Garantir que a senha tenha pelo menos 3 caracteres numéricos",
											"    for (let i = 0; i < 3; i++) {",
											"        password += getRandomCharacter(caracteresNumericos);",
											"    }",
											"",
											"    // Preencher os 13 caracteres com caracteres aleatórios dos conjuntos definidos",
											"    while (password.length < 13) {",
											"        let allChars = caracteresMaiuscula + caracteresMinusculo + caracteresEspeciais + caracteresNumericos;",
											"        password += getRandomCharacter(allChars);",
											"    }",
											"",
											"    // Embaralhar a senha",
											"    let shuffledPassword = password.split('').sort(() => Math.random() - 0.5).join('');",
											"",
											"    return shuffledPassword;",
											"}",
											"",
											"// Gerar a senha e salvar no ambiente",
											"const password = generatePassword();",
											"pm.environment.set('DynamicPassword13Caracteres', password);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenAcesso}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"password\": \"{{DynamicPassword13Caracteres}}\",\n    \"confirmPassword\": \"{{DynamicPassword13Caracteres}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/api/user/password/{{IdNewUserUpdate}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"user",
										"password",
										"{{IdNewUserUpdate}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar usuário pelo id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verificar se o status code é 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.environment.set(\"SenhaAtual\", pm.response.json().password)",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenAcesso}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url_base}}/api/user/{{IdNewUserUpdate}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"user",
										"{{IdNewUserUpdate}}"
									],
									"query": [
										{
											"key": "token",
											"value": "{{tokenAcesso}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar senha do usuário enviando 12 caracteres",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verificar se o status code é 200\", function(){",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validar mensagem: 'Senha atualizada com sucesso!'\", function() {",
											"    pm.expect(pm.response.json().msg).to.eql(\"Senha atualizada com sucesso!\");",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let caracteresMaiuscula = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';",
											"let caracteresMinusculo = 'abcdefghijklmnopqrstuvwxyz';",
											"let caracteresEspeciais = '@#$%';",
											"let caracteresNumericos = '123456789'",
											"",
											"// Função para gerar um caractere aleatório de um conjunto",
											"function getRandomCharacter(set) {",
											"    const randomIndex = Math.floor(Math.random() * set.length);",
											"    return set[randomIndex];",
											"}",
											"",
											"// Função para gerar a senha",
											"function generatePassword() {",
											"    let password = '';",
											"",
											"    // Garantir que a senha tenha pelo menos 2 caracteres maiúsculos",
											"    for (let i = 0; i < 2; i++) {",
											"        password += getRandomCharacter(caracteresMaiuscula);",
											"    }",
											"",
											"    // Garantir que a senha tenha pelo menos 3 caracteres minúsculos",
											"    for (let i = 0; i < 3; i++) {",
											"        password += getRandomCharacter(caracteresMinusculo);",
											"    }",
											"",
											"    // Garantir que a senha tenha pelo menos 2 caracteres especiais",
											"    for (let i = 0; i < 2; i++) {",
											"        password += getRandomCharacter(caracteresEspeciais);",
											"    }",
											"",
											"    // Garantir que a senha tenha pelo menos 2 caracteres numéricos",
											"    for (let i = 0; i < 2; i++) {",
											"        password += getRandomCharacter(caracteresNumericos);",
											"    }",
											"",
											"    // Preencher os 12 caracteres com caracteres aleatórios dos conjuntos definidos",
											"    while (password.length < 12) {",
											"        let allChars = caracteresMaiuscula + caracteresMinusculo + caracteresEspeciais + caracteresNumericos;",
											"        password += getRandomCharacter(allChars);",
											"    }",
											"",
											"    // Embaralhar a senha",
											"    let shuffledPassword = password.split('').sort(() => Math.random() - 0.5).join('');",
											"",
											"    return shuffledPassword;",
											"}",
											"",
											"// Gerar a senha e salvar no ambiente",
											"const password = generatePassword();",
											"pm.environment.set('DynamicPassword12Caracteres', password);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenAcesso}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"password\": \"{{DynamicPassword12Caracteres}}\",\n    \"confirmPassword\": \"{{DynamicPassword12Caracteres}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/api/user/password/{{IdNewUserUpdate}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"user",
										"password",
										"{{IdNewUserUpdate}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar usuário pelo id após alterar a senha",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verificar se o status code é 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validar se hash da senha foi alterado\", function () {",
											"     pm.expect(pm.response.json().password).not.to.eql(pm.environment.get(\"SenhaAtual\"))",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenAcesso}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url_base}}/api/user/{{IdNewUserUpdate}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"user",
										"{{IdNewUserUpdate}}"
									],
									"query": [
										{
											"key": "token",
											"value": "{{tokenAcesso}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar senha do usuário sem letras maiúsculas",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verificar se o status code é 400\", function(){",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Validar mensagem: Que a senha está fora do padrão\", function() {",
											"    pm.expect(pm.response.json().error[0]).to.eql(\"Senha precisa ter: uma letra maiúscula, uma letra minúscula, um número, um caractere especial(@#$%) e tamanho entre 8-12.\");",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let caracteresMinusculo = 'abcdefghijklmnopqrstuvwxyz';",
											"let caracteresEspeciais = '@#$%';",
											"let caracteresNumericos = '123456789'",
											"",
											"// Função para gerar um caractere aleatório de um conjunto",
											"function getRandomCharacter(set) {",
											"    const randomIndex = Math.floor(Math.random() * set.length);",
											"    return set[randomIndex];",
											"}",
											"",
											"// Função para gerar a senha",
											"function generatePassword() {",
											"    let password = '';",
											"",
											"    // Garantir que a senha tenha pelo menos 4 caracteres minúsculos",
											"    for (let i = 0; i < 4; i++) {",
											"        password += getRandomCharacter(caracteresMinusculo);",
											"    }",
											"",
											"    // Garantir que a senha tenha pelo menos 2 caracteres especiais",
											"    for (let i = 0; i < 2; i++) {",
											"        password += getRandomCharacter(caracteresEspeciais);",
											"    }",
											"",
											"    // Garantir que a senha tenha pelo menos 3 caracteres numéricos",
											"    for (let i = 0; i < 3; i++) {",
											"        password += getRandomCharacter(caracteresNumericos);",
											"    }",
											"",
											"    // Preencher os 9 caracteres com caracteres aleatórios dos conjuntos definidos",
											"    while (password.length < 9) {",
											"        let allChars = caracteresMinusculo + caracteresEspeciais + caracteresNumericos;",
											"        password += getRandomCharacter(allChars);",
											"    }",
											"",
											"    // Embaralhar a senha",
											"    let shuffledPassword = password.split('').sort(() => Math.random() - 0.5).join('');",
											"",
											"    return shuffledPassword;",
											"}",
											"",
											"// Gerar a senha e salvar no ambiente",
											"const password = generatePassword();",
											"pm.environment.set('DynamicPasswordSemLetrasMaiusculas', password);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenAcesso}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"password\": \"{{DynamicPasswordSemLetrasMaiusculas}}\",\n    \"confirmPassword\": \"{{DynamicPasswordSemLetrasMaiusculas}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/api/user/password/{{IdNewUserUpdate}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"user",
										"password",
										"{{IdNewUserUpdate}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar senha do usuário sem letras minúsculas",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verificar se o status code é 400\", function(){",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Validar mensagem: Que a senha está fora do padrão\", function() {",
											"    pm.expect(pm.response.json().error[0]).to.eql(\"Senha precisa ter: uma letra maiúscula, uma letra minúscula, um número, um caractere especial(@#$%) e tamanho entre 8-12.\");",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let caracteresMaiuscula = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';",
											"let caracteresEspeciais = '@#$%';",
											"let caracteresNumericos = '123456789'",
											"",
											"// Função para gerar um caractere aleatório de um conjunto",
											"function getRandomCharacter(set) {",
											"    const randomIndex = Math.floor(Math.random() * set.length);",
											"    return set[randomIndex];",
											"}",
											"",
											"// Função para gerar a senha",
											"function generatePassword() {",
											"    let password = '';",
											"",
											"    // Garantir que a senha tenha pelo menos 4 caracteres maiúsculos",
											"    for (let i = 0; i < 4; i++) {",
											"        password += getRandomCharacter(caracteresMaiuscula);",
											"    }",
											"",
											"    // Garantir que a senha tenha pelo menos 2 caracteres especiais",
											"    for (let i = 0; i < 2; i++) {",
											"        password += getRandomCharacter(caracteresEspeciais);",
											"    }",
											"",
											"    // Garantir que a senha tenha pelo menos 3 caracteres numéricos",
											"    for (let i = 0; i < 3; i++) {",
											"        password += getRandomCharacter(caracteresNumericos);",
											"    }",
											"",
											"    // Preencher os 9 caracteres com caracteres aleatórios dos conjuntos definidos",
											"    while (password.length < 9) {",
											"        let allChars = caracteresMaiuscula + caracteresEspeciais + caracteresNumericos;",
											"        password += getRandomCharacter(allChars);",
											"    }",
											"",
											"    // Embaralhar a senha",
											"    let shuffledPassword = password.split('').sort(() => Math.random() - 0.5).join('');",
											"",
											"    return shuffledPassword;",
											"}",
											"",
											"// Gerar a senha e salvar no ambiente",
											"const password = generatePassword();",
											"pm.environment.set('DynamicPasswordSemLetrasMinusculas', password);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenAcesso}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"password\": \"{{DynamicPasswordSemLetrasMinusculas}}\",\n    \"confirmPassword\": \"{{DynamicPasswordSemLetrasMinusculas}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/api/user/password/{{IdNewUserUpdate}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"user",
										"password",
										"{{IdNewUserUpdate}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar senha do usuário sem caracteres especiais",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verificar se o status code é 400\", function(){",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Validar mensagem: Que a senha está fora do padrão\", function() {",
											"    pm.expect(pm.response.json().error[0]).to.eql(\"Senha precisa ter: uma letra maiúscula, uma letra minúscula, um número, um caractere especial(@#$%) e tamanho entre 8-12.\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let caracteresMaiuscula = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';",
											"let caracteresMinuscula = 'abcdefghijklmnopqrstuvwxyz';",
											"let caracteresNumericos = '123456789'",
											"",
											"// Função para gerar um caractere aleatório de um conjunto",
											"function getRandomCharacter(set) {",
											"    const randomIndex = Math.floor(Math.random() * set.length);",
											"    return set[randomIndex];",
											"}",
											"",
											"// Função para gerar a senha",
											"function generatePassword() {",
											"    let password = '';",
											"",
											"    // Garantir que a senha tenha pelo menos 3 caracteres maiúsculos",
											"    for (let i = 0; i < 3; i++) {",
											"        password += getRandomCharacter(caracteresMaiuscula);",
											"    }",
											"",
											"    // Garantir que a senha tenha pelo menos 3 caracteres minúsculos",
											"    for (let i = 0; i < 3; i++) {",
											"        password += getRandomCharacter(caracteresMinuscula);",
											"    }",
											"",
											"    // Garantir que a senha tenha pelo menos 3 caracteres numéricos",
											"    for (let i = 0; i < 3; i++) {",
											"        password += getRandomCharacter(caracteresNumericos);",
											"    }",
											"",
											"    // Preencher os 9 caracteres com caracteres aleatórios dos conjuntos definidos",
											"    while (password.length < 9) {",
											"        let allChars = caracteresMaiuscula + caracteresMinuscula + caracteresNumericos;",
											"        password += getRandomCharacter(allChars);",
											"    }",
											"",
											"    // Embaralhar a senha",
											"    let shuffledPassword = password.split('').sort(() => Math.random() - 0.5).join('');",
											"",
											"    return shuffledPassword;",
											"}",
											"",
											"// Gerar a senha e salvar no ambiente",
											"const password = generatePassword();",
											"pm.environment.set('DynamicPasswordSemCaracteresEspeciais', password);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenAcesso}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"password\": \"{{DynamicPasswordSemCaracteresEspeciais}}\",\n    \"confirmPassword\": \"{{DynamicPasswordSemCaracteresEspeciais}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/api/user/password/{{IdNewUserUpdate}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"user",
										"password",
										"{{IdNewUserUpdate}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar senha do usuário sem números",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verificar se o status code é 400\", function(){",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Validar mensagem: Que a senha está fora do padrão\", function() {",
											"    pm.expect(pm.response.json().error[0]).to.eql(\"Senha precisa ter: uma letra maiúscula, uma letra minúscula, um número, um caractere especial(@#$%) e tamanho entre 8-12.\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let caracteresMaiuscula = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';",
											"let caracteresMinuscula = 'abcdefghijklmnopqrstuvwxyz';",
											"let caracteresEspeciais = '@#$%'",
											"",
											"// Função para gerar um caractere aleatório de um conjunto",
											"function getRandomCharacter(set) {",
											"    const randomIndex = Math.floor(Math.random() * set.length);",
											"    return set[randomIndex];",
											"}",
											"",
											"// Função para gerar a senha",
											"function generatePassword() {",
											"    let password = '';",
											"",
											"    // Garantir que a senha tenha pelo menos 3 caracteres maiúsculos",
											"    for (let i = 0; i < 3; i++) {",
											"        password += getRandomCharacter(caracteresMaiuscula);",
											"    }",
											"",
											"    // Garantir que a senha tenha pelo menos 3 caracteres minúsculos",
											"    for (let i = 0; i < 3; i++) {",
											"        password += getRandomCharacter(caracteresMinuscula);",
											"    }",
											"",
											"    // Garantir que a senha tenha pelo menos 3 caracteres especiais",
											"    for (let i = 0; i < 3; i++) {",
											"        password += getRandomCharacter(caracteresEspeciais);",
											"    }",
											"",
											"    // Preencher os 9 caracteres com caracteres aleatórios dos conjuntos definidos",
											"    while (password.length < 9) {",
											"        let allChars = caracteresMaiuscula + caracteresMinuscula + caracteresEspeciais;",
											"        password += getRandomCharacter(allChars);",
											"    }",
											"",
											"    // Embaralhar a senha",
											"    let shuffledPassword = password.split('').sort(() => Math.random() - 0.5).join('');",
											"",
											"    return shuffledPassword;",
											"}",
											"",
											"// Gerar a senha e salvar no ambiente",
											"const password = generatePassword();",
											"pm.environment.set('DynamicPasswordSemNumeros', password);",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenAcesso}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"password\": \"{{DynamicPasswordSemNumeros}}\",\n    \"confirmPassword\": \"{{DynamicPasswordSemNumeros}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/api/user/password/{{IdNewUserUpdate}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"user",
										"password",
										"{{IdNewUserUpdate}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar senha do usuário enviando o valor da senha em branco",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verificar se o setatus code é 400\", function(){",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Validar mensagem: 'O campo senha é obrigatório.'\", function() {",
											"    pm.expect(pm.response.json().error[0]).to.eql(\"O campo senha é obrigatório.\");",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenAcesso}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"password\": \"\",\n    \"confirmPassword\": \"{{DynamicPassword}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/api/user/password/{{IdNewUserUpdate}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"user",
										"password",
										"{{IdNewUserUpdate}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar senha do usuário enviando caracteres não permitido pela regra de negócio",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verificar se o setatus code é 400\", function(){",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Validar mensagem: Que a senha está fora do padrão\", function() {",
											"    pm.expect(pm.response.json().error[0]).to.eql(\"Senha precisa ter: uma letra maiúscula, uma letra minúscula, um número, um caractere especial(@#$%) e tamanho entre 8-12.\");",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let caracteresMaiuscula = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';",
											"let caracteresMinusculo = 'abcdefghijklmnopqrstuvwxyz';",
											"let caracteresEspeciais = '&*!(-_)';",
											"let caracteresNumericos = '123456789'",
											"",
											"// Função para gerar um caractere aleatório de um conjunto",
											"function getRandomCharacter(set) {",
											"    const randomIndex = Math.floor(Math.random() * set.length);",
											"    return set[randomIndex];",
											"}",
											"",
											"// Função para gerar a senha",
											"function generatePassword() {",
											"    let password = '';",
											"",
											"    // Garantir que a senha tenha pelo menos 2 caracteres maiúsculos",
											"    for (let i = 0; i < 2; i++) {",
											"        password += getRandomCharacter(caracteresMaiuscula);",
											"    }",
											"",
											"    // Garantir que a senha tenha pelo menos 3 caracteres minúsculos",
											"    for (let i = 0; i < 3; i++) {",
											"        password += getRandomCharacter(caracteresMinusculo);",
											"    }",
											"",
											"    // Garantir que a senha tenha pelo menos 1 caractere especial",
											"    password += getRandomCharacter(caracteresEspeciais);",
											"",
											"    // Garantir que a senha tenha pelo menos 1 caractere numérico",
											"    password += getRandomCharacter(caracteresNumericos);",
											"",
											"    // Preencher os 10 caracteres com caracteres aleatórios dos conjuntos definidos",
											"    while (password.length < 10) {",
											"        let allChars = caracteresMaiuscula + caracteresMinusculo + caracteresEspeciais + caracteresNumericos;",
											"        password += getRandomCharacter(allChars);",
											"    }",
											"",
											"    // Embaralhar a senha",
											"    let shuffledPassword = password.split('').sort(() => Math.random() - 0.5).join('');",
											"",
											"    return shuffledPassword;",
											"}",
											"",
											"// Gerar a senha e salvar no ambiente",
											"const password = generatePassword();",
											"pm.environment.set('DynamicPasswordOutrosCaracteres', password);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenAcesso}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"password\": \"{{DynamicPasswordOutrosCaracteres}}\",\n    \"confirmPassword\": \"{{DynamicPasswordOutrosCaracteres}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/api/user/password/{{IdNewUserUpdate}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"user",
										"password",
										"{{IdNewUserUpdate}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar senha do usuário enviando valor de confirmar senha em branco",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verificar se o status code é 400\", function(){",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Validar mensagem: 'O campo de confirmação de senha é obrigatório.'\", function() {",
											"    pm.expect(pm.response.json().error[0]).to.eql(\"O campo de confirmação de senha é obrigatório.\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let caracteresMaiuscula = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';",
											"let caracteresMinusculo = 'abcdefghijklmnopqrstuvwxyz';",
											"let caracteresEspeciais = '@#$%';",
											"let caracteresNumericos = '123456789'",
											"",
											"// Função para gerar um caractere aleatório de um conjunto",
											"function getRandomCharacter(set) {",
											"    const randomIndex = Math.floor(Math.random() * set.length);",
											"    return set[randomIndex];",
											"}",
											"",
											"// Função para gerar a senha",
											"function generatePassword() {",
											"    let password = '';",
											"",
											"    // Garantir que a senha tenha pelo menos 2 caracteres maiúsculos",
											"    for (let i = 0; i < 2; i++) {",
											"        password += getRandomCharacter(caracteresMaiuscula);",
											"    }",
											"",
											"    // Garantir que a senha tenha pelo menos 3 caracteres minúsculos",
											"    for (let i = 0; i < 3; i++) {",
											"        password += getRandomCharacter(caracteresMinusculo);",
											"    }",
											"",
											"    // Garantir que a senha tenha pelo menos 1 caractere especial",
											"    password += getRandomCharacter(caracteresEspeciais);",
											"",
											"    // Garantir que a senha tenha pelo menos 1 caractere numérico",
											"    password += getRandomCharacter(caracteresNumericos);",
											"",
											"    // Preencher os 10 caracteres com caracteres aleatórios dos conjuntos definidos",
											"    while (password.length < 10) {",
											"        let allChars = caracteresMaiuscula + caracteresMinusculo + caracteresEspeciais + caracteresNumericos;",
											"        password += getRandomCharacter(allChars);",
											"    }",
											"",
											"    // Embaralhar a senha",
											"    let shuffledPassword = password.split('').sort(() => Math.random() - 0.5).join('');",
											"",
											"    return shuffledPassword;",
											"}",
											"",
											"// Gerar a senha e salvar no ambiente",
											"const password = generatePassword();",
											"pm.environment.set('DynamicPassword', password);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenAcesso}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"password\": \"{{DynamicPassword}}\",\n    \"confirmPassword\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/api/user/password/{{IdNewUserUpdate}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"user",
										"password",
										"{{IdNewUserUpdate}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar senha do usuário enviando valores diferentes nos campos senha e confirmar senha.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verificar se o status code é 400\", function(){",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Validar mensagem: 'As senhas não conferem'\", function() {",
											"    pm.expect(pm.response.json().error[0]).to.eql(\"As senhas não conferem.\");",
											"})",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let caracteresMaiuscula = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';",
											"let caracteresMinusculo = 'abcdefghijklmnopqrstuvwxyz';",
											"let caracteresEspeciais = '@#$%';",
											"let caracteresNumericos = '123456789'",
											"",
											"// Função para gerar um caractere aleatório de um conjunto",
											"function getRandomCharacter(set) {",
											"    const randomIndex = Math.floor(Math.random() * set.length);",
											"    return set[randomIndex];",
											"}",
											"",
											"// Função para gerar a senha",
											"function generatePassword() {",
											"    let password = '';",
											"",
											"    // Garantir que a senha tenha pelo menos 2 caracteres maiúsculos",
											"    for (let i = 0; i < 2; i++) {",
											"        password += getRandomCharacter(caracteresMaiuscula);",
											"    }",
											"",
											"    // Garantir que a senha tenha pelo menos 3 caracteres minúsculos",
											"    for (let i = 0; i < 3; i++) {",
											"        password += getRandomCharacter(caracteresMinusculo);",
											"    }",
											"",
											"    // Garantir que a senha tenha pelo menos 1 caractere especial",
											"    password += getRandomCharacter(caracteresEspeciais);",
											"",
											"    // Garantir que a senha tenha pelo menos 1 caractere numérico",
											"    password += getRandomCharacter(caracteresNumericos);",
											"",
											"    // Preencher os 10 caracteres com caracteres aleatórios dos conjuntos definidos",
											"    while (password.length < 10) {",
											"        let allChars = caracteresMaiuscula + caracteresMinusculo + caracteresEspeciais + caracteresNumericos;",
											"        password += getRandomCharacter(allChars);",
											"    }",
											"",
											"    // Embaralhar a senha",
											"    let shuffledPassword = password.split('').sort(() => Math.random() - 0.5).join('');",
											"",
											"    return shuffledPassword;",
											"}",
											"",
											"// Gerar a senha e salvar no ambiente",
											"const password = generatePassword();",
											"pm.environment.set('DynamicPassword', password);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenAcesso}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"password\": \"{{DynamicPassword}}\",\n    \"confirmPassword\": \"1234@Test\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/api/user/password/{{IdNewUserUpdate}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"user",
										"password",
										"{{IdNewUserUpdate}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Edita Nome e E-mail /api/user/{id}",
					"item": [
						{
							"name": "Login Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"tokenAcesso\",pm.response.json().token)",
											"pm.environment.set(\"_IdAdminTest\", pm.response.json().user._id)",
											"pm.environment.set(\"MailAdminTest\", pm.response.json().user.mail)",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"mail\": \"{{TestUserEmail}}\",\r\n    \"password\": \"{{TestUserPassword}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/api/login/",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"login",
										""
									]
								},
								"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/login/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"mail\": \"sysadmin@qacoders.com\",\r\n  \"password\": \"1234@Test\"\r\n}'"
							},
							"response": []
						},
						{
							"name": "Cadastrar novo usuário sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"IdNewUserUpdate\", pm.response.json().user._id);",
											"pm.environment.set(\"FullNameNewUserUpdate\", pm.response.json().user.fullName);",
											"pm.environment.set(\"MailNewUserUpdate\", pm.response.json().user.mail);",
											"pm.environment.set(\"AccessProfilelNewUserUpdate\", pm.response.json().user.accessProfile);",
											"pm.environment.set(\"CPFNewUserUpdate\", pm.response.json().user.cpf);",
											"pm.environment.set(\"StatusNewUserUpdate\", pm.response.json().user.status);",
											"pm.environment.set(\"RegistrationDate\", pm.response.json().user.audit[0].registrationDate)",
											"pm.environment.set(\"RegistrationNumber\", pm.response.json().user.audit[0].registrationNumber)",
											"pm.environment.set(\"RegistrationId\", pm.response.json().user.audit[0]._id)",
											"",
											"",
											"",
											"pm.test(\"Veriificar se o status é 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Validar mensagem de sucesso\", function () {",
											"    pm.expect(pm.response.json().msg).to.eql(\"Olá \" + pm.environment.get(\"FullName\") + \", cadastro realizado com sucesso.\");",
											"});",
											"",
											"pm.test(\"Validar se fullName do request e o mesmo do response\", function () {",
											"    pm.expect(pm.response.json().user.fullName).to.eql(pm.environment.get(\"FullName\"));",
											"});",
											"",
											"pm.test(\"Validar se mail do request e o mesmo do response\", function () {",
											"    pm.expect(pm.response.json().user.mail).to.eql(pm.environment.get(\"NewUserEmail\"));",
											"});",
											"",
											"pm.test(\"Validar se CPF do request e o mesmo do response\", function () {",
											"    pm.expect(pm.response.json().user.cpf).to.eql(pm.environment.get(\"CPF\"));",
											"});",
											"",
											"pm.test(\"Validar se status é true\", function () {",
											"    pm.expect(pm.response.json().user.status).to.eql(true);",
											"});",
											"",
											"pm.test(\"Validar que id adminTest é o mesmo userId da auditoria\", function () {",
											"     pm.expect(pm.response.json().user.audit[0].registeredBy.userId).to.eql(pm.environment.get(\"_IdAdminTest\"));",
											"});",
											"",
											"pm.test(\"Validar que e-mail AdminTest é o mesmo userLogin da auditoria\", function () {",
											"     pm.expect(pm.response.json().user.audit[0].registeredBy.userLogin).to.eql(pm.environment.get(\"MailAdminTest\"));",
											"});",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function gerarCpf() {",
											"  const num1 = aleatorio(); ",
											"  const num2 = aleatorio();",
											"  const num3 = aleatorio();",
											"  const dig1 = dig(num1, num2, num3); ",
											"  const dig2 = dig(num1, num2, num3, dig1);",
											"  return `${num1}${num2}${num3}${dig1}${dig2}`;",
											"}",
											" ",
											"function dig(n1, n2, n3, n4) {",
											"  const nums = n1.split(\"\").concat(n2.split(\"\"), n3.split(\"\"));",
											"  if (n4 !== undefined){ ",
											"    nums[9] = n4;",
											"  }",
											"  let x = 0;",
											"  for (let i = (n4 !== undefined ? 11:10), j = 0; i >= 2; i--, j++) {",
											"    x += parseInt(nums[j]) * i;",
											"  }",
											"  const y = x % 11;",
											"  return y < 2 ? 0 : 11 - y;",
											"}",
											"",
											"function aleatorio() {",
											"  const aleat = Math.floor(Math.random() * 999);",
											"  return (\"\" + aleat).padStart(3, '0');",
											"}",
											"pm.environment.set(\"CPF\", gerarCpf());",
											"",
											"function firstName() {",
											"    let firstName = nomes = [",
											"    \"Andre\", \"Luiza\", \"Vanessa\", \"Lula\", \"Carlos\", \"Maria\", \"João\", \"Paula\", ",
											"    \"Ana\", \"Pedro\", \"Lucas\", \"Beatriz\", \"Felipe\", \"Camila\", \"Gabriel\", \"Juliana\", ",
											"    \"Rafael\", \"Fernanda\", \"Ricardo\", \"Larissa\", \"Gustavo\", \"Mariana\", \"Eduardo\", ",
											"    \"Renata\", \"Victor\", \"Simone\", \"Sofia\", \"Bruno\", \"Isabela\", \"Mário\", \"Tatiane\", ",
											"    \"Júlio\", \"Tânia\", \"Sérgio\", \"Luciana\", \"Thiago\", \"Cláudia\", \"Hugo\", \"Giovana\", ",
											"    \"César\", \"Larissa\", \"Marcelo\", \"Elaine\", \"Vitor\", \"Mônica\", \"Alexandre\", \"Letícia\", ",
											"    \"Daniel\", \"Carla\", \"Fernando\", \"Patrícia\", \"Sérgio\", \"Viviane\", \"Marcos\", \"Cíntia\", ",
											"    \"Roberto\", \"Kátia\", \"Diogo\", \"Marília\", \"Túlio\", \"Paulo\", \"Adriana\", \"Jaqueline\", ",
											"    \"Reginaldo\", \"Sílvia\", \"Renato\", \"Isis\", \"Sônia\", \"Alexia\", \"Aline\", \"Rogério\", ",
											"    \"Tatiane\", \"Ricardo\", \"Gisele\", \"Fábio\", \"Eunice\", \"Raul\", \"Milene\", \"Ricardo\", ",
											"    \"Marcelo\", \"Daniela\", \"Kelly\", \"Cássio\", \"Cláudia\", \"Francisco\", \"Alessandra\", ",
											"    \"Gisele\", \"Gustavo\", \"Clara\", \"Tatiane\", \"Joana\", \"Carlos\", \"Aline\", \"Viviane\", ",
											"    \"Júlia\", \"André\", \"Luciano\", \"Alicia\", \"Eliane\", \"Marcio\", \"Rogério\", \"Eliete\", ",
											"    \"Jéssica\", \"Simone\", \"Thiago\", \"Luiz\", \"Carlos\", \"Rafaela\", \"Marcela\", \"Jonas\", ",
											"    \"Lúcia\", \"Marcos\", \"Sônia\", \"Eduarda\", \"Livia\"",
											"]",
											"    let randomItem = firstName[Math.floor(Math.random() * firstName.length)];",
											"    return randomItem;",
											"}",
											"pm.environment.set(\"FirstName\", firstName());",
											"",
											"function lastName() {",
											"    var lastName = [",
											"    \"Silva\", \"Santos\", \"Oliveira\", \"Pereira\", \"Costa\", \"Rodrigues\", \"Almeida\", ",
											"    \"Martins\", \"Souza\", \"Lima\", \"Gomes\", \"Ribeiro\", \"Carvalho\", \"Fernandes\", \"Araujo\", ",
											"    \"Barbosa\", \"Melo\", \"Dias\", \"Cavalcanti\", \"Nascimento\", \"Pinto\", \"Vieira\", \"Teixeira\", ",
											"    \"Ramos\", \"Faria\", \"Moura\", \"Campos\", \"Machado\", \"Monteiro\", \"Santiago\", \"Nascimento\", ",
											"    \"Brandão\", \"Cunha\", \"Freitas\", \"Serrano\", \"Queiroz\", \"Duarte\", \"Mendes\", \"Cardoso\", ",
											"    \"Lopes\", \"Martins\", \"Batista\", \"Siqueira\", \"Moreira\", \"Figueiredo\", \"Andrade\", \"Araújo\", ",
											"    \"Borges\", \"Lima\", \"Cunha\", \"Costa\", \"Batista\", \"Correia\", \"Silveira\", \"Bastos\", \"Leal\", ",
											"    \"Ferreira\", \"Gonçalves\", \"Tavares\", \"Queiroz\", \"Lima\", \"Campos\", \"Carneiro\", \"Santos\", ",
											"    \"Vasconcelos\", \"Vieira\", \"Farias\", \"Souza\", \"Pereira\", \"Tavares\", \"Silva\", \"Alves\", ",
											"    \"Xavier\", \"Soares\", \"Barbosa\", \"Lima\", \"Menezes\", \"Ribeiro\", \"Pimentel\", \"Santos\", ",
											"    \"Dias\", \"Castro\", \"Melo\", \"Pinto\", \"Machado\", \"Pinheiro\", \"Guerra\", \"Alves\", ",
											"    \"Freitas\", \"Cavalcanti\", \"Montez\", \"Pereira\", \"Gomes\", \"Santos\", \"Costa\", ",
											"    \"Ribeiro\", \"Teixeira\", \"Azevedo\", \"Martins\", \"Ramos\", \"Ribeiro\", \"Cardoso\", \"Lima\", ",
											"    \"Monteiro\", \"Leão\", \"Lopes\", \"Melo\", \"Brandão\", \"Borges\", \"Ribeiro\", \"Moraes\", ",
											"    \"Figueira\", \"Silva\", \"Tavares\", \"Cavalcante\", \"Mendes\", \"Siqueira\", \"Machado\"",
											"]",
											"",
											"    let randomItem = lastName[Math.floor(Math.random() * lastName.length)];",
											"    return randomItem;",
											"}",
											"pm.environment.set(\"LastName\", lastName());",
											"",
											"pm.environment.set(\"FullName\", pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"));",
											"",
											"let name = pm.environment.get(\"FullName\");",
											"",
											"function fullNameFormat(str) {",
											"  return str",
											"    .normalize('NFD') // Normaliza a string para decompor os caracteres acentuados",
											"    .replace(/[\\u0300-\\u036f]/g, '') // Remove os caracteres acentuados",
											"    .replace(/\\s+/g, '') // Remove os espaços em branco",
											"    .toLowerCase(); // Converte para minúsculas",
											"}",
											"",
											"function provedorEmail () {",
											"    let provedorEmail = [",
											"        \"@gmail.com\", \"@outlook.com\", \"@yahoo.com\", \"@gmail.com.br\", \"@hotmail.com.br\", \"@uol.com.br\", \"@bol.com.br\", \"@terra.br\", \"@oi.com.br\", \"@empresa.com.br\", \"@universidade.edu.br\"",
											"    ]",
											"    let randomItem = provedorEmail[Math.floor(Math.random() * provedorEmail.length)];",
											"    return randomItem;",
											"}",
											"",
											"pm.environment.set(\"NewUserEmail\", fullNameFormat(name) + provedorEmail());",
											"",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"fullName\": \"{{FullName}}\",\n  \"mail\": \"{{NewUserEmail}}\",\n  \"accessProfile\": \"ADMIN\",\n  \"cpf\": \"{{CPF}}\",\n  \"password\": \"{{NewUserPassword}}\",\n  \"confirmPassword\": \"{{NewUserPassword}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/api/user?token={{tokenAcesso}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"user"
									],
									"query": [
										{
											"key": "token",
											"value": "{{tokenAcesso}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar usuário pelo id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verificar se o status code é 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validar se userId é o mesmo do cadastro\", function () {",
											"    pm.expect(pm.response.json()._id).to.eql(pm.environment.get(\"IdNewUserUpdate\"));",
											"});",
											"",
											"pm.test(\"Validar se fullName é o mesmo do cadastro\", function () {",
											"    pm.expect(pm.response.json().fullName).to.eql(pm.environment.get(\"FullName\"));",
											"});",
											"",
											"pm.test(\"Validar se e-mail é o mesmo do cadastro\", function () {",
											"    pm.expect(pm.response.json().mail).to.eql(pm.environment.get(\"NewUserEmail\"));",
											"});",
											"",
											"pm.test(\"Validar se accessProfile é o mesmo do cadastro\", function () {",
											"    pm.expect(pm.response.json().accessProfile).to.eql(pm.environment.get(\"AccessProfilelNewUserUpdate\"));",
											"});",
											"",
											"pm.test(\"Validar se CPF é o mesmo do cadastro\", function () {",
											"    pm.expect(pm.response.json().cpf).to.eql(pm.environment.get(\"CPFNewUserUpdate\"));",
											"});",
											"",
											"pm.test(\"Validar se status é o mesmo do cadastro\", function () {",
											"    pm.expect(pm.response.json().status).to.eql(pm.environment.get(\"StatusNewUserUpdate\"));",
											"});",
											"",
											"",
											"pm.test(\"Validar userId do campo registeredBy é o mesmo id do AdminTest\", function (){",
											"    pm.expect(pm.response.json().audit[0].registeredBy.userId).to.eql(pm.environment.get(\"_IdAdminTest\"));",
											"});",
											"",
											"pm.test(\"Validar userLogin do campo registeredBy é o mesmo e-mail do AdminTest\", function (){",
											"    pm.expect(pm.response.json().audit[0].registeredBy.userLogin).to.eql(pm.environment.get(\"MailAdminTest\"));",
											"});",
											"",
											"",
											"pm.test(\"Validar registrationDate da audit é o mesmo do cadastro\", function (){",
											"    pm.expect(pm.response.json().audit[0].registrationDate).to.eql(pm.environment.get(\"RegistrationDate\"));",
											"});",
											"",
											"pm.test(\"Validar registrationNumber da audit é o mesmo do cadastro\", function (){",
											"    pm.expect(pm.response.json().audit[0].registrationNumber).to.eql(pm.environment.get(\"RegistrationNumber\"));",
											"});",
											"",
											"pm.test(\"Validar registrationId da audit é o mesmo do cadastro\", function (){",
											"    pm.expect(pm.response.json().audit[0]._id).to.eql(pm.environment.get(\"RegistrationId\"));",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenAcesso}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url_base}}/api/user/{{IdNewUserUpdate}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"user",
										"{{IdNewUserUpdate}}"
									],
									"query": [
										{
											"key": "token",
											"value": "{{tokenAcesso}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar cadastro de usuário com sucesso",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function editarSobreNome() {",
											"    var editarSobreNome = [",
											"    \"dos Santos\", \"da Silva\", \"da Mota\", \"de Figueiredo\", \"dos Anjos\", ",
											"    \"da Costa\", \"de Almeida\", \"dos Reis\", \"da Rocha\", \"de Oliveira\", ",
											"    \"dos Santos Silva\", \"da Luz\", \"de Souza\", \"da Cunha\", \"dos Santos Costa\", ",
											"    \"da Paz\", \"de Carvalho\", \"dos Santos Lima\", \"da Silva Ribeiro\", \"de Sá\", ",
											"    \"da Cunha Oliveira\", \"de Moraes\", \"dos Santos Rodrigues\", \"da Silva Oliveira\", ",
											"    \"de Castro\", \"dos Santos Alves\", \"da Silva Costa\", \"de Lima\", \"da Rocha Silva\", ",
											"    \"de Andrade\", \"dos Santos Pereira\", \"da Silva Ferreira\", \"de Macedo\", \"da Silva Martins\", ",
											"    \"de Brito\", \"da Silva Barros\", \"dos Santos Cardoso\", \"da Silva Santana\", \"de Araújo\", ",
											"    \"dos Santos Gomes\", \"da Silva Campos\", \"de Medeiros\", \"da Silva Souza\", \"de Oliveira Lima\", ",
											"    \"dos Santos Tavares\", \"da Silva Nogueira\", \"de Lima Souza\", \"dos Santos Pires\", \"da Silva Brito\", ",
											"    \"de Bastos\"",
											"]",
											"",
											"    let randomItem = editarSobreNome[Math.floor(Math.random() * editarSobreNome.length)];",
											"    return randomItem;",
											"}",
											"",
											"pm.environment.set(\"EditarFullName\", pm.environment.get(\"FullName\") + \" \" + editarSobreNome());",
											"",
											"console.log(pm.environment.get(\"FullName\"))",
											"",
											"function criarEmail(nomeCompleto) {",
											"    // Função para escolher um domínio aleatório",
											"    function dominio() {",
											"        const dominios = [",
											"            \"@gmail.com\",",
											"            \"@gmail.com.br\",",
											"            \"@uol.br\",",
											"            \"@hotmail.com\",",
											"            \"@outlook.com\",",
											"            \"@yahoo.com\",",
											"            \"@yahoo.com.br\",",
											"            \"@live.com\",",
											"            \"@icloud.com\",",
											"            \"@bol.com.br\",",
											"            \"@terra.com.br\"",
											"        ];",
											"        let randomItem = dominios[Math.floor(Math.random() * dominios.length)]; // Acessando corretamente o array",
											"        return randomItem;",
											"    }",
											"",
											"    const nomes = nomeCompleto.split(\" \");",
											"    const primeiroNome = nomes[0].normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\").toLowerCase();",
											"    const ultimoNome = nomes[nomes.length - 1].normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\").toLowerCase();",
											"    const email = primeiroNome + \".\" + ultimoNome + dominio(); // Chamando a função dominio()",
											"    return email;",
											"}",
											"",
											"// Exemplo de uso:",
											"const nomeCompleto = pm.environment.get(\"EditarFullName\")",
											"const email = criarEmail(nomeCompleto);",
											"",
											"pm.environment.set(\"EditarEmail\", email)",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verificar se o status code é 200\", function(){",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validar mensagem: Dados atualizados com sucesso!\",function(){",
											"    pm.expect(pm.response.json().msg).to.equal(\"Dados atualizados com sucesso!\");",
											"});",
											"",
											"pm.test(\"Validar se userId e o mesmo do cadastro\", function () {",
											"    pm.expect(pm.response.json().updatedUser._id).to.eql(pm.environment.get(\"IdNewUserUpdate\"));",
											"});",
											"",
											"pm.test(\"Validar se fullName está diferente do fullName do cadastro\", function () {",
											"    pm.expect(pm.response.json().updatedUser.fullName).not.to.eql(pm.environment.get(\"FullNameNewUserUpdate\"));",
											"});",
											"",
											"pm.test(\"Validar se e-mail está diferente do e-mail do cadastro\", function () {",
											"    pm.expect(pm.response.json().updatedUser.mail).not.to.eql(pm.environment.get(\"MailNewUserUpdate\"));",
											"});",
											"",
											"pm.test(\"Validar se accessProfile é o mesmo do cadastro\", function () {",
											"    pm.expect(pm.response.json().updatedUser.accessProfile).to.eql(pm.environment.get(\"AccessProfilelNewUserUpdate\"));",
											"});",
											"",
											"pm.test(\"Validar se CPF é o mesmo do cadastro\", function () {",
											"    pm.expect(pm.response.json().updatedUser.cpf).to.eql(pm.environment.get(\"CPFNewUserUpdate\"));",
											"});",
											"",
											"pm.test(\"Validar se status é o mesmo do cadastro\", function () {",
											"    pm.expect(pm.response.json().updatedUser.status).to.eql(pm.environment.get(\"StatusNewUserUpdate\"));",
											"});",
											"",
											"",
											"pm.test(\"Validar userId do campo registeredBy é o mesmo id do AdminTest\", function (){",
											"    pm.expect(pm.response.json().updatedUser.audit[0].registeredBy.userId).to.eql(pm.environment.get(\"_IdAdminTest\"));",
											"});",
											"",
											"pm.test(\"Validar userLogin do campo registeredBy é o mesmo e-mail do AdminTest\", function (){",
											"    pm.expect(pm.response.json().updatedUser.audit[0].registeredBy.userLogin).to.eql(pm.environment.get(\"MailAdminTest\"));",
											"});",
											"",
											"",
											"pm.test(\"Validar registrationDate da audit é o mesmo do cadastro\", function (){",
											"    pm.expect(pm.response.json().updatedUser.audit[0].registrationDate).to.eql(pm.environment.get(\"RegistrationDate\"));",
											"});",
											"",
											"pm.test(\"Validar registrationNumber da audit é o mesmo do cadastro\", function (){",
											"    pm.expect(pm.response.json().updatedUser.audit[0].registrationNumber).to.eql(pm.environment.get(\"RegistrationNumber\"));",
											"});",
											"",
											"pm.test(\"Validar registrationId da audit é o mesmo do cadastro\", function (){",
											"    pm.expect(pm.response.json().updatedUser.audit[0]._id).to.eql(pm.environment.get(\"RegistrationId\"));",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenAcesso}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"fullName\": \"{{EditarFullName}}\",\n    \"mail\": \"{{EditarEmail}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/api/user/{{IdNewUserUpdate}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"user",
										"{{IdNewUserUpdate}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Usuário editado com sucesso busca pelo id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verificar se o status code é 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validar se userId é o mesmo do cadastro\", function () {",
											"    pm.expect(pm.response.json()._id).to.eql(pm.environment.get(\"IdNewUserUpdate\"));",
											"});",
											"",
											"pm.test(\"Validar se fullName é o mesmo fullName que foi editado\", function () {",
											"    pm.expect(pm.response.json().fullName).to.eql(pm.environment.get(\"EditarFullName\"));",
											"});",
											"",
											"pm.test(\"Validar se e-mail é o mesmo e-mail que foi editado\", function () {",
											"    pm.expect(pm.response.json().mail).to.eql(pm.environment.get(\"EditarEmail\"));",
											"});",
											"",
											"pm.test(\"Validar se accessProfile é o mesmo do cadastro\", function () {",
											"    pm.expect(pm.response.json().accessProfile).to.eql(pm.environment.get(\"AccessProfilelNewUserUpdate\"));",
											"});",
											"",
											"pm.test(\"Validar se CPF é o mesmo do cadastro\", function () {",
											"    pm.expect(pm.response.json().cpf).to.eql(pm.environment.get(\"CPFNewUserUpdate\"));",
											"});",
											"",
											"pm.test(\"Validar se status é o mesmo do cadastro\", function () {",
											"    pm.expect(pm.response.json().status).to.eql(pm.environment.get(\"StatusNewUserUpdate\"));",
											"});",
											"",
											"",
											"pm.test(\"Validar userId do campo registeredBy é o mesmo id do AdminTest\", function (){",
											"    pm.expect(pm.response.json().audit[0].registeredBy.userId).to.eql(pm.environment.get(\"_IdAdminTest\"));",
											"});",
											"",
											"pm.test(\"Validar userLogin do campo registeredBy é o mesmo e-mail do AdminTest\", function (){",
											"    pm.expect(pm.response.json().audit[0].registeredBy.userLogin).to.eql(pm.environment.get(\"MailAdminTest\"));",
											"});",
											"",
											"",
											"pm.test(\"Validar registrationDate da audit é o mesmo do cadastro\", function (){",
											"    pm.expect(pm.response.json().audit[0].registrationDate).to.eql(pm.environment.get(\"RegistrationDate\"));",
											"});",
											"",
											"pm.test(\"Validar registrationNumber da audit é o mesmo do cadastro\", function (){",
											"    pm.expect(pm.response.json().audit[0].registrationNumber).to.eql(pm.environment.get(\"RegistrationNumber\"));",
											"});",
											"",
											"pm.test(\"Validar registrationId da audit é o mesmo do cadastro\", function (){",
											"    pm.expect(pm.response.json().audit[0]._id).to.eql(pm.environment.get(\"RegistrationId\"));",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenAcesso}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url_base}}/api/user/{{IdNewUserUpdate}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"user",
										"{{IdNewUserUpdate}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar e-mail do usuário com formato inválido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verificar se o status code é 400\", function(){",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Validar mensagem de error\", function() {",
											"    pm.expect(pm.response.json().error[0]).to.eql(\"O e-mail informado é inválido. Informe um e-mail no formato [nome@domínio.com].\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenAcesso}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"fullName\": \"{{FullName}}\",\n    \"mail\": \"{{InvalidMail}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/api/user/{{IdNewUserUpdate}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"user",
										"{{IdNewUserUpdate}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar e-mail do usuário enviando o valor em branco",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verificar se o status code é 400\", function(){",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Validar mensagem de error\", function() {",
											"    pm.expect(pm.response.json().error[0]).to.eql(\"O campo e-mail é obrigatório.\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenAcesso}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"fullName\": \"{{FullName}}\",\n    \"mail\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/api/user/{{IdNewUserUpdate}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"user",
										"{{IdNewUserUpdate}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar e-mail do usuário enviando um espaço entre o domínio do e-mail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verificar se o status code é 400\", function(){",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Validar mensagem de error\", function() {",
											"    pm.expect(pm.response.json().error[0]).to.eql(\"O e-mail informado é inválido. Informe um e-mail no formato [nome@domínio.com].\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenAcesso}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"fullName\": \"{{FullName}}\",\n    \"mail\": \"{{MailDomainWithSpace}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/api/user/{{IdNewUserUpdate}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"user",
										"{{IdNewUserUpdate}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar nome do usuário enviando apenas o primeiro nome",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verificar se o status code é 400\", function(){",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Validar mensagem de erro\", function() {",
											"    pm.expect(pm.response.json().error[0]).to.eql(\"Informe o nome e sobrenome com as iniciais em letra maiúscula e sem caracteres especiais.\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenAcesso}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"fullName\": \"{{FirstName}}\",\n    \"mail\": \"{{NewUserEmail}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/api/user/{{IdNewUserUpdate}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"user",
										"{{IdNewUserUpdate}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar nome do usuário enviando letras minúsculas",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verificar se o status code é 400\", function(){",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Validar mensagem de erro\", function() {",
											"    pm.expect(pm.response.json().error[0]).to.eql(\"Informe o nome e sobrenome com as iniciais em letra maiúscula e sem caracteres especiais.\");",
											"})",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenAcesso}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"fullName\": \"{{FullNameLetrasMinusculas}}\",\n    \"mail\": \"{{EditarEmail}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/api/user/{{IdNewUserUpdate}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"user",
										"{{IdNewUserUpdate}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar nome do usuário enviando nome com caracteres especiais",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verificar se o status code é 400\", function(){",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Validar mensagem de erro\", function() {",
											"    pm.expect(pm.response.json().error[0]).to.eql(\"Informe o nome e sobrenome com as iniciais em letra maiúscula e sem caracteres especiais.\");",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenAcesso}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"fullName\": \"{{FullNameComCaracteresEspeciais}}\",\n    \"mail\": \"{{EditarEmail}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/api/user/{{IdNewUserUpdate}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"user",
										"{{IdNewUserUpdate}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar nome do usuário enviando um nome com 100 caracteres",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verificar se o status code é 200\", function(){",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validar mensagem: Dados atualizados com sucesso!\",function(){",
											"    pm.expect(pm.response.json().msg).to.equal(\"Dados atualizados com sucesso!\");",
											"});",
											"",
											"pm.test(\"Validar se userId e o mesmo do cadastro\", function () {",
											"    pm.expect(pm.response.json().updatedUser._id).to.eql(pm.environment.get(\"IdNewUserUpdate\"));",
											"});",
											"",
											"pm.test(\"Validar se fullName está diferente do fullName do cadastro\", function () {",
											"    pm.expect(pm.response.json().updatedUser.fullName).not.to.eql(pm.environment.get(\"FullNameNewUserUpdate\"));",
											"});",
											"",
											"pm.test(\"Validar se e-mail está diferente do e-mail do cadastro\", function () {",
											"    pm.expect(pm.response.json().updatedUser.mail).not.to.eql(pm.environment.get(\"MailNewUserUpdate\"));",
											"});",
											"",
											"pm.test(\"Validar se accessProfile é o mesmo do cadastro\", function () {",
											"    pm.expect(pm.response.json().updatedUser.accessProfile).to.eql(pm.environment.get(\"AccessProfilelNewUserUpdate\"));",
											"});",
											"",
											"pm.test(\"Validar se CPF é o mesmo do cadastro\", function () {",
											"    pm.expect(pm.response.json().updatedUser.cpf).to.eql(pm.environment.get(\"CPFNewUserUpdate\"));",
											"});",
											"",
											"pm.test(\"Validar se status é o mesmo do cadastro\", function () {",
											"    pm.expect(pm.response.json().updatedUser.status).to.eql(pm.environment.get(\"StatusNewUserUpdate\"));",
											"});",
											"",
											"",
											"pm.test(\"Validar userId do campo registeredBy é o mesmo id do AdminTest\", function (){",
											"    pm.expect(pm.response.json().updatedUser.audit[0].registeredBy.userId).to.eql(pm.environment.get(\"_IdAdminTest\"));",
											"});",
											"",
											"pm.test(\"Validar userLogin do campo registeredBy é o mesmo e-mail do AdminTest\", function (){",
											"    pm.expect(pm.response.json().updatedUser.audit[0].registeredBy.userLogin).to.eql(pm.environment.get(\"MailAdminTest\"));",
											"});",
											"",
											"",
											"pm.test(\"Validar registrationDate da audit é o mesmo do cadastro\", function (){",
											"    pm.expect(pm.response.json().updatedUser.audit[0].registrationDate).to.eql(pm.environment.get(\"RegistrationDate\"));",
											"});",
											"",
											"pm.test(\"Validar registrationNumber da audit é o mesmo do cadastro\", function (){",
											"    pm.expect(pm.response.json().updatedUser.audit[0].registrationNumber).to.eql(pm.environment.get(\"RegistrationNumber\"));",
											"});",
											"",
											"pm.test(\"Validar registrationId da audit é o mesmo do cadastro\", function (){",
											"    pm.expect(pm.response.json().updatedUser.audit[0]._id).to.eql(pm.environment.get(\"RegistrationId\"));",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstname() {",
											"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];",
											"    ",
											"    const randomName = names[Math.floor(Math.random() * names.length)]",
											"    return randomName",
											"}",
											"pm.environment.set(\"FirstName\", firstname())",
											"",
											"function lastname() {",
											"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];",
											"",
											"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]",
											"    return randomLastName",
											"}",
											"pm.environment.set(\"LastName\", lastname())",
											"",
											"pm.environment.set(\"fullnameuserExc\", ",
											"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\")+ \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\") + \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\") + \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\") + \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\") + \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\") + \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\") + \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\") + \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\") + \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\") + \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\") + \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\") + \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\") + \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\") + \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\") + \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\") + \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenAcesso}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"fullName\": \"{{FullName100Caracteres}}\",\n    \"mail\": \"{{EditarEmail}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/api/user/{{IdNewUserUpdate}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"user",
										"{{IdNewUserUpdate}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Usuário nome editado com 100 caracteres",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verificar se o status code é 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validar se userId é o mesmo do cadastro\", function () {",
											"    pm.expect(pm.response.json()._id).to.eql(pm.environment.get(\"IdNewUserUpdate\"));",
											"});",
											"",
											"pm.test(\"Validar se fullName é o mesmo fullName que foi editado\", function () {",
											"    pm.expect(pm.response.json().fullName).to.eql(pm.environment.get(\"FullName100Caracteres\"));",
											"});",
											"",
											"pm.test(\"Validar se e-mail é o mesmo e-mail que foi editado\", function () {",
											"    pm.expect(pm.response.json().mail).to.eql(pm.environment.get(\"EditarEmail\"));",
											"});",
											"",
											"pm.test(\"Validar se accessProfile é o mesmo do cadastro\", function () {",
											"    pm.expect(pm.response.json().accessProfile).to.eql(pm.environment.get(\"AccessProfilelNewUserUpdate\"));",
											"});",
											"",
											"pm.test(\"Validar se CPF é o mesmo do cadastro\", function () {",
											"    pm.expect(pm.response.json().cpf).to.eql(pm.environment.get(\"CPFNewUserUpdate\"));",
											"});",
											"",
											"pm.test(\"Validar se status é o mesmo do cadastro\", function () {",
											"    pm.expect(pm.response.json().status).to.eql(pm.environment.get(\"StatusNewUserUpdate\"));",
											"});",
											"",
											"",
											"pm.test(\"Validar userId do campo registeredBy é o mesmo id do AdminTest\", function (){",
											"    pm.expect(pm.response.json().audit[0].registeredBy.userId).to.eql(pm.environment.get(\"_IdAdminTest\"));",
											"});",
											"",
											"pm.test(\"Validar userLogin do campo registeredBy é o mesmo e-mail do AdminTest\", function (){",
											"    pm.expect(pm.response.json().audit[0].registeredBy.userLogin).to.eql(pm.environment.get(\"MailAdminTest\"));",
											"});",
											"",
											"",
											"pm.test(\"Validar registrationDate da audit é o mesmo do cadastro\", function (){",
											"    pm.expect(pm.response.json().audit[0].registrationDate).to.eql(pm.environment.get(\"RegistrationDate\"));",
											"});",
											"",
											"pm.test(\"Validar registrationNumber da audit é o mesmo do cadastro\", function (){",
											"    pm.expect(pm.response.json().audit[0].registrationNumber).to.eql(pm.environment.get(\"RegistrationNumber\"));",
											"});",
											"",
											"pm.test(\"Validar registrationId da audit é o mesmo do cadastro\", function (){",
											"    pm.expect(pm.response.json().audit[0]._id).to.eql(pm.environment.get(\"RegistrationId\"));",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenAcesso}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url_base}}/api/user/{{IdNewUserUpdate}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"user",
										"{{IdNewUserUpdate}}"
									],
									"query": [
										{
											"key": "token",
											"value": "{{tokenAcesso}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar nome do usuário enviando um nome com 101 caracteres",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verificar se o status code é 400\", function(){",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Validar mensagem de erro\", function() {",
											"    pm.expect(pm.response.json().error[0]).to.eql(\"O nome completo deve ter no máximo 100 caracteres.\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstname() {",
											"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];",
											"    ",
											"    const randomName = names[Math.floor(Math.random() * names.length)]",
											"    return randomName",
											"}",
											"pm.environment.set(\"FirstName\", firstname())",
											"",
											"function lastname() {",
											"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];",
											"",
											"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]",
											"    return randomLastName",
											"}",
											"pm.environment.set(\"LastName\", lastname())",
											"",
											"pm.environment.set(\"fullnameuserExc\", ",
											"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\")+ \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\") + \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\") + \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\") + \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\") + \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\") + \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\") + \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\") + \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\") + \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\") + \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\") + \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\") + \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\") + \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\") + \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\") + \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\") + \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenAcesso}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"fullName\": \"{{FullName101Caracteres}}\",\n    \"mail\": \"{{EditarEmail}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/api/user/{{IdNewUserUpdate}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"user",
										"{{IdNewUserUpdate}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar nome do usuário enviando um valor alfanumérico",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verificar se o status code é 400\", function(){",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Validar mensagem de erro\", function() {",
											"    pm.expect(pm.response.json().error[0]).to.eql(\"O campo nome completo não deve conter números\");",
											"})",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenAcesso}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"fullName\": \"{{FullNameComNumeros}}\",\n    \"mail\": \"{{EditarEmail}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/api/user/{{IdNewUserUpdate}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"user",
										"{{IdNewUserUpdate}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar nome do usuário enviando um valor em branco",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code é 400\", function(){",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Validar retorno da mensagem\", function() {",
											"    pm.expect(pm.response.json().error[0]).to.eql(\"O campo nome completo é obrigatório.\");",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenAcesso}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"fullName\": \"\",\n    \"mail\": \"{{EditarEmail}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/api/user/{{IdNewUserUpdate}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"user",
										"{{IdNewUserUpdate}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar nome do usuário sem alterar e-mail com sucesso",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"",
											"function editarSobreNome() {",
											"    var editarSobreNome = [",
											"    \"dos Santos\", \"da Silva\", \"da Mota\", \"de Figueiredo\", \"dos Anjos\", ",
											"    \"da Costa\", \"de Almeida\", \"dos Reis\", \"da Rocha\", \"de Oliveira\", ",
											"    \"dos Santos Silva\", \"da Luz\", \"de Souza\", \"da Cunha\", \"dos Santos Costa\", ",
											"    \"da Paz\", \"de Carvalho\", \"dos Santos Lima\", \"da Silva Ribeiro\", \"de Sá\", ",
											"    \"da Cunha Oliveira\", \"de Moraes\", \"dos Santos Rodrigues\", \"da Silva Oliveira\", ",
											"    \"de Castro\", \"dos Santos Alves\", \"da Silva Costa\", \"de Lima\", \"da Rocha Silva\", ",
											"    \"de Andrade\", \"dos Santos Pereira\", \"da Silva Ferreira\", \"de Macedo\", \"da Silva Martins\", ",
											"    \"de Brito\", \"da Silva Barros\", \"dos Santos Cardoso\", \"da Silva Santana\", \"de Araújo\", ",
											"    \"dos Santos Gomes\", \"da Silva Campos\", \"de Medeiros\", \"da Silva Souza\", \"de Oliveira Lima\", ",
											"    \"dos Santos Tavares\", \"da Silva Nogueira\", \"de Lima Souza\", \"dos Santos Pires\", \"da Silva Brito\", ",
											"    \"de Bastos\"",
											"]",
											"",
											"    let randomItem = editarSobreNome[Math.floor(Math.random() * editarSobreNome.length)];",
											"    return randomItem;",
											"}",
											"",
											"pm.environment.set(\"EditarFullName+1\", pm.environment.get(\"EditarFullName\") + \" \" + editarSobreNome());",
											"",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verificar se o status code é 200\", function(){",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validar mensagem: Dados atualizados com sucesso!\",function(){",
											"    pm.expect(pm.response.json().msg).to.equal(\"Dados atualizados com sucesso!\");",
											"});",
											"",
											"pm.test(\"Verificar se o nome completo foi alterado com sucesso!\", function(){",
											"    pm.expect(pm.response.json().updatedUser.fullName).to.eql(pm.environment.get(\"EditarFullName+1\"));",
											"});",
											"",
											"pm.test(\"Garantir que E-mail não foi alterado\", function(){",
											"    pm.expect(pm.response.json().updatedUser.mail).to.eql(pm.environment.get(\"EditarEmail\"));",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenAcesso}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"fullName\": \"{{EditarFullName+1}}\",\n    \"mail\": \"{{EditarEmail}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/api/user/{{IdNewUserUpdate}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"user",
										"{{IdNewUserUpdate}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Usuário nome editado busca pelo id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verificar se o status code é 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validar se userId é o mesmo do cadastro\", function () {",
											"    pm.expect(pm.response.json()._id).to.eql(pm.environment.get(\"IdNewUserUpdate\"));",
											"});",
											"",
											"pm.test(\"Validar se fullName foi editado\", function () {",
											"    pm.expect(pm.response.json().fullName).to.eql(pm.environment.get(\"EditarFullName+1\"));",
											"});",
											"",
											"pm.test(\"Validar se e-mail não foi editado\", function () {",
											"    pm.expect(pm.response.json().mail).to.eql(pm.environment.get(\"EditarEmail\"));",
											"});",
											"",
											"pm.test(\"Validar se accessProfile é o mesmo do cadastro\", function () {",
											"    pm.expect(pm.response.json().accessProfile).to.eql(pm.environment.get(\"AccessProfilelNewUserUpdate\"));",
											"});",
											"",
											"pm.test(\"Validar se CPF é o mesmo do cadastro\", function () {",
											"    pm.expect(pm.response.json().cpf).to.eql(pm.environment.get(\"CPFNewUserUpdate\"));",
											"});",
											"",
											"pm.test(\"Validar se status é o mesmo do cadastro\", function () {",
											"    pm.expect(pm.response.json().status).to.eql(pm.environment.get(\"StatusNewUserUpdate\"));",
											"});",
											"",
											"",
											"pm.test(\"Validar userId do campo registeredBy é o mesmo id do AdminTest\", function (){",
											"    pm.expect(pm.response.json().audit[0].registeredBy.userId).to.eql(pm.environment.get(\"_IdAdminTest\"));",
											"});",
											"",
											"pm.test(\"Validar userLogin do campo registeredBy é o mesmo e-mail do AdminTest\", function (){",
											"    pm.expect(pm.response.json().audit[0].registeredBy.userLogin).to.eql(pm.environment.get(\"MailAdminTest\"));",
											"});",
											"",
											"",
											"pm.test(\"Validar registrationDate da audit é o mesmo do cadastro\", function (){",
											"    pm.expect(pm.response.json().audit[0].registrationDate).to.eql(pm.environment.get(\"RegistrationDate\"));",
											"});",
											"",
											"pm.test(\"Validar registrationNumber da audit é o mesmo do cadastro\", function (){",
											"    pm.expect(pm.response.json().audit[0].registrationNumber).to.eql(pm.environment.get(\"RegistrationNumber\"));",
											"});",
											"",
											"pm.test(\"Validar registrationId da audit é o mesmo do cadastro\", function (){",
											"    pm.expect(pm.response.json().audit[0]._id).to.eql(pm.environment.get(\"RegistrationId\"));",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenAcesso}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url_base}}/api/user/{{IdNewUserUpdate}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"user",
										"{{IdNewUserUpdate}}"
									],
									"query": [
										{
											"key": "token",
											"value": "{{tokenAcesso}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar usuário com os atributos obrigatórios definidos pela regra de negócio",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verificar se o status code é 200\", function(){",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validar mensagem: Dados atualizados com sucesso!\",function(){",
											"    pm.expect(pm.response.json().msg).to.equal(\"Dados atualizados com sucesso!\");",
											"});",
											"",
											"pm.test(\"Verificar se o nome foi alterado com sucesso!\", function(){",
											"    pm.expect(pm.response.json().updatedUser.fullName).to.eql(pm.environment.get(\"EditarFullName\"));",
											"});",
											"",
											"pm.test(\"Verificar se o E-mail foi alterado com sucesso!\", function(){",
											"    pm.expect(pm.response.json().updatedUser.mail).to.eql(pm.environment.get(\"EditarEmail\"));",
											"});",
											"",
											"pm.test(\"Verificar se o accessProfile foi alterado com sucesso!\", function(){",
											"    pm.expect(pm.response.json().updatedUser.accessProfile).to.eql(pm.environment.get(\"AccessProfileAluno\"));",
											"});",
											"",
											"pm.test(\"Validar se userId é o mesmo do cadastro\", function () {",
											"    pm.expect(pm.response.json().updatedUser._id).to.eql(pm.environment.get(\"IdNewUserUpdate\"));",
											"});",
											"",
											"pm.test(\"Validar se status é o mesmo do cadastro\", function () {",
											"    pm.expect(pm.response.json().updatedUser.status).to.eql(pm.environment.get(\"StatusNewUserUpdate\"));",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let caracteresMaiuscula = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';",
											"let caracteresMinusculo = 'abcdefghijklmnopqrstuvwxyz';",
											"let caracteresEspeciais = '@#$%';",
											"let caracteresNumericos = '123456789'",
											"",
											"// Função para gerar um caractere aleatório de um conjunto",
											"function getRandomCharacter(set) {",
											"    const randomIndex = Math.floor(Math.random() * set.length);",
											"    return set[randomIndex];",
											"}",
											"",
											"// Função para gerar a senha",
											"function generatePassword() {",
											"    let password = '';",
											"",
											"    // Garantir que a senha tenha pelo menos 2 caracteres maiúsculos",
											"    for (let i = 0; i < 2; i++) {",
											"        password += getRandomCharacter(caracteresMaiuscula);",
											"    }",
											"",
											"    // Garantir que a senha tenha pelo menos 3 caracteres minúsculos",
											"    for (let i = 0; i < 3; i++) {",
											"        password += getRandomCharacter(caracteresMinusculo);",
											"    }",
											"",
											"    // Garantir que a senha tenha pelo menos 1 caractere especial",
											"    password += getRandomCharacter(caracteresEspeciais);",
											"",
											"    // Garantir que a senha tenha pelo menos 1 caractere numérico",
											"    password += getRandomCharacter(caracteresNumericos);",
											"",
											"    // Preencher os 10 caracteres com caracteres aleatórios dos conjuntos definidos",
											"    while (password.length < 10) {",
											"        let allChars = caracteresMaiuscula + caracteresMinusculo + caracteresEspeciais + caracteresNumericos;",
											"        password += getRandomCharacter(allChars);",
											"    }",
											"",
											"    // Embaralhar a senha",
											"    let shuffledPassword = password.split('').sort(() => Math.random() - 0.5).join('');",
											"",
											"    return shuffledPassword;",
											"}",
											"",
											"// Gerar a senha e salvar no ambiente",
											"const password = generatePassword();",
											"pm.environment.set('DynamicPassword', password);",
											"",
											"function editarSobreNome() {",
											"    var editarSobreNome = [",
											"    \"dos Santos\", \"da Silva\", \"da Mota\", \"de Figueiredo\", \"dos Anjos\", ",
											"    \"da Costa\", \"de Almeida\", \"dos Reis\", \"da Rocha\", \"de Oliveira\", ",
											"    \"dos Santos Silva\", \"da Luz\", \"de Souza\", \"da Cunha\", \"dos Santos Costa\", ",
											"    \"da Paz\", \"de Carvalho\", \"dos Santos Lima\", \"da Silva Ribeiro\", \"de Sá\", ",
											"    \"da Cunha Oliveira\", \"de Moraes\", \"dos Santos Rodrigues\", \"da Silva Oliveira\", ",
											"    \"de Castro\", \"dos Santos Alves\", \"da Silva Costa\", \"de Lima\", \"da Rocha Silva\", ",
											"    \"de Andrade\", \"dos Santos Pereira\", \"da Silva Ferreira\", \"de Macedo\", \"da Silva Martins\", ",
											"    \"de Brito\", \"da Silva Barros\", \"dos Santos Cardoso\", \"da Silva Santana\", \"de Araújo\", ",
											"    \"dos Santos Gomes\", \"da Silva Campos\", \"de Medeiros\", \"da Silva Souza\", \"de Oliveira Lima\", ",
											"    \"dos Santos Tavares\", \"da Silva Nogueira\", \"de Lima Souza\", \"dos Santos Pires\", \"da Silva Brito\", ",
											"    \"de Bastos\"",
											"]",
											"",
											"    let randomItem = editarSobreNome[Math.floor(Math.random() * editarSobreNome.length)];",
											"    return randomItem;",
											"}",
											"",
											"pm.environment.set(\"EditarFullName\", pm.environment.get(\"FullName\") + \" \" + editarSobreNome());",
											"",
											"function criarEmail(nomeCompleto) {",
											"    // Função para escolher um domínio aleatório",
											"    function dominio() {",
											"        const dominios = [",
											"            \"@gmail.com\",",
											"            \"@gmail.com.br\",",
											"            \"@uol.br\",",
											"            \"@hotmail.com\",",
											"            \"@outlook.com\",",
											"            \"@yahoo.com\",",
											"            \"@yahoo.com.br\",",
											"            \"@live.com\",",
											"            \"@icloud.com\",",
											"            \"@bol.com.br\",",
											"            \"@terra.com.br\"",
											"        ];",
											"        let randomItem = dominios[Math.floor(Math.random() * dominios.length)]; // Acessando corretamente o array",
											"        return randomItem;",
											"    }",
											"",
											"    const nomes = nomeCompleto.split(\" \");",
											"    const primeiroNome = nomes[0].normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\").toLowerCase();",
											"    const ultimoNome = nomes[nomes.length - 1].normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\").toLowerCase();",
											"    const email = primeiroNome + \".\" + ultimoNome + dominio(); // Chamando a função dominio()",
											"    return email;",
											"}",
											"",
											"// Exemplo de uso:",
											"const nomeCompleto = pm.environment.get(\"EditarFullName\")",
											"const email = criarEmail(nomeCompleto);",
											"",
											"pm.environment.set(\"EditarEmail\", email)",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenAcesso}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"fullName\": \"{{EditarFullName}}\",\n  \"mail\": \"{{EditarEmail}}\",\n  \"accessProfile\": \"{{AccessProfileAluno}}\",\n  \"password\": \"{{DynamicPassword}}\",\n  \"confirmPassword\": \"{{DynamicPassword}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/api/user/{{IdNewUserUpdate}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"user",
										"{{IdNewUserUpdate}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Usuário editado busca pelo id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verificar se o Status é 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verificar se o nome foi alterado com sucesso!\", function(){",
											"    pm.expect(pm.response.json().fullName).to.eql(pm.environment.get(\"EditarFullName\"));",
											"});",
											"",
											"pm.test(\"Verificar se o E-mail foi alterado com sucesso!\", function(){",
											"    pm.expect(pm.response.json().mail).to.eql(pm.environment.get(\"EditarEmail\"));",
											"});",
											"",
											"pm.test(\"Verificar se o accessProfile foi alterado com sucesso!\", function(){",
											"    pm.expect(pm.response.json().accessProfile).to.eql(pm.environment.get(\"AccessProfileAluno\"));",
											"});",
											"",
											"pm.test(\"Validar se CPF é o mesmo do cadastro\", function () {",
											"    pm.expect(pm.response.json().cpf).to.eql(pm.environment.get(\"CPFNewUserUpdate\"));",
											"});",
											"",
											"pm.test(\"Validar se status é o mesmo do cadastro\", function () {",
											"    pm.expect(pm.response.json().status).to.eql(pm.environment.get(\"StatusNewUserUpdate\"));",
											"});",
											"",
											"",
											"pm.test(\"Validar userId do campo registeredBy é o mesmo id do AdminTest\", function (){",
											"    pm.expect(pm.response.json().audit[0].registeredBy.userId).to.eql(pm.environment.get(\"_IdAdminTest\"));",
											"});",
											"",
											"pm.test(\"Validar userLogin do campo registeredBy é o mesmo e-mail do AdminTest\", function (){",
											"    pm.expect(pm.response.json().audit[0].registeredBy.userLogin).to.eql(pm.environment.get(\"MailAdminTest\"));",
											"});",
											"",
											"",
											"pm.test(\"Validar registrationDate da audit é o mesmo do cadastro\", function (){",
											"    pm.expect(pm.response.json().audit[0].registrationDate).to.eql(pm.environment.get(\"RegistrationDate\"));",
											"});",
											"",
											"pm.test(\"Validar registrationNumber da audit é o mesmo do cadastro\", function (){",
											"    pm.expect(pm.response.json().audit[0].registrationNumber).to.eql(pm.environment.get(\"RegistrationNumber\"));",
											"});",
											"",
											"pm.test(\"Validar registrationId da audit é o mesmo do cadastro\", function (){",
											"    pm.expect(pm.response.json().audit[0]._id).to.eql(pm.environment.get(\"RegistrationId\"));",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenAcesso}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url_base}}/api/user/{{IdNewUserUpdate}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"user",
										"{{IdNewUserUpdate}}"
									],
									"query": [
										{
											"key": "token",
											"value": "{{tokenAcesso}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Company-PBI-20523 (Cadastrar)",
			"item": [
				{
					"name": "Pré-Requisito",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"tokenAcesso\",pm.response.json().token)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"mail\": \"pegartoken@test.com.br\",\r\n  \"password\": \"1234@Test\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/login/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"login",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/login/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"mail\": \"sysadmin@qacoders.com\",\r\n  \"password\": \"1234@Test\"\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro de Empresa",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function empresa() {\r",
									"    const names = [\"TechNova\", \"Bytewave\", \"Cyberion\", \"InovaTech\", \"Nexabyte\", \"Softtron\", \"Codeverse\", \"Dataflux\", \"Infinitron\", \"LogiCore\", \"Zentek\",\"Neurobyte\", \"Cloudix\", \"Sysnova\", \"Hexabit\", \"AIgorithm\", \"Quantumix\", \"Webtron\", \"Netflux\", \"Cyberflux\", \"Deepcode\", \"Techpulse\", \"Synaptech\", \"Codexis\", \"Nexonix\", \"Algobyte\", \"Infobyte\", \"Datazen\", \"Digiflow\", \"Innovix\", \"Coretron\", \"Zybernet\", \"Neurotech\", \"Nanobyte\", \"Virtunix\", \"Codexel\", \"Optibit\", \"Bitnova\", \"Globotron\", \"Digiware\", \"Skytech\", \"Cybervox\", \"Techspire\", \"Softbit\", \"MetaTech\", \"Synthron\", \"Virtuabyte\", \"Cloudtron\", \"Algonix\", \"Bitzen\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Empresa\", empresa())\r",
									"\r",
									"function tag() {\r",
									"    const tagnames = ['Solutions', 'Tech', 'Digital', 'Systems', 'Software', 'Cloud', 'AI', 'Cyber', 'Data', 'Analytics','Network', 'Security', 'Labs', 'Smart', 'Logic', 'Innovation', 'IT', 'Global', 'Developers', 'Code', 'Techno', 'Automations', 'Cloudware', 'Dynamics', 'Vision', 'Intelligence', 'NextGen', 'Computing', 'Innovators', 'Engineering', 'Performance', 'Softworks', 'Logicware', 'Digitalware', 'Transform', 'Platform', 'Smartware', 'Dataflow', 'Byte', 'Edge', 'Nexus', 'Techworks', 'Bit', 'Virtual', 'SystemsX', 'Infotech', 'Genix', 'Quantum', 'Bitware', 'CloudX'];\r",
									"\r",
									"    const randomTastName = tagnames[Math.floor(Math.random() * tagnames.length)]\r",
									"    return randomTastName\r",
									"}\r",
									"pm.environment.set(\"Tag\", tag())\r",
									"\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"Empresa\") + \" \" + pm.environment.get(\"Tag\"))\r",
									"\r",
									"\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"\r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									"\r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									"\r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									"\r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									"\r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									"\r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"CNPJ\", cnpjGerado);\r",
									"\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function gerarTelefone() {\r",
									"    // Gerando um DDD aleatório entre 11 e 99\r",
									"    const ddd = Math.floor(Math.random() * (99 - 11 + 1)) + 11;\r",
									"\r",
									"    // Gerando o número de telefone com 9 dígitos, começando com 9\r",
									"    const numero = Math.floor(Math.random() * 100000000) + 900000000; // Gera um número aleatório entre 900000000 e 999999999 (começando com '9')\r",
									"\r",
									"    // Concatenando +55, o DDD e o número gerado para formar o telefone\r",
									"    const telefone = `55${ddd}${numero.toString().slice(0, 5)}${numero.toString().slice(5, 9)}`;\r",
									"\r",
									"    return telefone;\r",
									"}\r",
									"\r",
									"// Gerando o número de telefone e armazenando como variável de ambiente\r",
									"const telefoneGerado = gerarTelefone();\r",
									"pm.environment.set(\"telefone\", telefoneGerado);\r",
									"\r",
									"function descricao() {\r",
									"    const names = [\"Testes\", \"Automação\", \"FrontEnd\", \"Backend\",\"Banco de Dados\", \"IA\",\"AWS\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Descricao\", descricao())\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"NomeRua\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"NomeRuas\", lastname())\r",
									"\r",
									"pm.environment.set(\"nomeruaComposto\", \r",
									"    pm.environment.get(\"NomeRua\") + \" \" + pm.environment.get(\"NomeRuas\"))\r",
									"\r",
									"function logradouro() {\r",
									"    const names = [\"Avenida\", \"Rua\", \"Alameda\", \"Travessa\", \"Praça\", \"Rodovia\", \"Estrada\", \"Largo\", \"Viaduto\", \"Marginal\", \"Parque\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Logradouro\", logradouro())\r",
									"\r",
									"pm.environment.set(\"logradouroCompleto\", \r",
									"    pm.environment.get(\"Logradouro\") + \" \" + pm.environment.get(\"nomeruaComposto\"))\r",
									"\r",
									"\r",
									"function gerarNumeroResidencia() {\r",
									"    // Definindo a probabilidade de gerar números com mais de 5 caracteres\r",
									"    const tamanhoNumero = Math.random() < 0.8 ? Math.floor(Math.random() * 5) + 1 : Math.floor(Math.random() * 6) + 5;\r",
									"\r",
									"    // Gerando um número aleatório com o tamanho definido\r",
									"    let numeroResidencia = Math.floor(Math.random() * Math.pow(10, tamanhoNumero)).toString(); // Gera número aleatório com o tamanho desejado\r",
									"\r",
									"    // Se o primeiro caractere for 0, remove-o\r",
									"    if (numeroResidencia[0] === '0') {\r",
									"        numeroResidencia = numeroResidencia.slice(1); // Remove o primeiro caractere\r",
									"    }\r",
									"\r",
									"    // Garantindo que o número tenha no máximo 10 caracteres\r",
									"    if (numeroResidencia.length > 10) {\r",
									"        numeroResidencia = numeroResidencia.slice(0, 10); // Limita a 10 caracteres\r",
									"    }\r",
									"\r",
									"    return numeroResidencia;\r",
									"}\r",
									"\r",
									"// Gerando o número de residência e armazenando como variável de ambiente\r",
									"const numeroResidenciaGerado = gerarNumeroResidencia();\r",
									"pm.environment.set(\"numeroResidencia\", numeroResidenciaGerado);\r",
									"\r",
									"function bairro() {\r",
									"    const names = ['Leblon', 'Ipanema', 'Copacabana', 'Barra da Tijuca', 'Botafogo', 'Lapa', 'Santa Teresa', 'Jardim Botânico', 'Flamengo', 'São Conrado', 'Moema', 'Vila Madalena', 'Pinheiros', 'Jardins', 'Aclimação', 'Brooklin', 'Tatuapé', 'Vila Progredior', 'Vila Nova Conceição', 'Campo Belo','Centro', 'Praia de Belas', 'Moinhos de Vento', 'Petrópolis', 'Tristeza', 'Caminho das Árvores', 'Pituba', 'Stella Maris', 'Parque Atlântico', 'Costa Azul', 'Vila Galvão', 'Santo Amaro', 'Perdizes', 'Aclimação', 'Vila Sônia', 'Cidade Dutra', 'São Bernardo do Campo', 'Vila Mariana', 'Bela Vista', 'Liberdade','Pinheiros', 'Itaim Bibi', 'Santa Cecília', 'Tucuruvi', 'Chácara Santo Antônio', 'Água Fria', 'Vila Olímpia', 'Vila São Francisco', 'Consolação', 'Vila Madalena']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Bairro\", bairro())\r",
									"\r",
									"function cidade() {\r",
									"    const names = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador', 'Curitiba', 'Fortaleza', 'Recife', 'Brasília', 'Manaus', 'Vitória', 'Goiânia', 'Belém', 'Natal', 'São Luís', 'Maceió', 'Campo Grande', 'João Pessoa', 'Aracaju', 'Cuiabá', 'Florianópolis', 'Teresina', 'Palmas', 'Macapá', 'Rio Branco', 'Boa Vista', 'Porto Velho', 'Anápolis', 'Caruaru', 'Londrina','Marabá', 'Araraquara', 'Sorocaba', 'Santos', 'Niterói', 'Mogi das Cruzes', 'Caxias do Sul', 'Barueri', 'Campinas', 'São José', 'Ponta Grossa', 'Jundiaí', 'Uberlândia', 'Diadema', 'Santo André', 'São Bernardo do Campo', 'Itaquaquecetuba', 'Ribeirão Preto', 'Juiz de Fora']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Cidade\", cidade())\r",
									"\r",
									"function abreviacao() {\r",
									"    const names = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"AbreviacaoEstado\", abreviacao())\r",
									"\r",
									"function randomCep() {\r",
									"    let randomCep = '';\r",
									"   \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        randomCep += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCep;\r",
									"}\r",
									"pm.environment.set(\"cep\", randomCep());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 201\", function(){\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Mensagem de sucesso\",function(){\r",
									"    pm.expect(pm.response.json().msg).to.equal(\"Registro realizado com sucesso\")\r",
									"})\r",
									"\r",
									"pm.test(\"Status é True\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.status).to.be.true;\r",
									"})\r",
									"\r",
									"pm.test(\"Nome da Empresa é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.corporateName).to.equal(pm.environment.get(\"nomeEmpresa\"))\r",
									"})\r",
									"\r",
									"pm.test(\"CNPJ é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.registerCompany).to.equal(pm.environment.get(\"CNPJ\"))\r",
									"})\r",
									"\r",
									"\r",
									"// Função para validar CNPJ com base nos dígitos verificadores\r",
									"function validarCNPJ(cnpj) {\r",
									"    // Remover qualquer caractere que não seja número\r",
									"    cnpj = cnpj.replace(/\\D/g, '');\r",
									"\r",
									"    // Verifica se o CNPJ tem 14 dígitos\r",
									"    if (cnpj.length !== 14) {\r",
									"        return false;\r",
									"    }\r",
									"\r",
									"    // Cálculo do primeiro dígito verificador\r",
									"    let soma = 0;\r",
									"    let multiplicadoresPrimeiro = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    \r",
									"    for (let i = 0; i < 12; i++) {\r",
									"        soma += parseInt(cnpj[i]) * multiplicadoresPrimeiro[i];\r",
									"    }\r",
									"\r",
									"    let resto = soma % 11;\r",
									"    let primeiroDV = resto < 2 ? 0 : 11 - resto;\r",
									"\r",
									"    // Cálculo do segundo dígito verificador\r",
									"    soma = 0;\r",
									"    let multiplicadoresSegundo = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    \r",
									"    for (let i = 0; i < 13; i++) {\r",
									"        soma += parseInt(cnpj[i]) * multiplicadoresSegundo[i];\r",
									"    }\r",
									"\r",
									"    resto = soma % 11;\r",
									"    let segundoDV = resto < 2 ? 0 : 11 - resto;\r",
									"\r",
									"    // Comparar com os dígitos do CNPJ enviado\r",
									"    return cnpj[12] == primeiroDV && cnpj[13] == segundoDV;\r",
									"}\r",
									"\r",
									"// Obter o CNPJ da resposta da API (supondo que está no campo \"cnpj\")\r",
									"let cnpjRecebido = pm.response.json().newCompany.registerCompany; \r",
									"\r",
									"// Executar a validação\r",
									"if (!validarCNPJ(cnpjRecebido)) {\r",
									"    pm.test(\"O CNPJ retornado é inválido!\", function () {\r",
									"        pm.expect(false).to.be.true;\r",
									"    });\r",
									"} else {\r",
									"    pm.test(\"O CNPJ retornado é válido!\", function () {\r",
									"        pm.expect(true).to.be.true;\r",
									"    });\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomeEmpresa}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"{{fullnameUser}}\",\r\n  \"telephone\": \"{{telefone}}\",\r\n  \"serviceDescription\": \"{{Descricao}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{cep}}\",\r\n      \"city\": \"{{Cidade}}\",\r\n      \"state\": \"{{AbreviacaoEstado}}\",\r\n      \"district\": \"{{Bairro}}\",\r\n      \"street\": \"{{logradouroCompleto}}\",\r\n      \"number\": \"{{numeroResidencia}}\",\r\n      \"complement\": \"\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTM0MSwiZXhwIjoxNzM5MzE1NzQxfQ.cgJqYe74cprHCRTY9YLF_B-Hfgfp8l8lr6gDrEuqMi4' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"corporateName\": \"Matheus Sousa Testes\",\r\n  \"registerCompany\": \"57126456000155\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com o campo Nome da empresa em branco",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function empresa() {\r",
									"    const names = [\"TechNova\", \"Bytewave\", \"Cyberion\", \"InovaTech\", \"Nexabyte\", \"Softtron\", \"Codeverse\", \"Dataflux\", \"Infinitron\", \"LogiCore\", \"Zentek\",\"Neurobyte\", \"Cloudix\", \"Sysnova\", \"Hexabit\", \"AIgorithm\", \"Quantumix\", \"Webtron\", \"Netflux\", \"Cyberflux\", \"Deepcode\", \"Techpulse\", \"Synaptech\", \"Codexis\", \"Nexonix\", \"Algobyte\", \"Infobyte\", \"Datazen\", \"Digiflow\", \"Innovix\", \"Coretron\", \"Zybernet\", \"Neurotech\", \"Nanobyte\", \"Virtunix\", \"Codexel\", \"Optibit\", \"Bitnova\", \"Globotron\", \"Digiware\", \"Skytech\", \"Cybervox\", \"Techspire\", \"Softbit\", \"MetaTech\", \"Synthron\", \"Virtuabyte\", \"Cloudtron\", \"Algonix\", \"Bitzen\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Empresa\", empresa())\r",
									"\r",
									"function tag() {\r",
									"    const tagnames = ['Solutions', 'Tech', 'Digital', 'Systems', 'Software', 'Cloud', 'AI', 'Cyber', 'Data', 'Analytics','Network', 'Security', 'Labs', 'Smart', 'Logic', 'Innovation', 'IT', 'Global', 'Developers', 'Code', 'Techno', 'Automations', 'Cloudware', 'Dynamics', 'Vision', 'Intelligence', 'NextGen', 'Computing', 'Innovators', 'Engineering', 'Performance', 'Softworks', 'Logicware', 'Digitalware', 'Transform', 'Platform', 'Smartware', 'Dataflow', 'Byte', 'Edge', 'Nexus', 'Techworks', 'Bit', 'Virtual', 'SystemsX', 'Infotech', 'Genix', 'Quantum', 'Bitware', 'CloudX'];\r",
									"\r",
									"    const randomTastName = tagnames[Math.floor(Math.random() * tagnames.length)]\r",
									"    return randomTastName\r",
									"}\r",
									"pm.environment.set(\"Tag\", tag())\r",
									"\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"Empresa\") + \" \" + pm.environment.get(\"Tag\"))\r",
									"\r",
									"\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"\r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									"\r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									"\r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									"\r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									"\r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									"\r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"CNPJ\", cnpjGerado);\r",
									"\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function gerarTelefone() {\r",
									"    // Gerando um DDD aleatório entre 11 e 99\r",
									"    const ddd = Math.floor(Math.random() * (99 - 11 + 1)) + 11;\r",
									"\r",
									"    // Gerando o número de telefone com 9 dígitos, começando com 9\r",
									"    const numero = Math.floor(Math.random() * 100000000) + 900000000; // Gera um número aleatório entre 900000000 e 999999999 (começando com '9')\r",
									"\r",
									"    // Concatenando +55, o DDD e o número gerado para formar o telefone\r",
									"    const telefone = `55${ddd}${numero.toString().slice(0, 5)}${numero.toString().slice(5, 9)}`;\r",
									"\r",
									"    return telefone;\r",
									"}\r",
									"\r",
									"// Gerando o número de telefone e armazenando como variável de ambiente\r",
									"const telefoneGerado = gerarTelefone();\r",
									"pm.environment.set(\"telefone\", telefoneGerado);\r",
									"\r",
									"function descricao() {\r",
									"    const names = [\"Testes\", \"Automação\", \"FrontEnd\", \"Backend\",\"Banco de Dados\", \"IA\",\"AWS\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Descricao\", descricao())\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"NomeRua\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"NomeRuas\", lastname())\r",
									"\r",
									"pm.environment.set(\"nomeruaComposto\", \r",
									"    pm.environment.get(\"NomeRua\") + \" \" + pm.environment.get(\"NomeRuas\"))\r",
									"\r",
									"function logradouro() {\r",
									"    const names = [\"Avenida\", \"Rua\", \"Alameda\", \"Travessa\", \"Praça\", \"Rodovia\", \"Estrada\", \"Largo\", \"Viaduto\", \"Marginal\", \"Parque\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Logradouro\", logradouro())\r",
									"\r",
									"pm.environment.set(\"logradouroCompleto\", \r",
									"    pm.environment.get(\"Logradouro\") + \" \" + pm.environment.get(\"nomeruaComposto\"))\r",
									"\r",
									"\r",
									"function gerarNumeroResidencia() {\r",
									"    // Definindo a probabilidade de gerar números com mais de 5 caracteres\r",
									"    const tamanhoNumero = Math.random() < 0.8 ? Math.floor(Math.random() * 5) + 1 : Math.floor(Math.random() * 6) + 5;\r",
									"\r",
									"    // Gerando um número aleatório com o tamanho definido\r",
									"    let numeroResidencia = Math.floor(Math.random() * Math.pow(10, tamanhoNumero)).toString(); // Gera número aleatório com o tamanho desejado\r",
									"\r",
									"    // Se o primeiro caractere for 0, remove-o\r",
									"    if (numeroResidencia[0] === '0') {\r",
									"        numeroResidencia = numeroResidencia.slice(1); // Remove o primeiro caractere\r",
									"    }\r",
									"\r",
									"    // Garantindo que o número tenha no máximo 10 caracteres\r",
									"    if (numeroResidencia.length > 10) {\r",
									"        numeroResidencia = numeroResidencia.slice(0, 10); // Limita a 10 caracteres\r",
									"    }\r",
									"\r",
									"    return numeroResidencia;\r",
									"}\r",
									"\r",
									"// Gerando o número de residência e armazenando como variável de ambiente\r",
									"const numeroResidenciaGerado = gerarNumeroResidencia();\r",
									"pm.environment.set(\"numeroResidencia\", numeroResidenciaGerado);\r",
									"\r",
									"function bairro() {\r",
									"    const names = ['Leblon', 'Ipanema', 'Copacabana', 'Barra da Tijuca', 'Botafogo', 'Lapa', 'Santa Teresa', 'Jardim Botânico', 'Flamengo', 'São Conrado', 'Moema', 'Vila Madalena', 'Pinheiros', 'Jardins', 'Aclimação', 'Brooklin', 'Tatuapé', 'Vila Progredior', 'Vila Nova Conceição', 'Campo Belo','Centro', 'Praia de Belas', 'Moinhos de Vento', 'Petrópolis', 'Tristeza', 'Caminho das Árvores', 'Pituba', 'Stella Maris', 'Parque Atlântico', 'Costa Azul', 'Vila Galvão', 'Santo Amaro', 'Perdizes', 'Aclimação', 'Vila Sônia', 'Cidade Dutra', 'São Bernardo do Campo', 'Vila Mariana', 'Bela Vista', 'Liberdade','Pinheiros', 'Itaim Bibi', 'Santa Cecília', 'Tucuruvi', 'Chácara Santo Antônio', 'Água Fria', 'Vila Olímpia', 'Vila São Francisco', 'Consolação', 'Vila Madalena']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Bairro\", bairro())\r",
									"\r",
									"function cidade() {\r",
									"    const names = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador', 'Curitiba', 'Fortaleza', 'Recife', 'Brasília', 'Manaus', 'Vitória', 'Goiânia', 'Belém', 'Natal', 'São Luís', 'Maceió', 'Campo Grande', 'João Pessoa', 'Aracaju', 'Cuiabá', 'Florianópolis', 'Teresina', 'Palmas', 'Macapá', 'Rio Branco', 'Boa Vista', 'Porto Velho', 'Anápolis', 'Caruaru', 'Londrina','Marabá', 'Araraquara', 'Sorocaba', 'Santos', 'Niterói', 'Mogi das Cruzes', 'Caxias do Sul', 'Barueri', 'Campinas', 'São José', 'Ponta Grossa', 'Jundiaí', 'Uberlândia', 'Diadema', 'Santo André', 'São Bernardo do Campo', 'Itaquaquecetuba', 'Ribeirão Preto', 'Juiz de Fora']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Cidade\", cidade())\r",
									"\r",
									"function abreviacao() {\r",
									"    const names = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"AbreviacaoEstado\", abreviacao())\r",
									"\r",
									"function randomCep() {\r",
									"    let randomCep = '';\r",
									"   \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        randomCep += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCep;\r",
									"}\r",
									"pm.environment.set(\"cep\", randomCep());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Mensagem de erro\",function(){\r",
									"    pm.expect(pm.response.json().error[0]).to.equal(\"O campo Nome da empresa é obrigatório.\")\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"{{fullnameUser}}\",\r\n  \"telephone\": \"{{telefone}}\",\r\n  \"serviceDescription\": \"{{Descricao}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{cep}}\",\r\n      \"city\": \"{{Cidade}}\",\r\n      \"state\": \"{{AbreviacaoEstado}}\",\r\n      \"district\": \"{{Bairro}}\",\r\n      \"street\": \"{{logradouroCompleto}}\",\r\n      \"number\": \"{{numeroResidencia}}\",\r\n      \"complement\": \"\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTM0MSwiZXhwIjoxNzM5MzE1NzQxfQ.cgJqYe74cprHCRTY9YLF_B-Hfgfp8l8lr6gDrEuqMi4' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"corporateName\": \"Matheus Sousa Testes\",\r\n  \"registerCompany\": \"57126456000155\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com o campo Nome da empresa com todas as letras minusculas",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function empresa() {\r",
									"    const names = [\"TechNova\", \"Bytewave\", \"Cyberion\", \"InovaTech\", \"Nexabyte\", \"Softtron\", \"Codeverse\", \"Dataflux\", \"Infinitron\", \"LogiCore\", \"Zentek\",\"Neurobyte\", \"Cloudix\", \"Sysnova\", \"Hexabit\", \"AIgorithm\", \"Quantumix\", \"Webtron\", \"Netflux\", \"Cyberflux\", \"Deepcode\", \"Techpulse\", \"Synaptech\", \"Codexis\", \"Nexonix\", \"Algobyte\", \"Infobyte\", \"Datazen\", \"Digiflow\", \"Innovix\", \"Coretron\", \"Zybernet\", \"Neurotech\", \"Nanobyte\", \"Virtunix\", \"Codexel\", \"Optibit\", \"Bitnova\", \"Globotron\", \"Digiware\", \"Skytech\", \"Cybervox\", \"Techspire\", \"Softbit\", \"MetaTech\", \"Synthron\", \"Virtuabyte\", \"Cloudtron\", \"Algonix\", \"Bitzen\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Empresa\", empresa())\r",
									"\r",
									"function tag() {\r",
									"    const tagnames = ['Solutions', 'Tech', 'Digital', 'Systems', 'Software', 'Cloud', 'AI', 'Cyber', 'Data', 'Analytics','Network', 'Security', 'Labs', 'Smart', 'Logic', 'Innovation', 'IT', 'Global', 'Developers', 'Code', 'Techno', 'Automations', 'Cloudware', 'Dynamics', 'Vision', 'Intelligence', 'NextGen', 'Computing', 'Innovators', 'Engineering', 'Performance', 'Softworks', 'Logicware', 'Digitalware', 'Transform', 'Platform', 'Smartware', 'Dataflow', 'Byte', 'Edge', 'Nexus', 'Techworks', 'Bit', 'Virtual', 'SystemsX', 'Infotech', 'Genix', 'Quantum', 'Bitware', 'CloudX'];\r",
									"\r",
									"    const randomTastName = tagnames[Math.floor(Math.random() * tagnames.length)]\r",
									"    return randomTastName\r",
									"}\r",
									"pm.environment.set(\"Tag\", tag())\r",
									"\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"Empresa\") + \" \" + pm.environment.get(\"Tag\"))\r",
									"\r",
									"\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"\r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									"\r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									"\r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									"\r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									"\r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									"\r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"CNPJ\", cnpjGerado);\r",
									"\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function gerarTelefone() {\r",
									"    // Gerando um DDD aleatório entre 11 e 99\r",
									"    const ddd = Math.floor(Math.random() * (99 - 11 + 1)) + 11;\r",
									"\r",
									"    // Gerando o número de telefone com 9 dígitos, começando com 9\r",
									"    const numero = Math.floor(Math.random() * 100000000) + 900000000; // Gera um número aleatório entre 900000000 e 999999999 (começando com '9')\r",
									"\r",
									"    // Concatenando +55, o DDD e o número gerado para formar o telefone\r",
									"    const telefone = `55${ddd}${numero.toString().slice(0, 5)}${numero.toString().slice(5, 9)}`;\r",
									"\r",
									"    return telefone;\r",
									"}\r",
									"\r",
									"// Gerando o número de telefone e armazenando como variável de ambiente\r",
									"const telefoneGerado = gerarTelefone();\r",
									"pm.environment.set(\"telefone\", telefoneGerado);\r",
									"\r",
									"function descricao() {\r",
									"    const names = [\"Testes\", \"Automação\", \"FrontEnd\", \"Backend\",\"Banco de Dados\", \"IA\",\"AWS\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Descricao\", descricao())\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"NomeRua\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"NomeRuas\", lastname())\r",
									"\r",
									"pm.environment.set(\"nomeruaComposto\", \r",
									"    pm.environment.get(\"NomeRua\") + \" \" + pm.environment.get(\"NomeRuas\"))\r",
									"\r",
									"function logradouro() {\r",
									"    const names = [\"Avenida\", \"Rua\", \"Alameda\", \"Travessa\", \"Praça\", \"Rodovia\", \"Estrada\", \"Largo\", \"Viaduto\", \"Marginal\", \"Parque\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Logradouro\", logradouro())\r",
									"\r",
									"pm.environment.set(\"logradouroCompleto\", \r",
									"    pm.environment.get(\"Logradouro\") + \" \" + pm.environment.get(\"nomeruaComposto\"))\r",
									"\r",
									"\r",
									"function gerarNumeroResidencia() {\r",
									"    // Definindo a probabilidade de gerar números com mais de 5 caracteres\r",
									"    const tamanhoNumero = Math.random() < 0.8 ? Math.floor(Math.random() * 5) + 1 : Math.floor(Math.random() * 6) + 5;\r",
									"\r",
									"    // Gerando um número aleatório com o tamanho definido\r",
									"    let numeroResidencia = Math.floor(Math.random() * Math.pow(10, tamanhoNumero)).toString(); // Gera número aleatório com o tamanho desejado\r",
									"\r",
									"    // Se o primeiro caractere for 0, remove-o\r",
									"    if (numeroResidencia[0] === '0') {\r",
									"        numeroResidencia = numeroResidencia.slice(1); // Remove o primeiro caractere\r",
									"    }\r",
									"\r",
									"    // Garantindo que o número tenha no máximo 10 caracteres\r",
									"    if (numeroResidencia.length > 10) {\r",
									"        numeroResidencia = numeroResidencia.slice(0, 10); // Limita a 10 caracteres\r",
									"    }\r",
									"\r",
									"    return numeroResidencia;\r",
									"}\r",
									"\r",
									"// Gerando o número de residência e armazenando como variável de ambiente\r",
									"const numeroResidenciaGerado = gerarNumeroResidencia();\r",
									"pm.environment.set(\"numeroResidencia\", numeroResidenciaGerado);\r",
									"\r",
									"function bairro() {\r",
									"    const names = ['Leblon', 'Ipanema', 'Copacabana', 'Barra da Tijuca', 'Botafogo', 'Lapa', 'Santa Teresa', 'Jardim Botânico', 'Flamengo', 'São Conrado', 'Moema', 'Vila Madalena', 'Pinheiros', 'Jardins', 'Aclimação', 'Brooklin', 'Tatuapé', 'Vila Progredior', 'Vila Nova Conceição', 'Campo Belo','Centro', 'Praia de Belas', 'Moinhos de Vento', 'Petrópolis', 'Tristeza', 'Caminho das Árvores', 'Pituba', 'Stella Maris', 'Parque Atlântico', 'Costa Azul', 'Vila Galvão', 'Santo Amaro', 'Perdizes', 'Aclimação', 'Vila Sônia', 'Cidade Dutra', 'São Bernardo do Campo', 'Vila Mariana', 'Bela Vista', 'Liberdade','Pinheiros', 'Itaim Bibi', 'Santa Cecília', 'Tucuruvi', 'Chácara Santo Antônio', 'Água Fria', 'Vila Olímpia', 'Vila São Francisco', 'Consolação', 'Vila Madalena']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Bairro\", bairro())\r",
									"\r",
									"function cidade() {\r",
									"    const names = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador', 'Curitiba', 'Fortaleza', 'Recife', 'Brasília', 'Manaus', 'Vitória', 'Goiânia', 'Belém', 'Natal', 'São Luís', 'Maceió', 'Campo Grande', 'João Pessoa', 'Aracaju', 'Cuiabá', 'Florianópolis', 'Teresina', 'Palmas', 'Macapá', 'Rio Branco', 'Boa Vista', 'Porto Velho', 'Anápolis', 'Caruaru', 'Londrina','Marabá', 'Araraquara', 'Sorocaba', 'Santos', 'Niterói', 'Mogi das Cruzes', 'Caxias do Sul', 'Barueri', 'Campinas', 'São José', 'Ponta Grossa', 'Jundiaí', 'Uberlândia', 'Diadema', 'Santo André', 'São Bernardo do Campo', 'Itaquaquecetuba', 'Ribeirão Preto', 'Juiz de Fora']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Cidade\", cidade())\r",
									"\r",
									"function abreviacao() {\r",
									"    const names = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"AbreviacaoEstado\", abreviacao())\r",
									"\r",
									"function randomCep() {\r",
									"    let randomCep = '';\r",
									"   \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        randomCep += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCep;\r",
									"}\r",
									"pm.environment.set(\"cep\", randomCep());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Mensagem de erro\",function(){\r",
									"    pm.expect(pm.response.json().error).to.equal(\"O campo Nome da Empresa é obrigatório\")\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"tik tok\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"{{fullnameUser}}\",\r\n  \"telephone\": \"{{telefone}}\",\r\n  \"serviceDescription\": \"{{Descricao}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{cep}}\",\r\n      \"city\": \"{{Cidade}}\",\r\n      \"state\": \"{{AbreviacaoEstado}}\",\r\n      \"district\": \"{{Bairro}}\",\r\n      \"street\": \"{{logradouroCompleto}}\",\r\n      \"number\": \"{{numeroResidencia}}\",\r\n      \"complement\": \"\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTM0MSwiZXhwIjoxNzM5MzE1NzQxfQ.cgJqYe74cprHCRTY9YLF_B-Hfgfp8l8lr6gDrEuqMi4' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"corporateName\": \"Matheus Sousa Testes\",\r\n  \"registerCompany\": \"57126456000155\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com o campo Nome da empresa somente com letras",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function empresa() {\r",
									"    const names = [\"TechNova\", \"Bytewave\", \"Cyberion\", \"InovaTech\", \"Nexabyte\", \"Softtron\", \"Codeverse\", \"Dataflux\", \"Infinitron\", \"LogiCore\", \"Zentek\",\"Neurobyte\", \"Cloudix\", \"Sysnova\", \"Hexabit\", \"AIgorithm\", \"Quantumix\", \"Webtron\", \"Netflux\", \"Cyberflux\", \"Deepcode\", \"Techpulse\", \"Synaptech\", \"Codexis\", \"Nexonix\", \"Algobyte\", \"Infobyte\", \"Datazen\", \"Digiflow\", \"Innovix\", \"Coretron\", \"Zybernet\", \"Neurotech\", \"Nanobyte\", \"Virtunix\", \"Codexel\", \"Optibit\", \"Bitnova\", \"Globotron\", \"Digiware\", \"Skytech\", \"Cybervox\", \"Techspire\", \"Softbit\", \"MetaTech\", \"Synthron\", \"Virtuabyte\", \"Cloudtron\", \"Algonix\", \"Bitzen\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Empresa\", empresa())\r",
									"\r",
									"function tag() {\r",
									"    const tagnames = ['Solutions', 'Tech', 'Digital', 'Systems', 'Software', 'Cloud', 'AI', 'Cyber', 'Data', 'Analytics','Network', 'Security', 'Labs', 'Smart', 'Logic', 'Innovation', 'IT', 'Global', 'Developers', 'Code', 'Techno', 'Automations', 'Cloudware', 'Dynamics', 'Vision', 'Intelligence', 'NextGen', 'Computing', 'Innovators', 'Engineering', 'Performance', 'Softworks', 'Logicware', 'Digitalware', 'Transform', 'Platform', 'Smartware', 'Dataflow', 'Byte', 'Edge', 'Nexus', 'Techworks', 'Bit', 'Virtual', 'SystemsX', 'Infotech', 'Genix', 'Quantum', 'Bitware', 'CloudX'];\r",
									"\r",
									"    const randomTastName = tagnames[Math.floor(Math.random() * tagnames.length)]\r",
									"    return randomTastName\r",
									"}\r",
									"pm.environment.set(\"Tag\", tag())\r",
									"\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"Empresa\") + \" \" + pm.environment.get(\"Tag\"))\r",
									"\r",
									"\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"\r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									"\r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									"\r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									"\r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									"\r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									"\r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"CNPJ\", cnpjGerado);\r",
									"\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function gerarTelefone() {\r",
									"    // Gerando um DDD aleatório entre 11 e 99\r",
									"    const ddd = Math.floor(Math.random() * (99 - 11 + 1)) + 11;\r",
									"\r",
									"    // Gerando o número de telefone com 9 dígitos, começando com 9\r",
									"    const numero = Math.floor(Math.random() * 100000000) + 900000000; // Gera um número aleatório entre 900000000 e 999999999 (começando com '9')\r",
									"\r",
									"    // Concatenando +55, o DDD e o número gerado para formar o telefone\r",
									"    const telefone = `55${ddd}${numero.toString().slice(0, 5)}${numero.toString().slice(5, 9)}`;\r",
									"\r",
									"    return telefone;\r",
									"}\r",
									"\r",
									"// Gerando o número de telefone e armazenando como variável de ambiente\r",
									"const telefoneGerado = gerarTelefone();\r",
									"pm.environment.set(\"telefone\", telefoneGerado);\r",
									"\r",
									"function descricao() {\r",
									"    const names = [\"Testes\", \"Automação\", \"FrontEnd\", \"Backend\",\"Banco de Dados\", \"IA\",\"AWS\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Descricao\", descricao())\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"NomeRua\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"NomeRuas\", lastname())\r",
									"\r",
									"pm.environment.set(\"nomeruaComposto\", \r",
									"    pm.environment.get(\"NomeRua\") + \" \" + pm.environment.get(\"NomeRuas\"))\r",
									"\r",
									"function logradouro() {\r",
									"    const names = [\"Avenida\", \"Rua\", \"Alameda\", \"Travessa\", \"Praça\", \"Rodovia\", \"Estrada\", \"Largo\", \"Viaduto\", \"Marginal\", \"Parque\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Logradouro\", logradouro())\r",
									"\r",
									"pm.environment.set(\"logradouroCompleto\", \r",
									"    pm.environment.get(\"Logradouro\") + \" \" + pm.environment.get(\"nomeruaComposto\"))\r",
									"\r",
									"\r",
									"function gerarNumeroResidencia() {\r",
									"    // Definindo a probabilidade de gerar números com mais de 5 caracteres\r",
									"    const tamanhoNumero = Math.random() < 0.8 ? Math.floor(Math.random() * 5) + 1 : Math.floor(Math.random() * 6) + 5;\r",
									"\r",
									"    // Gerando um número aleatório com o tamanho definido\r",
									"    let numeroResidencia = Math.floor(Math.random() * Math.pow(10, tamanhoNumero)).toString(); // Gera número aleatório com o tamanho desejado\r",
									"\r",
									"    // Se o primeiro caractere for 0, remove-o\r",
									"    if (numeroResidencia[0] === '0') {\r",
									"        numeroResidencia = numeroResidencia.slice(1); // Remove o primeiro caractere\r",
									"    }\r",
									"\r",
									"    // Garantindo que o número tenha no máximo 10 caracteres\r",
									"    if (numeroResidencia.length > 10) {\r",
									"        numeroResidencia = numeroResidencia.slice(0, 10); // Limita a 10 caracteres\r",
									"    }\r",
									"\r",
									"    return numeroResidencia;\r",
									"}\r",
									"\r",
									"// Gerando o número de residência e armazenando como variável de ambiente\r",
									"const numeroResidenciaGerado = gerarNumeroResidencia();\r",
									"pm.environment.set(\"numeroResidencia\", numeroResidenciaGerado);\r",
									"\r",
									"function bairro() {\r",
									"    const names = ['Leblon', 'Ipanema', 'Copacabana', 'Barra da Tijuca', 'Botafogo', 'Lapa', 'Santa Teresa', 'Jardim Botânico', 'Flamengo', 'São Conrado', 'Moema', 'Vila Madalena', 'Pinheiros', 'Jardins', 'Aclimação', 'Brooklin', 'Tatuapé', 'Vila Progredior', 'Vila Nova Conceição', 'Campo Belo','Centro', 'Praia de Belas', 'Moinhos de Vento', 'Petrópolis', 'Tristeza', 'Caminho das Árvores', 'Pituba', 'Stella Maris', 'Parque Atlântico', 'Costa Azul', 'Vila Galvão', 'Santo Amaro', 'Perdizes', 'Aclimação', 'Vila Sônia', 'Cidade Dutra', 'São Bernardo do Campo', 'Vila Mariana', 'Bela Vista', 'Liberdade','Pinheiros', 'Itaim Bibi', 'Santa Cecília', 'Tucuruvi', 'Chácara Santo Antônio', 'Água Fria', 'Vila Olímpia', 'Vila São Francisco', 'Consolação', 'Vila Madalena']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Bairro\", bairro())\r",
									"\r",
									"function cidade() {\r",
									"    const names = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador', 'Curitiba', 'Fortaleza', 'Recife', 'Brasília', 'Manaus', 'Vitória', 'Goiânia', 'Belém', 'Natal', 'São Luís', 'Maceió', 'Campo Grande', 'João Pessoa', 'Aracaju', 'Cuiabá', 'Florianópolis', 'Teresina', 'Palmas', 'Macapá', 'Rio Branco', 'Boa Vista', 'Porto Velho', 'Anápolis', 'Caruaru', 'Londrina','Marabá', 'Araraquara', 'Sorocaba', 'Santos', 'Niterói', 'Mogi das Cruzes', 'Caxias do Sul', 'Barueri', 'Campinas', 'São José', 'Ponta Grossa', 'Jundiaí', 'Uberlândia', 'Diadema', 'Santo André', 'São Bernardo do Campo', 'Itaquaquecetuba', 'Ribeirão Preto', 'Juiz de Fora']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Cidade\", cidade())\r",
									"\r",
									"function abreviacao() {\r",
									"    const names = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"AbreviacaoEstado\", abreviacao())\r",
									"\r",
									"function randomCep() {\r",
									"    let randomCep = '';\r",
									"   \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        randomCep += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCep;\r",
									"}\r",
									"pm.environment.set(\"cep\", randomCep());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 201\", function(){\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Mensagem de sucesso\",function(){\r",
									"    pm.expect(pm.response.json().msg).to.equal(\"Registro realizado com sucesso\")\r",
									"})\r",
									"\r",
									"pm.test(\"Status é True\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.status).to.be.true;\r",
									"})\r",
									"\r",
									"pm.test(\"Nome da Empresa é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.corporateName).to.equal(\"Tiki Taka Tech\")\r",
									"})\r",
									"\r",
									"pm.test(\"CNPJ é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.registerCompany).to.equal(pm.environment.get(\"CNPJ\"))\r",
									"})\r",
									"\r",
									"\r",
									"// Função para validar CNPJ com base nos dígitos verificadores\r",
									"function validarCNPJ(cnpj) {\r",
									"    // Remover qualquer caractere que não seja número\r",
									"    cnpj = cnpj.replace(/\\D/g, '');\r",
									"\r",
									"    // Verifica se o CNPJ tem 14 dígitos\r",
									"    if (cnpj.length !== 14) {\r",
									"        return false;\r",
									"    }\r",
									"\r",
									"    // Cálculo do primeiro dígito verificador\r",
									"    let soma = 0;\r",
									"    let multiplicadoresPrimeiro = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    \r",
									"    for (let i = 0; i < 12; i++) {\r",
									"        soma += parseInt(cnpj[i]) * multiplicadoresPrimeiro[i];\r",
									"    }\r",
									"\r",
									"    let resto = soma % 11;\r",
									"    let primeiroDV = resto < 2 ? 0 : 11 - resto;\r",
									"\r",
									"    // Cálculo do segundo dígito verificador\r",
									"    soma = 0;\r",
									"    let multiplicadoresSegundo = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    \r",
									"    for (let i = 0; i < 13; i++) {\r",
									"        soma += parseInt(cnpj[i]) * multiplicadoresSegundo[i];\r",
									"    }\r",
									"\r",
									"    resto = soma % 11;\r",
									"    let segundoDV = resto < 2 ? 0 : 11 - resto;\r",
									"\r",
									"    // Comparar com os dígitos do CNPJ enviado\r",
									"    return cnpj[12] == primeiroDV && cnpj[13] == segundoDV;\r",
									"}\r",
									"\r",
									"// Obter o CNPJ da resposta da API (supondo que está no campo \"cnpj\")\r",
									"let cnpjRecebido = pm.response.json().newCompany.registerCompany; \r",
									"\r",
									"// Executar a validação\r",
									"if (!validarCNPJ(cnpjRecebido)) {\r",
									"    pm.test(\"O CNPJ retornado é inválido!\", function () {\r",
									"        pm.expect(false).to.be.true;\r",
									"    });\r",
									"} else {\r",
									"    pm.test(\"O CNPJ retornado é válido!\", function () {\r",
									"        pm.expect(true).to.be.true;\r",
									"    });\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"Tiki Taka Tech\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"{{fullnameUser}}\",\r\n  \"telephone\": \"{{telefone}}\",\r\n  \"serviceDescription\": \"{{Descricao}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{cep}}\",\r\n      \"city\": \"{{Cidade}}\",\r\n      \"state\": \"{{AbreviacaoEstado}}\",\r\n      \"district\": \"{{Bairro}}\",\r\n      \"street\": \"{{logradouroCompleto}}\",\r\n      \"number\": \"{{numeroResidencia}}\",\r\n      \"complement\": \"\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTM0MSwiZXhwIjoxNzM5MzE1NzQxfQ.cgJqYe74cprHCRTY9YLF_B-Hfgfp8l8lr6gDrEuqMi4' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"corporateName\": \"Matheus Sousa Testes\",\r\n  \"registerCompany\": \"57126456000155\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com o campo Nome da empresa somente com numero",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function empresa() {\r",
									"    const names = [\"TechNova\", \"Bytewave\", \"Cyberion\", \"InovaTech\", \"Nexabyte\", \"Softtron\", \"Codeverse\", \"Dataflux\", \"Infinitron\", \"LogiCore\", \"Zentek\",\"Neurobyte\", \"Cloudix\", \"Sysnova\", \"Hexabit\", \"AIgorithm\", \"Quantumix\", \"Webtron\", \"Netflux\", \"Cyberflux\", \"Deepcode\", \"Techpulse\", \"Synaptech\", \"Codexis\", \"Nexonix\", \"Algobyte\", \"Infobyte\", \"Datazen\", \"Digiflow\", \"Innovix\", \"Coretron\", \"Zybernet\", \"Neurotech\", \"Nanobyte\", \"Virtunix\", \"Codexel\", \"Optibit\", \"Bitnova\", \"Globotron\", \"Digiware\", \"Skytech\", \"Cybervox\", \"Techspire\", \"Softbit\", \"MetaTech\", \"Synthron\", \"Virtuabyte\", \"Cloudtron\", \"Algonix\", \"Bitzen\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Empresa\", empresa())\r",
									"\r",
									"function tag() {\r",
									"    const tagnames = ['Solutions', 'Tech', 'Digital', 'Systems', 'Software', 'Cloud', 'AI', 'Cyber', 'Data', 'Analytics','Network', 'Security', 'Labs', 'Smart', 'Logic', 'Innovation', 'IT', 'Global', 'Developers', 'Code', 'Techno', 'Automations', 'Cloudware', 'Dynamics', 'Vision', 'Intelligence', 'NextGen', 'Computing', 'Innovators', 'Engineering', 'Performance', 'Softworks', 'Logicware', 'Digitalware', 'Transform', 'Platform', 'Smartware', 'Dataflow', 'Byte', 'Edge', 'Nexus', 'Techworks', 'Bit', 'Virtual', 'SystemsX', 'Infotech', 'Genix', 'Quantum', 'Bitware', 'CloudX'];\r",
									"\r",
									"    const randomTastName = tagnames[Math.floor(Math.random() * tagnames.length)]\r",
									"    return randomTastName\r",
									"}\r",
									"pm.environment.set(\"Tag\", tag())\r",
									"\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"Empresa\") + \" \" + pm.environment.get(\"Tag\"))\r",
									"\r",
									"\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"\r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									"\r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									"\r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									"\r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									"\r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									"\r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"CNPJ\", cnpjGerado);\r",
									"\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function gerarTelefone() {\r",
									"    // Gerando um DDD aleatório entre 11 e 99\r",
									"    const ddd = Math.floor(Math.random() * (99 - 11 + 1)) + 11;\r",
									"\r",
									"    // Gerando o número de telefone com 9 dígitos, começando com 9\r",
									"    const numero = Math.floor(Math.random() * 100000000) + 900000000; // Gera um número aleatório entre 900000000 e 999999999 (começando com '9')\r",
									"\r",
									"    // Concatenando +55, o DDD e o número gerado para formar o telefone\r",
									"    const telefone = `55${ddd}${numero.toString().slice(0, 5)}${numero.toString().slice(5, 9)}`;\r",
									"\r",
									"    return telefone;\r",
									"}\r",
									"\r",
									"// Gerando o número de telefone e armazenando como variável de ambiente\r",
									"const telefoneGerado = gerarTelefone();\r",
									"pm.environment.set(\"telefone\", telefoneGerado);\r",
									"\r",
									"function descricao() {\r",
									"    const names = [\"Testes\", \"Automação\", \"FrontEnd\", \"Backend\",\"Banco de Dados\", \"IA\",\"AWS\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Descricao\", descricao())\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"NomeRua\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"NomeRuas\", lastname())\r",
									"\r",
									"pm.environment.set(\"nomeruaComposto\", \r",
									"    pm.environment.get(\"NomeRua\") + \" \" + pm.environment.get(\"NomeRuas\"))\r",
									"\r",
									"function logradouro() {\r",
									"    const names = [\"Avenida\", \"Rua\", \"Alameda\", \"Travessa\", \"Praça\", \"Rodovia\", \"Estrada\", \"Largo\", \"Viaduto\", \"Marginal\", \"Parque\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Logradouro\", logradouro())\r",
									"\r",
									"pm.environment.set(\"logradouroCompleto\", \r",
									"    pm.environment.get(\"Logradouro\") + \" \" + pm.environment.get(\"nomeruaComposto\"))\r",
									"\r",
									"\r",
									"function gerarNumeroResidencia() {\r",
									"    // Definindo a probabilidade de gerar números com mais de 5 caracteres\r",
									"    const tamanhoNumero = Math.random() < 0.8 ? Math.floor(Math.random() * 5) + 1 : Math.floor(Math.random() * 6) + 5;\r",
									"\r",
									"    // Gerando um número aleatório com o tamanho definido\r",
									"    let numeroResidencia = Math.floor(Math.random() * Math.pow(10, tamanhoNumero)).toString(); // Gera número aleatório com o tamanho desejado\r",
									"\r",
									"    // Se o primeiro caractere for 0, remove-o\r",
									"    if (numeroResidencia[0] === '0') {\r",
									"        numeroResidencia = numeroResidencia.slice(1); // Remove o primeiro caractere\r",
									"    }\r",
									"\r",
									"    // Garantindo que o número tenha no máximo 10 caracteres\r",
									"    if (numeroResidencia.length > 10) {\r",
									"        numeroResidencia = numeroResidencia.slice(0, 10); // Limita a 10 caracteres\r",
									"    }\r",
									"\r",
									"    return numeroResidencia;\r",
									"}\r",
									"\r",
									"// Gerando o número de residência e armazenando como variável de ambiente\r",
									"const numeroResidenciaGerado = gerarNumeroResidencia();\r",
									"pm.environment.set(\"numeroResidencia\", numeroResidenciaGerado);\r",
									"\r",
									"function bairro() {\r",
									"    const names = ['Leblon', 'Ipanema', 'Copacabana', 'Barra da Tijuca', 'Botafogo', 'Lapa', 'Santa Teresa', 'Jardim Botânico', 'Flamengo', 'São Conrado', 'Moema', 'Vila Madalena', 'Pinheiros', 'Jardins', 'Aclimação', 'Brooklin', 'Tatuapé', 'Vila Progredior', 'Vila Nova Conceição', 'Campo Belo','Centro', 'Praia de Belas', 'Moinhos de Vento', 'Petrópolis', 'Tristeza', 'Caminho das Árvores', 'Pituba', 'Stella Maris', 'Parque Atlântico', 'Costa Azul', 'Vila Galvão', 'Santo Amaro', 'Perdizes', 'Aclimação', 'Vila Sônia', 'Cidade Dutra', 'São Bernardo do Campo', 'Vila Mariana', 'Bela Vista', 'Liberdade','Pinheiros', 'Itaim Bibi', 'Santa Cecília', 'Tucuruvi', 'Chácara Santo Antônio', 'Água Fria', 'Vila Olímpia', 'Vila São Francisco', 'Consolação', 'Vila Madalena']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Bairro\", bairro())\r",
									"\r",
									"function cidade() {\r",
									"    const names = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador', 'Curitiba', 'Fortaleza', 'Recife', 'Brasília', 'Manaus', 'Vitória', 'Goiânia', 'Belém', 'Natal', 'São Luís', 'Maceió', 'Campo Grande', 'João Pessoa', 'Aracaju', 'Cuiabá', 'Florianópolis', 'Teresina', 'Palmas', 'Macapá', 'Rio Branco', 'Boa Vista', 'Porto Velho', 'Anápolis', 'Caruaru', 'Londrina','Marabá', 'Araraquara', 'Sorocaba', 'Santos', 'Niterói', 'Mogi das Cruzes', 'Caxias do Sul', 'Barueri', 'Campinas', 'São José', 'Ponta Grossa', 'Jundiaí', 'Uberlândia', 'Diadema', 'Santo André', 'São Bernardo do Campo', 'Itaquaquecetuba', 'Ribeirão Preto', 'Juiz de Fora']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Cidade\", cidade())\r",
									"\r",
									"function abreviacao() {\r",
									"    const names = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"AbreviacaoEstado\", abreviacao())\r",
									"\r",
									"function randomCep() {\r",
									"    let randomCep = '';\r",
									"   \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        randomCep += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCep;\r",
									"}\r",
									"pm.environment.set(\"cep\", randomCep());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 201\", function(){\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Mensagem de sucesso\",function(){\r",
									"    pm.expect(pm.response.json().msg).to.equal(\"Registro realizado com sucesso\")\r",
									"})\r",
									"\r",
									"pm.test(\"Status é True\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.status).to.be.true;\r",
									"})\r",
									"\r",
									"pm.test(\"Nome da Empresa é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.corporateName).to.equal(\"01 09 1910\")\r",
									"})\r",
									"\r",
									"pm.test(\"CNPJ é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.registerCompany).to.equal(pm.environment.get(\"CNPJ\"))\r",
									"})\r",
									"\r",
									"\r",
									"// Função para validar CNPJ com base nos dígitos verificadores\r",
									"function validarCNPJ(cnpj) {\r",
									"    // Remover qualquer caractere que não seja número\r",
									"    cnpj = cnpj.replace(/\\D/g, '');\r",
									"\r",
									"    // Verifica se o CNPJ tem 14 dígitos\r",
									"    if (cnpj.length !== 14) {\r",
									"        return false;\r",
									"    }\r",
									"\r",
									"    // Cálculo do primeiro dígito verificador\r",
									"    let soma = 0;\r",
									"    let multiplicadoresPrimeiro = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    \r",
									"    for (let i = 0; i < 12; i++) {\r",
									"        soma += parseInt(cnpj[i]) * multiplicadoresPrimeiro[i];\r",
									"    }\r",
									"\r",
									"    let resto = soma % 11;\r",
									"    let primeiroDV = resto < 2 ? 0 : 11 - resto;\r",
									"\r",
									"    // Cálculo do segundo dígito verificador\r",
									"    soma = 0;\r",
									"    let multiplicadoresSegundo = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    \r",
									"    for (let i = 0; i < 13; i++) {\r",
									"        soma += parseInt(cnpj[i]) * multiplicadoresSegundo[i];\r",
									"    }\r",
									"\r",
									"    resto = soma % 11;\r",
									"    let segundoDV = resto < 2 ? 0 : 11 - resto;\r",
									"\r",
									"    // Comparar com os dígitos do CNPJ enviado\r",
									"    return cnpj[12] == primeiroDV && cnpj[13] == segundoDV;\r",
									"}\r",
									"\r",
									"// Obter o CNPJ da resposta da API (supondo que está no campo \"cnpj\")\r",
									"let cnpjRecebido = pm.response.json().newCompany.registerCompany; \r",
									"\r",
									"// Executar a validação\r",
									"if (!validarCNPJ(cnpjRecebido)) {\r",
									"    pm.test(\"O CNPJ retornado é inválido!\", function () {\r",
									"        pm.expect(false).to.be.true;\r",
									"    });\r",
									"} else {\r",
									"    pm.test(\"O CNPJ retornado é válido!\", function () {\r",
									"        pm.expect(true).to.be.true;\r",
									"    });\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"01 09 1910\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"{{fullnameUser}}\",\r\n  \"telephone\": \"{{telefone}}\",\r\n  \"serviceDescription\": \"{{Descricao}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{cep}}\",\r\n      \"city\": \"{{Cidade}}\",\r\n      \"state\": \"{{AbreviacaoEstado}}\",\r\n      \"district\": \"{{Bairro}}\",\r\n      \"street\": \"{{logradouroCompleto}}\",\r\n      \"number\": \"{{numeroResidencia}}\",\r\n      \"complement\": \"\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTM0MSwiZXhwIjoxNzM5MzE1NzQxfQ.cgJqYe74cprHCRTY9YLF_B-Hfgfp8l8lr6gDrEuqMi4' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"corporateName\": \"Matheus Sousa Testes\",\r\n  \"registerCompany\": \"57126456000155\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com o campo Nome da empresa com letras e numeros",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function empresa() {\r",
									"    const names = [\"TechNova\", \"Bytewave\", \"Cyberion\", \"InovaTech\", \"Nexabyte\", \"Softtron\", \"Codeverse\", \"Dataflux\", \"Infinitron\", \"LogiCore\", \"Zentek\",\"Neurobyte\", \"Cloudix\", \"Sysnova\", \"Hexabit\", \"AIgorithm\", \"Quantumix\", \"Webtron\", \"Netflux\", \"Cyberflux\", \"Deepcode\", \"Techpulse\", \"Synaptech\", \"Codexis\", \"Nexonix\", \"Algobyte\", \"Infobyte\", \"Datazen\", \"Digiflow\", \"Innovix\", \"Coretron\", \"Zybernet\", \"Neurotech\", \"Nanobyte\", \"Virtunix\", \"Codexel\", \"Optibit\", \"Bitnova\", \"Globotron\", \"Digiware\", \"Skytech\", \"Cybervox\", \"Techspire\", \"Softbit\", \"MetaTech\", \"Synthron\", \"Virtuabyte\", \"Cloudtron\", \"Algonix\", \"Bitzen\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Empresa\", empresa())\r",
									"\r",
									"function tag() {\r",
									"    const tagnames = ['Solutions', 'Tech', 'Digital', 'Systems', 'Software', 'Cloud', 'AI', 'Cyber', 'Data', 'Analytics','Network', 'Security', 'Labs', 'Smart', 'Logic', 'Innovation', 'IT', 'Global', 'Developers', 'Code', 'Techno', 'Automations', 'Cloudware', 'Dynamics', 'Vision', 'Intelligence', 'NextGen', 'Computing', 'Innovators', 'Engineering', 'Performance', 'Softworks', 'Logicware', 'Digitalware', 'Transform', 'Platform', 'Smartware', 'Dataflow', 'Byte', 'Edge', 'Nexus', 'Techworks', 'Bit', 'Virtual', 'SystemsX', 'Infotech', 'Genix', 'Quantum', 'Bitware', 'CloudX'];\r",
									"\r",
									"    const randomTastName = tagnames[Math.floor(Math.random() * tagnames.length)]\r",
									"    return randomTastName\r",
									"}\r",
									"pm.environment.set(\"Tag\", tag())\r",
									"\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"Empresa\") + \" \" + pm.environment.get(\"Tag\"))\r",
									"\r",
									"\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"\r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									"\r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									"\r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									"\r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									"\r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									"\r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"CNPJ\", cnpjGerado);\r",
									"\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function gerarTelefone() {\r",
									"    // Gerando um DDD aleatório entre 11 e 99\r",
									"    const ddd = Math.floor(Math.random() * (99 - 11 + 1)) + 11;\r",
									"\r",
									"    // Gerando o número de telefone com 9 dígitos, começando com 9\r",
									"    const numero = Math.floor(Math.random() * 100000000) + 900000000; // Gera um número aleatório entre 900000000 e 999999999 (começando com '9')\r",
									"\r",
									"    // Concatenando +55, o DDD e o número gerado para formar o telefone\r",
									"    const telefone = `55${ddd}${numero.toString().slice(0, 5)}${numero.toString().slice(5, 9)}`;\r",
									"\r",
									"    return telefone;\r",
									"}\r",
									"\r",
									"// Gerando o número de telefone e armazenando como variável de ambiente\r",
									"const telefoneGerado = gerarTelefone();\r",
									"pm.environment.set(\"telefone\", telefoneGerado);\r",
									"\r",
									"function descricao() {\r",
									"    const names = [\"Testes\", \"Automação\", \"FrontEnd\", \"Backend\",\"Banco de Dados\", \"IA\",\"AWS\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Descricao\", descricao())\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"NomeRua\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"NomeRuas\", lastname())\r",
									"\r",
									"pm.environment.set(\"nomeruaComposto\", \r",
									"    pm.environment.get(\"NomeRua\") + \" \" + pm.environment.get(\"NomeRuas\"))\r",
									"\r",
									"function logradouro() {\r",
									"    const names = [\"Avenida\", \"Rua\", \"Alameda\", \"Travessa\", \"Praça\", \"Rodovia\", \"Estrada\", \"Largo\", \"Viaduto\", \"Marginal\", \"Parque\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Logradouro\", logradouro())\r",
									"\r",
									"pm.environment.set(\"logradouroCompleto\", \r",
									"    pm.environment.get(\"Logradouro\") + \" \" + pm.environment.get(\"nomeruaComposto\"))\r",
									"\r",
									"\r",
									"function gerarNumeroResidencia() {\r",
									"    // Definindo a probabilidade de gerar números com mais de 5 caracteres\r",
									"    const tamanhoNumero = Math.random() < 0.8 ? Math.floor(Math.random() * 5) + 1 : Math.floor(Math.random() * 6) + 5;\r",
									"\r",
									"    // Gerando um número aleatório com o tamanho definido\r",
									"    let numeroResidencia = Math.floor(Math.random() * Math.pow(10, tamanhoNumero)).toString(); // Gera número aleatório com o tamanho desejado\r",
									"\r",
									"    // Se o primeiro caractere for 0, remove-o\r",
									"    if (numeroResidencia[0] === '0') {\r",
									"        numeroResidencia = numeroResidencia.slice(1); // Remove o primeiro caractere\r",
									"    }\r",
									"\r",
									"    // Garantindo que o número tenha no máximo 10 caracteres\r",
									"    if (numeroResidencia.length > 10) {\r",
									"        numeroResidencia = numeroResidencia.slice(0, 10); // Limita a 10 caracteres\r",
									"    }\r",
									"\r",
									"    return numeroResidencia;\r",
									"}\r",
									"\r",
									"// Gerando o número de residência e armazenando como variável de ambiente\r",
									"const numeroResidenciaGerado = gerarNumeroResidencia();\r",
									"pm.environment.set(\"numeroResidencia\", numeroResidenciaGerado);\r",
									"\r",
									"function bairro() {\r",
									"    const names = ['Leblon', 'Ipanema', 'Copacabana', 'Barra da Tijuca', 'Botafogo', 'Lapa', 'Santa Teresa', 'Jardim Botânico', 'Flamengo', 'São Conrado', 'Moema', 'Vila Madalena', 'Pinheiros', 'Jardins', 'Aclimação', 'Brooklin', 'Tatuapé', 'Vila Progredior', 'Vila Nova Conceição', 'Campo Belo','Centro', 'Praia de Belas', 'Moinhos de Vento', 'Petrópolis', 'Tristeza', 'Caminho das Árvores', 'Pituba', 'Stella Maris', 'Parque Atlântico', 'Costa Azul', 'Vila Galvão', 'Santo Amaro', 'Perdizes', 'Aclimação', 'Vila Sônia', 'Cidade Dutra', 'São Bernardo do Campo', 'Vila Mariana', 'Bela Vista', 'Liberdade','Pinheiros', 'Itaim Bibi', 'Santa Cecília', 'Tucuruvi', 'Chácara Santo Antônio', 'Água Fria', 'Vila Olímpia', 'Vila São Francisco', 'Consolação', 'Vila Madalena']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Bairro\", bairro())\r",
									"\r",
									"function cidade() {\r",
									"    const names = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador', 'Curitiba', 'Fortaleza', 'Recife', 'Brasília', 'Manaus', 'Vitória', 'Goiânia', 'Belém', 'Natal', 'São Luís', 'Maceió', 'Campo Grande', 'João Pessoa', 'Aracaju', 'Cuiabá', 'Florianópolis', 'Teresina', 'Palmas', 'Macapá', 'Rio Branco', 'Boa Vista', 'Porto Velho', 'Anápolis', 'Caruaru', 'Londrina','Marabá', 'Araraquara', 'Sorocaba', 'Santos', 'Niterói', 'Mogi das Cruzes', 'Caxias do Sul', 'Barueri', 'Campinas', 'São José', 'Ponta Grossa', 'Jundiaí', 'Uberlândia', 'Diadema', 'Santo André', 'São Bernardo do Campo', 'Itaquaquecetuba', 'Ribeirão Preto', 'Juiz de Fora']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Cidade\", cidade())\r",
									"\r",
									"function abreviacao() {\r",
									"    const names = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"AbreviacaoEstado\", abreviacao())\r",
									"\r",
									"function randomCep() {\r",
									"    let randomCep = '';\r",
									"   \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        randomCep += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCep;\r",
									"}\r",
									"pm.environment.set(\"cep\", randomCep());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 201\", function(){\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Mensagem de sucesso\",function(){\r",
									"    pm.expect(pm.response.json().msg).to.equal(\"Registro realizado com sucesso\")\r",
									"})\r",
									"\r",
									"pm.test(\"Status é True\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.status).to.be.true;\r",
									"})\r",
									"\r",
									"pm.test(\"Nome da Empresa é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.corporateName).to.equal(\"Tika Taka Tech 2000\")\r",
									"})\r",
									"\r",
									"pm.test(\"CNPJ é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.registerCompany).to.equal(pm.environment.get(\"CNPJ\"))\r",
									"})\r",
									"\r",
									"\r",
									"// Função para validar CNPJ com base nos dígitos verificadores\r",
									"function validarCNPJ(cnpj) {\r",
									"    // Remover qualquer caractere que não seja número\r",
									"    cnpj = cnpj.replace(/\\D/g, '');\r",
									"\r",
									"    // Verifica se o CNPJ tem 14 dígitos\r",
									"    if (cnpj.length !== 14) {\r",
									"        return false;\r",
									"    }\r",
									"\r",
									"    // Cálculo do primeiro dígito verificador\r",
									"    let soma = 0;\r",
									"    let multiplicadoresPrimeiro = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    \r",
									"    for (let i = 0; i < 12; i++) {\r",
									"        soma += parseInt(cnpj[i]) * multiplicadoresPrimeiro[i];\r",
									"    }\r",
									"\r",
									"    let resto = soma % 11;\r",
									"    let primeiroDV = resto < 2 ? 0 : 11 - resto;\r",
									"\r",
									"    // Cálculo do segundo dígito verificador\r",
									"    soma = 0;\r",
									"    let multiplicadoresSegundo = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    \r",
									"    for (let i = 0; i < 13; i++) {\r",
									"        soma += parseInt(cnpj[i]) * multiplicadoresSegundo[i];\r",
									"    }\r",
									"\r",
									"    resto = soma % 11;\r",
									"    let segundoDV = resto < 2 ? 0 : 11 - resto;\r",
									"\r",
									"    // Comparar com os dígitos do CNPJ enviado\r",
									"    return cnpj[12] == primeiroDV && cnpj[13] == segundoDV;\r",
									"}\r",
									"\r",
									"// Obter o CNPJ da resposta da API (supondo que está no campo \"cnpj\")\r",
									"let cnpjRecebido = pm.response.json().newCompany.registerCompany; \r",
									"\r",
									"// Executar a validação\r",
									"if (!validarCNPJ(cnpjRecebido)) {\r",
									"    pm.test(\"O CNPJ retornado é inválido!\", function () {\r",
									"        pm.expect(false).to.be.true;\r",
									"    });\r",
									"} else {\r",
									"    pm.test(\"O CNPJ retornado é válido!\", function () {\r",
									"        pm.expect(true).to.be.true;\r",
									"    });\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"Tika Taka Tech 2000\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"{{fullnameUser}}\",\r\n  \"telephone\": \"{{telefone}}\",\r\n  \"serviceDescription\": \"{{Descricao}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{cep}}\",\r\n      \"city\": \"{{Cidade}}\",\r\n      \"state\": \"{{AbreviacaoEstado}}\",\r\n      \"district\": \"{{Bairro}}\",\r\n      \"street\": \"{{logradouroCompleto}}\",\r\n      \"number\": \"{{numeroResidencia}}\",\r\n      \"complement\": \"\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTM0MSwiZXhwIjoxNzM5MzE1NzQxfQ.cgJqYe74cprHCRTY9YLF_B-Hfgfp8l8lr6gDrEuqMi4' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"corporateName\": \"Matheus Sousa Testes\",\r\n  \"registerCompany\": \"57126456000155\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com o campo Nome da empresa com caractere especial",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function empresa() {\r",
									"    const names = [\"TechNova\", \"Bytewave\", \"Cyberion\", \"InovaTech\", \"Nexabyte\", \"Softtron\", \"Codeverse\", \"Dataflux\", \"Infinitron\", \"LogiCore\", \"Zentek\",\"Neurobyte\", \"Cloudix\", \"Sysnova\", \"Hexabit\", \"AIgorithm\", \"Quantumix\", \"Webtron\", \"Netflux\", \"Cyberflux\", \"Deepcode\", \"Techpulse\", \"Synaptech\", \"Codexis\", \"Nexonix\", \"Algobyte\", \"Infobyte\", \"Datazen\", \"Digiflow\", \"Innovix\", \"Coretron\", \"Zybernet\", \"Neurotech\", \"Nanobyte\", \"Virtunix\", \"Codexel\", \"Optibit\", \"Bitnova\", \"Globotron\", \"Digiware\", \"Skytech\", \"Cybervox\", \"Techspire\", \"Softbit\", \"MetaTech\", \"Synthron\", \"Virtuabyte\", \"Cloudtron\", \"Algonix\", \"Bitzen\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Empresa\", empresa())\r",
									"\r",
									"function tag() {\r",
									"    const tagnames = ['Solutions', 'Tech', 'Digital', 'Systems', 'Software', 'Cloud', 'AI', 'Cyber', 'Data', 'Analytics','Network', 'Security', 'Labs', 'Smart', 'Logic', 'Innovation', 'IT', 'Global', 'Developers', 'Code', 'Techno', 'Automations', 'Cloudware', 'Dynamics', 'Vision', 'Intelligence', 'NextGen', 'Computing', 'Innovators', 'Engineering', 'Performance', 'Softworks', 'Logicware', 'Digitalware', 'Transform', 'Platform', 'Smartware', 'Dataflow', 'Byte', 'Edge', 'Nexus', 'Techworks', 'Bit', 'Virtual', 'SystemsX', 'Infotech', 'Genix', 'Quantum', 'Bitware', 'CloudX'];\r",
									"\r",
									"    const randomTastName = tagnames[Math.floor(Math.random() * tagnames.length)]\r",
									"    return randomTastName\r",
									"}\r",
									"pm.environment.set(\"Tag\", tag())\r",
									"\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"Empresa\") + \" \" + pm.environment.get(\"Tag\"))\r",
									"\r",
									"\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"\r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									"\r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									"\r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									"\r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									"\r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									"\r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"CNPJ\", cnpjGerado);\r",
									"\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function gerarTelefone() {\r",
									"    // Gerando um DDD aleatório entre 11 e 99\r",
									"    const ddd = Math.floor(Math.random() * (99 - 11 + 1)) + 11;\r",
									"\r",
									"    // Gerando o número de telefone com 9 dígitos, começando com 9\r",
									"    const numero = Math.floor(Math.random() * 100000000) + 900000000; // Gera um número aleatório entre 900000000 e 999999999 (começando com '9')\r",
									"\r",
									"    // Concatenando +55, o DDD e o número gerado para formar o telefone\r",
									"    const telefone = `55${ddd}${numero.toString().slice(0, 5)}${numero.toString().slice(5, 9)}`;\r",
									"\r",
									"    return telefone;\r",
									"}\r",
									"\r",
									"// Gerando o número de telefone e armazenando como variável de ambiente\r",
									"const telefoneGerado = gerarTelefone();\r",
									"pm.environment.set(\"telefone\", telefoneGerado);\r",
									"\r",
									"function descricao() {\r",
									"    const names = [\"Testes\", \"Automação\", \"FrontEnd\", \"Backend\",\"Banco de Dados\", \"IA\",\"AWS\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Descricao\", descricao())\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"NomeRua\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"NomeRuas\", lastname())\r",
									"\r",
									"pm.environment.set(\"nomeruaComposto\", \r",
									"    pm.environment.get(\"NomeRua\") + \" \" + pm.environment.get(\"NomeRuas\"))\r",
									"\r",
									"function logradouro() {\r",
									"    const names = [\"Avenida\", \"Rua\", \"Alameda\", \"Travessa\", \"Praça\", \"Rodovia\", \"Estrada\", \"Largo\", \"Viaduto\", \"Marginal\", \"Parque\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Logradouro\", logradouro())\r",
									"\r",
									"pm.environment.set(\"logradouroCompleto\", \r",
									"    pm.environment.get(\"Logradouro\") + \" \" + pm.environment.get(\"nomeruaComposto\"))\r",
									"\r",
									"\r",
									"function gerarNumeroResidencia() {\r",
									"    // Definindo a probabilidade de gerar números com mais de 5 caracteres\r",
									"    const tamanhoNumero = Math.random() < 0.8 ? Math.floor(Math.random() * 5) + 1 : Math.floor(Math.random() * 6) + 5;\r",
									"\r",
									"    // Gerando um número aleatório com o tamanho definido\r",
									"    let numeroResidencia = Math.floor(Math.random() * Math.pow(10, tamanhoNumero)).toString(); // Gera número aleatório com o tamanho desejado\r",
									"\r",
									"    // Se o primeiro caractere for 0, remove-o\r",
									"    if (numeroResidencia[0] === '0') {\r",
									"        numeroResidencia = numeroResidencia.slice(1); // Remove o primeiro caractere\r",
									"    }\r",
									"\r",
									"    // Garantindo que o número tenha no máximo 10 caracteres\r",
									"    if (numeroResidencia.length > 10) {\r",
									"        numeroResidencia = numeroResidencia.slice(0, 10); // Limita a 10 caracteres\r",
									"    }\r",
									"\r",
									"    return numeroResidencia;\r",
									"}\r",
									"\r",
									"// Gerando o número de residência e armazenando como variável de ambiente\r",
									"const numeroResidenciaGerado = gerarNumeroResidencia();\r",
									"pm.environment.set(\"numeroResidencia\", numeroResidenciaGerado);\r",
									"\r",
									"function bairro() {\r",
									"    const names = ['Leblon', 'Ipanema', 'Copacabana', 'Barra da Tijuca', 'Botafogo', 'Lapa', 'Santa Teresa', 'Jardim Botânico', 'Flamengo', 'São Conrado', 'Moema', 'Vila Madalena', 'Pinheiros', 'Jardins', 'Aclimação', 'Brooklin', 'Tatuapé', 'Vila Progredior', 'Vila Nova Conceição', 'Campo Belo','Centro', 'Praia de Belas', 'Moinhos de Vento', 'Petrópolis', 'Tristeza', 'Caminho das Árvores', 'Pituba', 'Stella Maris', 'Parque Atlântico', 'Costa Azul', 'Vila Galvão', 'Santo Amaro', 'Perdizes', 'Aclimação', 'Vila Sônia', 'Cidade Dutra', 'São Bernardo do Campo', 'Vila Mariana', 'Bela Vista', 'Liberdade','Pinheiros', 'Itaim Bibi', 'Santa Cecília', 'Tucuruvi', 'Chácara Santo Antônio', 'Água Fria', 'Vila Olímpia', 'Vila São Francisco', 'Consolação', 'Vila Madalena']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Bairro\", bairro())\r",
									"\r",
									"function cidade() {\r",
									"    const names = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador', 'Curitiba', 'Fortaleza', 'Recife', 'Brasília', 'Manaus', 'Vitória', 'Goiânia', 'Belém', 'Natal', 'São Luís', 'Maceió', 'Campo Grande', 'João Pessoa', 'Aracaju', 'Cuiabá', 'Florianópolis', 'Teresina', 'Palmas', 'Macapá', 'Rio Branco', 'Boa Vista', 'Porto Velho', 'Anápolis', 'Caruaru', 'Londrina','Marabá', 'Araraquara', 'Sorocaba', 'Santos', 'Niterói', 'Mogi das Cruzes', 'Caxias do Sul', 'Barueri', 'Campinas', 'São José', 'Ponta Grossa', 'Jundiaí', 'Uberlândia', 'Diadema', 'Santo André', 'São Bernardo do Campo', 'Itaquaquecetuba', 'Ribeirão Preto', 'Juiz de Fora']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Cidade\", cidade())\r",
									"\r",
									"function abreviacao() {\r",
									"    const names = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"AbreviacaoEstado\", abreviacao())\r",
									"\r",
									"function randomCep() {\r",
									"    let randomCep = '';\r",
									"   \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        randomCep += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCep;\r",
									"}\r",
									"pm.environment.set(\"cep\", randomCep());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"Tika T@k@!?%& Tech 2000\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"{{fullnameUser}}\",\r\n  \"telephone\": \"{{telefone}}\",\r\n  \"serviceDescription\": \"{{Descricao}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{cep}}\",\r\n      \"city\": \"{{Cidade}}\",\r\n      \"state\": \"{{AbreviacaoEstado}}\",\r\n      \"district\": \"{{Bairro}}\",\r\n      \"street\": \"{{logradouroCompleto}}\",\r\n      \"number\": \"{{numeroResidencia}}\",\r\n      \"complement\": \"\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTM0MSwiZXhwIjoxNzM5MzE1NzQxfQ.cgJqYe74cprHCRTY9YLF_B-Hfgfp8l8lr6gDrEuqMi4' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"corporateName\": \"Matheus Sousa Testes\",\r\n  \"registerCompany\": \"57126456000155\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com o campo Nome da empresa com mais de 100 caracteres",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function empresa() {\r",
									"    const names = [\"TechNova\", \"Bytewave\", \"Cyberion\", \"InovaTech\", \"Nexabyte\", \"Softtron\", \"Codeverse\", \"Dataflux\", \"Infinitron\", \"LogiCore\", \"Zentek\",\"Neurobyte\", \"Cloudix\", \"Sysnova\", \"Hexabit\", \"AIgorithm\", \"Quantumix\", \"Webtron\", \"Netflux\", \"Cyberflux\", \"Deepcode\", \"Techpulse\", \"Synaptech\", \"Codexis\", \"Nexonix\", \"Algobyte\", \"Infobyte\", \"Datazen\", \"Digiflow\", \"Innovix\", \"Coretron\", \"Zybernet\", \"Neurotech\", \"Nanobyte\", \"Virtunix\", \"Codexel\", \"Optibit\", \"Bitnova\", \"Globotron\", \"Digiware\", \"Skytech\", \"Cybervox\", \"Techspire\", \"Softbit\", \"MetaTech\", \"Synthron\", \"Virtuabyte\", \"Cloudtron\", \"Algonix\", \"Bitzen\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Empresa\", empresa())\r",
									"\r",
									"function tag() {\r",
									"    const tagnames = ['Solutions', 'Tech', 'Digital', 'Systems', 'Software', 'Cloud', 'AI', 'Cyber', 'Data', 'Analytics','Network', 'Security', 'Labs', 'Smart', 'Logic', 'Innovation', 'IT', 'Global', 'Developers', 'Code', 'Techno', 'Automations', 'Cloudware', 'Dynamics', 'Vision', 'Intelligence', 'NextGen', 'Computing', 'Innovators', 'Engineering', 'Performance', 'Softworks', 'Logicware', 'Digitalware', 'Transform', 'Platform', 'Smartware', 'Dataflow', 'Byte', 'Edge', 'Nexus', 'Techworks', 'Bit', 'Virtual', 'SystemsX', 'Infotech', 'Genix', 'Quantum', 'Bitware', 'CloudX'];\r",
									"\r",
									"    const randomTastName = tagnames[Math.floor(Math.random() * tagnames.length)]\r",
									"    return randomTastName\r",
									"}\r",
									"pm.environment.set(\"Tag\", tag())\r",
									"\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"Empresa\") + \" \" + pm.environment.get(\"Tag\"))\r",
									"\r",
									"\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"\r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									"\r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									"\r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									"\r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									"\r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									"\r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"CNPJ\", cnpjGerado);\r",
									"\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function gerarTelefone() {\r",
									"    // Gerando um DDD aleatório entre 11 e 99\r",
									"    const ddd = Math.floor(Math.random() * (99 - 11 + 1)) + 11;\r",
									"\r",
									"    // Gerando o número de telefone com 9 dígitos, começando com 9\r",
									"    const numero = Math.floor(Math.random() * 100000000) + 900000000; // Gera um número aleatório entre 900000000 e 999999999 (começando com '9')\r",
									"\r",
									"    // Concatenando +55, o DDD e o número gerado para formar o telefone\r",
									"    const telefone = `55${ddd}${numero.toString().slice(0, 5)}${numero.toString().slice(5, 9)}`;\r",
									"\r",
									"    return telefone;\r",
									"}\r",
									"\r",
									"// Gerando o número de telefone e armazenando como variável de ambiente\r",
									"const telefoneGerado = gerarTelefone();\r",
									"pm.environment.set(\"telefone\", telefoneGerado);\r",
									"\r",
									"function descricao() {\r",
									"    const names = [\"Testes\", \"Automação\", \"FrontEnd\", \"Backend\",\"Banco de Dados\", \"IA\",\"AWS\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Descricao\", descricao())\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"NomeRua\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"NomeRuas\", lastname())\r",
									"\r",
									"pm.environment.set(\"nomeruaComposto\", \r",
									"    pm.environment.get(\"NomeRua\") + \" \" + pm.environment.get(\"NomeRuas\"))\r",
									"\r",
									"function logradouro() {\r",
									"    const names = [\"Avenida\", \"Rua\", \"Alameda\", \"Travessa\", \"Praça\", \"Rodovia\", \"Estrada\", \"Largo\", \"Viaduto\", \"Marginal\", \"Parque\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Logradouro\", logradouro())\r",
									"\r",
									"pm.environment.set(\"logradouroCompleto\", \r",
									"    pm.environment.get(\"Logradouro\") + \" \" + pm.environment.get(\"nomeruaComposto\"))\r",
									"\r",
									"\r",
									"function gerarNumeroResidencia() {\r",
									"    // Definindo a probabilidade de gerar números com mais de 5 caracteres\r",
									"    const tamanhoNumero = Math.random() < 0.8 ? Math.floor(Math.random() * 5) + 1 : Math.floor(Math.random() * 6) + 5;\r",
									"\r",
									"    // Gerando um número aleatório com o tamanho definido\r",
									"    let numeroResidencia = Math.floor(Math.random() * Math.pow(10, tamanhoNumero)).toString(); // Gera número aleatório com o tamanho desejado\r",
									"\r",
									"    // Se o primeiro caractere for 0, remove-o\r",
									"    if (numeroResidencia[0] === '0') {\r",
									"        numeroResidencia = numeroResidencia.slice(1); // Remove o primeiro caractere\r",
									"    }\r",
									"\r",
									"    // Garantindo que o número tenha no máximo 10 caracteres\r",
									"    if (numeroResidencia.length > 10) {\r",
									"        numeroResidencia = numeroResidencia.slice(0, 10); // Limita a 10 caracteres\r",
									"    }\r",
									"\r",
									"    return numeroResidencia;\r",
									"}\r",
									"\r",
									"// Gerando o número de residência e armazenando como variável de ambiente\r",
									"const numeroResidenciaGerado = gerarNumeroResidencia();\r",
									"pm.environment.set(\"numeroResidencia\", numeroResidenciaGerado);\r",
									"\r",
									"function bairro() {\r",
									"    const names = ['Leblon', 'Ipanema', 'Copacabana', 'Barra da Tijuca', 'Botafogo', 'Lapa', 'Santa Teresa', 'Jardim Botânico', 'Flamengo', 'São Conrado', 'Moema', 'Vila Madalena', 'Pinheiros', 'Jardins', 'Aclimação', 'Brooklin', 'Tatuapé', 'Vila Progredior', 'Vila Nova Conceição', 'Campo Belo','Centro', 'Praia de Belas', 'Moinhos de Vento', 'Petrópolis', 'Tristeza', 'Caminho das Árvores', 'Pituba', 'Stella Maris', 'Parque Atlântico', 'Costa Azul', 'Vila Galvão', 'Santo Amaro', 'Perdizes', 'Aclimação', 'Vila Sônia', 'Cidade Dutra', 'São Bernardo do Campo', 'Vila Mariana', 'Bela Vista', 'Liberdade','Pinheiros', 'Itaim Bibi', 'Santa Cecília', 'Tucuruvi', 'Chácara Santo Antônio', 'Água Fria', 'Vila Olímpia', 'Vila São Francisco', 'Consolação', 'Vila Madalena']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Bairro\", bairro())\r",
									"\r",
									"function cidade() {\r",
									"    const names = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador', 'Curitiba', 'Fortaleza', 'Recife', 'Brasília', 'Manaus', 'Vitória', 'Goiânia', 'Belém', 'Natal', 'São Luís', 'Maceió', 'Campo Grande', 'João Pessoa', 'Aracaju', 'Cuiabá', 'Florianópolis', 'Teresina', 'Palmas', 'Macapá', 'Rio Branco', 'Boa Vista', 'Porto Velho', 'Anápolis', 'Caruaru', 'Londrina','Marabá', 'Araraquara', 'Sorocaba', 'Santos', 'Niterói', 'Mogi das Cruzes', 'Caxias do Sul', 'Barueri', 'Campinas', 'São José', 'Ponta Grossa', 'Jundiaí', 'Uberlândia', 'Diadema', 'Santo André', 'São Bernardo do Campo', 'Itaquaquecetuba', 'Ribeirão Preto', 'Juiz de Fora']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Cidade\", cidade())\r",
									"\r",
									"function abreviacao() {\r",
									"    const names = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"AbreviacaoEstado\", abreviacao())\r",
									"\r",
									"function randomCep() {\r",
									"    let randomCep = '';\r",
									"   \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        randomCep += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCep;\r",
									"}\r",
									"pm.environment.set(\"cep\", randomCep());\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"nomeempresaExc\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\")+ \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\") + \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\") + \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\") + \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\") + \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\") + \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\") + \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\") + \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\") + \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\") + \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\") + \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\") + \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\") + \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\") + \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\") + \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\") + \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomeempresaExc}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"{{fullnameUser}}\",\r\n  \"telephone\": \"{{telefone}}\",\r\n  \"serviceDescription\": \"{{Descricao}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{cep}}\",\r\n      \"city\": \"{{Cidade}}\",\r\n      \"state\": \"{{AbreviacaoEstado}}\",\r\n      \"district\": \"{{Bairro}}\",\r\n      \"street\": \"{{logradouroCompleto}}\",\r\n      \"number\": \"{{numeroResidencia}}\",\r\n      \"complement\": \"\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTM0MSwiZXhwIjoxNzM5MzE1NzQxfQ.cgJqYe74cprHCRTY9YLF_B-Hfgfp8l8lr6gDrEuqMi4' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"corporateName\": \"Matheus Sousa Testes\",\r\n  \"registerCompany\": \"57126456000155\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com o campo Nome da empresa  ja existente",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function empresa() {\r",
									"    const names = [\"TechNova\", \"Bytewave\", \"Cyberion\", \"InovaTech\", \"Nexabyte\", \"Softtron\", \"Codeverse\", \"Dataflux\", \"Infinitron\", \"LogiCore\", \"Zentek\",\"Neurobyte\", \"Cloudix\", \"Sysnova\", \"Hexabit\", \"AIgorithm\", \"Quantumix\", \"Webtron\", \"Netflux\", \"Cyberflux\", \"Deepcode\", \"Techpulse\", \"Synaptech\", \"Codexis\", \"Nexonix\", \"Algobyte\", \"Infobyte\", \"Datazen\", \"Digiflow\", \"Innovix\", \"Coretron\", \"Zybernet\", \"Neurotech\", \"Nanobyte\", \"Virtunix\", \"Codexel\", \"Optibit\", \"Bitnova\", \"Globotron\", \"Digiware\", \"Skytech\", \"Cybervox\", \"Techspire\", \"Softbit\", \"MetaTech\", \"Synthron\", \"Virtuabyte\", \"Cloudtron\", \"Algonix\", \"Bitzen\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Empresa\", empresa())\r",
									"\r",
									"function tag() {\r",
									"    const tagnames = ['Solutions', 'Tech', 'Digital', 'Systems', 'Software', 'Cloud', 'AI', 'Cyber', 'Data', 'Analytics','Network', 'Security', 'Labs', 'Smart', 'Logic', 'Innovation', 'IT', 'Global', 'Developers', 'Code', 'Techno', 'Automations', 'Cloudware', 'Dynamics', 'Vision', 'Intelligence', 'NextGen', 'Computing', 'Innovators', 'Engineering', 'Performance', 'Softworks', 'Logicware', 'Digitalware', 'Transform', 'Platform', 'Smartware', 'Dataflow', 'Byte', 'Edge', 'Nexus', 'Techworks', 'Bit', 'Virtual', 'SystemsX', 'Infotech', 'Genix', 'Quantum', 'Bitware', 'CloudX'];\r",
									"\r",
									"    const randomTastName = tagnames[Math.floor(Math.random() * tagnames.length)]\r",
									"    return randomTastName\r",
									"}\r",
									"pm.environment.set(\"Tag\", tag())\r",
									"\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"Empresa\") + \" \" + pm.environment.get(\"Tag\"))\r",
									"\r",
									"\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"\r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									"\r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									"\r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									"\r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									"\r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									"\r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"CNPJ\", cnpjGerado);\r",
									"\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function gerarTelefone() {\r",
									"    // Gerando um DDD aleatório entre 11 e 99\r",
									"    const ddd = Math.floor(Math.random() * (99 - 11 + 1)) + 11;\r",
									"\r",
									"    // Gerando o número de telefone com 9 dígitos, começando com 9\r",
									"    const numero = Math.floor(Math.random() * 100000000) + 900000000; // Gera um número aleatório entre 900000000 e 999999999 (começando com '9')\r",
									"\r",
									"    // Concatenando +55, o DDD e o número gerado para formar o telefone\r",
									"    const telefone = `55${ddd}${numero.toString().slice(0, 5)}${numero.toString().slice(5, 9)}`;\r",
									"\r",
									"    return telefone;\r",
									"}\r",
									"\r",
									"// Gerando o número de telefone e armazenando como variável de ambiente\r",
									"const telefoneGerado = gerarTelefone();\r",
									"pm.environment.set(\"telefone\", telefoneGerado);\r",
									"\r",
									"function descricao() {\r",
									"    const names = [\"Testes\", \"Automação\", \"FrontEnd\", \"Backend\",\"Banco de Dados\", \"IA\",\"AWS\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Descricao\", descricao())\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"NomeRua\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"NomeRuas\", lastname())\r",
									"\r",
									"pm.environment.set(\"nomeruaComposto\", \r",
									"    pm.environment.get(\"NomeRua\") + \" \" + pm.environment.get(\"NomeRuas\"))\r",
									"\r",
									"function logradouro() {\r",
									"    const names = [\"Avenida\", \"Rua\", \"Alameda\", \"Travessa\", \"Praça\", \"Rodovia\", \"Estrada\", \"Largo\", \"Viaduto\", \"Marginal\", \"Parque\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Logradouro\", logradouro())\r",
									"\r",
									"pm.environment.set(\"logradouroCompleto\", \r",
									"    pm.environment.get(\"Logradouro\") + \" \" + pm.environment.get(\"nomeruaComposto\"))\r",
									"\r",
									"\r",
									"function gerarNumeroResidencia() {\r",
									"    // Definindo a probabilidade de gerar números com mais de 5 caracteres\r",
									"    const tamanhoNumero = Math.random() < 0.8 ? Math.floor(Math.random() * 5) + 1 : Math.floor(Math.random() * 6) + 5;\r",
									"\r",
									"    // Gerando um número aleatório com o tamanho definido\r",
									"    let numeroResidencia = Math.floor(Math.random() * Math.pow(10, tamanhoNumero)).toString(); // Gera número aleatório com o tamanho desejado\r",
									"\r",
									"    // Se o primeiro caractere for 0, remove-o\r",
									"    if (numeroResidencia[0] === '0') {\r",
									"        numeroResidencia = numeroResidencia.slice(1); // Remove o primeiro caractere\r",
									"    }\r",
									"\r",
									"    // Garantindo que o número tenha no máximo 10 caracteres\r",
									"    if (numeroResidencia.length > 10) {\r",
									"        numeroResidencia = numeroResidencia.slice(0, 10); // Limita a 10 caracteres\r",
									"    }\r",
									"\r",
									"    return numeroResidencia;\r",
									"}\r",
									"\r",
									"// Gerando o número de residência e armazenando como variável de ambiente\r",
									"const numeroResidenciaGerado = gerarNumeroResidencia();\r",
									"pm.environment.set(\"numeroResidencia\", numeroResidenciaGerado);\r",
									"\r",
									"function bairro() {\r",
									"    const names = ['Leblon', 'Ipanema', 'Copacabana', 'Barra da Tijuca', 'Botafogo', 'Lapa', 'Santa Teresa', 'Jardim Botânico', 'Flamengo', 'São Conrado', 'Moema', 'Vila Madalena', 'Pinheiros', 'Jardins', 'Aclimação', 'Brooklin', 'Tatuapé', 'Vila Progredior', 'Vila Nova Conceição', 'Campo Belo','Centro', 'Praia de Belas', 'Moinhos de Vento', 'Petrópolis', 'Tristeza', 'Caminho das Árvores', 'Pituba', 'Stella Maris', 'Parque Atlântico', 'Costa Azul', 'Vila Galvão', 'Santo Amaro', 'Perdizes', 'Aclimação', 'Vila Sônia', 'Cidade Dutra', 'São Bernardo do Campo', 'Vila Mariana', 'Bela Vista', 'Liberdade','Pinheiros', 'Itaim Bibi', 'Santa Cecília', 'Tucuruvi', 'Chácara Santo Antônio', 'Água Fria', 'Vila Olímpia', 'Vila São Francisco', 'Consolação', 'Vila Madalena']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Bairro\", bairro())\r",
									"\r",
									"function cidade() {\r",
									"    const names = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador', 'Curitiba', 'Fortaleza', 'Recife', 'Brasília', 'Manaus', 'Vitória', 'Goiânia', 'Belém', 'Natal', 'São Luís', 'Maceió', 'Campo Grande', 'João Pessoa', 'Aracaju', 'Cuiabá', 'Florianópolis', 'Teresina', 'Palmas', 'Macapá', 'Rio Branco', 'Boa Vista', 'Porto Velho', 'Anápolis', 'Caruaru', 'Londrina','Marabá', 'Araraquara', 'Sorocaba', 'Santos', 'Niterói', 'Mogi das Cruzes', 'Caxias do Sul', 'Barueri', 'Campinas', 'São José', 'Ponta Grossa', 'Jundiaí', 'Uberlândia', 'Diadema', 'Santo André', 'São Bernardo do Campo', 'Itaquaquecetuba', 'Ribeirão Preto', 'Juiz de Fora']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Cidade\", cidade())\r",
									"\r",
									"function abreviacao() {\r",
									"    const names = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"AbreviacaoEstado\", abreviacao())\r",
									"\r",
									"function randomCep() {\r",
									"    let randomCep = '';\r",
									"   \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        randomCep += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCep;\r",
									"}\r",
									"pm.environment.set(\"cep\", randomCep());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"Tika Taka Tech 2000\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"{{fullnameUser}}\",\r\n  \"telephone\": \"{{telefone}}\",\r\n  \"serviceDescription\": \"{{Descricao}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{cep}}\",\r\n      \"city\": \"{{Cidade}}\",\r\n      \"state\": \"{{AbreviacaoEstado}}\",\r\n      \"district\": \"{{Bairro}}\",\r\n      \"street\": \"{{logradouroCompleto}}\",\r\n      \"number\": \"{{numeroResidencia}}\",\r\n      \"complement\": \"\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTM0MSwiZXhwIjoxNzM5MzE1NzQxfQ.cgJqYe74cprHCRTY9YLF_B-Hfgfp8l8lr6gDrEuqMi4' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"corporateName\": \"Matheus Sousa Testes\",\r\n  \"registerCompany\": \"57126456000155\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com o campo CNPJ em branco",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function empresa() {\r",
									"    const names = [\"TechNova\", \"Bytewave\", \"Cyberion\", \"InovaTech\", \"Nexabyte\", \"Softtron\", \"Codeverse\", \"Dataflux\", \"Infinitron\", \"LogiCore\", \"Zentek\",\"Neurobyte\", \"Cloudix\", \"Sysnova\", \"Hexabit\", \"AIgorithm\", \"Quantumix\", \"Webtron\", \"Netflux\", \"Cyberflux\", \"Deepcode\", \"Techpulse\", \"Synaptech\", \"Codexis\", \"Nexonix\", \"Algobyte\", \"Infobyte\", \"Datazen\", \"Digiflow\", \"Innovix\", \"Coretron\", \"Zybernet\", \"Neurotech\", \"Nanobyte\", \"Virtunix\", \"Codexel\", \"Optibit\", \"Bitnova\", \"Globotron\", \"Digiware\", \"Skytech\", \"Cybervox\", \"Techspire\", \"Softbit\", \"MetaTech\", \"Synthron\", \"Virtuabyte\", \"Cloudtron\", \"Algonix\", \"Bitzen\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Empresa\", empresa())\r",
									"\r",
									"function tag() {\r",
									"    const tagnames = ['Solutions', 'Tech', 'Digital', 'Systems', 'Software', 'Cloud', 'AI', 'Cyber', 'Data', 'Analytics','Network', 'Security', 'Labs', 'Smart', 'Logic', 'Innovation', 'IT', 'Global', 'Developers', 'Code', 'Techno', 'Automations', 'Cloudware', 'Dynamics', 'Vision', 'Intelligence', 'NextGen', 'Computing', 'Innovators', 'Engineering', 'Performance', 'Softworks', 'Logicware', 'Digitalware', 'Transform', 'Platform', 'Smartware', 'Dataflow', 'Byte', 'Edge', 'Nexus', 'Techworks', 'Bit', 'Virtual', 'SystemsX', 'Infotech', 'Genix', 'Quantum', 'Bitware', 'CloudX'];\r",
									"\r",
									"    const randomTastName = tagnames[Math.floor(Math.random() * tagnames.length)]\r",
									"    return randomTastName\r",
									"}\r",
									"pm.environment.set(\"Tag\", tag())\r",
									"\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"Empresa\") + \" \" + pm.environment.get(\"Tag\"))\r",
									"\r",
									"\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"\r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									"\r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									"\r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									"\r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									"\r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									"\r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"CNPJ\", cnpjGerado);\r",
									"\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function gerarTelefone() {\r",
									"    // Gerando um DDD aleatório entre 11 e 99\r",
									"    const ddd = Math.floor(Math.random() * (99 - 11 + 1)) + 11;\r",
									"\r",
									"    // Gerando o número de telefone com 9 dígitos, começando com 9\r",
									"    const numero = Math.floor(Math.random() * 100000000) + 900000000; // Gera um número aleatório entre 900000000 e 999999999 (começando com '9')\r",
									"\r",
									"    // Concatenando +55, o DDD e o número gerado para formar o telefone\r",
									"    const telefone = `55${ddd}${numero.toString().slice(0, 5)}${numero.toString().slice(5, 9)}`;\r",
									"\r",
									"    return telefone;\r",
									"}\r",
									"\r",
									"// Gerando o número de telefone e armazenando como variável de ambiente\r",
									"const telefoneGerado = gerarTelefone();\r",
									"pm.environment.set(\"telefone\", telefoneGerado);\r",
									"\r",
									"function descricao() {\r",
									"    const names = [\"Testes\", \"Automação\", \"FrontEnd\", \"Backend\",\"Banco de Dados\", \"IA\",\"AWS\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Descricao\", descricao())\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"NomeRua\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"NomeRuas\", lastname())\r",
									"\r",
									"pm.environment.set(\"nomeruaComposto\", \r",
									"    pm.environment.get(\"NomeRua\") + \" \" + pm.environment.get(\"NomeRuas\"))\r",
									"\r",
									"function logradouro() {\r",
									"    const names = [\"Avenida\", \"Rua\", \"Alameda\", \"Travessa\", \"Praça\", \"Rodovia\", \"Estrada\", \"Largo\", \"Viaduto\", \"Marginal\", \"Parque\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Logradouro\", logradouro())\r",
									"\r",
									"pm.environment.set(\"logradouroCompleto\", \r",
									"    pm.environment.get(\"Logradouro\") + \" \" + pm.environment.get(\"nomeruaComposto\"))\r",
									"\r",
									"\r",
									"function gerarNumeroResidencia() {\r",
									"    // Definindo a probabilidade de gerar números com mais de 5 caracteres\r",
									"    const tamanhoNumero = Math.random() < 0.8 ? Math.floor(Math.random() * 5) + 1 : Math.floor(Math.random() * 6) + 5;\r",
									"\r",
									"    // Gerando um número aleatório com o tamanho definido\r",
									"    let numeroResidencia = Math.floor(Math.random() * Math.pow(10, tamanhoNumero)).toString(); // Gera número aleatório com o tamanho desejado\r",
									"\r",
									"    // Se o primeiro caractere for 0, remove-o\r",
									"    if (numeroResidencia[0] === '0') {\r",
									"        numeroResidencia = numeroResidencia.slice(1); // Remove o primeiro caractere\r",
									"    }\r",
									"\r",
									"    // Garantindo que o número tenha no máximo 10 caracteres\r",
									"    if (numeroResidencia.length > 10) {\r",
									"        numeroResidencia = numeroResidencia.slice(0, 10); // Limita a 10 caracteres\r",
									"    }\r",
									"\r",
									"    return numeroResidencia;\r",
									"}\r",
									"\r",
									"// Gerando o número de residência e armazenando como variável de ambiente\r",
									"const numeroResidenciaGerado = gerarNumeroResidencia();\r",
									"pm.environment.set(\"numeroResidencia\", numeroResidenciaGerado);\r",
									"\r",
									"function bairro() {\r",
									"    const names = ['Leblon', 'Ipanema', 'Copacabana', 'Barra da Tijuca', 'Botafogo', 'Lapa', 'Santa Teresa', 'Jardim Botânico', 'Flamengo', 'São Conrado', 'Moema', 'Vila Madalena', 'Pinheiros', 'Jardins', 'Aclimação', 'Brooklin', 'Tatuapé', 'Vila Progredior', 'Vila Nova Conceição', 'Campo Belo','Centro', 'Praia de Belas', 'Moinhos de Vento', 'Petrópolis', 'Tristeza', 'Caminho das Árvores', 'Pituba', 'Stella Maris', 'Parque Atlântico', 'Costa Azul', 'Vila Galvão', 'Santo Amaro', 'Perdizes', 'Aclimação', 'Vila Sônia', 'Cidade Dutra', 'São Bernardo do Campo', 'Vila Mariana', 'Bela Vista', 'Liberdade','Pinheiros', 'Itaim Bibi', 'Santa Cecília', 'Tucuruvi', 'Chácara Santo Antônio', 'Água Fria', 'Vila Olímpia', 'Vila São Francisco', 'Consolação', 'Vila Madalena']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Bairro\", bairro())\r",
									"\r",
									"function cidade() {\r",
									"    const names = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador', 'Curitiba', 'Fortaleza', 'Recife', 'Brasília', 'Manaus', 'Vitória', 'Goiânia', 'Belém', 'Natal', 'São Luís', 'Maceió', 'Campo Grande', 'João Pessoa', 'Aracaju', 'Cuiabá', 'Florianópolis', 'Teresina', 'Palmas', 'Macapá', 'Rio Branco', 'Boa Vista', 'Porto Velho', 'Anápolis', 'Caruaru', 'Londrina','Marabá', 'Araraquara', 'Sorocaba', 'Santos', 'Niterói', 'Mogi das Cruzes', 'Caxias do Sul', 'Barueri', 'Campinas', 'São José', 'Ponta Grossa', 'Jundiaí', 'Uberlândia', 'Diadema', 'Santo André', 'São Bernardo do Campo', 'Itaquaquecetuba', 'Ribeirão Preto', 'Juiz de Fora']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Cidade\", cidade())\r",
									"\r",
									"function abreviacao() {\r",
									"    const names = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"AbreviacaoEstado\", abreviacao())\r",
									"\r",
									"function randomCep() {\r",
									"    let randomCep = '';\r",
									"   \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        randomCep += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCep;\r",
									"}\r",
									"pm.environment.set(\"cep\", randomCep());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Mensagem de erro\",function(){\r",
									"    pm.expect(pm.response.json().error[0]).to.equal(\"O campo CNPJ da empresa é obrigatório.\")\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomeEmpresa}}\",\r\n  \"registerCompany\": \"\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"{{fullnameUser}}\",\r\n  \"telephone\": \"{{telefone}}\",\r\n  \"serviceDescription\": \"{{Descricao}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{cep}}\",\r\n      \"city\": \"{{Cidade}}\",\r\n      \"state\": \"{{AbreviacaoEstado}}\",\r\n      \"district\": \"{{Bairro}}\",\r\n      \"street\": \"{{logradouroCompleto}}\",\r\n      \"number\": \"{{numeroResidencia}}\",\r\n      \"complement\": \"\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTM0MSwiZXhwIjoxNzM5MzE1NzQxfQ.cgJqYe74cprHCRTY9YLF_B-Hfgfp8l8lr6gDrEuqMi4' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"corporateName\": \"Matheus Sousa Testes\",\r\n  \"registerCompany\": \"57126456000155\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com o campo CNPJ ja existente",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function empresa() {\r",
									"    const names = [\"TechNova\", \"Bytewave\", \"Cyberion\", \"InovaTech\", \"Nexabyte\", \"Softtron\", \"Codeverse\", \"Dataflux\", \"Infinitron\", \"LogiCore\", \"Zentek\",\"Neurobyte\", \"Cloudix\", \"Sysnova\", \"Hexabit\", \"AIgorithm\", \"Quantumix\", \"Webtron\", \"Netflux\", \"Cyberflux\", \"Deepcode\", \"Techpulse\", \"Synaptech\", \"Codexis\", \"Nexonix\", \"Algobyte\", \"Infobyte\", \"Datazen\", \"Digiflow\", \"Innovix\", \"Coretron\", \"Zybernet\", \"Neurotech\", \"Nanobyte\", \"Virtunix\", \"Codexel\", \"Optibit\", \"Bitnova\", \"Globotron\", \"Digiware\", \"Skytech\", \"Cybervox\", \"Techspire\", \"Softbit\", \"MetaTech\", \"Synthron\", \"Virtuabyte\", \"Cloudtron\", \"Algonix\", \"Bitzen\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Empresa\", empresa())\r",
									"\r",
									"function tag() {\r",
									"    const tagnames = ['Solutions', 'Tech', 'Digital', 'Systems', 'Software', 'Cloud', 'AI', 'Cyber', 'Data', 'Analytics','Network', 'Security', 'Labs', 'Smart', 'Logic', 'Innovation', 'IT', 'Global', 'Developers', 'Code', 'Techno', 'Automations', 'Cloudware', 'Dynamics', 'Vision', 'Intelligence', 'NextGen', 'Computing', 'Innovators', 'Engineering', 'Performance', 'Softworks', 'Logicware', 'Digitalware', 'Transform', 'Platform', 'Smartware', 'Dataflow', 'Byte', 'Edge', 'Nexus', 'Techworks', 'Bit', 'Virtual', 'SystemsX', 'Infotech', 'Genix', 'Quantum', 'Bitware', 'CloudX'];\r",
									"\r",
									"    const randomTastName = tagnames[Math.floor(Math.random() * tagnames.length)]\r",
									"    return randomTastName\r",
									"}\r",
									"pm.environment.set(\"Tag\", tag())\r",
									"\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"Empresa\") + \" \" + pm.environment.get(\"Tag\"))\r",
									"\r",
									"\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"\r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									"\r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									"\r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									"\r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									"\r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									"\r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"CNPJ\", cnpjGerado);\r",
									"\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function gerarTelefone() {\r",
									"    // Gerando um DDD aleatório entre 11 e 99\r",
									"    const ddd = Math.floor(Math.random() * (99 - 11 + 1)) + 11;\r",
									"\r",
									"    // Gerando o número de telefone com 9 dígitos, começando com 9\r",
									"    const numero = Math.floor(Math.random() * 100000000) + 900000000; // Gera um número aleatório entre 900000000 e 999999999 (começando com '9')\r",
									"\r",
									"    // Concatenando +55, o DDD e o número gerado para formar o telefone\r",
									"    const telefone = `55${ddd}${numero.toString().slice(0, 5)}${numero.toString().slice(5, 9)}`;\r",
									"\r",
									"    return telefone;\r",
									"}\r",
									"\r",
									"// Gerando o número de telefone e armazenando como variável de ambiente\r",
									"const telefoneGerado = gerarTelefone();\r",
									"pm.environment.set(\"telefone\", telefoneGerado);\r",
									"\r",
									"function descricao() {\r",
									"    const names = [\"Testes\", \"Automação\", \"FrontEnd\", \"Backend\",\"Banco de Dados\", \"IA\",\"AWS\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Descricao\", descricao())\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"NomeRua\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"NomeRuas\", lastname())\r",
									"\r",
									"pm.environment.set(\"nomeruaComposto\", \r",
									"    pm.environment.get(\"NomeRua\") + \" \" + pm.environment.get(\"NomeRuas\"))\r",
									"\r",
									"function logradouro() {\r",
									"    const names = [\"Avenida\", \"Rua\", \"Alameda\", \"Travessa\", \"Praça\", \"Rodovia\", \"Estrada\", \"Largo\", \"Viaduto\", \"Marginal\", \"Parque\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Logradouro\", logradouro())\r",
									"\r",
									"pm.environment.set(\"logradouroCompleto\", \r",
									"    pm.environment.get(\"Logradouro\") + \" \" + pm.environment.get(\"nomeruaComposto\"))\r",
									"\r",
									"\r",
									"function gerarNumeroResidencia() {\r",
									"    // Definindo a probabilidade de gerar números com mais de 5 caracteres\r",
									"    const tamanhoNumero = Math.random() < 0.8 ? Math.floor(Math.random() * 5) + 1 : Math.floor(Math.random() * 6) + 5;\r",
									"\r",
									"    // Gerando um número aleatório com o tamanho definido\r",
									"    let numeroResidencia = Math.floor(Math.random() * Math.pow(10, tamanhoNumero)).toString(); // Gera número aleatório com o tamanho desejado\r",
									"\r",
									"    // Se o primeiro caractere for 0, remove-o\r",
									"    if (numeroResidencia[0] === '0') {\r",
									"        numeroResidencia = numeroResidencia.slice(1); // Remove o primeiro caractere\r",
									"    }\r",
									"\r",
									"    // Garantindo que o número tenha no máximo 10 caracteres\r",
									"    if (numeroResidencia.length > 10) {\r",
									"        numeroResidencia = numeroResidencia.slice(0, 10); // Limita a 10 caracteres\r",
									"    }\r",
									"\r",
									"    return numeroResidencia;\r",
									"}\r",
									"\r",
									"// Gerando o número de residência e armazenando como variável de ambiente\r",
									"const numeroResidenciaGerado = gerarNumeroResidencia();\r",
									"pm.environment.set(\"numeroResidencia\", numeroResidenciaGerado);\r",
									"\r",
									"function bairro() {\r",
									"    const names = ['Leblon', 'Ipanema', 'Copacabana', 'Barra da Tijuca', 'Botafogo', 'Lapa', 'Santa Teresa', 'Jardim Botânico', 'Flamengo', 'São Conrado', 'Moema', 'Vila Madalena', 'Pinheiros', 'Jardins', 'Aclimação', 'Brooklin', 'Tatuapé', 'Vila Progredior', 'Vila Nova Conceição', 'Campo Belo','Centro', 'Praia de Belas', 'Moinhos de Vento', 'Petrópolis', 'Tristeza', 'Caminho das Árvores', 'Pituba', 'Stella Maris', 'Parque Atlântico', 'Costa Azul', 'Vila Galvão', 'Santo Amaro', 'Perdizes', 'Aclimação', 'Vila Sônia', 'Cidade Dutra', 'São Bernardo do Campo', 'Vila Mariana', 'Bela Vista', 'Liberdade','Pinheiros', 'Itaim Bibi', 'Santa Cecília', 'Tucuruvi', 'Chácara Santo Antônio', 'Água Fria', 'Vila Olímpia', 'Vila São Francisco', 'Consolação', 'Vila Madalena']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Bairro\", bairro())\r",
									"\r",
									"function cidade() {\r",
									"    const names = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador', 'Curitiba', 'Fortaleza', 'Recife', 'Brasília', 'Manaus', 'Vitória', 'Goiânia', 'Belém', 'Natal', 'São Luís', 'Maceió', 'Campo Grande', 'João Pessoa', 'Aracaju', 'Cuiabá', 'Florianópolis', 'Teresina', 'Palmas', 'Macapá', 'Rio Branco', 'Boa Vista', 'Porto Velho', 'Anápolis', 'Caruaru', 'Londrina','Marabá', 'Araraquara', 'Sorocaba', 'Santos', 'Niterói', 'Mogi das Cruzes', 'Caxias do Sul', 'Barueri', 'Campinas', 'São José', 'Ponta Grossa', 'Jundiaí', 'Uberlândia', 'Diadema', 'Santo André', 'São Bernardo do Campo', 'Itaquaquecetuba', 'Ribeirão Preto', 'Juiz de Fora']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Cidade\", cidade())\r",
									"\r",
									"function abreviacao() {\r",
									"    const names = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"AbreviacaoEstado\", abreviacao())\r",
									"\r",
									"function randomCep() {\r",
									"    let randomCep = '';\r",
									"   \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        randomCep += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCep;\r",
									"}\r",
									"pm.environment.set(\"cep\", randomCep());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 409\", function(){\r",
									"    pm.response.to.have.status(409);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomeEmpresa}}\",\r\n  \"registerCompany\": \"99999999999999\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"{{fullnameUser}}\",\r\n  \"telephone\": \"{{telefone}}\",\r\n  \"serviceDescription\": \"{{Descricao}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{cep}}\",\r\n      \"city\": \"{{Cidade}}\",\r\n      \"state\": \"{{AbreviacaoEstado}}\",\r\n      \"district\": \"{{Bairro}}\",\r\n      \"street\": \"{{logradouroCompleto}}\",\r\n      \"number\": \"{{numeroResidencia}}\",\r\n      \"complement\": \"\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTM0MSwiZXhwIjoxNzM5MzE1NzQxfQ.cgJqYe74cprHCRTY9YLF_B-Hfgfp8l8lr6gDrEuqMi4' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"corporateName\": \"Matheus Sousa Testes\",\r\n  \"registerCompany\": \"57126456000155\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com o campo CNPJ com letras",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function empresa() {\r",
									"    const names = [\"TechNova\", \"Bytewave\", \"Cyberion\", \"InovaTech\", \"Nexabyte\", \"Softtron\", \"Codeverse\", \"Dataflux\", \"Infinitron\", \"LogiCore\", \"Zentek\",\"Neurobyte\", \"Cloudix\", \"Sysnova\", \"Hexabit\", \"AIgorithm\", \"Quantumix\", \"Webtron\", \"Netflux\", \"Cyberflux\", \"Deepcode\", \"Techpulse\", \"Synaptech\", \"Codexis\", \"Nexonix\", \"Algobyte\", \"Infobyte\", \"Datazen\", \"Digiflow\", \"Innovix\", \"Coretron\", \"Zybernet\", \"Neurotech\", \"Nanobyte\", \"Virtunix\", \"Codexel\", \"Optibit\", \"Bitnova\", \"Globotron\", \"Digiware\", \"Skytech\", \"Cybervox\", \"Techspire\", \"Softbit\", \"MetaTech\", \"Synthron\", \"Virtuabyte\", \"Cloudtron\", \"Algonix\", \"Bitzen\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Empresa\", empresa())\r",
									"\r",
									"function tag() {\r",
									"    const tagnames = ['Solutions', 'Tech', 'Digital', 'Systems', 'Software', 'Cloud', 'AI', 'Cyber', 'Data', 'Analytics','Network', 'Security', 'Labs', 'Smart', 'Logic', 'Innovation', 'IT', 'Global', 'Developers', 'Code', 'Techno', 'Automations', 'Cloudware', 'Dynamics', 'Vision', 'Intelligence', 'NextGen', 'Computing', 'Innovators', 'Engineering', 'Performance', 'Softworks', 'Logicware', 'Digitalware', 'Transform', 'Platform', 'Smartware', 'Dataflow', 'Byte', 'Edge', 'Nexus', 'Techworks', 'Bit', 'Virtual', 'SystemsX', 'Infotech', 'Genix', 'Quantum', 'Bitware', 'CloudX'];\r",
									"\r",
									"    const randomTastName = tagnames[Math.floor(Math.random() * tagnames.length)]\r",
									"    return randomTastName\r",
									"}\r",
									"pm.environment.set(\"Tag\", tag())\r",
									"\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"Empresa\") + \" \" + pm.environment.get(\"Tag\"))\r",
									"\r",
									"\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"\r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									"\r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									"\r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									"\r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									"\r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									"\r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"CNPJ\", cnpjGerado);\r",
									"\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function gerarTelefone() {\r",
									"    // Gerando um DDD aleatório entre 11 e 99\r",
									"    const ddd = Math.floor(Math.random() * (99 - 11 + 1)) + 11;\r",
									"\r",
									"    // Gerando o número de telefone com 9 dígitos, começando com 9\r",
									"    const numero = Math.floor(Math.random() * 100000000) + 900000000; // Gera um número aleatório entre 900000000 e 999999999 (começando com '9')\r",
									"\r",
									"    // Concatenando +55, o DDD e o número gerado para formar o telefone\r",
									"    const telefone = `55${ddd}${numero.toString().slice(0, 5)}${numero.toString().slice(5, 9)}`;\r",
									"\r",
									"    return telefone;\r",
									"}\r",
									"\r",
									"// Gerando o número de telefone e armazenando como variável de ambiente\r",
									"const telefoneGerado = gerarTelefone();\r",
									"pm.environment.set(\"telefone\", telefoneGerado);\r",
									"\r",
									"function descricao() {\r",
									"    const names = [\"Testes\", \"Automação\", \"FrontEnd\", \"Backend\",\"Banco de Dados\", \"IA\",\"AWS\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Descricao\", descricao())\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"NomeRua\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"NomeRuas\", lastname())\r",
									"\r",
									"pm.environment.set(\"nomeruaComposto\", \r",
									"    pm.environment.get(\"NomeRua\") + \" \" + pm.environment.get(\"NomeRuas\"))\r",
									"\r",
									"function logradouro() {\r",
									"    const names = [\"Avenida\", \"Rua\", \"Alameda\", \"Travessa\", \"Praça\", \"Rodovia\", \"Estrada\", \"Largo\", \"Viaduto\", \"Marginal\", \"Parque\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Logradouro\", logradouro())\r",
									"\r",
									"pm.environment.set(\"logradouroCompleto\", \r",
									"    pm.environment.get(\"Logradouro\") + \" \" + pm.environment.get(\"nomeruaComposto\"))\r",
									"\r",
									"\r",
									"function gerarNumeroResidencia() {\r",
									"    // Definindo a probabilidade de gerar números com mais de 5 caracteres\r",
									"    const tamanhoNumero = Math.random() < 0.8 ? Math.floor(Math.random() * 5) + 1 : Math.floor(Math.random() * 6) + 5;\r",
									"\r",
									"    // Gerando um número aleatório com o tamanho definido\r",
									"    let numeroResidencia = Math.floor(Math.random() * Math.pow(10, tamanhoNumero)).toString(); // Gera número aleatório com o tamanho desejado\r",
									"\r",
									"    // Se o primeiro caractere for 0, remove-o\r",
									"    if (numeroResidencia[0] === '0') {\r",
									"        numeroResidencia = numeroResidencia.slice(1); // Remove o primeiro caractere\r",
									"    }\r",
									"\r",
									"    // Garantindo que o número tenha no máximo 10 caracteres\r",
									"    if (numeroResidencia.length > 10) {\r",
									"        numeroResidencia = numeroResidencia.slice(0, 10); // Limita a 10 caracteres\r",
									"    }\r",
									"\r",
									"    return numeroResidencia;\r",
									"}\r",
									"\r",
									"// Gerando o número de residência e armazenando como variável de ambiente\r",
									"const numeroResidenciaGerado = gerarNumeroResidencia();\r",
									"pm.environment.set(\"numeroResidencia\", numeroResidenciaGerado);\r",
									"\r",
									"function bairro() {\r",
									"    const names = ['Leblon', 'Ipanema', 'Copacabana', 'Barra da Tijuca', 'Botafogo', 'Lapa', 'Santa Teresa', 'Jardim Botânico', 'Flamengo', 'São Conrado', 'Moema', 'Vila Madalena', 'Pinheiros', 'Jardins', 'Aclimação', 'Brooklin', 'Tatuapé', 'Vila Progredior', 'Vila Nova Conceição', 'Campo Belo','Centro', 'Praia de Belas', 'Moinhos de Vento', 'Petrópolis', 'Tristeza', 'Caminho das Árvores', 'Pituba', 'Stella Maris', 'Parque Atlântico', 'Costa Azul', 'Vila Galvão', 'Santo Amaro', 'Perdizes', 'Aclimação', 'Vila Sônia', 'Cidade Dutra', 'São Bernardo do Campo', 'Vila Mariana', 'Bela Vista', 'Liberdade','Pinheiros', 'Itaim Bibi', 'Santa Cecília', 'Tucuruvi', 'Chácara Santo Antônio', 'Água Fria', 'Vila Olímpia', 'Vila São Francisco', 'Consolação', 'Vila Madalena']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Bairro\", bairro())\r",
									"\r",
									"function cidade() {\r",
									"    const names = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador', 'Curitiba', 'Fortaleza', 'Recife', 'Brasília', 'Manaus', 'Vitória', 'Goiânia', 'Belém', 'Natal', 'São Luís', 'Maceió', 'Campo Grande', 'João Pessoa', 'Aracaju', 'Cuiabá', 'Florianópolis', 'Teresina', 'Palmas', 'Macapá', 'Rio Branco', 'Boa Vista', 'Porto Velho', 'Anápolis', 'Caruaru', 'Londrina','Marabá', 'Araraquara', 'Sorocaba', 'Santos', 'Niterói', 'Mogi das Cruzes', 'Caxias do Sul', 'Barueri', 'Campinas', 'São José', 'Ponta Grossa', 'Jundiaí', 'Uberlândia', 'Diadema', 'Santo André', 'São Bernardo do Campo', 'Itaquaquecetuba', 'Ribeirão Preto', 'Juiz de Fora']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Cidade\", cidade())\r",
									"\r",
									"function abreviacao() {\r",
									"    const names = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"AbreviacaoEstado\", abreviacao())\r",
									"\r",
									"function randomCep() {\r",
									"    let randomCep = '';\r",
									"   \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        randomCep += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCep;\r",
									"}\r",
									"pm.environment.set(\"cep\", randomCep());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomeEmpresa}}\",\r\n  \"registerCompany\": \"999999999999A9\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"{{fullnameUser}}\",\r\n  \"telephone\": \"{{telefone}}\",\r\n  \"serviceDescription\": \"{{Descricao}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{cep}}\",\r\n      \"city\": \"{{Cidade}}\",\r\n      \"state\": \"{{AbreviacaoEstado}}\",\r\n      \"district\": \"{{Bairro}}\",\r\n      \"street\": \"{{logradouroCompleto}}\",\r\n      \"number\": \"{{numeroResidencia}}\",\r\n      \"complement\": \"\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTM0MSwiZXhwIjoxNzM5MzE1NzQxfQ.cgJqYe74cprHCRTY9YLF_B-Hfgfp8l8lr6gDrEuqMi4' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"corporateName\": \"Matheus Sousa Testes\",\r\n  \"registerCompany\": \"57126456000155\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com o campo CNPJ com caracteres especiais",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function empresa() {\r",
									"    const names = [\"TechNova\", \"Bytewave\", \"Cyberion\", \"InovaTech\", \"Nexabyte\", \"Softtron\", \"Codeverse\", \"Dataflux\", \"Infinitron\", \"LogiCore\", \"Zentek\",\"Neurobyte\", \"Cloudix\", \"Sysnova\", \"Hexabit\", \"AIgorithm\", \"Quantumix\", \"Webtron\", \"Netflux\", \"Cyberflux\", \"Deepcode\", \"Techpulse\", \"Synaptech\", \"Codexis\", \"Nexonix\", \"Algobyte\", \"Infobyte\", \"Datazen\", \"Digiflow\", \"Innovix\", \"Coretron\", \"Zybernet\", \"Neurotech\", \"Nanobyte\", \"Virtunix\", \"Codexel\", \"Optibit\", \"Bitnova\", \"Globotron\", \"Digiware\", \"Skytech\", \"Cybervox\", \"Techspire\", \"Softbit\", \"MetaTech\", \"Synthron\", \"Virtuabyte\", \"Cloudtron\", \"Algonix\", \"Bitzen\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Empresa\", empresa())\r",
									"\r",
									"function tag() {\r",
									"    const tagnames = ['Solutions', 'Tech', 'Digital', 'Systems', 'Software', 'Cloud', 'AI', 'Cyber', 'Data', 'Analytics','Network', 'Security', 'Labs', 'Smart', 'Logic', 'Innovation', 'IT', 'Global', 'Developers', 'Code', 'Techno', 'Automations', 'Cloudware', 'Dynamics', 'Vision', 'Intelligence', 'NextGen', 'Computing', 'Innovators', 'Engineering', 'Performance', 'Softworks', 'Logicware', 'Digitalware', 'Transform', 'Platform', 'Smartware', 'Dataflow', 'Byte', 'Edge', 'Nexus', 'Techworks', 'Bit', 'Virtual', 'SystemsX', 'Infotech', 'Genix', 'Quantum', 'Bitware', 'CloudX'];\r",
									"\r",
									"    const randomTastName = tagnames[Math.floor(Math.random() * tagnames.length)]\r",
									"    return randomTastName\r",
									"}\r",
									"pm.environment.set(\"Tag\", tag())\r",
									"\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"Empresa\") + \" \" + pm.environment.get(\"Tag\"))\r",
									"\r",
									"\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"\r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									"\r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									"\r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									"\r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									"\r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									"\r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"CNPJ\", cnpjGerado);\r",
									"\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function gerarTelefone() {\r",
									"    // Gerando um DDD aleatório entre 11 e 99\r",
									"    const ddd = Math.floor(Math.random() * (99 - 11 + 1)) + 11;\r",
									"\r",
									"    // Gerando o número de telefone com 9 dígitos, começando com 9\r",
									"    const numero = Math.floor(Math.random() * 100000000) + 900000000; // Gera um número aleatório entre 900000000 e 999999999 (começando com '9')\r",
									"\r",
									"    // Concatenando +55, o DDD e o número gerado para formar o telefone\r",
									"    const telefone = `55${ddd}${numero.toString().slice(0, 5)}${numero.toString().slice(5, 9)}`;\r",
									"\r",
									"    return telefone;\r",
									"}\r",
									"\r",
									"// Gerando o número de telefone e armazenando como variável de ambiente\r",
									"const telefoneGerado = gerarTelefone();\r",
									"pm.environment.set(\"telefone\", telefoneGerado);\r",
									"\r",
									"function descricao() {\r",
									"    const names = [\"Testes\", \"Automação\", \"FrontEnd\", \"Backend\",\"Banco de Dados\", \"IA\",\"AWS\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Descricao\", descricao())\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"NomeRua\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"NomeRuas\", lastname())\r",
									"\r",
									"pm.environment.set(\"nomeruaComposto\", \r",
									"    pm.environment.get(\"NomeRua\") + \" \" + pm.environment.get(\"NomeRuas\"))\r",
									"\r",
									"function logradouro() {\r",
									"    const names = [\"Avenida\", \"Rua\", \"Alameda\", \"Travessa\", \"Praça\", \"Rodovia\", \"Estrada\", \"Largo\", \"Viaduto\", \"Marginal\", \"Parque\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Logradouro\", logradouro())\r",
									"\r",
									"pm.environment.set(\"logradouroCompleto\", \r",
									"    pm.environment.get(\"Logradouro\") + \" \" + pm.environment.get(\"nomeruaComposto\"))\r",
									"\r",
									"\r",
									"function gerarNumeroResidencia() {\r",
									"    // Definindo a probabilidade de gerar números com mais de 5 caracteres\r",
									"    const tamanhoNumero = Math.random() < 0.8 ? Math.floor(Math.random() * 5) + 1 : Math.floor(Math.random() * 6) + 5;\r",
									"\r",
									"    // Gerando um número aleatório com o tamanho definido\r",
									"    let numeroResidencia = Math.floor(Math.random() * Math.pow(10, tamanhoNumero)).toString(); // Gera número aleatório com o tamanho desejado\r",
									"\r",
									"    // Se o primeiro caractere for 0, remove-o\r",
									"    if (numeroResidencia[0] === '0') {\r",
									"        numeroResidencia = numeroResidencia.slice(1); // Remove o primeiro caractere\r",
									"    }\r",
									"\r",
									"    // Garantindo que o número tenha no máximo 10 caracteres\r",
									"    if (numeroResidencia.length > 10) {\r",
									"        numeroResidencia = numeroResidencia.slice(0, 10); // Limita a 10 caracteres\r",
									"    }\r",
									"\r",
									"    return numeroResidencia;\r",
									"}\r",
									"\r",
									"// Gerando o número de residência e armazenando como variável de ambiente\r",
									"const numeroResidenciaGerado = gerarNumeroResidencia();\r",
									"pm.environment.set(\"numeroResidencia\", numeroResidenciaGerado);\r",
									"\r",
									"function bairro() {\r",
									"    const names = ['Leblon', 'Ipanema', 'Copacabana', 'Barra da Tijuca', 'Botafogo', 'Lapa', 'Santa Teresa', 'Jardim Botânico', 'Flamengo', 'São Conrado', 'Moema', 'Vila Madalena', 'Pinheiros', 'Jardins', 'Aclimação', 'Brooklin', 'Tatuapé', 'Vila Progredior', 'Vila Nova Conceição', 'Campo Belo','Centro', 'Praia de Belas', 'Moinhos de Vento', 'Petrópolis', 'Tristeza', 'Caminho das Árvores', 'Pituba', 'Stella Maris', 'Parque Atlântico', 'Costa Azul', 'Vila Galvão', 'Santo Amaro', 'Perdizes', 'Aclimação', 'Vila Sônia', 'Cidade Dutra', 'São Bernardo do Campo', 'Vila Mariana', 'Bela Vista', 'Liberdade','Pinheiros', 'Itaim Bibi', 'Santa Cecília', 'Tucuruvi', 'Chácara Santo Antônio', 'Água Fria', 'Vila Olímpia', 'Vila São Francisco', 'Consolação', 'Vila Madalena']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Bairro\", bairro())\r",
									"\r",
									"function cidade() {\r",
									"    const names = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador', 'Curitiba', 'Fortaleza', 'Recife', 'Brasília', 'Manaus', 'Vitória', 'Goiânia', 'Belém', 'Natal', 'São Luís', 'Maceió', 'Campo Grande', 'João Pessoa', 'Aracaju', 'Cuiabá', 'Florianópolis', 'Teresina', 'Palmas', 'Macapá', 'Rio Branco', 'Boa Vista', 'Porto Velho', 'Anápolis', 'Caruaru', 'Londrina','Marabá', 'Araraquara', 'Sorocaba', 'Santos', 'Niterói', 'Mogi das Cruzes', 'Caxias do Sul', 'Barueri', 'Campinas', 'São José', 'Ponta Grossa', 'Jundiaí', 'Uberlândia', 'Diadema', 'Santo André', 'São Bernardo do Campo', 'Itaquaquecetuba', 'Ribeirão Preto', 'Juiz de Fora']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Cidade\", cidade())\r",
									"\r",
									"function abreviacao() {\r",
									"    const names = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"AbreviacaoEstado\", abreviacao())\r",
									"\r",
									"function randomCep() {\r",
									"    let randomCep = '';\r",
									"   \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        randomCep += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCep;\r",
									"}\r",
									"pm.environment.set(\"cep\", randomCep());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomeEmpresa}}\",\r\n  \"registerCompany\": \"999999999999@9\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"{{fullnameUser}}\",\r\n  \"telephone\": \"{{telefone}}\",\r\n  \"serviceDescription\": \"{{Descricao}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{cep}}\",\r\n      \"city\": \"{{Cidade}}\",\r\n      \"state\": \"{{AbreviacaoEstado}}\",\r\n      \"district\": \"{{Bairro}}\",\r\n      \"street\": \"{{logradouroCompleto}}\",\r\n      \"number\": \"{{numeroResidencia}}\",\r\n      \"complement\": \"\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTM0MSwiZXhwIjoxNzM5MzE1NzQxfQ.cgJqYe74cprHCRTY9YLF_B-Hfgfp8l8lr6gDrEuqMi4' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"corporateName\": \"Matheus Sousa Testes\",\r\n  \"registerCompany\": \"57126456000155\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com o campo CNPJ com menos de 14 digitos",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function empresa() {\r",
									"    const names = [\"TechNova\", \"Bytewave\", \"Cyberion\", \"InovaTech\", \"Nexabyte\", \"Softtron\", \"Codeverse\", \"Dataflux\", \"Infinitron\", \"LogiCore\", \"Zentek\",\"Neurobyte\", \"Cloudix\", \"Sysnova\", \"Hexabit\", \"AIgorithm\", \"Quantumix\", \"Webtron\", \"Netflux\", \"Cyberflux\", \"Deepcode\", \"Techpulse\", \"Synaptech\", \"Codexis\", \"Nexonix\", \"Algobyte\", \"Infobyte\", \"Datazen\", \"Digiflow\", \"Innovix\", \"Coretron\", \"Zybernet\", \"Neurotech\", \"Nanobyte\", \"Virtunix\", \"Codexel\", \"Optibit\", \"Bitnova\", \"Globotron\", \"Digiware\", \"Skytech\", \"Cybervox\", \"Techspire\", \"Softbit\", \"MetaTech\", \"Synthron\", \"Virtuabyte\", \"Cloudtron\", \"Algonix\", \"Bitzen\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Empresa\", empresa())\r",
									"\r",
									"function tag() {\r",
									"    const tagnames = ['Solutions', 'Tech', 'Digital', 'Systems', 'Software', 'Cloud', 'AI', 'Cyber', 'Data', 'Analytics','Network', 'Security', 'Labs', 'Smart', 'Logic', 'Innovation', 'IT', 'Global', 'Developers', 'Code', 'Techno', 'Automations', 'Cloudware', 'Dynamics', 'Vision', 'Intelligence', 'NextGen', 'Computing', 'Innovators', 'Engineering', 'Performance', 'Softworks', 'Logicware', 'Digitalware', 'Transform', 'Platform', 'Smartware', 'Dataflow', 'Byte', 'Edge', 'Nexus', 'Techworks', 'Bit', 'Virtual', 'SystemsX', 'Infotech', 'Genix', 'Quantum', 'Bitware', 'CloudX'];\r",
									"\r",
									"    const randomTastName = tagnames[Math.floor(Math.random() * tagnames.length)]\r",
									"    return randomTastName\r",
									"}\r",
									"pm.environment.set(\"Tag\", tag())\r",
									"\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"Empresa\") + \" \" + pm.environment.get(\"Tag\"))\r",
									"\r",
									"\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"\r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									"\r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									"\r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									"\r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									"\r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									"\r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"CNPJ\", cnpjGerado);\r",
									"\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function gerarTelefone() {\r",
									"    // Gerando um DDD aleatório entre 11 e 99\r",
									"    const ddd = Math.floor(Math.random() * (99 - 11 + 1)) + 11;\r",
									"\r",
									"    // Gerando o número de telefone com 9 dígitos, começando com 9\r",
									"    const numero = Math.floor(Math.random() * 100000000) + 900000000; // Gera um número aleatório entre 900000000 e 999999999 (começando com '9')\r",
									"\r",
									"    // Concatenando +55, o DDD e o número gerado para formar o telefone\r",
									"    const telefone = `55${ddd}${numero.toString().slice(0, 5)}${numero.toString().slice(5, 9)}`;\r",
									"\r",
									"    return telefone;\r",
									"}\r",
									"\r",
									"// Gerando o número de telefone e armazenando como variável de ambiente\r",
									"const telefoneGerado = gerarTelefone();\r",
									"pm.environment.set(\"telefone\", telefoneGerado);\r",
									"\r",
									"function descricao() {\r",
									"    const names = [\"Testes\", \"Automação\", \"FrontEnd\", \"Backend\",\"Banco de Dados\", \"IA\",\"AWS\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Descricao\", descricao())\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"NomeRua\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"NomeRuas\", lastname())\r",
									"\r",
									"pm.environment.set(\"nomeruaComposto\", \r",
									"    pm.environment.get(\"NomeRua\") + \" \" + pm.environment.get(\"NomeRuas\"))\r",
									"\r",
									"function logradouro() {\r",
									"    const names = [\"Avenida\", \"Rua\", \"Alameda\", \"Travessa\", \"Praça\", \"Rodovia\", \"Estrada\", \"Largo\", \"Viaduto\", \"Marginal\", \"Parque\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Logradouro\", logradouro())\r",
									"\r",
									"pm.environment.set(\"logradouroCompleto\", \r",
									"    pm.environment.get(\"Logradouro\") + \" \" + pm.environment.get(\"nomeruaComposto\"))\r",
									"\r",
									"\r",
									"function gerarNumeroResidencia() {\r",
									"    // Definindo a probabilidade de gerar números com mais de 5 caracteres\r",
									"    const tamanhoNumero = Math.random() < 0.8 ? Math.floor(Math.random() * 5) + 1 : Math.floor(Math.random() * 6) + 5;\r",
									"\r",
									"    // Gerando um número aleatório com o tamanho definido\r",
									"    let numeroResidencia = Math.floor(Math.random() * Math.pow(10, tamanhoNumero)).toString(); // Gera número aleatório com o tamanho desejado\r",
									"\r",
									"    // Se o primeiro caractere for 0, remove-o\r",
									"    if (numeroResidencia[0] === '0') {\r",
									"        numeroResidencia = numeroResidencia.slice(1); // Remove o primeiro caractere\r",
									"    }\r",
									"\r",
									"    // Garantindo que o número tenha no máximo 10 caracteres\r",
									"    if (numeroResidencia.length > 10) {\r",
									"        numeroResidencia = numeroResidencia.slice(0, 10); // Limita a 10 caracteres\r",
									"    }\r",
									"\r",
									"    return numeroResidencia;\r",
									"}\r",
									"\r",
									"// Gerando o número de residência e armazenando como variável de ambiente\r",
									"const numeroResidenciaGerado = gerarNumeroResidencia();\r",
									"pm.environment.set(\"numeroResidencia\", numeroResidenciaGerado);\r",
									"\r",
									"function bairro() {\r",
									"    const names = ['Leblon', 'Ipanema', 'Copacabana', 'Barra da Tijuca', 'Botafogo', 'Lapa', 'Santa Teresa', 'Jardim Botânico', 'Flamengo', 'São Conrado', 'Moema', 'Vila Madalena', 'Pinheiros', 'Jardins', 'Aclimação', 'Brooklin', 'Tatuapé', 'Vila Progredior', 'Vila Nova Conceição', 'Campo Belo','Centro', 'Praia de Belas', 'Moinhos de Vento', 'Petrópolis', 'Tristeza', 'Caminho das Árvores', 'Pituba', 'Stella Maris', 'Parque Atlântico', 'Costa Azul', 'Vila Galvão', 'Santo Amaro', 'Perdizes', 'Aclimação', 'Vila Sônia', 'Cidade Dutra', 'São Bernardo do Campo', 'Vila Mariana', 'Bela Vista', 'Liberdade','Pinheiros', 'Itaim Bibi', 'Santa Cecília', 'Tucuruvi', 'Chácara Santo Antônio', 'Água Fria', 'Vila Olímpia', 'Vila São Francisco', 'Consolação', 'Vila Madalena']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Bairro\", bairro())\r",
									"\r",
									"function cidade() {\r",
									"    const names = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador', 'Curitiba', 'Fortaleza', 'Recife', 'Brasília', 'Manaus', 'Vitória', 'Goiânia', 'Belém', 'Natal', 'São Luís', 'Maceió', 'Campo Grande', 'João Pessoa', 'Aracaju', 'Cuiabá', 'Florianópolis', 'Teresina', 'Palmas', 'Macapá', 'Rio Branco', 'Boa Vista', 'Porto Velho', 'Anápolis', 'Caruaru', 'Londrina','Marabá', 'Araraquara', 'Sorocaba', 'Santos', 'Niterói', 'Mogi das Cruzes', 'Caxias do Sul', 'Barueri', 'Campinas', 'São José', 'Ponta Grossa', 'Jundiaí', 'Uberlândia', 'Diadema', 'Santo André', 'São Bernardo do Campo', 'Itaquaquecetuba', 'Ribeirão Preto', 'Juiz de Fora']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Cidade\", cidade())\r",
									"\r",
									"function abreviacao() {\r",
									"    const names = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"AbreviacaoEstado\", abreviacao())\r",
									"\r",
									"function randomCep() {\r",
									"    let randomCep = '';\r",
									"   \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        randomCep += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCep;\r",
									"}\r",
									"pm.environment.set(\"cep\", randomCep());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomeEmpresa}}\",\r\n  \"registerCompany\": \"999999\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"{{fullnameUser}}\",\r\n  \"telephone\": \"{{telefone}}\",\r\n  \"serviceDescription\": \"{{Descricao}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{cep}}\",\r\n      \"city\": \"{{Cidade}}\",\r\n      \"state\": \"{{AbreviacaoEstado}}\",\r\n      \"district\": \"{{Bairro}}\",\r\n      \"street\": \"{{logradouroCompleto}}\",\r\n      \"number\": \"{{numeroResidencia}}\",\r\n      \"complement\": \"\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTM0MSwiZXhwIjoxNzM5MzE1NzQxfQ.cgJqYe74cprHCRTY9YLF_B-Hfgfp8l8lr6gDrEuqMi4' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"corporateName\": \"Matheus Sousa Testes\",\r\n  \"registerCompany\": \"57126456000155\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com o campo CNPJ com mais de 14 digitos",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function empresa() {\r",
									"    const names = [\"TechNova\", \"Bytewave\", \"Cyberion\", \"InovaTech\", \"Nexabyte\", \"Softtron\", \"Codeverse\", \"Dataflux\", \"Infinitron\", \"LogiCore\", \"Zentek\",\"Neurobyte\", \"Cloudix\", \"Sysnova\", \"Hexabit\", \"AIgorithm\", \"Quantumix\", \"Webtron\", \"Netflux\", \"Cyberflux\", \"Deepcode\", \"Techpulse\", \"Synaptech\", \"Codexis\", \"Nexonix\", \"Algobyte\", \"Infobyte\", \"Datazen\", \"Digiflow\", \"Innovix\", \"Coretron\", \"Zybernet\", \"Neurotech\", \"Nanobyte\", \"Virtunix\", \"Codexel\", \"Optibit\", \"Bitnova\", \"Globotron\", \"Digiware\", \"Skytech\", \"Cybervox\", \"Techspire\", \"Softbit\", \"MetaTech\", \"Synthron\", \"Virtuabyte\", \"Cloudtron\", \"Algonix\", \"Bitzen\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Empresa\", empresa())\r",
									"\r",
									"function tag() {\r",
									"    const tagnames = ['Solutions', 'Tech', 'Digital', 'Systems', 'Software', 'Cloud', 'AI', 'Cyber', 'Data', 'Analytics','Network', 'Security', 'Labs', 'Smart', 'Logic', 'Innovation', 'IT', 'Global', 'Developers', 'Code', 'Techno', 'Automations', 'Cloudware', 'Dynamics', 'Vision', 'Intelligence', 'NextGen', 'Computing', 'Innovators', 'Engineering', 'Performance', 'Softworks', 'Logicware', 'Digitalware', 'Transform', 'Platform', 'Smartware', 'Dataflow', 'Byte', 'Edge', 'Nexus', 'Techworks', 'Bit', 'Virtual', 'SystemsX', 'Infotech', 'Genix', 'Quantum', 'Bitware', 'CloudX'];\r",
									"\r",
									"    const randomTastName = tagnames[Math.floor(Math.random() * tagnames.length)]\r",
									"    return randomTastName\r",
									"}\r",
									"pm.environment.set(\"Tag\", tag())\r",
									"\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"Empresa\") + \" \" + pm.environment.get(\"Tag\"))\r",
									"\r",
									"\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"\r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									"\r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									"\r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									"\r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									"\r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									"\r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"CNPJ\", cnpjGerado);\r",
									"\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function gerarTelefone() {\r",
									"    // Gerando um DDD aleatório entre 11 e 99\r",
									"    const ddd = Math.floor(Math.random() * (99 - 11 + 1)) + 11;\r",
									"\r",
									"    // Gerando o número de telefone com 9 dígitos, começando com 9\r",
									"    const numero = Math.floor(Math.random() * 100000000) + 900000000; // Gera um número aleatório entre 900000000 e 999999999 (começando com '9')\r",
									"\r",
									"    // Concatenando +55, o DDD e o número gerado para formar o telefone\r",
									"    const telefone = `55${ddd}${numero.toString().slice(0, 5)}${numero.toString().slice(5, 9)}`;\r",
									"\r",
									"    return telefone;\r",
									"}\r",
									"\r",
									"// Gerando o número de telefone e armazenando como variável de ambiente\r",
									"const telefoneGerado = gerarTelefone();\r",
									"pm.environment.set(\"telefone\", telefoneGerado);\r",
									"\r",
									"function descricao() {\r",
									"    const names = [\"Testes\", \"Automação\", \"FrontEnd\", \"Backend\",\"Banco de Dados\", \"IA\",\"AWS\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Descricao\", descricao())\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"NomeRua\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"NomeRuas\", lastname())\r",
									"\r",
									"pm.environment.set(\"nomeruaComposto\", \r",
									"    pm.environment.get(\"NomeRua\") + \" \" + pm.environment.get(\"NomeRuas\"))\r",
									"\r",
									"function logradouro() {\r",
									"    const names = [\"Avenida\", \"Rua\", \"Alameda\", \"Travessa\", \"Praça\", \"Rodovia\", \"Estrada\", \"Largo\", \"Viaduto\", \"Marginal\", \"Parque\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Logradouro\", logradouro())\r",
									"\r",
									"pm.environment.set(\"logradouroCompleto\", \r",
									"    pm.environment.get(\"Logradouro\") + \" \" + pm.environment.get(\"nomeruaComposto\"))\r",
									"\r",
									"\r",
									"function gerarNumeroResidencia() {\r",
									"    // Definindo a probabilidade de gerar números com mais de 5 caracteres\r",
									"    const tamanhoNumero = Math.random() < 0.8 ? Math.floor(Math.random() * 5) + 1 : Math.floor(Math.random() * 6) + 5;\r",
									"\r",
									"    // Gerando um número aleatório com o tamanho definido\r",
									"    let numeroResidencia = Math.floor(Math.random() * Math.pow(10, tamanhoNumero)).toString(); // Gera número aleatório com o tamanho desejado\r",
									"\r",
									"    // Se o primeiro caractere for 0, remove-o\r",
									"    if (numeroResidencia[0] === '0') {\r",
									"        numeroResidencia = numeroResidencia.slice(1); // Remove o primeiro caractere\r",
									"    }\r",
									"\r",
									"    // Garantindo que o número tenha no máximo 10 caracteres\r",
									"    if (numeroResidencia.length > 10) {\r",
									"        numeroResidencia = numeroResidencia.slice(0, 10); // Limita a 10 caracteres\r",
									"    }\r",
									"\r",
									"    return numeroResidencia;\r",
									"}\r",
									"\r",
									"// Gerando o número de residência e armazenando como variável de ambiente\r",
									"const numeroResidenciaGerado = gerarNumeroResidencia();\r",
									"pm.environment.set(\"numeroResidencia\", numeroResidenciaGerado);\r",
									"\r",
									"function bairro() {\r",
									"    const names = ['Leblon', 'Ipanema', 'Copacabana', 'Barra da Tijuca', 'Botafogo', 'Lapa', 'Santa Teresa', 'Jardim Botânico', 'Flamengo', 'São Conrado', 'Moema', 'Vila Madalena', 'Pinheiros', 'Jardins', 'Aclimação', 'Brooklin', 'Tatuapé', 'Vila Progredior', 'Vila Nova Conceição', 'Campo Belo','Centro', 'Praia de Belas', 'Moinhos de Vento', 'Petrópolis', 'Tristeza', 'Caminho das Árvores', 'Pituba', 'Stella Maris', 'Parque Atlântico', 'Costa Azul', 'Vila Galvão', 'Santo Amaro', 'Perdizes', 'Aclimação', 'Vila Sônia', 'Cidade Dutra', 'São Bernardo do Campo', 'Vila Mariana', 'Bela Vista', 'Liberdade','Pinheiros', 'Itaim Bibi', 'Santa Cecília', 'Tucuruvi', 'Chácara Santo Antônio', 'Água Fria', 'Vila Olímpia', 'Vila São Francisco', 'Consolação', 'Vila Madalena']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Bairro\", bairro())\r",
									"\r",
									"function cidade() {\r",
									"    const names = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador', 'Curitiba', 'Fortaleza', 'Recife', 'Brasília', 'Manaus', 'Vitória', 'Goiânia', 'Belém', 'Natal', 'São Luís', 'Maceió', 'Campo Grande', 'João Pessoa', 'Aracaju', 'Cuiabá', 'Florianópolis', 'Teresina', 'Palmas', 'Macapá', 'Rio Branco', 'Boa Vista', 'Porto Velho', 'Anápolis', 'Caruaru', 'Londrina','Marabá', 'Araraquara', 'Sorocaba', 'Santos', 'Niterói', 'Mogi das Cruzes', 'Caxias do Sul', 'Barueri', 'Campinas', 'São José', 'Ponta Grossa', 'Jundiaí', 'Uberlândia', 'Diadema', 'Santo André', 'São Bernardo do Campo', 'Itaquaquecetuba', 'Ribeirão Preto', 'Juiz de Fora']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Cidade\", cidade())\r",
									"\r",
									"function abreviacao() {\r",
									"    const names = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"AbreviacaoEstado\", abreviacao())\r",
									"\r",
									"function randomCep() {\r",
									"    let randomCep = '';\r",
									"   \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        randomCep += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCep;\r",
									"}\r",
									"pm.environment.set(\"cep\", randomCep());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomeEmpresa}}\",\r\n  \"registerCompany\": \"99999999999999999999\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"{{fullnameUser}}\",\r\n  \"telephone\": \"{{telefone}}\",\r\n  \"serviceDescription\": \"{{Descricao}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{cep}}\",\r\n      \"city\": \"{{Cidade}}\",\r\n      \"state\": \"{{AbreviacaoEstado}}\",\r\n      \"district\": \"{{Bairro}}\",\r\n      \"street\": \"{{logradouroCompleto}}\",\r\n      \"number\": \"{{numeroResidencia}}\",\r\n      \"complement\": \"\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTM0MSwiZXhwIjoxNzM5MzE1NzQxfQ.cgJqYe74cprHCRTY9YLF_B-Hfgfp8l8lr6gDrEuqMi4' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"corporateName\": \"Matheus Sousa Testes\",\r\n  \"registerCompany\": \"57126456000155\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com o campo Contato Responsável em branco",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function empresa() {\r",
									"    const names = [\"TechNova\", \"Bytewave\", \"Cyberion\", \"InovaTech\", \"Nexabyte\", \"Softtron\", \"Codeverse\", \"Dataflux\", \"Infinitron\", \"LogiCore\", \"Zentek\",\"Neurobyte\", \"Cloudix\", \"Sysnova\", \"Hexabit\", \"AIgorithm\", \"Quantumix\", \"Webtron\", \"Netflux\", \"Cyberflux\", \"Deepcode\", \"Techpulse\", \"Synaptech\", \"Codexis\", \"Nexonix\", \"Algobyte\", \"Infobyte\", \"Datazen\", \"Digiflow\", \"Innovix\", \"Coretron\", \"Zybernet\", \"Neurotech\", \"Nanobyte\", \"Virtunix\", \"Codexel\", \"Optibit\", \"Bitnova\", \"Globotron\", \"Digiware\", \"Skytech\", \"Cybervox\", \"Techspire\", \"Softbit\", \"MetaTech\", \"Synthron\", \"Virtuabyte\", \"Cloudtron\", \"Algonix\", \"Bitzen\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Empresa\", empresa())\r",
									"\r",
									"function tag() {\r",
									"    const tagnames = ['Solutions', 'Tech', 'Digital', 'Systems', 'Software', 'Cloud', 'AI', 'Cyber', 'Data', 'Analytics','Network', 'Security', 'Labs', 'Smart', 'Logic', 'Innovation', 'IT', 'Global', 'Developers', 'Code', 'Techno', 'Automations', 'Cloudware', 'Dynamics', 'Vision', 'Intelligence', 'NextGen', 'Computing', 'Innovators', 'Engineering', 'Performance', 'Softworks', 'Logicware', 'Digitalware', 'Transform', 'Platform', 'Smartware', 'Dataflow', 'Byte', 'Edge', 'Nexus', 'Techworks', 'Bit', 'Virtual', 'SystemsX', 'Infotech', 'Genix', 'Quantum', 'Bitware', 'CloudX'];\r",
									"\r",
									"    const randomTastName = tagnames[Math.floor(Math.random() * tagnames.length)]\r",
									"    return randomTastName\r",
									"}\r",
									"pm.environment.set(\"Tag\", tag())\r",
									"\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"Empresa\") + \" \" + pm.environment.get(\"Tag\"))\r",
									"\r",
									"\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"\r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									"\r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									"\r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									"\r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									"\r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									"\r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"CNPJ\", cnpjGerado);\r",
									"\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function gerarTelefone() {\r",
									"    // Gerando um DDD aleatório entre 11 e 99\r",
									"    const ddd = Math.floor(Math.random() * (99 - 11 + 1)) + 11;\r",
									"\r",
									"    // Gerando o número de telefone com 9 dígitos, começando com 9\r",
									"    const numero = Math.floor(Math.random() * 100000000) + 900000000; // Gera um número aleatório entre 900000000 e 999999999 (começando com '9')\r",
									"\r",
									"    // Concatenando +55, o DDD e o número gerado para formar o telefone\r",
									"    const telefone = `55${ddd}${numero.toString().slice(0, 5)}${numero.toString().slice(5, 9)}`;\r",
									"\r",
									"    return telefone;\r",
									"}\r",
									"\r",
									"// Gerando o número de telefone e armazenando como variável de ambiente\r",
									"const telefoneGerado = gerarTelefone();\r",
									"pm.environment.set(\"telefone\", telefoneGerado);\r",
									"\r",
									"function descricao() {\r",
									"    const names = [\"Testes\", \"Automação\", \"FrontEnd\", \"Backend\",\"Banco de Dados\", \"IA\",\"AWS\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Descricao\", descricao())\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"NomeRua\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"NomeRuas\", lastname())\r",
									"\r",
									"pm.environment.set(\"nomeruaComposto\", \r",
									"    pm.environment.get(\"NomeRua\") + \" \" + pm.environment.get(\"NomeRuas\"))\r",
									"\r",
									"function logradouro() {\r",
									"    const names = [\"Avenida\", \"Rua\", \"Alameda\", \"Travessa\", \"Praça\", \"Rodovia\", \"Estrada\", \"Largo\", \"Viaduto\", \"Marginal\", \"Parque\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Logradouro\", logradouro())\r",
									"\r",
									"pm.environment.set(\"logradouroCompleto\", \r",
									"    pm.environment.get(\"Logradouro\") + \" \" + pm.environment.get(\"nomeruaComposto\"))\r",
									"\r",
									"\r",
									"function gerarNumeroResidencia() {\r",
									"    // Definindo a probabilidade de gerar números com mais de 5 caracteres\r",
									"    const tamanhoNumero = Math.random() < 0.8 ? Math.floor(Math.random() * 5) + 1 : Math.floor(Math.random() * 6) + 5;\r",
									"\r",
									"    // Gerando um número aleatório com o tamanho definido\r",
									"    let numeroResidencia = Math.floor(Math.random() * Math.pow(10, tamanhoNumero)).toString(); // Gera número aleatório com o tamanho desejado\r",
									"\r",
									"    // Se o primeiro caractere for 0, remove-o\r",
									"    if (numeroResidencia[0] === '0') {\r",
									"        numeroResidencia = numeroResidencia.slice(1); // Remove o primeiro caractere\r",
									"    }\r",
									"\r",
									"    // Garantindo que o número tenha no máximo 10 caracteres\r",
									"    if (numeroResidencia.length > 10) {\r",
									"        numeroResidencia = numeroResidencia.slice(0, 10); // Limita a 10 caracteres\r",
									"    }\r",
									"\r",
									"    return numeroResidencia;\r",
									"}\r",
									"\r",
									"// Gerando o número de residência e armazenando como variável de ambiente\r",
									"const numeroResidenciaGerado = gerarNumeroResidencia();\r",
									"pm.environment.set(\"numeroResidencia\", numeroResidenciaGerado);\r",
									"\r",
									"function bairro() {\r",
									"    const names = ['Leblon', 'Ipanema', 'Copacabana', 'Barra da Tijuca', 'Botafogo', 'Lapa', 'Santa Teresa', 'Jardim Botânico', 'Flamengo', 'São Conrado', 'Moema', 'Vila Madalena', 'Pinheiros', 'Jardins', 'Aclimação', 'Brooklin', 'Tatuapé', 'Vila Progredior', 'Vila Nova Conceição', 'Campo Belo','Centro', 'Praia de Belas', 'Moinhos de Vento', 'Petrópolis', 'Tristeza', 'Caminho das Árvores', 'Pituba', 'Stella Maris', 'Parque Atlântico', 'Costa Azul', 'Vila Galvão', 'Santo Amaro', 'Perdizes', 'Aclimação', 'Vila Sônia', 'Cidade Dutra', 'São Bernardo do Campo', 'Vila Mariana', 'Bela Vista', 'Liberdade','Pinheiros', 'Itaim Bibi', 'Santa Cecília', 'Tucuruvi', 'Chácara Santo Antônio', 'Água Fria', 'Vila Olímpia', 'Vila São Francisco', 'Consolação', 'Vila Madalena']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Bairro\", bairro())\r",
									"\r",
									"function cidade() {\r",
									"    const names = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador', 'Curitiba', 'Fortaleza', 'Recife', 'Brasília', 'Manaus', 'Vitória', 'Goiânia', 'Belém', 'Natal', 'São Luís', 'Maceió', 'Campo Grande', 'João Pessoa', 'Aracaju', 'Cuiabá', 'Florianópolis', 'Teresina', 'Palmas', 'Macapá', 'Rio Branco', 'Boa Vista', 'Porto Velho', 'Anápolis', 'Caruaru', 'Londrina','Marabá', 'Araraquara', 'Sorocaba', 'Santos', 'Niterói', 'Mogi das Cruzes', 'Caxias do Sul', 'Barueri', 'Campinas', 'São José', 'Ponta Grossa', 'Jundiaí', 'Uberlândia', 'Diadema', 'Santo André', 'São Bernardo do Campo', 'Itaquaquecetuba', 'Ribeirão Preto', 'Juiz de Fora']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Cidade\", cidade())\r",
									"\r",
									"function abreviacao() {\r",
									"    const names = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"AbreviacaoEstado\", abreviacao())\r",
									"\r",
									"function randomCep() {\r",
									"    let randomCep = '';\r",
									"   \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        randomCep += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCep;\r",
									"}\r",
									"pm.environment.set(\"cep\", randomCep());\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameuserExc\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\")+ \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\") + \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\") + \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\") + \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\") + \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\") + \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\") + \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\") + \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\") + \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\") + \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\") + \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\") + \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\") + \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\") + \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\") + \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\") + \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Mensagem de erro\",function(){\r",
									"     pm.expect(pm.response.json().error[0]).to.equal(\"O campo Contado do Responsável é obrigatório.\")\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomeEmpresa}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"\",\r\n  \"telephone\": \"{{telefone}}\",\r\n  \"serviceDescription\": \"{{Descricao}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{cep}}\",\r\n      \"city\": \"{{Cidade}}\",\r\n      \"state\": \"{{AbreviacaoEstado}}\",\r\n      \"district\": \"{{Bairro}}\",\r\n      \"street\": \"{{logradouroCompleto}}\",\r\n      \"number\": \"{{numeroResidencia}}\",\r\n      \"complement\": \"\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTM0MSwiZXhwIjoxNzM5MzE1NzQxfQ.cgJqYe74cprHCRTY9YLF_B-Hfgfp8l8lr6gDrEuqMi4' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"corporateName\": \"Matheus Sousa Testes\",\r\n  \"registerCompany\": \"57126456000155\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com o campo Contato Responsável minimo duas palavras compostas",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function empresa() {\r",
									"    const names = [\"TechNova\", \"Bytewave\", \"Cyberion\", \"InovaTech\", \"Nexabyte\", \"Softtron\", \"Codeverse\", \"Dataflux\", \"Infinitron\", \"LogiCore\", \"Zentek\",\"Neurobyte\", \"Cloudix\", \"Sysnova\", \"Hexabit\", \"AIgorithm\", \"Quantumix\", \"Webtron\", \"Netflux\", \"Cyberflux\", \"Deepcode\", \"Techpulse\", \"Synaptech\", \"Codexis\", \"Nexonix\", \"Algobyte\", \"Infobyte\", \"Datazen\", \"Digiflow\", \"Innovix\", \"Coretron\", \"Zybernet\", \"Neurotech\", \"Nanobyte\", \"Virtunix\", \"Codexel\", \"Optibit\", \"Bitnova\", \"Globotron\", \"Digiware\", \"Skytech\", \"Cybervox\", \"Techspire\", \"Softbit\", \"MetaTech\", \"Synthron\", \"Virtuabyte\", \"Cloudtron\", \"Algonix\", \"Bitzen\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Empresa\", empresa())\r",
									"\r",
									"function tag() {\r",
									"    const tagnames = ['Solutions', 'Tech', 'Digital', 'Systems', 'Software', 'Cloud', 'AI', 'Cyber', 'Data', 'Analytics','Network', 'Security', 'Labs', 'Smart', 'Logic', 'Innovation', 'IT', 'Global', 'Developers', 'Code', 'Techno', 'Automations', 'Cloudware', 'Dynamics', 'Vision', 'Intelligence', 'NextGen', 'Computing', 'Innovators', 'Engineering', 'Performance', 'Softworks', 'Logicware', 'Digitalware', 'Transform', 'Platform', 'Smartware', 'Dataflow', 'Byte', 'Edge', 'Nexus', 'Techworks', 'Bit', 'Virtual', 'SystemsX', 'Infotech', 'Genix', 'Quantum', 'Bitware', 'CloudX'];\r",
									"\r",
									"    const randomTastName = tagnames[Math.floor(Math.random() * tagnames.length)]\r",
									"    return randomTastName\r",
									"}\r",
									"pm.environment.set(\"Tag\", tag())\r",
									"\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"Empresa\") + \" \" + pm.environment.get(\"Tag\"))\r",
									"\r",
									"\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"\r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									"\r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									"\r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									"\r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									"\r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									"\r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"CNPJ\", cnpjGerado);\r",
									"\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function gerarTelefone() {\r",
									"    // Gerando um DDD aleatório entre 11 e 99\r",
									"    const ddd = Math.floor(Math.random() * (99 - 11 + 1)) + 11;\r",
									"\r",
									"    // Gerando o número de telefone com 9 dígitos, começando com 9\r",
									"    const numero = Math.floor(Math.random() * 100000000) + 900000000; // Gera um número aleatório entre 900000000 e 999999999 (começando com '9')\r",
									"\r",
									"    // Concatenando +55, o DDD e o número gerado para formar o telefone\r",
									"    const telefone = `55${ddd}${numero.toString().slice(0, 5)}${numero.toString().slice(5, 9)}`;\r",
									"\r",
									"    return telefone;\r",
									"}\r",
									"\r",
									"// Gerando o número de telefone e armazenando como variável de ambiente\r",
									"const telefoneGerado = gerarTelefone();\r",
									"pm.environment.set(\"telefone\", telefoneGerado);\r",
									"\r",
									"function descricao() {\r",
									"    const names = [\"Testes\", \"Automação\", \"FrontEnd\", \"Backend\",\"Banco de Dados\", \"IA\",\"AWS\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Descricao\", descricao())\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"NomeRua\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"NomeRuas\", lastname())\r",
									"\r",
									"pm.environment.set(\"nomeruaComposto\", \r",
									"    pm.environment.get(\"NomeRua\") + \" \" + pm.environment.get(\"NomeRuas\"))\r",
									"\r",
									"function logradouro() {\r",
									"    const names = [\"Avenida\", \"Rua\", \"Alameda\", \"Travessa\", \"Praça\", \"Rodovia\", \"Estrada\", \"Largo\", \"Viaduto\", \"Marginal\", \"Parque\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Logradouro\", logradouro())\r",
									"\r",
									"pm.environment.set(\"logradouroCompleto\", \r",
									"    pm.environment.get(\"Logradouro\") + \" \" + pm.environment.get(\"nomeruaComposto\"))\r",
									"\r",
									"\r",
									"function gerarNumeroResidencia() {\r",
									"    // Definindo a probabilidade de gerar números com mais de 5 caracteres\r",
									"    const tamanhoNumero = Math.random() < 0.8 ? Math.floor(Math.random() * 5) + 1 : Math.floor(Math.random() * 6) + 5;\r",
									"\r",
									"    // Gerando um número aleatório com o tamanho definido\r",
									"    let numeroResidencia = Math.floor(Math.random() * Math.pow(10, tamanhoNumero)).toString(); // Gera número aleatório com o tamanho desejado\r",
									"\r",
									"    // Se o primeiro caractere for 0, remove-o\r",
									"    if (numeroResidencia[0] === '0') {\r",
									"        numeroResidencia = numeroResidencia.slice(1); // Remove o primeiro caractere\r",
									"    }\r",
									"\r",
									"    // Garantindo que o número tenha no máximo 10 caracteres\r",
									"    if (numeroResidencia.length > 10) {\r",
									"        numeroResidencia = numeroResidencia.slice(0, 10); // Limita a 10 caracteres\r",
									"    }\r",
									"\r",
									"    return numeroResidencia;\r",
									"}\r",
									"\r",
									"// Gerando o número de residência e armazenando como variável de ambiente\r",
									"const numeroResidenciaGerado = gerarNumeroResidencia();\r",
									"pm.environment.set(\"numeroResidencia\", numeroResidenciaGerado);\r",
									"\r",
									"function bairro() {\r",
									"    const names = ['Leblon', 'Ipanema', 'Copacabana', 'Barra da Tijuca', 'Botafogo', 'Lapa', 'Santa Teresa', 'Jardim Botânico', 'Flamengo', 'São Conrado', 'Moema', 'Vila Madalena', 'Pinheiros', 'Jardins', 'Aclimação', 'Brooklin', 'Tatuapé', 'Vila Progredior', 'Vila Nova Conceição', 'Campo Belo','Centro', 'Praia de Belas', 'Moinhos de Vento', 'Petrópolis', 'Tristeza', 'Caminho das Árvores', 'Pituba', 'Stella Maris', 'Parque Atlântico', 'Costa Azul', 'Vila Galvão', 'Santo Amaro', 'Perdizes', 'Aclimação', 'Vila Sônia', 'Cidade Dutra', 'São Bernardo do Campo', 'Vila Mariana', 'Bela Vista', 'Liberdade','Pinheiros', 'Itaim Bibi', 'Santa Cecília', 'Tucuruvi', 'Chácara Santo Antônio', 'Água Fria', 'Vila Olímpia', 'Vila São Francisco', 'Consolação', 'Vila Madalena']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Bairro\", bairro())\r",
									"\r",
									"function cidade() {\r",
									"    const names = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador', 'Curitiba', 'Fortaleza', 'Recife', 'Brasília', 'Manaus', 'Vitória', 'Goiânia', 'Belém', 'Natal', 'São Luís', 'Maceió', 'Campo Grande', 'João Pessoa', 'Aracaju', 'Cuiabá', 'Florianópolis', 'Teresina', 'Palmas', 'Macapá', 'Rio Branco', 'Boa Vista', 'Porto Velho', 'Anápolis', 'Caruaru', 'Londrina','Marabá', 'Araraquara', 'Sorocaba', 'Santos', 'Niterói', 'Mogi das Cruzes', 'Caxias do Sul', 'Barueri', 'Campinas', 'São José', 'Ponta Grossa', 'Jundiaí', 'Uberlândia', 'Diadema', 'Santo André', 'São Bernardo do Campo', 'Itaquaquecetuba', 'Ribeirão Preto', 'Juiz de Fora']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Cidade\", cidade())\r",
									"\r",
									"function abreviacao() {\r",
									"    const names = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"AbreviacaoEstado\", abreviacao())\r",
									"\r",
									"function randomCep() {\r",
									"    let randomCep = '';\r",
									"   \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        randomCep += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCep;\r",
									"}\r",
									"pm.environment.set(\"cep\", randomCep());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomeEmpresa}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Matheus\",\r\n  \"telephone\": \"{{telefone}}\",\r\n  \"serviceDescription\": \"{{Descricao}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{cep}}\",\r\n      \"city\": \"{{Cidade}}\",\r\n      \"state\": \"{{AbreviacaoEstado}}\",\r\n      \"district\": \"{{Bairro}}\",\r\n      \"street\": \"{{logradouroCompleto}}\",\r\n      \"number\": \"{{numeroResidencia}}\",\r\n      \"complement\": \"\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTM0MSwiZXhwIjoxNzM5MzE1NzQxfQ.cgJqYe74cprHCRTY9YLF_B-Hfgfp8l8lr6gDrEuqMi4' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"corporateName\": \"Matheus Sousa Testes\",\r\n  \"registerCompany\": \"57126456000155\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com o campo Contato Responsável com numeros",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function empresa() {\r",
									"    const names = [\"TechNova\", \"Bytewave\", \"Cyberion\", \"InovaTech\", \"Nexabyte\", \"Softtron\", \"Codeverse\", \"Dataflux\", \"Infinitron\", \"LogiCore\", \"Zentek\",\"Neurobyte\", \"Cloudix\", \"Sysnova\", \"Hexabit\", \"AIgorithm\", \"Quantumix\", \"Webtron\", \"Netflux\", \"Cyberflux\", \"Deepcode\", \"Techpulse\", \"Synaptech\", \"Codexis\", \"Nexonix\", \"Algobyte\", \"Infobyte\", \"Datazen\", \"Digiflow\", \"Innovix\", \"Coretron\", \"Zybernet\", \"Neurotech\", \"Nanobyte\", \"Virtunix\", \"Codexel\", \"Optibit\", \"Bitnova\", \"Globotron\", \"Digiware\", \"Skytech\", \"Cybervox\", \"Techspire\", \"Softbit\", \"MetaTech\", \"Synthron\", \"Virtuabyte\", \"Cloudtron\", \"Algonix\", \"Bitzen\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Empresa\", empresa())\r",
									"\r",
									"function tag() {\r",
									"    const tagnames = ['Solutions', 'Tech', 'Digital', 'Systems', 'Software', 'Cloud', 'AI', 'Cyber', 'Data', 'Analytics','Network', 'Security', 'Labs', 'Smart', 'Logic', 'Innovation', 'IT', 'Global', 'Developers', 'Code', 'Techno', 'Automations', 'Cloudware', 'Dynamics', 'Vision', 'Intelligence', 'NextGen', 'Computing', 'Innovators', 'Engineering', 'Performance', 'Softworks', 'Logicware', 'Digitalware', 'Transform', 'Platform', 'Smartware', 'Dataflow', 'Byte', 'Edge', 'Nexus', 'Techworks', 'Bit', 'Virtual', 'SystemsX', 'Infotech', 'Genix', 'Quantum', 'Bitware', 'CloudX'];\r",
									"\r",
									"    const randomTastName = tagnames[Math.floor(Math.random() * tagnames.length)]\r",
									"    return randomTastName\r",
									"}\r",
									"pm.environment.set(\"Tag\", tag())\r",
									"\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"Empresa\") + \" \" + pm.environment.get(\"Tag\"))\r",
									"\r",
									"\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"\r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									"\r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									"\r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									"\r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									"\r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									"\r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"CNPJ\", cnpjGerado);\r",
									"\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function gerarTelefone() {\r",
									"    // Gerando um DDD aleatório entre 11 e 99\r",
									"    const ddd = Math.floor(Math.random() * (99 - 11 + 1)) + 11;\r",
									"\r",
									"    // Gerando o número de telefone com 9 dígitos, começando com 9\r",
									"    const numero = Math.floor(Math.random() * 100000000) + 900000000; // Gera um número aleatório entre 900000000 e 999999999 (começando com '9')\r",
									"\r",
									"    // Concatenando +55, o DDD e o número gerado para formar o telefone\r",
									"    const telefone = `55${ddd}${numero.toString().slice(0, 5)}${numero.toString().slice(5, 9)}`;\r",
									"\r",
									"    return telefone;\r",
									"}\r",
									"\r",
									"// Gerando o número de telefone e armazenando como variável de ambiente\r",
									"const telefoneGerado = gerarTelefone();\r",
									"pm.environment.set(\"telefone\", telefoneGerado);\r",
									"\r",
									"function descricao() {\r",
									"    const names = [\"Testes\", \"Automação\", \"FrontEnd\", \"Backend\",\"Banco de Dados\", \"IA\",\"AWS\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Descricao\", descricao())\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"NomeRua\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"NomeRuas\", lastname())\r",
									"\r",
									"pm.environment.set(\"nomeruaComposto\", \r",
									"    pm.environment.get(\"NomeRua\") + \" \" + pm.environment.get(\"NomeRuas\"))\r",
									"\r",
									"function logradouro() {\r",
									"    const names = [\"Avenida\", \"Rua\", \"Alameda\", \"Travessa\", \"Praça\", \"Rodovia\", \"Estrada\", \"Largo\", \"Viaduto\", \"Marginal\", \"Parque\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Logradouro\", logradouro())\r",
									"\r",
									"pm.environment.set(\"logradouroCompleto\", \r",
									"    pm.environment.get(\"Logradouro\") + \" \" + pm.environment.get(\"nomeruaComposto\"))\r",
									"\r",
									"\r",
									"function gerarNumeroResidencia() {\r",
									"    // Definindo a probabilidade de gerar números com mais de 5 caracteres\r",
									"    const tamanhoNumero = Math.random() < 0.8 ? Math.floor(Math.random() * 5) + 1 : Math.floor(Math.random() * 6) + 5;\r",
									"\r",
									"    // Gerando um número aleatório com o tamanho definido\r",
									"    let numeroResidencia = Math.floor(Math.random() * Math.pow(10, tamanhoNumero)).toString(); // Gera número aleatório com o tamanho desejado\r",
									"\r",
									"    // Se o primeiro caractere for 0, remove-o\r",
									"    if (numeroResidencia[0] === '0') {\r",
									"        numeroResidencia = numeroResidencia.slice(1); // Remove o primeiro caractere\r",
									"    }\r",
									"\r",
									"    // Garantindo que o número tenha no máximo 10 caracteres\r",
									"    if (numeroResidencia.length > 10) {\r",
									"        numeroResidencia = numeroResidencia.slice(0, 10); // Limita a 10 caracteres\r",
									"    }\r",
									"\r",
									"    return numeroResidencia;\r",
									"}\r",
									"\r",
									"// Gerando o número de residência e armazenando como variável de ambiente\r",
									"const numeroResidenciaGerado = gerarNumeroResidencia();\r",
									"pm.environment.set(\"numeroResidencia\", numeroResidenciaGerado);\r",
									"\r",
									"function bairro() {\r",
									"    const names = ['Leblon', 'Ipanema', 'Copacabana', 'Barra da Tijuca', 'Botafogo', 'Lapa', 'Santa Teresa', 'Jardim Botânico', 'Flamengo', 'São Conrado', 'Moema', 'Vila Madalena', 'Pinheiros', 'Jardins', 'Aclimação', 'Brooklin', 'Tatuapé', 'Vila Progredior', 'Vila Nova Conceição', 'Campo Belo','Centro', 'Praia de Belas', 'Moinhos de Vento', 'Petrópolis', 'Tristeza', 'Caminho das Árvores', 'Pituba', 'Stella Maris', 'Parque Atlântico', 'Costa Azul', 'Vila Galvão', 'Santo Amaro', 'Perdizes', 'Aclimação', 'Vila Sônia', 'Cidade Dutra', 'São Bernardo do Campo', 'Vila Mariana', 'Bela Vista', 'Liberdade','Pinheiros', 'Itaim Bibi', 'Santa Cecília', 'Tucuruvi', 'Chácara Santo Antônio', 'Água Fria', 'Vila Olímpia', 'Vila São Francisco', 'Consolação', 'Vila Madalena']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Bairro\", bairro())\r",
									"\r",
									"function cidade() {\r",
									"    const names = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador', 'Curitiba', 'Fortaleza', 'Recife', 'Brasília', 'Manaus', 'Vitória', 'Goiânia', 'Belém', 'Natal', 'São Luís', 'Maceió', 'Campo Grande', 'João Pessoa', 'Aracaju', 'Cuiabá', 'Florianópolis', 'Teresina', 'Palmas', 'Macapá', 'Rio Branco', 'Boa Vista', 'Porto Velho', 'Anápolis', 'Caruaru', 'Londrina','Marabá', 'Araraquara', 'Sorocaba', 'Santos', 'Niterói', 'Mogi das Cruzes', 'Caxias do Sul', 'Barueri', 'Campinas', 'São José', 'Ponta Grossa', 'Jundiaí', 'Uberlândia', 'Diadema', 'Santo André', 'São Bernardo do Campo', 'Itaquaquecetuba', 'Ribeirão Preto', 'Juiz de Fora']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Cidade\", cidade())\r",
									"\r",
									"function abreviacao() {\r",
									"    const names = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"AbreviacaoEstado\", abreviacao())\r",
									"\r",
									"function randomCep() {\r",
									"    let randomCep = '';\r",
									"   \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        randomCep += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCep;\r",
									"}\r",
									"pm.environment.set(\"cep\", randomCep());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomeEmpresa}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Matheu5 Sou5a\",\r\n  \"telephone\": \"{{telefone}}\",\r\n  \"serviceDescription\": \"{{Descricao}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{cep}}\",\r\n      \"city\": \"{{Cidade}}\",\r\n      \"state\": \"{{AbreviacaoEstado}}\",\r\n      \"district\": \"{{Bairro}}\",\r\n      \"street\": \"{{logradouroCompleto}}\",\r\n      \"number\": \"{{numeroResidencia}}\",\r\n      \"complement\": \"\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTM0MSwiZXhwIjoxNzM5MzE1NzQxfQ.cgJqYe74cprHCRTY9YLF_B-Hfgfp8l8lr6gDrEuqMi4' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"corporateName\": \"Matheus Sousa Testes\",\r\n  \"registerCompany\": \"57126456000155\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com o campo Contato Responsável com caracteres especiais",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function empresa() {\r",
									"    const names = [\"TechNova\", \"Bytewave\", \"Cyberion\", \"InovaTech\", \"Nexabyte\", \"Softtron\", \"Codeverse\", \"Dataflux\", \"Infinitron\", \"LogiCore\", \"Zentek\",\"Neurobyte\", \"Cloudix\", \"Sysnova\", \"Hexabit\", \"AIgorithm\", \"Quantumix\", \"Webtron\", \"Netflux\", \"Cyberflux\", \"Deepcode\", \"Techpulse\", \"Synaptech\", \"Codexis\", \"Nexonix\", \"Algobyte\", \"Infobyte\", \"Datazen\", \"Digiflow\", \"Innovix\", \"Coretron\", \"Zybernet\", \"Neurotech\", \"Nanobyte\", \"Virtunix\", \"Codexel\", \"Optibit\", \"Bitnova\", \"Globotron\", \"Digiware\", \"Skytech\", \"Cybervox\", \"Techspire\", \"Softbit\", \"MetaTech\", \"Synthron\", \"Virtuabyte\", \"Cloudtron\", \"Algonix\", \"Bitzen\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Empresa\", empresa())\r",
									"\r",
									"function tag() {\r",
									"    const tagnames = ['Solutions', 'Tech', 'Digital', 'Systems', 'Software', 'Cloud', 'AI', 'Cyber', 'Data', 'Analytics','Network', 'Security', 'Labs', 'Smart', 'Logic', 'Innovation', 'IT', 'Global', 'Developers', 'Code', 'Techno', 'Automations', 'Cloudware', 'Dynamics', 'Vision', 'Intelligence', 'NextGen', 'Computing', 'Innovators', 'Engineering', 'Performance', 'Softworks', 'Logicware', 'Digitalware', 'Transform', 'Platform', 'Smartware', 'Dataflow', 'Byte', 'Edge', 'Nexus', 'Techworks', 'Bit', 'Virtual', 'SystemsX', 'Infotech', 'Genix', 'Quantum', 'Bitware', 'CloudX'];\r",
									"\r",
									"    const randomTastName = tagnames[Math.floor(Math.random() * tagnames.length)]\r",
									"    return randomTastName\r",
									"}\r",
									"pm.environment.set(\"Tag\", tag())\r",
									"\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"Empresa\") + \" \" + pm.environment.get(\"Tag\"))\r",
									"\r",
									"\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"\r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									"\r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									"\r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									"\r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									"\r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									"\r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"CNPJ\", cnpjGerado);\r",
									"\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function gerarTelefone() {\r",
									"    // Gerando um DDD aleatório entre 11 e 99\r",
									"    const ddd = Math.floor(Math.random() * (99 - 11 + 1)) + 11;\r",
									"\r",
									"    // Gerando o número de telefone com 9 dígitos, começando com 9\r",
									"    const numero = Math.floor(Math.random() * 100000000) + 900000000; // Gera um número aleatório entre 900000000 e 999999999 (começando com '9')\r",
									"\r",
									"    // Concatenando +55, o DDD e o número gerado para formar o telefone\r",
									"    const telefone = `55${ddd}${numero.toString().slice(0, 5)}${numero.toString().slice(5, 9)}`;\r",
									"\r",
									"    return telefone;\r",
									"}\r",
									"\r",
									"// Gerando o número de telefone e armazenando como variável de ambiente\r",
									"const telefoneGerado = gerarTelefone();\r",
									"pm.environment.set(\"telefone\", telefoneGerado);\r",
									"\r",
									"function descricao() {\r",
									"    const names = [\"Testes\", \"Automação\", \"FrontEnd\", \"Backend\",\"Banco de Dados\", \"IA\",\"AWS\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Descricao\", descricao())\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"NomeRua\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"NomeRuas\", lastname())\r",
									"\r",
									"pm.environment.set(\"nomeruaComposto\", \r",
									"    pm.environment.get(\"NomeRua\") + \" \" + pm.environment.get(\"NomeRuas\"))\r",
									"\r",
									"function logradouro() {\r",
									"    const names = [\"Avenida\", \"Rua\", \"Alameda\", \"Travessa\", \"Praça\", \"Rodovia\", \"Estrada\", \"Largo\", \"Viaduto\", \"Marginal\", \"Parque\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Logradouro\", logradouro())\r",
									"\r",
									"pm.environment.set(\"logradouroCompleto\", \r",
									"    pm.environment.get(\"Logradouro\") + \" \" + pm.environment.get(\"nomeruaComposto\"))\r",
									"\r",
									"\r",
									"function gerarNumeroResidencia() {\r",
									"    // Definindo a probabilidade de gerar números com mais de 5 caracteres\r",
									"    const tamanhoNumero = Math.random() < 0.8 ? Math.floor(Math.random() * 5) + 1 : Math.floor(Math.random() * 6) + 5;\r",
									"\r",
									"    // Gerando um número aleatório com o tamanho definido\r",
									"    let numeroResidencia = Math.floor(Math.random() * Math.pow(10, tamanhoNumero)).toString(); // Gera número aleatório com o tamanho desejado\r",
									"\r",
									"    // Se o primeiro caractere for 0, remove-o\r",
									"    if (numeroResidencia[0] === '0') {\r",
									"        numeroResidencia = numeroResidencia.slice(1); // Remove o primeiro caractere\r",
									"    }\r",
									"\r",
									"    // Garantindo que o número tenha no máximo 10 caracteres\r",
									"    if (numeroResidencia.length > 10) {\r",
									"        numeroResidencia = numeroResidencia.slice(0, 10); // Limita a 10 caracteres\r",
									"    }\r",
									"\r",
									"    return numeroResidencia;\r",
									"}\r",
									"\r",
									"// Gerando o número de residência e armazenando como variável de ambiente\r",
									"const numeroResidenciaGerado = gerarNumeroResidencia();\r",
									"pm.environment.set(\"numeroResidencia\", numeroResidenciaGerado);\r",
									"\r",
									"function bairro() {\r",
									"    const names = ['Leblon', 'Ipanema', 'Copacabana', 'Barra da Tijuca', 'Botafogo', 'Lapa', 'Santa Teresa', 'Jardim Botânico', 'Flamengo', 'São Conrado', 'Moema', 'Vila Madalena', 'Pinheiros', 'Jardins', 'Aclimação', 'Brooklin', 'Tatuapé', 'Vila Progredior', 'Vila Nova Conceição', 'Campo Belo','Centro', 'Praia de Belas', 'Moinhos de Vento', 'Petrópolis', 'Tristeza', 'Caminho das Árvores', 'Pituba', 'Stella Maris', 'Parque Atlântico', 'Costa Azul', 'Vila Galvão', 'Santo Amaro', 'Perdizes', 'Aclimação', 'Vila Sônia', 'Cidade Dutra', 'São Bernardo do Campo', 'Vila Mariana', 'Bela Vista', 'Liberdade','Pinheiros', 'Itaim Bibi', 'Santa Cecília', 'Tucuruvi', 'Chácara Santo Antônio', 'Água Fria', 'Vila Olímpia', 'Vila São Francisco', 'Consolação', 'Vila Madalena']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Bairro\", bairro())\r",
									"\r",
									"function cidade() {\r",
									"    const names = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador', 'Curitiba', 'Fortaleza', 'Recife', 'Brasília', 'Manaus', 'Vitória', 'Goiânia', 'Belém', 'Natal', 'São Luís', 'Maceió', 'Campo Grande', 'João Pessoa', 'Aracaju', 'Cuiabá', 'Florianópolis', 'Teresina', 'Palmas', 'Macapá', 'Rio Branco', 'Boa Vista', 'Porto Velho', 'Anápolis', 'Caruaru', 'Londrina','Marabá', 'Araraquara', 'Sorocaba', 'Santos', 'Niterói', 'Mogi das Cruzes', 'Caxias do Sul', 'Barueri', 'Campinas', 'São José', 'Ponta Grossa', 'Jundiaí', 'Uberlândia', 'Diadema', 'Santo André', 'São Bernardo do Campo', 'Itaquaquecetuba', 'Ribeirão Preto', 'Juiz de Fora']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Cidade\", cidade())\r",
									"\r",
									"function abreviacao() {\r",
									"    const names = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"AbreviacaoEstado\", abreviacao())\r",
									"\r",
									"function randomCep() {\r",
									"    let randomCep = '';\r",
									"   \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        randomCep += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCep;\r",
									"}\r",
									"pm.environment.set(\"cep\", randomCep());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomeEmpresa}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"M@theus Sous@\",\r\n  \"telephone\": \"{{telefone}}\",\r\n  \"serviceDescription\": \"{{Descricao}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{cep}}\",\r\n      \"city\": \"{{Cidade}}\",\r\n      \"state\": \"{{AbreviacaoEstado}}\",\r\n      \"district\": \"{{Bairro}}\",\r\n      \"street\": \"{{logradouroCompleto}}\",\r\n      \"number\": \"{{numeroResidencia}}\",\r\n      \"complement\": \"\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTM0MSwiZXhwIjoxNzM5MzE1NzQxfQ.cgJqYe74cprHCRTY9YLF_B-Hfgfp8l8lr6gDrEuqMi4' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"corporateName\": \"Matheus Sousa Testes\",\r\n  \"registerCompany\": \"57126456000155\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com o campo Contato Responsável com mais de 100 caracteres",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function empresa() {\r",
									"    const names = [\"TechNova\", \"Bytewave\", \"Cyberion\", \"InovaTech\", \"Nexabyte\", \"Softtron\", \"Codeverse\", \"Dataflux\", \"Infinitron\", \"LogiCore\", \"Zentek\",\"Neurobyte\", \"Cloudix\", \"Sysnova\", \"Hexabit\", \"AIgorithm\", \"Quantumix\", \"Webtron\", \"Netflux\", \"Cyberflux\", \"Deepcode\", \"Techpulse\", \"Synaptech\", \"Codexis\", \"Nexonix\", \"Algobyte\", \"Infobyte\", \"Datazen\", \"Digiflow\", \"Innovix\", \"Coretron\", \"Zybernet\", \"Neurotech\", \"Nanobyte\", \"Virtunix\", \"Codexel\", \"Optibit\", \"Bitnova\", \"Globotron\", \"Digiware\", \"Skytech\", \"Cybervox\", \"Techspire\", \"Softbit\", \"MetaTech\", \"Synthron\", \"Virtuabyte\", \"Cloudtron\", \"Algonix\", \"Bitzen\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Empresa\", empresa())\r",
									"\r",
									"function tag() {\r",
									"    const tagnames = ['Solutions', 'Tech', 'Digital', 'Systems', 'Software', 'Cloud', 'AI', 'Cyber', 'Data', 'Analytics','Network', 'Security', 'Labs', 'Smart', 'Logic', 'Innovation', 'IT', 'Global', 'Developers', 'Code', 'Techno', 'Automations', 'Cloudware', 'Dynamics', 'Vision', 'Intelligence', 'NextGen', 'Computing', 'Innovators', 'Engineering', 'Performance', 'Softworks', 'Logicware', 'Digitalware', 'Transform', 'Platform', 'Smartware', 'Dataflow', 'Byte', 'Edge', 'Nexus', 'Techworks', 'Bit', 'Virtual', 'SystemsX', 'Infotech', 'Genix', 'Quantum', 'Bitware', 'CloudX'];\r",
									"\r",
									"    const randomTastName = tagnames[Math.floor(Math.random() * tagnames.length)]\r",
									"    return randomTastName\r",
									"}\r",
									"pm.environment.set(\"Tag\", tag())\r",
									"\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"Empresa\") + \" \" + pm.environment.get(\"Tag\"))\r",
									"\r",
									"\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"\r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									"\r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									"\r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									"\r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									"\r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									"\r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"CNPJ\", cnpjGerado);\r",
									"\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function gerarTelefone() {\r",
									"    // Gerando um DDD aleatório entre 11 e 99\r",
									"    const ddd = Math.floor(Math.random() * (99 - 11 + 1)) + 11;\r",
									"\r",
									"    // Gerando o número de telefone com 9 dígitos, começando com 9\r",
									"    const numero = Math.floor(Math.random() * 100000000) + 900000000; // Gera um número aleatório entre 900000000 e 999999999 (começando com '9')\r",
									"\r",
									"    // Concatenando +55, o DDD e o número gerado para formar o telefone\r",
									"    const telefone = `55${ddd}${numero.toString().slice(0, 5)}${numero.toString().slice(5, 9)}`;\r",
									"\r",
									"    return telefone;\r",
									"}\r",
									"\r",
									"// Gerando o número de telefone e armazenando como variável de ambiente\r",
									"const telefoneGerado = gerarTelefone();\r",
									"pm.environment.set(\"telefone\", telefoneGerado);\r",
									"\r",
									"function descricao() {\r",
									"    const names = [\"Testes\", \"Automação\", \"FrontEnd\", \"Backend\",\"Banco de Dados\", \"IA\",\"AWS\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Descricao\", descricao())\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"NomeRua\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"NomeRuas\", lastname())\r",
									"\r",
									"pm.environment.set(\"nomeruaComposto\", \r",
									"    pm.environment.get(\"NomeRua\") + \" \" + pm.environment.get(\"NomeRuas\"))\r",
									"\r",
									"function logradouro() {\r",
									"    const names = [\"Avenida\", \"Rua\", \"Alameda\", \"Travessa\", \"Praça\", \"Rodovia\", \"Estrada\", \"Largo\", \"Viaduto\", \"Marginal\", \"Parque\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Logradouro\", logradouro())\r",
									"\r",
									"pm.environment.set(\"logradouroCompleto\", \r",
									"    pm.environment.get(\"Logradouro\") + \" \" + pm.environment.get(\"nomeruaComposto\"))\r",
									"\r",
									"\r",
									"function gerarNumeroResidencia() {\r",
									"    // Definindo a probabilidade de gerar números com mais de 5 caracteres\r",
									"    const tamanhoNumero = Math.random() < 0.8 ? Math.floor(Math.random() * 5) + 1 : Math.floor(Math.random() * 6) + 5;\r",
									"\r",
									"    // Gerando um número aleatório com o tamanho definido\r",
									"    let numeroResidencia = Math.floor(Math.random() * Math.pow(10, tamanhoNumero)).toString(); // Gera número aleatório com o tamanho desejado\r",
									"\r",
									"    // Se o primeiro caractere for 0, remove-o\r",
									"    if (numeroResidencia[0] === '0') {\r",
									"        numeroResidencia = numeroResidencia.slice(1); // Remove o primeiro caractere\r",
									"    }\r",
									"\r",
									"    // Garantindo que o número tenha no máximo 10 caracteres\r",
									"    if (numeroResidencia.length > 10) {\r",
									"        numeroResidencia = numeroResidencia.slice(0, 10); // Limita a 10 caracteres\r",
									"    }\r",
									"\r",
									"    return numeroResidencia;\r",
									"}\r",
									"\r",
									"// Gerando o número de residência e armazenando como variável de ambiente\r",
									"const numeroResidenciaGerado = gerarNumeroResidencia();\r",
									"pm.environment.set(\"numeroResidencia\", numeroResidenciaGerado);\r",
									"\r",
									"function bairro() {\r",
									"    const names = ['Leblon', 'Ipanema', 'Copacabana', 'Barra da Tijuca', 'Botafogo', 'Lapa', 'Santa Teresa', 'Jardim Botânico', 'Flamengo', 'São Conrado', 'Moema', 'Vila Madalena', 'Pinheiros', 'Jardins', 'Aclimação', 'Brooklin', 'Tatuapé', 'Vila Progredior', 'Vila Nova Conceição', 'Campo Belo','Centro', 'Praia de Belas', 'Moinhos de Vento', 'Petrópolis', 'Tristeza', 'Caminho das Árvores', 'Pituba', 'Stella Maris', 'Parque Atlântico', 'Costa Azul', 'Vila Galvão', 'Santo Amaro', 'Perdizes', 'Aclimação', 'Vila Sônia', 'Cidade Dutra', 'São Bernardo do Campo', 'Vila Mariana', 'Bela Vista', 'Liberdade','Pinheiros', 'Itaim Bibi', 'Santa Cecília', 'Tucuruvi', 'Chácara Santo Antônio', 'Água Fria', 'Vila Olímpia', 'Vila São Francisco', 'Consolação', 'Vila Madalena']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Bairro\", bairro())\r",
									"\r",
									"function cidade() {\r",
									"    const names = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador', 'Curitiba', 'Fortaleza', 'Recife', 'Brasília', 'Manaus', 'Vitória', 'Goiânia', 'Belém', 'Natal', 'São Luís', 'Maceió', 'Campo Grande', 'João Pessoa', 'Aracaju', 'Cuiabá', 'Florianópolis', 'Teresina', 'Palmas', 'Macapá', 'Rio Branco', 'Boa Vista', 'Porto Velho', 'Anápolis', 'Caruaru', 'Londrina','Marabá', 'Araraquara', 'Sorocaba', 'Santos', 'Niterói', 'Mogi das Cruzes', 'Caxias do Sul', 'Barueri', 'Campinas', 'São José', 'Ponta Grossa', 'Jundiaí', 'Uberlândia', 'Diadema', 'Santo André', 'São Bernardo do Campo', 'Itaquaquecetuba', 'Ribeirão Preto', 'Juiz de Fora']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Cidade\", cidade())\r",
									"\r",
									"function abreviacao() {\r",
									"    const names = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"AbreviacaoEstado\", abreviacao())\r",
									"\r",
									"function randomCep() {\r",
									"    let randomCep = '';\r",
									"   \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        randomCep += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCep;\r",
									"}\r",
									"pm.environment.set(\"cep\", randomCep());\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameuserExc\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\")+ \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\") + \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\") + \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\") + \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\") + \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\") + \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\") + \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\") + \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\") + \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\") + \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\") + \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\") + \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\") + \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\") + \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\") + \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\") + \" \" + pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Mensagem de erro\",function(){\r",
									"    pm.expect(pm.response.json().error[0]).to.equal(\"O campo Contado do Responsável deve ter no máximo 100 caracteres.\")\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomeEmpresa}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"{{fullnameuserExc}}\",\r\n  \"telephone\": \"{{telefone}}\",\r\n  \"serviceDescription\": \"{{Descricao}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{cep}}\",\r\n      \"city\": \"{{Cidade}}\",\r\n      \"state\": \"{{AbreviacaoEstado}}\",\r\n      \"district\": \"{{Bairro}}\",\r\n      \"street\": \"{{logradouroCompleto}}\",\r\n      \"number\": \"{{numeroResidencia}}\",\r\n      \"complement\": \"\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTM0MSwiZXhwIjoxNzM5MzE1NzQxfQ.cgJqYe74cprHCRTY9YLF_B-Hfgfp8l8lr6gDrEuqMi4' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"corporateName\": \"Matheus Sousa Testes\",\r\n  \"registerCompany\": \"57126456000155\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com o campo Telefone em branco",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function empresa() {\r",
									"    const names = [\"TechNova\", \"Bytewave\", \"Cyberion\", \"InovaTech\", \"Nexabyte\", \"Softtron\", \"Codeverse\", \"Dataflux\", \"Infinitron\", \"LogiCore\", \"Zentek\",\"Neurobyte\", \"Cloudix\", \"Sysnova\", \"Hexabit\", \"AIgorithm\", \"Quantumix\", \"Webtron\", \"Netflux\", \"Cyberflux\", \"Deepcode\", \"Techpulse\", \"Synaptech\", \"Codexis\", \"Nexonix\", \"Algobyte\", \"Infobyte\", \"Datazen\", \"Digiflow\", \"Innovix\", \"Coretron\", \"Zybernet\", \"Neurotech\", \"Nanobyte\", \"Virtunix\", \"Codexel\", \"Optibit\", \"Bitnova\", \"Globotron\", \"Digiware\", \"Skytech\", \"Cybervox\", \"Techspire\", \"Softbit\", \"MetaTech\", \"Synthron\", \"Virtuabyte\", \"Cloudtron\", \"Algonix\", \"Bitzen\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Empresa\", empresa())\r",
									"\r",
									"function tag() {\r",
									"    const tagnames = ['Solutions', 'Tech', 'Digital', 'Systems', 'Software', 'Cloud', 'AI', 'Cyber', 'Data', 'Analytics','Network', 'Security', 'Labs', 'Smart', 'Logic', 'Innovation', 'IT', 'Global', 'Developers', 'Code', 'Techno', 'Automations', 'Cloudware', 'Dynamics', 'Vision', 'Intelligence', 'NextGen', 'Computing', 'Innovators', 'Engineering', 'Performance', 'Softworks', 'Logicware', 'Digitalware', 'Transform', 'Platform', 'Smartware', 'Dataflow', 'Byte', 'Edge', 'Nexus', 'Techworks', 'Bit', 'Virtual', 'SystemsX', 'Infotech', 'Genix', 'Quantum', 'Bitware', 'CloudX'];\r",
									"\r",
									"    const randomTastName = tagnames[Math.floor(Math.random() * tagnames.length)]\r",
									"    return randomTastName\r",
									"}\r",
									"pm.environment.set(\"Tag\", tag())\r",
									"\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"Empresa\") + \" \" + pm.environment.get(\"Tag\"))\r",
									"\r",
									"\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"\r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									"\r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									"\r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									"\r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									"\r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									"\r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"CNPJ\", cnpjGerado);\r",
									"\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function gerarTelefone() {\r",
									"    // Gerando um DDD aleatório entre 11 e 99\r",
									"    const ddd = Math.floor(Math.random() * (99 - 11 + 1)) + 11;\r",
									"\r",
									"    // Gerando o número de telefone com 9 dígitos, começando com 9\r",
									"    const numero = Math.floor(Math.random() * 100000000) + 900000000; // Gera um número aleatório entre 900000000 e 999999999 (começando com '9')\r",
									"\r",
									"    // Concatenando +55, o DDD e o número gerado para formar o telefone\r",
									"    const telefone = `55${ddd}${numero.toString().slice(0, 5)}${numero.toString().slice(5, 9)}`;\r",
									"\r",
									"    return telefone;\r",
									"}\r",
									"\r",
									"// Gerando o número de telefone e armazenando como variável de ambiente\r",
									"const telefoneGerado = gerarTelefone();\r",
									"pm.environment.set(\"telefone\", telefoneGerado);\r",
									"\r",
									"function descricao() {\r",
									"    const names = [\"Testes\", \"Automação\", \"FrontEnd\", \"Backend\",\"Banco de Dados\", \"IA\",\"AWS\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Descricao\", descricao())\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"NomeRua\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"NomeRuas\", lastname())\r",
									"\r",
									"pm.environment.set(\"nomeruaComposto\", \r",
									"    pm.environment.get(\"NomeRua\") + \" \" + pm.environment.get(\"NomeRuas\"))\r",
									"\r",
									"function logradouro() {\r",
									"    const names = [\"Avenida\", \"Rua\", \"Alameda\", \"Travessa\", \"Praça\", \"Rodovia\", \"Estrada\", \"Largo\", \"Viaduto\", \"Marginal\", \"Parque\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Logradouro\", logradouro())\r",
									"\r",
									"pm.environment.set(\"logradouroCompleto\", \r",
									"    pm.environment.get(\"Logradouro\") + \" \" + pm.environment.get(\"nomeruaComposto\"))\r",
									"\r",
									"\r",
									"function gerarNumeroResidencia() {\r",
									"    // Definindo a probabilidade de gerar números com mais de 5 caracteres\r",
									"    const tamanhoNumero = Math.random() < 0.8 ? Math.floor(Math.random() * 5) + 1 : Math.floor(Math.random() * 6) + 5;\r",
									"\r",
									"    // Gerando um número aleatório com o tamanho definido\r",
									"    let numeroResidencia = Math.floor(Math.random() * Math.pow(10, tamanhoNumero)).toString(); // Gera número aleatório com o tamanho desejado\r",
									"\r",
									"    // Se o primeiro caractere for 0, remove-o\r",
									"    if (numeroResidencia[0] === '0') {\r",
									"        numeroResidencia = numeroResidencia.slice(1); // Remove o primeiro caractere\r",
									"    }\r",
									"\r",
									"    // Garantindo que o número tenha no máximo 10 caracteres\r",
									"    if (numeroResidencia.length > 10) {\r",
									"        numeroResidencia = numeroResidencia.slice(0, 10); // Limita a 10 caracteres\r",
									"    }\r",
									"\r",
									"    return numeroResidencia;\r",
									"}\r",
									"\r",
									"// Gerando o número de residência e armazenando como variável de ambiente\r",
									"const numeroResidenciaGerado = gerarNumeroResidencia();\r",
									"pm.environment.set(\"numeroResidencia\", numeroResidenciaGerado);\r",
									"\r",
									"function bairro() {\r",
									"    const names = ['Leblon', 'Ipanema', 'Copacabana', 'Barra da Tijuca', 'Botafogo', 'Lapa', 'Santa Teresa', 'Jardim Botânico', 'Flamengo', 'São Conrado', 'Moema', 'Vila Madalena', 'Pinheiros', 'Jardins', 'Aclimação', 'Brooklin', 'Tatuapé', 'Vila Progredior', 'Vila Nova Conceição', 'Campo Belo','Centro', 'Praia de Belas', 'Moinhos de Vento', 'Petrópolis', 'Tristeza', 'Caminho das Árvores', 'Pituba', 'Stella Maris', 'Parque Atlântico', 'Costa Azul', 'Vila Galvão', 'Santo Amaro', 'Perdizes', 'Aclimação', 'Vila Sônia', 'Cidade Dutra', 'São Bernardo do Campo', 'Vila Mariana', 'Bela Vista', 'Liberdade','Pinheiros', 'Itaim Bibi', 'Santa Cecília', 'Tucuruvi', 'Chácara Santo Antônio', 'Água Fria', 'Vila Olímpia', 'Vila São Francisco', 'Consolação', 'Vila Madalena']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Bairro\", bairro())\r",
									"\r",
									"function cidade() {\r",
									"    const names = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador', 'Curitiba', 'Fortaleza', 'Recife', 'Brasília', 'Manaus', 'Vitória', 'Goiânia', 'Belém', 'Natal', 'São Luís', 'Maceió', 'Campo Grande', 'João Pessoa', 'Aracaju', 'Cuiabá', 'Florianópolis', 'Teresina', 'Palmas', 'Macapá', 'Rio Branco', 'Boa Vista', 'Porto Velho', 'Anápolis', 'Caruaru', 'Londrina','Marabá', 'Araraquara', 'Sorocaba', 'Santos', 'Niterói', 'Mogi das Cruzes', 'Caxias do Sul', 'Barueri', 'Campinas', 'São José', 'Ponta Grossa', 'Jundiaí', 'Uberlândia', 'Diadema', 'Santo André', 'São Bernardo do Campo', 'Itaquaquecetuba', 'Ribeirão Preto', 'Juiz de Fora']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Cidade\", cidade())\r",
									"\r",
									"function abreviacao() {\r",
									"    const names = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"AbreviacaoEstado\", abreviacao())\r",
									"\r",
									"function randomCep() {\r",
									"    let randomCep = '';\r",
									"   \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        randomCep += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCep;\r",
									"}\r",
									"pm.environment.set(\"cep\", randomCep());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Mensagem de erro\",function(){\r",
									"     pm.expect(pm.response.json().error[0]).to.equal(\"O campo Telefone é obrigatório.\")\r",
									"})\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomeEmpresa}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"{{fullnameUser}}\",\r\n  \"telephone\": \"\",\r\n  \"serviceDescription\": \"{{Descricao}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{cep}}\",\r\n      \"city\": \"{{Cidade}}\",\r\n      \"state\": \"{{AbreviacaoEstado}}\",\r\n      \"district\": \"{{Bairro}}\",\r\n      \"street\": \"{{logradouroCompleto}}\",\r\n      \"number\": \"{{numeroResidencia}}\",\r\n      \"complement\": \"\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTM0MSwiZXhwIjoxNzM5MzE1NzQxfQ.cgJqYe74cprHCRTY9YLF_B-Hfgfp8l8lr6gDrEuqMi4' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"corporateName\": \"Matheus Sousa Testes\",\r\n  \"registerCompany\": \"57126456000155\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com o campo Telefone com menos de 15 caracteres",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function empresa() {\r",
									"    const names = [\"TechNova\", \"Bytewave\", \"Cyberion\", \"InovaTech\", \"Nexabyte\", \"Softtron\", \"Codeverse\", \"Dataflux\", \"Infinitron\", \"LogiCore\", \"Zentek\",\"Neurobyte\", \"Cloudix\", \"Sysnova\", \"Hexabit\", \"AIgorithm\", \"Quantumix\", \"Webtron\", \"Netflux\", \"Cyberflux\", \"Deepcode\", \"Techpulse\", \"Synaptech\", \"Codexis\", \"Nexonix\", \"Algobyte\", \"Infobyte\", \"Datazen\", \"Digiflow\", \"Innovix\", \"Coretron\", \"Zybernet\", \"Neurotech\", \"Nanobyte\", \"Virtunix\", \"Codexel\", \"Optibit\", \"Bitnova\", \"Globotron\", \"Digiware\", \"Skytech\", \"Cybervox\", \"Techspire\", \"Softbit\", \"MetaTech\", \"Synthron\", \"Virtuabyte\", \"Cloudtron\", \"Algonix\", \"Bitzen\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Empresa\", empresa())\r",
									"\r",
									"function tag() {\r",
									"    const tagnames = ['Solutions', 'Tech', 'Digital', 'Systems', 'Software', 'Cloud', 'AI', 'Cyber', 'Data', 'Analytics','Network', 'Security', 'Labs', 'Smart', 'Logic', 'Innovation', 'IT', 'Global', 'Developers', 'Code', 'Techno', 'Automations', 'Cloudware', 'Dynamics', 'Vision', 'Intelligence', 'NextGen', 'Computing', 'Innovators', 'Engineering', 'Performance', 'Softworks', 'Logicware', 'Digitalware', 'Transform', 'Platform', 'Smartware', 'Dataflow', 'Byte', 'Edge', 'Nexus', 'Techworks', 'Bit', 'Virtual', 'SystemsX', 'Infotech', 'Genix', 'Quantum', 'Bitware', 'CloudX'];\r",
									"\r",
									"    const randomTastName = tagnames[Math.floor(Math.random() * tagnames.length)]\r",
									"    return randomTastName\r",
									"}\r",
									"pm.environment.set(\"Tag\", tag())\r",
									"\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"Empresa\") + \" \" + pm.environment.get(\"Tag\"))\r",
									"\r",
									"\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"\r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									"\r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									"\r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									"\r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									"\r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									"\r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"CNPJ\", cnpjGerado);\r",
									"\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function gerarTelefone() {\r",
									"    // Gerando um DDD aleatório entre 11 e 99\r",
									"    const ddd = Math.floor(Math.random() * (99 - 11 + 1)) + 11;\r",
									"\r",
									"    // Gerando o número de telefone com 9 dígitos, começando com 9\r",
									"    const numero = Math.floor(Math.random() * 100000000) + 900000000; // Gera um número aleatório entre 900000000 e 999999999 (começando com '9')\r",
									"\r",
									"    // Concatenando +55, o DDD e o número gerado para formar o telefone\r",
									"    const telefone = `55${ddd}${numero.toString().slice(0, 5)}${numero.toString().slice(5, 9)}`;\r",
									"\r",
									"    return telefone;\r",
									"}\r",
									"\r",
									"// Gerando o número de telefone e armazenando como variável de ambiente\r",
									"const telefoneGerado = gerarTelefone();\r",
									"pm.environment.set(\"telefone\", telefoneGerado);\r",
									"\r",
									"function descricao() {\r",
									"    const names = [\"Testes\", \"Automação\", \"FrontEnd\", \"Backend\",\"Banco de Dados\", \"IA\",\"AWS\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Descricao\", descricao())\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"NomeRua\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"NomeRuas\", lastname())\r",
									"\r",
									"pm.environment.set(\"nomeruaComposto\", \r",
									"    pm.environment.get(\"NomeRua\") + \" \" + pm.environment.get(\"NomeRuas\"))\r",
									"\r",
									"function logradouro() {\r",
									"    const names = [\"Avenida\", \"Rua\", \"Alameda\", \"Travessa\", \"Praça\", \"Rodovia\", \"Estrada\", \"Largo\", \"Viaduto\", \"Marginal\", \"Parque\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Logradouro\", logradouro())\r",
									"\r",
									"pm.environment.set(\"logradouroCompleto\", \r",
									"    pm.environment.get(\"Logradouro\") + \" \" + pm.environment.get(\"nomeruaComposto\"))\r",
									"\r",
									"\r",
									"function gerarNumeroResidencia() {\r",
									"    // Definindo a probabilidade de gerar números com mais de 5 caracteres\r",
									"    const tamanhoNumero = Math.random() < 0.8 ? Math.floor(Math.random() * 5) + 1 : Math.floor(Math.random() * 6) + 5;\r",
									"\r",
									"    // Gerando um número aleatório com o tamanho definido\r",
									"    let numeroResidencia = Math.floor(Math.random() * Math.pow(10, tamanhoNumero)).toString(); // Gera número aleatório com o tamanho desejado\r",
									"\r",
									"    // Se o primeiro caractere for 0, remove-o\r",
									"    if (numeroResidencia[0] === '0') {\r",
									"        numeroResidencia = numeroResidencia.slice(1); // Remove o primeiro caractere\r",
									"    }\r",
									"\r",
									"    // Garantindo que o número tenha no máximo 10 caracteres\r",
									"    if (numeroResidencia.length > 10) {\r",
									"        numeroResidencia = numeroResidencia.slice(0, 10); // Limita a 10 caracteres\r",
									"    }\r",
									"\r",
									"    return numeroResidencia;\r",
									"}\r",
									"\r",
									"// Gerando o número de residência e armazenando como variável de ambiente\r",
									"const numeroResidenciaGerado = gerarNumeroResidencia();\r",
									"pm.environment.set(\"numeroResidencia\", numeroResidenciaGerado);\r",
									"\r",
									"function bairro() {\r",
									"    const names = ['Leblon', 'Ipanema', 'Copacabana', 'Barra da Tijuca', 'Botafogo', 'Lapa', 'Santa Teresa', 'Jardim Botânico', 'Flamengo', 'São Conrado', 'Moema', 'Vila Madalena', 'Pinheiros', 'Jardins', 'Aclimação', 'Brooklin', 'Tatuapé', 'Vila Progredior', 'Vila Nova Conceição', 'Campo Belo','Centro', 'Praia de Belas', 'Moinhos de Vento', 'Petrópolis', 'Tristeza', 'Caminho das Árvores', 'Pituba', 'Stella Maris', 'Parque Atlântico', 'Costa Azul', 'Vila Galvão', 'Santo Amaro', 'Perdizes', 'Aclimação', 'Vila Sônia', 'Cidade Dutra', 'São Bernardo do Campo', 'Vila Mariana', 'Bela Vista', 'Liberdade','Pinheiros', 'Itaim Bibi', 'Santa Cecília', 'Tucuruvi', 'Chácara Santo Antônio', 'Água Fria', 'Vila Olímpia', 'Vila São Francisco', 'Consolação', 'Vila Madalena']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Bairro\", bairro())\r",
									"\r",
									"function cidade() {\r",
									"    const names = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador', 'Curitiba', 'Fortaleza', 'Recife', 'Brasília', 'Manaus', 'Vitória', 'Goiânia', 'Belém', 'Natal', 'São Luís', 'Maceió', 'Campo Grande', 'João Pessoa', 'Aracaju', 'Cuiabá', 'Florianópolis', 'Teresina', 'Palmas', 'Macapá', 'Rio Branco', 'Boa Vista', 'Porto Velho', 'Anápolis', 'Caruaru', 'Londrina','Marabá', 'Araraquara', 'Sorocaba', 'Santos', 'Niterói', 'Mogi das Cruzes', 'Caxias do Sul', 'Barueri', 'Campinas', 'São José', 'Ponta Grossa', 'Jundiaí', 'Uberlândia', 'Diadema', 'Santo André', 'São Bernardo do Campo', 'Itaquaquecetuba', 'Ribeirão Preto', 'Juiz de Fora']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Cidade\", cidade())\r",
									"\r",
									"function abreviacao() {\r",
									"    const names = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"AbreviacaoEstado\", abreviacao())\r",
									"\r",
									"function randomCep() {\r",
									"    let randomCep = '';\r",
									"   \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        randomCep += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCep;\r",
									"}\r",
									"pm.environment.set(\"cep\", randomCep());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Mensagem de erro\",function(){\r",
									"    pm.expect(pm.response.json().error[0]).to.equal(\"O campo Telefone deve conter no máximo 15 caracteres.\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomeEmpresa}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"{{fullnameUser}}\",\r\n  \"telephone\": \"011987654321\",\r\n  \"serviceDescription\": \"{{Descricao}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{cep}}\",\r\n      \"city\": \"{{Cidade}}\",\r\n      \"state\": \"{{AbreviacaoEstado}}\",\r\n      \"district\": \"{{Bairro}}\",\r\n      \"street\": \"{{logradouroCompleto}}\",\r\n      \"number\": \"{{numeroResidencia}}\",\r\n      \"complement\": \"\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTM0MSwiZXhwIjoxNzM5MzE1NzQxfQ.cgJqYe74cprHCRTY9YLF_B-Hfgfp8l8lr6gDrEuqMi4' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"corporateName\": \"Matheus Sousa Testes\",\r\n  \"registerCompany\": \"57126456000155\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com o campo Telefone com mais de 15 caracteres",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function empresa() {\r",
									"    const names = [\"TechNova\", \"Bytewave\", \"Cyberion\", \"InovaTech\", \"Nexabyte\", \"Softtron\", \"Codeverse\", \"Dataflux\", \"Infinitron\", \"LogiCore\", \"Zentek\",\"Neurobyte\", \"Cloudix\", \"Sysnova\", \"Hexabit\", \"AIgorithm\", \"Quantumix\", \"Webtron\", \"Netflux\", \"Cyberflux\", \"Deepcode\", \"Techpulse\", \"Synaptech\", \"Codexis\", \"Nexonix\", \"Algobyte\", \"Infobyte\", \"Datazen\", \"Digiflow\", \"Innovix\", \"Coretron\", \"Zybernet\", \"Neurotech\", \"Nanobyte\", \"Virtunix\", \"Codexel\", \"Optibit\", \"Bitnova\", \"Globotron\", \"Digiware\", \"Skytech\", \"Cybervox\", \"Techspire\", \"Softbit\", \"MetaTech\", \"Synthron\", \"Virtuabyte\", \"Cloudtron\", \"Algonix\", \"Bitzen\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Empresa\", empresa())\r",
									"\r",
									"function tag() {\r",
									"    const tagnames = ['Solutions', 'Tech', 'Digital', 'Systems', 'Software', 'Cloud', 'AI', 'Cyber', 'Data', 'Analytics','Network', 'Security', 'Labs', 'Smart', 'Logic', 'Innovation', 'IT', 'Global', 'Developers', 'Code', 'Techno', 'Automations', 'Cloudware', 'Dynamics', 'Vision', 'Intelligence', 'NextGen', 'Computing', 'Innovators', 'Engineering', 'Performance', 'Softworks', 'Logicware', 'Digitalware', 'Transform', 'Platform', 'Smartware', 'Dataflow', 'Byte', 'Edge', 'Nexus', 'Techworks', 'Bit', 'Virtual', 'SystemsX', 'Infotech', 'Genix', 'Quantum', 'Bitware', 'CloudX'];\r",
									"\r",
									"    const randomTastName = tagnames[Math.floor(Math.random() * tagnames.length)]\r",
									"    return randomTastName\r",
									"}\r",
									"pm.environment.set(\"Tag\", tag())\r",
									"\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"Empresa\") + \" \" + pm.environment.get(\"Tag\"))\r",
									"\r",
									"\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"\r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									"\r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									"\r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									"\r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									"\r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									"\r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"CNPJ\", cnpjGerado);\r",
									"\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function gerarTelefone() {\r",
									"    // Gerando um DDD aleatório entre 11 e 99\r",
									"    const ddd = Math.floor(Math.random() * (99 - 11 + 1)) + 11;\r",
									"\r",
									"    // Gerando o número de telefone com 9 dígitos, começando com 9\r",
									"    const numero = Math.floor(Math.random() * 100000000) + 900000000; // Gera um número aleatório entre 900000000 e 999999999 (começando com '9')\r",
									"\r",
									"    // Concatenando +55, o DDD e o número gerado para formar o telefone\r",
									"    const telefone = `55${ddd}${numero.toString().slice(0, 5)}${numero.toString().slice(5, 9)}`;\r",
									"\r",
									"    return telefone;\r",
									"}\r",
									"\r",
									"// Gerando o número de telefone e armazenando como variável de ambiente\r",
									"const telefoneGerado = gerarTelefone();\r",
									"pm.environment.set(\"telefone\", telefoneGerado);\r",
									"\r",
									"function descricao() {\r",
									"    const names = [\"Testes\", \"Automação\", \"FrontEnd\", \"Backend\",\"Banco de Dados\", \"IA\",\"AWS\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Descricao\", descricao())\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"NomeRua\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"NomeRuas\", lastname())\r",
									"\r",
									"pm.environment.set(\"nomeruaComposto\", \r",
									"    pm.environment.get(\"NomeRua\") + \" \" + pm.environment.get(\"NomeRuas\"))\r",
									"\r",
									"function logradouro() {\r",
									"    const names = [\"Avenida\", \"Rua\", \"Alameda\", \"Travessa\", \"Praça\", \"Rodovia\", \"Estrada\", \"Largo\", \"Viaduto\", \"Marginal\", \"Parque\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Logradouro\", logradouro())\r",
									"\r",
									"pm.environment.set(\"logradouroCompleto\", \r",
									"    pm.environment.get(\"Logradouro\") + \" \" + pm.environment.get(\"nomeruaComposto\"))\r",
									"\r",
									"\r",
									"function gerarNumeroResidencia() {\r",
									"    // Definindo a probabilidade de gerar números com mais de 5 caracteres\r",
									"    const tamanhoNumero = Math.random() < 0.8 ? Math.floor(Math.random() * 5) + 1 : Math.floor(Math.random() * 6) + 5;\r",
									"\r",
									"    // Gerando um número aleatório com o tamanho definido\r",
									"    let numeroResidencia = Math.floor(Math.random() * Math.pow(10, tamanhoNumero)).toString(); // Gera número aleatório com o tamanho desejado\r",
									"\r",
									"    // Se o primeiro caractere for 0, remove-o\r",
									"    if (numeroResidencia[0] === '0') {\r",
									"        numeroResidencia = numeroResidencia.slice(1); // Remove o primeiro caractere\r",
									"    }\r",
									"\r",
									"    // Garantindo que o número tenha no máximo 10 caracteres\r",
									"    if (numeroResidencia.length > 10) {\r",
									"        numeroResidencia = numeroResidencia.slice(0, 10); // Limita a 10 caracteres\r",
									"    }\r",
									"\r",
									"    return numeroResidencia;\r",
									"}\r",
									"\r",
									"// Gerando o número de residência e armazenando como variável de ambiente\r",
									"const numeroResidenciaGerado = gerarNumeroResidencia();\r",
									"pm.environment.set(\"numeroResidencia\", numeroResidenciaGerado);\r",
									"\r",
									"function bairro() {\r",
									"    const names = ['Leblon', 'Ipanema', 'Copacabana', 'Barra da Tijuca', 'Botafogo', 'Lapa', 'Santa Teresa', 'Jardim Botânico', 'Flamengo', 'São Conrado', 'Moema', 'Vila Madalena', 'Pinheiros', 'Jardins', 'Aclimação', 'Brooklin', 'Tatuapé', 'Vila Progredior', 'Vila Nova Conceição', 'Campo Belo','Centro', 'Praia de Belas', 'Moinhos de Vento', 'Petrópolis', 'Tristeza', 'Caminho das Árvores', 'Pituba', 'Stella Maris', 'Parque Atlântico', 'Costa Azul', 'Vila Galvão', 'Santo Amaro', 'Perdizes', 'Aclimação', 'Vila Sônia', 'Cidade Dutra', 'São Bernardo do Campo', 'Vila Mariana', 'Bela Vista', 'Liberdade','Pinheiros', 'Itaim Bibi', 'Santa Cecília', 'Tucuruvi', 'Chácara Santo Antônio', 'Água Fria', 'Vila Olímpia', 'Vila São Francisco', 'Consolação', 'Vila Madalena']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Bairro\", bairro())\r",
									"\r",
									"function cidade() {\r",
									"    const names = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador', 'Curitiba', 'Fortaleza', 'Recife', 'Brasília', 'Manaus', 'Vitória', 'Goiânia', 'Belém', 'Natal', 'São Luís', 'Maceió', 'Campo Grande', 'João Pessoa', 'Aracaju', 'Cuiabá', 'Florianópolis', 'Teresina', 'Palmas', 'Macapá', 'Rio Branco', 'Boa Vista', 'Porto Velho', 'Anápolis', 'Caruaru', 'Londrina','Marabá', 'Araraquara', 'Sorocaba', 'Santos', 'Niterói', 'Mogi das Cruzes', 'Caxias do Sul', 'Barueri', 'Campinas', 'São José', 'Ponta Grossa', 'Jundiaí', 'Uberlândia', 'Diadema', 'Santo André', 'São Bernardo do Campo', 'Itaquaquecetuba', 'Ribeirão Preto', 'Juiz de Fora']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Cidade\", cidade())\r",
									"\r",
									"function abreviacao() {\r",
									"    const names = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"AbreviacaoEstado\", abreviacao())\r",
									"\r",
									"function randomCep() {\r",
									"    let randomCep = '';\r",
									"   \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        randomCep += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCep;\r",
									"}\r",
									"pm.environment.set(\"cep\", randomCep());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomeEmpresa}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"{{fullnameUser}}\",\r\n  \"telephone\": \"55011987654321012345\",\r\n  \"serviceDescription\": \"{{Descricao}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{cep}}\",\r\n      \"city\": \"{{Cidade}}\",\r\n      \"state\": \"{{AbreviacaoEstado}}\",\r\n      \"district\": \"{{Bairro}}\",\r\n      \"street\": \"{{logradouroCompleto}}\",\r\n      \"number\": \"{{numeroResidencia}}\",\r\n      \"complement\": \"\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTM0MSwiZXhwIjoxNzM5MzE1NzQxfQ.cgJqYe74cprHCRTY9YLF_B-Hfgfp8l8lr6gDrEuqMi4' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"corporateName\": \"Matheus Sousa Testes\",\r\n  \"registerCompany\": \"57126456000155\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com o campo Telefone com letras",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function empresa() {\r",
									"    const names = [\"TechNova\", \"Bytewave\", \"Cyberion\", \"InovaTech\", \"Nexabyte\", \"Softtron\", \"Codeverse\", \"Dataflux\", \"Infinitron\", \"LogiCore\", \"Zentek\",\"Neurobyte\", \"Cloudix\", \"Sysnova\", \"Hexabit\", \"AIgorithm\", \"Quantumix\", \"Webtron\", \"Netflux\", \"Cyberflux\", \"Deepcode\", \"Techpulse\", \"Synaptech\", \"Codexis\", \"Nexonix\", \"Algobyte\", \"Infobyte\", \"Datazen\", \"Digiflow\", \"Innovix\", \"Coretron\", \"Zybernet\", \"Neurotech\", \"Nanobyte\", \"Virtunix\", \"Codexel\", \"Optibit\", \"Bitnova\", \"Globotron\", \"Digiware\", \"Skytech\", \"Cybervox\", \"Techspire\", \"Softbit\", \"MetaTech\", \"Synthron\", \"Virtuabyte\", \"Cloudtron\", \"Algonix\", \"Bitzen\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Empresa\", empresa())\r",
									"\r",
									"function tag() {\r",
									"    const tagnames = ['Solutions', 'Tech', 'Digital', 'Systems', 'Software', 'Cloud', 'AI', 'Cyber', 'Data', 'Analytics','Network', 'Security', 'Labs', 'Smart', 'Logic', 'Innovation', 'IT', 'Global', 'Developers', 'Code', 'Techno', 'Automations', 'Cloudware', 'Dynamics', 'Vision', 'Intelligence', 'NextGen', 'Computing', 'Innovators', 'Engineering', 'Performance', 'Softworks', 'Logicware', 'Digitalware', 'Transform', 'Platform', 'Smartware', 'Dataflow', 'Byte', 'Edge', 'Nexus', 'Techworks', 'Bit', 'Virtual', 'SystemsX', 'Infotech', 'Genix', 'Quantum', 'Bitware', 'CloudX'];\r",
									"\r",
									"    const randomTastName = tagnames[Math.floor(Math.random() * tagnames.length)]\r",
									"    return randomTastName\r",
									"}\r",
									"pm.environment.set(\"Tag\", tag())\r",
									"\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"Empresa\") + \" \" + pm.environment.get(\"Tag\"))\r",
									"\r",
									"\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"\r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									"\r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									"\r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									"\r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									"\r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									"\r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"CNPJ\", cnpjGerado);\r",
									"\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function gerarTelefone() {\r",
									"    // Gerando um DDD aleatório entre 11 e 99\r",
									"    const ddd = Math.floor(Math.random() * (99 - 11 + 1)) + 11;\r",
									"\r",
									"    // Gerando o número de telefone com 9 dígitos, começando com 9\r",
									"    const numero = Math.floor(Math.random() * 100000000) + 900000000; // Gera um número aleatório entre 900000000 e 999999999 (começando com '9')\r",
									"\r",
									"    // Concatenando +55, o DDD e o número gerado para formar o telefone\r",
									"    const telefone = `55${ddd}${numero.toString().slice(0, 5)}${numero.toString().slice(5, 9)}`;\r",
									"\r",
									"    return telefone;\r",
									"}\r",
									"\r",
									"// Gerando o número de telefone e armazenando como variável de ambiente\r",
									"const telefoneGerado = gerarTelefone();\r",
									"pm.environment.set(\"telefone\", telefoneGerado);\r",
									"\r",
									"function descricao() {\r",
									"    const names = [\"Testes\", \"Automação\", \"FrontEnd\", \"Backend\",\"Banco de Dados\", \"IA\",\"AWS\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Descricao\", descricao())\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"NomeRua\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"NomeRuas\", lastname())\r",
									"\r",
									"pm.environment.set(\"nomeruaComposto\", \r",
									"    pm.environment.get(\"NomeRua\") + \" \" + pm.environment.get(\"NomeRuas\"))\r",
									"\r",
									"function logradouro() {\r",
									"    const names = [\"Avenida\", \"Rua\", \"Alameda\", \"Travessa\", \"Praça\", \"Rodovia\", \"Estrada\", \"Largo\", \"Viaduto\", \"Marginal\", \"Parque\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Logradouro\", logradouro())\r",
									"\r",
									"pm.environment.set(\"logradouroCompleto\", \r",
									"    pm.environment.get(\"Logradouro\") + \" \" + pm.environment.get(\"nomeruaComposto\"))\r",
									"\r",
									"\r",
									"function gerarNumeroResidencia() {\r",
									"    // Definindo a probabilidade de gerar números com mais de 5 caracteres\r",
									"    const tamanhoNumero = Math.random() < 0.8 ? Math.floor(Math.random() * 5) + 1 : Math.floor(Math.random() * 6) + 5;\r",
									"\r",
									"    // Gerando um número aleatório com o tamanho definido\r",
									"    let numeroResidencia = Math.floor(Math.random() * Math.pow(10, tamanhoNumero)).toString(); // Gera número aleatório com o tamanho desejado\r",
									"\r",
									"    // Se o primeiro caractere for 0, remove-o\r",
									"    if (numeroResidencia[0] === '0') {\r",
									"        numeroResidencia = numeroResidencia.slice(1); // Remove o primeiro caractere\r",
									"    }\r",
									"\r",
									"    // Garantindo que o número tenha no máximo 10 caracteres\r",
									"    if (numeroResidencia.length > 10) {\r",
									"        numeroResidencia = numeroResidencia.slice(0, 10); // Limita a 10 caracteres\r",
									"    }\r",
									"\r",
									"    return numeroResidencia;\r",
									"}\r",
									"\r",
									"// Gerando o número de residência e armazenando como variável de ambiente\r",
									"const numeroResidenciaGerado = gerarNumeroResidencia();\r",
									"pm.environment.set(\"numeroResidencia\", numeroResidenciaGerado);\r",
									"\r",
									"function bairro() {\r",
									"    const names = ['Leblon', 'Ipanema', 'Copacabana', 'Barra da Tijuca', 'Botafogo', 'Lapa', 'Santa Teresa', 'Jardim Botânico', 'Flamengo', 'São Conrado', 'Moema', 'Vila Madalena', 'Pinheiros', 'Jardins', 'Aclimação', 'Brooklin', 'Tatuapé', 'Vila Progredior', 'Vila Nova Conceição', 'Campo Belo','Centro', 'Praia de Belas', 'Moinhos de Vento', 'Petrópolis', 'Tristeza', 'Caminho das Árvores', 'Pituba', 'Stella Maris', 'Parque Atlântico', 'Costa Azul', 'Vila Galvão', 'Santo Amaro', 'Perdizes', 'Aclimação', 'Vila Sônia', 'Cidade Dutra', 'São Bernardo do Campo', 'Vila Mariana', 'Bela Vista', 'Liberdade','Pinheiros', 'Itaim Bibi', 'Santa Cecília', 'Tucuruvi', 'Chácara Santo Antônio', 'Água Fria', 'Vila Olímpia', 'Vila São Francisco', 'Consolação', 'Vila Madalena']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Bairro\", bairro())\r",
									"\r",
									"function cidade() {\r",
									"    const names = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador', 'Curitiba', 'Fortaleza', 'Recife', 'Brasília', 'Manaus', 'Vitória', 'Goiânia', 'Belém', 'Natal', 'São Luís', 'Maceió', 'Campo Grande', 'João Pessoa', 'Aracaju', 'Cuiabá', 'Florianópolis', 'Teresina', 'Palmas', 'Macapá', 'Rio Branco', 'Boa Vista', 'Porto Velho', 'Anápolis', 'Caruaru', 'Londrina','Marabá', 'Araraquara', 'Sorocaba', 'Santos', 'Niterói', 'Mogi das Cruzes', 'Caxias do Sul', 'Barueri', 'Campinas', 'São José', 'Ponta Grossa', 'Jundiaí', 'Uberlândia', 'Diadema', 'Santo André', 'São Bernardo do Campo', 'Itaquaquecetuba', 'Ribeirão Preto', 'Juiz de Fora']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Cidade\", cidade())\r",
									"\r",
									"function abreviacao() {\r",
									"    const names = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"AbreviacaoEstado\", abreviacao())\r",
									"\r",
									"function randomCep() {\r",
									"    let randomCep = '';\r",
									"   \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        randomCep += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCep;\r",
									"}\r",
									"pm.environment.set(\"cep\", randomCep());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomeEmpresa}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"{{fullnameUser}}\",\r\n  \"telephone\": \"5501198765432O\",\r\n  \"serviceDescription\": \"{{Descricao}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{cep}}\",\r\n      \"city\": \"{{Cidade}}\",\r\n      \"state\": \"{{AbreviacaoEstado}}\",\r\n      \"district\": \"{{Bairro}}\",\r\n      \"street\": \"{{logradouroCompleto}}\",\r\n      \"number\": \"{{numeroResidencia}}\",\r\n      \"complement\": \"\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTM0MSwiZXhwIjoxNzM5MzE1NzQxfQ.cgJqYe74cprHCRTY9YLF_B-Hfgfp8l8lr6gDrEuqMi4' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"corporateName\": \"Matheus Sousa Testes\",\r\n  \"registerCompany\": \"57126456000155\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com o campo Telefone com caractere especial",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function empresa() {\r",
									"    const names = [\"TechNova\", \"Bytewave\", \"Cyberion\", \"InovaTech\", \"Nexabyte\", \"Softtron\", \"Codeverse\", \"Dataflux\", \"Infinitron\", \"LogiCore\", \"Zentek\",\"Neurobyte\", \"Cloudix\", \"Sysnova\", \"Hexabit\", \"AIgorithm\", \"Quantumix\", \"Webtron\", \"Netflux\", \"Cyberflux\", \"Deepcode\", \"Techpulse\", \"Synaptech\", \"Codexis\", \"Nexonix\", \"Algobyte\", \"Infobyte\", \"Datazen\", \"Digiflow\", \"Innovix\", \"Coretron\", \"Zybernet\", \"Neurotech\", \"Nanobyte\", \"Virtunix\", \"Codexel\", \"Optibit\", \"Bitnova\", \"Globotron\", \"Digiware\", \"Skytech\", \"Cybervox\", \"Techspire\", \"Softbit\", \"MetaTech\", \"Synthron\", \"Virtuabyte\", \"Cloudtron\", \"Algonix\", \"Bitzen\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Empresa\", empresa())\r",
									"\r",
									"function tag() {\r",
									"    const tagnames = ['Solutions', 'Tech', 'Digital', 'Systems', 'Software', 'Cloud', 'AI', 'Cyber', 'Data', 'Analytics','Network', 'Security', 'Labs', 'Smart', 'Logic', 'Innovation', 'IT', 'Global', 'Developers', 'Code', 'Techno', 'Automations', 'Cloudware', 'Dynamics', 'Vision', 'Intelligence', 'NextGen', 'Computing', 'Innovators', 'Engineering', 'Performance', 'Softworks', 'Logicware', 'Digitalware', 'Transform', 'Platform', 'Smartware', 'Dataflow', 'Byte', 'Edge', 'Nexus', 'Techworks', 'Bit', 'Virtual', 'SystemsX', 'Infotech', 'Genix', 'Quantum', 'Bitware', 'CloudX'];\r",
									"\r",
									"    const randomTastName = tagnames[Math.floor(Math.random() * tagnames.length)]\r",
									"    return randomTastName\r",
									"}\r",
									"pm.environment.set(\"Tag\", tag())\r",
									"\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"Empresa\") + \" \" + pm.environment.get(\"Tag\"))\r",
									"\r",
									"\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"\r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									"\r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									"\r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									"\r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									"\r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									"\r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"CNPJ\", cnpjGerado);\r",
									"\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function gerarTelefone() {\r",
									"    // Gerando um DDD aleatório entre 11 e 99\r",
									"    const ddd = Math.floor(Math.random() * (99 - 11 + 1)) + 11;\r",
									"\r",
									"    // Gerando o número de telefone com 9 dígitos, começando com 9\r",
									"    const numero = Math.floor(Math.random() * 100000000) + 900000000; // Gera um número aleatório entre 900000000 e 999999999 (começando com '9')\r",
									"\r",
									"    // Concatenando +55, o DDD e o número gerado para formar o telefone\r",
									"    const telefone = `55${ddd}${numero.toString().slice(0, 5)}${numero.toString().slice(5, 9)}`;\r",
									"\r",
									"    return telefone;\r",
									"}\r",
									"\r",
									"// Gerando o número de telefone e armazenando como variável de ambiente\r",
									"const telefoneGerado = gerarTelefone();\r",
									"pm.environment.set(\"telefone\", telefoneGerado);\r",
									"\r",
									"function descricao() {\r",
									"    const names = [\"Testes\", \"Automação\", \"FrontEnd\", \"Backend\",\"Banco de Dados\", \"IA\",\"AWS\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Descricao\", descricao())\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"NomeRua\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"NomeRuas\", lastname())\r",
									"\r",
									"pm.environment.set(\"nomeruaComposto\", \r",
									"    pm.environment.get(\"NomeRua\") + \" \" + pm.environment.get(\"NomeRuas\"))\r",
									"\r",
									"function logradouro() {\r",
									"    const names = [\"Avenida\", \"Rua\", \"Alameda\", \"Travessa\", \"Praça\", \"Rodovia\", \"Estrada\", \"Largo\", \"Viaduto\", \"Marginal\", \"Parque\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Logradouro\", logradouro())\r",
									"\r",
									"pm.environment.set(\"logradouroCompleto\", \r",
									"    pm.environment.get(\"Logradouro\") + \" \" + pm.environment.get(\"nomeruaComposto\"))\r",
									"\r",
									"\r",
									"function gerarNumeroResidencia() {\r",
									"    // Definindo a probabilidade de gerar números com mais de 5 caracteres\r",
									"    const tamanhoNumero = Math.random() < 0.8 ? Math.floor(Math.random() * 5) + 1 : Math.floor(Math.random() * 6) + 5;\r",
									"\r",
									"    // Gerando um número aleatório com o tamanho definido\r",
									"    let numeroResidencia = Math.floor(Math.random() * Math.pow(10, tamanhoNumero)).toString(); // Gera número aleatório com o tamanho desejado\r",
									"\r",
									"    // Se o primeiro caractere for 0, remove-o\r",
									"    if (numeroResidencia[0] === '0') {\r",
									"        numeroResidencia = numeroResidencia.slice(1); // Remove o primeiro caractere\r",
									"    }\r",
									"\r",
									"    // Garantindo que o número tenha no máximo 10 caracteres\r",
									"    if (numeroResidencia.length > 10) {\r",
									"        numeroResidencia = numeroResidencia.slice(0, 10); // Limita a 10 caracteres\r",
									"    }\r",
									"\r",
									"    return numeroResidencia;\r",
									"}\r",
									"\r",
									"// Gerando o número de residência e armazenando como variável de ambiente\r",
									"const numeroResidenciaGerado = gerarNumeroResidencia();\r",
									"pm.environment.set(\"numeroResidencia\", numeroResidenciaGerado);\r",
									"\r",
									"function bairro() {\r",
									"    const names = ['Leblon', 'Ipanema', 'Copacabana', 'Barra da Tijuca', 'Botafogo', 'Lapa', 'Santa Teresa', 'Jardim Botânico', 'Flamengo', 'São Conrado', 'Moema', 'Vila Madalena', 'Pinheiros', 'Jardins', 'Aclimação', 'Brooklin', 'Tatuapé', 'Vila Progredior', 'Vila Nova Conceição', 'Campo Belo','Centro', 'Praia de Belas', 'Moinhos de Vento', 'Petrópolis', 'Tristeza', 'Caminho das Árvores', 'Pituba', 'Stella Maris', 'Parque Atlântico', 'Costa Azul', 'Vila Galvão', 'Santo Amaro', 'Perdizes', 'Aclimação', 'Vila Sônia', 'Cidade Dutra', 'São Bernardo do Campo', 'Vila Mariana', 'Bela Vista', 'Liberdade','Pinheiros', 'Itaim Bibi', 'Santa Cecília', 'Tucuruvi', 'Chácara Santo Antônio', 'Água Fria', 'Vila Olímpia', 'Vila São Francisco', 'Consolação', 'Vila Madalena']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Bairro\", bairro())\r",
									"\r",
									"function cidade() {\r",
									"    const names = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador', 'Curitiba', 'Fortaleza', 'Recife', 'Brasília', 'Manaus', 'Vitória', 'Goiânia', 'Belém', 'Natal', 'São Luís', 'Maceió', 'Campo Grande', 'João Pessoa', 'Aracaju', 'Cuiabá', 'Florianópolis', 'Teresina', 'Palmas', 'Macapá', 'Rio Branco', 'Boa Vista', 'Porto Velho', 'Anápolis', 'Caruaru', 'Londrina','Marabá', 'Araraquara', 'Sorocaba', 'Santos', 'Niterói', 'Mogi das Cruzes', 'Caxias do Sul', 'Barueri', 'Campinas', 'São José', 'Ponta Grossa', 'Jundiaí', 'Uberlândia', 'Diadema', 'Santo André', 'São Bernardo do Campo', 'Itaquaquecetuba', 'Ribeirão Preto', 'Juiz de Fora']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Cidade\", cidade())\r",
									"\r",
									"function abreviacao() {\r",
									"    const names = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"AbreviacaoEstado\", abreviacao())\r",
									"\r",
									"function randomCep() {\r",
									"    let randomCep = '';\r",
									"   \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        randomCep += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCep;\r",
									"}\r",
									"pm.environment.set(\"cep\", randomCep());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomeEmpresa}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"{{fullnameUser}}\",\r\n  \"telephone\": \"5501198765432#\",\r\n  \"serviceDescription\": \"{{Descricao}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{cep}}\",\r\n      \"city\": \"{{Cidade}}\",\r\n      \"state\": \"{{AbreviacaoEstado}}\",\r\n      \"district\": \"{{Bairro}}\",\r\n      \"street\": \"{{logradouroCompleto}}\",\r\n      \"number\": \"{{numeroResidencia}}\",\r\n      \"complement\": \"\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTM0MSwiZXhwIjoxNzM5MzE1NzQxfQ.cgJqYe74cprHCRTY9YLF_B-Hfgfp8l8lr6gDrEuqMi4' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"corporateName\": \"Matheus Sousa Testes\",\r\n  \"registerCompany\": \"57126456000155\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com o campo Email em branco",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function empresa() {\r",
									"    const names = [\"TechNova\", \"Bytewave\", \"Cyberion\", \"InovaTech\", \"Nexabyte\", \"Softtron\", \"Codeverse\", \"Dataflux\", \"Infinitron\", \"LogiCore\", \"Zentek\",\"Neurobyte\", \"Cloudix\", \"Sysnova\", \"Hexabit\", \"AIgorithm\", \"Quantumix\", \"Webtron\", \"Netflux\", \"Cyberflux\", \"Deepcode\", \"Techpulse\", \"Synaptech\", \"Codexis\", \"Nexonix\", \"Algobyte\", \"Infobyte\", \"Datazen\", \"Digiflow\", \"Innovix\", \"Coretron\", \"Zybernet\", \"Neurotech\", \"Nanobyte\", \"Virtunix\", \"Codexel\", \"Optibit\", \"Bitnova\", \"Globotron\", \"Digiware\", \"Skytech\", \"Cybervox\", \"Techspire\", \"Softbit\", \"MetaTech\", \"Synthron\", \"Virtuabyte\", \"Cloudtron\", \"Algonix\", \"Bitzen\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Empresa\", empresa())\r",
									"\r",
									"function tag() {\r",
									"    const tagnames = ['Solutions', 'Tech', 'Digital', 'Systems', 'Software', 'Cloud', 'AI', 'Cyber', 'Data', 'Analytics','Network', 'Security', 'Labs', 'Smart', 'Logic', 'Innovation', 'IT', 'Global', 'Developers', 'Code', 'Techno', 'Automations', 'Cloudware', 'Dynamics', 'Vision', 'Intelligence', 'NextGen', 'Computing', 'Innovators', 'Engineering', 'Performance', 'Softworks', 'Logicware', 'Digitalware', 'Transform', 'Platform', 'Smartware', 'Dataflow', 'Byte', 'Edge', 'Nexus', 'Techworks', 'Bit', 'Virtual', 'SystemsX', 'Infotech', 'Genix', 'Quantum', 'Bitware', 'CloudX'];\r",
									"\r",
									"    const randomTastName = tagnames[Math.floor(Math.random() * tagnames.length)]\r",
									"    return randomTastName\r",
									"}\r",
									"pm.environment.set(\"Tag\", tag())\r",
									"\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"Empresa\") + \" \" + pm.environment.get(\"Tag\"))\r",
									"\r",
									"\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"\r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									"\r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									"\r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									"\r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									"\r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									"\r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"CNPJ\", cnpjGerado);\r",
									"\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function gerarTelefone() {\r",
									"    // Gerando um DDD aleatório entre 11 e 99\r",
									"    const ddd = Math.floor(Math.random() * (99 - 11 + 1)) + 11;\r",
									"\r",
									"    // Gerando o número de telefone com 9 dígitos, começando com 9\r",
									"    const numero = Math.floor(Math.random() * 100000000) + 900000000; // Gera um número aleatório entre 900000000 e 999999999 (começando com '9')\r",
									"\r",
									"    // Concatenando +55, o DDD e o número gerado para formar o telefone\r",
									"    const telefone = `55${ddd}${numero.toString().slice(0, 5)}${numero.toString().slice(5, 9)}`;\r",
									"\r",
									"    return telefone;\r",
									"}\r",
									"\r",
									"// Gerando o número de telefone e armazenando como variável de ambiente\r",
									"const telefoneGerado = gerarTelefone();\r",
									"pm.environment.set(\"telefone\", telefoneGerado);\r",
									"\r",
									"function descricao() {\r",
									"    const names = [\"Testes\", \"Automação\", \"FrontEnd\", \"Backend\",\"Banco de Dados\", \"IA\",\"AWS\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Descricao\", descricao())\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"NomeRua\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"NomeRuas\", lastname())\r",
									"\r",
									"pm.environment.set(\"nomeruaComposto\", \r",
									"    pm.environment.get(\"NomeRua\") + \" \" + pm.environment.get(\"NomeRuas\"))\r",
									"\r",
									"function logradouro() {\r",
									"    const names = [\"Avenida\", \"Rua\", \"Alameda\", \"Travessa\", \"Praça\", \"Rodovia\", \"Estrada\", \"Largo\", \"Viaduto\", \"Marginal\", \"Parque\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Logradouro\", logradouro())\r",
									"\r",
									"pm.environment.set(\"logradouroCompleto\", \r",
									"    pm.environment.get(\"Logradouro\") + \" \" + pm.environment.get(\"nomeruaComposto\"))\r",
									"\r",
									"\r",
									"function gerarNumeroResidencia() {\r",
									"    // Definindo a probabilidade de gerar números com mais de 5 caracteres\r",
									"    const tamanhoNumero = Math.random() < 0.8 ? Math.floor(Math.random() * 5) + 1 : Math.floor(Math.random() * 6) + 5;\r",
									"\r",
									"    // Gerando um número aleatório com o tamanho definido\r",
									"    let numeroResidencia = Math.floor(Math.random() * Math.pow(10, tamanhoNumero)).toString(); // Gera número aleatório com o tamanho desejado\r",
									"\r",
									"    // Se o primeiro caractere for 0, remove-o\r",
									"    if (numeroResidencia[0] === '0') {\r",
									"        numeroResidencia = numeroResidencia.slice(1); // Remove o primeiro caractere\r",
									"    }\r",
									"\r",
									"    // Garantindo que o número tenha no máximo 10 caracteres\r",
									"    if (numeroResidencia.length > 10) {\r",
									"        numeroResidencia = numeroResidencia.slice(0, 10); // Limita a 10 caracteres\r",
									"    }\r",
									"\r",
									"    return numeroResidencia;\r",
									"}\r",
									"\r",
									"// Gerando o número de residência e armazenando como variável de ambiente\r",
									"const numeroResidenciaGerado = gerarNumeroResidencia();\r",
									"pm.environment.set(\"numeroResidencia\", numeroResidenciaGerado);\r",
									"\r",
									"function bairro() {\r",
									"    const names = ['Leblon', 'Ipanema', 'Copacabana', 'Barra da Tijuca', 'Botafogo', 'Lapa', 'Santa Teresa', 'Jardim Botânico', 'Flamengo', 'São Conrado', 'Moema', 'Vila Madalena', 'Pinheiros', 'Jardins', 'Aclimação', 'Brooklin', 'Tatuapé', 'Vila Progredior', 'Vila Nova Conceição', 'Campo Belo','Centro', 'Praia de Belas', 'Moinhos de Vento', 'Petrópolis', 'Tristeza', 'Caminho das Árvores', 'Pituba', 'Stella Maris', 'Parque Atlântico', 'Costa Azul', 'Vila Galvão', 'Santo Amaro', 'Perdizes', 'Aclimação', 'Vila Sônia', 'Cidade Dutra', 'São Bernardo do Campo', 'Vila Mariana', 'Bela Vista', 'Liberdade','Pinheiros', 'Itaim Bibi', 'Santa Cecília', 'Tucuruvi', 'Chácara Santo Antônio', 'Água Fria', 'Vila Olímpia', 'Vila São Francisco', 'Consolação', 'Vila Madalena']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Bairro\", bairro())\r",
									"\r",
									"function cidade() {\r",
									"    const names = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador', 'Curitiba', 'Fortaleza', 'Recife', 'Brasília', 'Manaus', 'Vitória', 'Goiânia', 'Belém', 'Natal', 'São Luís', 'Maceió', 'Campo Grande', 'João Pessoa', 'Aracaju', 'Cuiabá', 'Florianópolis', 'Teresina', 'Palmas', 'Macapá', 'Rio Branco', 'Boa Vista', 'Porto Velho', 'Anápolis', 'Caruaru', 'Londrina','Marabá', 'Araraquara', 'Sorocaba', 'Santos', 'Niterói', 'Mogi das Cruzes', 'Caxias do Sul', 'Barueri', 'Campinas', 'São José', 'Ponta Grossa', 'Jundiaí', 'Uberlândia', 'Diadema', 'Santo André', 'São Bernardo do Campo', 'Itaquaquecetuba', 'Ribeirão Preto', 'Juiz de Fora']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Cidade\", cidade())\r",
									"\r",
									"function abreviacao() {\r",
									"    const names = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"AbreviacaoEstado\", abreviacao())\r",
									"\r",
									"function randomCep() {\r",
									"    let randomCep = '';\r",
									"   \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        randomCep += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCep;\r",
									"}\r",
									"pm.environment.set(\"cep\", randomCep());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Mensagem de erro\",function(){\r",
									"     pm.expect(pm.response.json().error[0]).to.equal(\"O campo Email é obrigatório.\")\r",
									"})\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomeEmpresa}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"{{fullnameUser}}\",\r\n  \"telephone\": \"{{telefone}}\",\r\n  \"serviceDescription\": \"{{Descricao}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{cep}}\",\r\n      \"city\": \"{{Cidade}}\",\r\n      \"state\": \"{{AbreviacaoEstado}}\",\r\n      \"district\": \"{{Bairro}}\",\r\n      \"street\": \"{{logradouroCompleto}}\",\r\n      \"number\": \"{{numeroResidencia}}\",\r\n      \"complement\": \"\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTM0MSwiZXhwIjoxNzM5MzE1NzQxfQ.cgJqYe74cprHCRTY9YLF_B-Hfgfp8l8lr6gDrEuqMi4' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"corporateName\": \"Matheus Sousa Testes\",\r\n  \"registerCompany\": \"57126456000155\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com o campo Email somente com .com",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function empresa() {\r",
									"    const names = [\"TechNova\", \"Bytewave\", \"Cyberion\", \"InovaTech\", \"Nexabyte\", \"Softtron\", \"Codeverse\", \"Dataflux\", \"Infinitron\", \"LogiCore\", \"Zentek\",\"Neurobyte\", \"Cloudix\", \"Sysnova\", \"Hexabit\", \"AIgorithm\", \"Quantumix\", \"Webtron\", \"Netflux\", \"Cyberflux\", \"Deepcode\", \"Techpulse\", \"Synaptech\", \"Codexis\", \"Nexonix\", \"Algobyte\", \"Infobyte\", \"Datazen\", \"Digiflow\", \"Innovix\", \"Coretron\", \"Zybernet\", \"Neurotech\", \"Nanobyte\", \"Virtunix\", \"Codexel\", \"Optibit\", \"Bitnova\", \"Globotron\", \"Digiware\", \"Skytech\", \"Cybervox\", \"Techspire\", \"Softbit\", \"MetaTech\", \"Synthron\", \"Virtuabyte\", \"Cloudtron\", \"Algonix\", \"Bitzen\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Empresa\", empresa())\r",
									"\r",
									"function tag() {\r",
									"    const tagnames = ['Solutions', 'Tech', 'Digital', 'Systems', 'Software', 'Cloud', 'AI', 'Cyber', 'Data', 'Analytics','Network', 'Security', 'Labs', 'Smart', 'Logic', 'Innovation', 'IT', 'Global', 'Developers', 'Code', 'Techno', 'Automations', 'Cloudware', 'Dynamics', 'Vision', 'Intelligence', 'NextGen', 'Computing', 'Innovators', 'Engineering', 'Performance', 'Softworks', 'Logicware', 'Digitalware', 'Transform', 'Platform', 'Smartware', 'Dataflow', 'Byte', 'Edge', 'Nexus', 'Techworks', 'Bit', 'Virtual', 'SystemsX', 'Infotech', 'Genix', 'Quantum', 'Bitware', 'CloudX'];\r",
									"\r",
									"    const randomTastName = tagnames[Math.floor(Math.random() * tagnames.length)]\r",
									"    return randomTastName\r",
									"}\r",
									"pm.environment.set(\"Tag\", tag())\r",
									"\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"Empresa\") + \" \" + pm.environment.get(\"Tag\"))\r",
									"\r",
									"\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"\r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									"\r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									"\r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									"\r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									"\r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									"\r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"CNPJ\", cnpjGerado);\r",
									"\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function gerarTelefone() {\r",
									"    // Gerando um DDD aleatório entre 11 e 99\r",
									"    const ddd = Math.floor(Math.random() * (99 - 11 + 1)) + 11;\r",
									"\r",
									"    // Gerando o número de telefone com 9 dígitos, começando com 9\r",
									"    const numero = Math.floor(Math.random() * 100000000) + 900000000; // Gera um número aleatório entre 900000000 e 999999999 (começando com '9')\r",
									"\r",
									"    // Concatenando +55, o DDD e o número gerado para formar o telefone\r",
									"    const telefone = `55${ddd}${numero.toString().slice(0, 5)}${numero.toString().slice(5, 9)}`;\r",
									"\r",
									"    return telefone;\r",
									"}\r",
									"\r",
									"// Gerando o número de telefone e armazenando como variável de ambiente\r",
									"const telefoneGerado = gerarTelefone();\r",
									"pm.environment.set(\"telefone\", telefoneGerado);\r",
									"\r",
									"function descricao() {\r",
									"    const names = [\"Testes\", \"Automação\", \"FrontEnd\", \"Backend\",\"Banco de Dados\", \"IA\",\"AWS\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Descricao\", descricao())\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"NomeRua\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"NomeRuas\", lastname())\r",
									"\r",
									"pm.environment.set(\"nomeruaComposto\", \r",
									"    pm.environment.get(\"NomeRua\") + \" \" + pm.environment.get(\"NomeRuas\"))\r",
									"\r",
									"function logradouro() {\r",
									"    const names = [\"Avenida\", \"Rua\", \"Alameda\", \"Travessa\", \"Praça\", \"Rodovia\", \"Estrada\", \"Largo\", \"Viaduto\", \"Marginal\", \"Parque\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Logradouro\", logradouro())\r",
									"\r",
									"pm.environment.set(\"logradouroCompleto\", \r",
									"    pm.environment.get(\"Logradouro\") + \" \" + pm.environment.get(\"nomeruaComposto\"))\r",
									"\r",
									"\r",
									"function gerarNumeroResidencia() {\r",
									"    // Definindo a probabilidade de gerar números com mais de 5 caracteres\r",
									"    const tamanhoNumero = Math.random() < 0.8 ? Math.floor(Math.random() * 5) + 1 : Math.floor(Math.random() * 6) + 5;\r",
									"\r",
									"    // Gerando um número aleatório com o tamanho definido\r",
									"    let numeroResidencia = Math.floor(Math.random() * Math.pow(10, tamanhoNumero)).toString(); // Gera número aleatório com o tamanho desejado\r",
									"\r",
									"    // Se o primeiro caractere for 0, remove-o\r",
									"    if (numeroResidencia[0] === '0') {\r",
									"        numeroResidencia = numeroResidencia.slice(1); // Remove o primeiro caractere\r",
									"    }\r",
									"\r",
									"    // Garantindo que o número tenha no máximo 10 caracteres\r",
									"    if (numeroResidencia.length > 10) {\r",
									"        numeroResidencia = numeroResidencia.slice(0, 10); // Limita a 10 caracteres\r",
									"    }\r",
									"\r",
									"    return numeroResidencia;\r",
									"}\r",
									"\r",
									"// Gerando o número de residência e armazenando como variável de ambiente\r",
									"const numeroResidenciaGerado = gerarNumeroResidencia();\r",
									"pm.environment.set(\"numeroResidencia\", numeroResidenciaGerado);\r",
									"\r",
									"function bairro() {\r",
									"    const names = ['Leblon', 'Ipanema', 'Copacabana', 'Barra da Tijuca', 'Botafogo', 'Lapa', 'Santa Teresa', 'Jardim Botânico', 'Flamengo', 'São Conrado', 'Moema', 'Vila Madalena', 'Pinheiros', 'Jardins', 'Aclimação', 'Brooklin', 'Tatuapé', 'Vila Progredior', 'Vila Nova Conceição', 'Campo Belo','Centro', 'Praia de Belas', 'Moinhos de Vento', 'Petrópolis', 'Tristeza', 'Caminho das Árvores', 'Pituba', 'Stella Maris', 'Parque Atlântico', 'Costa Azul', 'Vila Galvão', 'Santo Amaro', 'Perdizes', 'Aclimação', 'Vila Sônia', 'Cidade Dutra', 'São Bernardo do Campo', 'Vila Mariana', 'Bela Vista', 'Liberdade','Pinheiros', 'Itaim Bibi', 'Santa Cecília', 'Tucuruvi', 'Chácara Santo Antônio', 'Água Fria', 'Vila Olímpia', 'Vila São Francisco', 'Consolação', 'Vila Madalena']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Bairro\", bairro())\r",
									"\r",
									"function cidade() {\r",
									"    const names = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador', 'Curitiba', 'Fortaleza', 'Recife', 'Brasília', 'Manaus', 'Vitória', 'Goiânia', 'Belém', 'Natal', 'São Luís', 'Maceió', 'Campo Grande', 'João Pessoa', 'Aracaju', 'Cuiabá', 'Florianópolis', 'Teresina', 'Palmas', 'Macapá', 'Rio Branco', 'Boa Vista', 'Porto Velho', 'Anápolis', 'Caruaru', 'Londrina','Marabá', 'Araraquara', 'Sorocaba', 'Santos', 'Niterói', 'Mogi das Cruzes', 'Caxias do Sul', 'Barueri', 'Campinas', 'São José', 'Ponta Grossa', 'Jundiaí', 'Uberlândia', 'Diadema', 'Santo André', 'São Bernardo do Campo', 'Itaquaquecetuba', 'Ribeirão Preto', 'Juiz de Fora']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Cidade\", cidade())\r",
									"\r",
									"function abreviacao() {\r",
									"    const names = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"AbreviacaoEstado\", abreviacao())\r",
									"\r",
									"function randomCep() {\r",
									"    let randomCep = '';\r",
									"   \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        randomCep += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCep;\r",
									"}\r",
									"pm.environment.set(\"cep\", randomCep());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 201\", function(){\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Mensagem de sucesso\",function(){\r",
									"    pm.expect(pm.response.json().msg).to.include(\"Registro realizado com sucesso\")\r",
									"})\r",
									"\r",
									"pm.test(\"Status é True\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.status).to.be.true;\r",
									"})\r",
									"\r",
									"pm.test(\"Nome da Empresa é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.corporateName).to.equal(pm.environment.get(\"nomeEmpresa\"))\r",
									"})\r",
									"\r",
									"pm.test(\"CNPJ é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.registerCompany).to.equal(pm.environment.get(\"CNPJ\"))\r",
									"})\r",
									"\r",
									"pm.test(\"Email é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.mail).to.equal(\"test@test.com\")\r",
									"    })\r",
									"\r",
									"// Função para validar CNPJ com base nos dígitos verificadores\r",
									"function validarCNPJ(cnpj) {\r",
									"    // Remover qualquer caractere que não seja número\r",
									"    cnpj = cnpj.replace(/\\D/g, '');\r",
									"\r",
									"    // Verifica se o CNPJ tem 14 dígitos\r",
									"    if (cnpj.length !== 14) {\r",
									"        return false;\r",
									"    }\r",
									"\r",
									"    // Cálculo do primeiro dígito verificador\r",
									"    let soma = 0;\r",
									"    let multiplicadoresPrimeiro = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    \r",
									"    for (let i = 0; i < 12; i++) {\r",
									"        soma += parseInt(cnpj[i]) * multiplicadoresPrimeiro[i];\r",
									"    }\r",
									"\r",
									"    let resto = soma % 11;\r",
									"    let primeiroDV = resto < 2 ? 0 : 11 - resto;\r",
									"\r",
									"    // Cálculo do segundo dígito verificador\r",
									"    soma = 0;\r",
									"    let multiplicadoresSegundo = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    \r",
									"    for (let i = 0; i < 13; i++) {\r",
									"        soma += parseInt(cnpj[i]) * multiplicadoresSegundo[i];\r",
									"    }\r",
									"\r",
									"    resto = soma % 11;\r",
									"    let segundoDV = resto < 2 ? 0 : 11 - resto;\r",
									"\r",
									"    // Comparar com os dígitos do CNPJ enviado\r",
									"    return cnpj[12] == primeiroDV && cnpj[13] == segundoDV;\r",
									"}\r",
									"\r",
									"// Obter o CNPJ da resposta da API (supondo que está no campo \"cnpj\")\r",
									"let cnpjRecebido = pm.response.json().newCompany.registerCompany; \r",
									"\r",
									"// Executar a validação\r",
									"if (!validarCNPJ(cnpjRecebido)) {\r",
									"    pm.test(\"O CNPJ retornado é inválido!\", function () {\r",
									"        pm.expect(false).to.be.true;\r",
									"    });\r",
									"} else {\r",
									"    pm.test(\"O CNPJ retornado é válido!\", function () {\r",
									"        pm.expect(true).to.be.true;\r",
									"    });\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomeEmpresa}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"{{fullnameUser}}\",\r\n  \"telephone\": \"{{telefone}}\",\r\n  \"serviceDescription\": \"{{Descricao}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{cep}}\",\r\n      \"city\": \"{{Cidade}}\",\r\n      \"state\": \"{{AbreviacaoEstado}}\",\r\n      \"district\": \"{{Bairro}}\",\r\n      \"street\": \"{{logradouroCompleto}}\",\r\n      \"number\": \"{{numeroResidencia}}\",\r\n      \"complement\": \"\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTM0MSwiZXhwIjoxNzM5MzE1NzQxfQ.cgJqYe74cprHCRTY9YLF_B-Hfgfp8l8lr6gDrEuqMi4' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"corporateName\": \"Matheus Sousa Testes\",\r\n  \"registerCompany\": \"57126456000155\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com o campo Email com outros dominios Portugal .pt",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function empresa() {\r",
									"    const names = [\"TechNova\", \"Bytewave\", \"Cyberion\", \"InovaTech\", \"Nexabyte\", \"Softtron\", \"Codeverse\", \"Dataflux\", \"Infinitron\", \"LogiCore\", \"Zentek\",\"Neurobyte\", \"Cloudix\", \"Sysnova\", \"Hexabit\", \"AIgorithm\", \"Quantumix\", \"Webtron\", \"Netflux\", \"Cyberflux\", \"Deepcode\", \"Techpulse\", \"Synaptech\", \"Codexis\", \"Nexonix\", \"Algobyte\", \"Infobyte\", \"Datazen\", \"Digiflow\", \"Innovix\", \"Coretron\", \"Zybernet\", \"Neurotech\", \"Nanobyte\", \"Virtunix\", \"Codexel\", \"Optibit\", \"Bitnova\", \"Globotron\", \"Digiware\", \"Skytech\", \"Cybervox\", \"Techspire\", \"Softbit\", \"MetaTech\", \"Synthron\", \"Virtuabyte\", \"Cloudtron\", \"Algonix\", \"Bitzen\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Empresa\", empresa())\r",
									"\r",
									"function tag() {\r",
									"    const tagnames = ['Solutions', 'Tech', 'Digital', 'Systems', 'Software', 'Cloud', 'AI', 'Cyber', 'Data', 'Analytics','Network', 'Security', 'Labs', 'Smart', 'Logic', 'Innovation', 'IT', 'Global', 'Developers', 'Code', 'Techno', 'Automations', 'Cloudware', 'Dynamics', 'Vision', 'Intelligence', 'NextGen', 'Computing', 'Innovators', 'Engineering', 'Performance', 'Softworks', 'Logicware', 'Digitalware', 'Transform', 'Platform', 'Smartware', 'Dataflow', 'Byte', 'Edge', 'Nexus', 'Techworks', 'Bit', 'Virtual', 'SystemsX', 'Infotech', 'Genix', 'Quantum', 'Bitware', 'CloudX'];\r",
									"\r",
									"    const randomTastName = tagnames[Math.floor(Math.random() * tagnames.length)]\r",
									"    return randomTastName\r",
									"}\r",
									"pm.environment.set(\"Tag\", tag())\r",
									"\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"Empresa\") + \" \" + pm.environment.get(\"Tag\"))\r",
									"\r",
									"\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"\r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									"\r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									"\r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									"\r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									"\r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									"\r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"CNPJ\", cnpjGerado);\r",
									"\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function gerarTelefone() {\r",
									"    // Gerando um DDD aleatório entre 11 e 99\r",
									"    const ddd = Math.floor(Math.random() * (99 - 11 + 1)) + 11;\r",
									"\r",
									"    // Gerando o número de telefone com 9 dígitos, começando com 9\r",
									"    const numero = Math.floor(Math.random() * 100000000) + 900000000; // Gera um número aleatório entre 900000000 e 999999999 (começando com '9')\r",
									"\r",
									"    // Concatenando +55, o DDD e o número gerado para formar o telefone\r",
									"    const telefone = `55${ddd}${numero.toString().slice(0, 5)}${numero.toString().slice(5, 9)}`;\r",
									"\r",
									"    return telefone;\r",
									"}\r",
									"\r",
									"// Gerando o número de telefone e armazenando como variável de ambiente\r",
									"const telefoneGerado = gerarTelefone();\r",
									"pm.environment.set(\"telefone\", telefoneGerado);\r",
									"\r",
									"function descricao() {\r",
									"    const names = [\"Testes\", \"Automação\", \"FrontEnd\", \"Backend\",\"Banco de Dados\", \"IA\",\"AWS\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Descricao\", descricao())\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"NomeRua\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"NomeRuas\", lastname())\r",
									"\r",
									"pm.environment.set(\"nomeruaComposto\", \r",
									"    pm.environment.get(\"NomeRua\") + \" \" + pm.environment.get(\"NomeRuas\"))\r",
									"\r",
									"function logradouro() {\r",
									"    const names = [\"Avenida\", \"Rua\", \"Alameda\", \"Travessa\", \"Praça\", \"Rodovia\", \"Estrada\", \"Largo\", \"Viaduto\", \"Marginal\", \"Parque\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Logradouro\", logradouro())\r",
									"\r",
									"pm.environment.set(\"logradouroCompleto\", \r",
									"    pm.environment.get(\"Logradouro\") + \" \" + pm.environment.get(\"nomeruaComposto\"))\r",
									"\r",
									"\r",
									"function gerarNumeroResidencia() {\r",
									"    // Definindo a probabilidade de gerar números com mais de 5 caracteres\r",
									"    const tamanhoNumero = Math.random() < 0.8 ? Math.floor(Math.random() * 5) + 1 : Math.floor(Math.random() * 6) + 5;\r",
									"\r",
									"    // Gerando um número aleatório com o tamanho definido\r",
									"    let numeroResidencia = Math.floor(Math.random() * Math.pow(10, tamanhoNumero)).toString(); // Gera número aleatório com o tamanho desejado\r",
									"\r",
									"    // Se o primeiro caractere for 0, remove-o\r",
									"    if (numeroResidencia[0] === '0') {\r",
									"        numeroResidencia = numeroResidencia.slice(1); // Remove o primeiro caractere\r",
									"    }\r",
									"\r",
									"    // Garantindo que o número tenha no máximo 10 caracteres\r",
									"    if (numeroResidencia.length > 10) {\r",
									"        numeroResidencia = numeroResidencia.slice(0, 10); // Limita a 10 caracteres\r",
									"    }\r",
									"\r",
									"    return numeroResidencia;\r",
									"}\r",
									"\r",
									"// Gerando o número de residência e armazenando como variável de ambiente\r",
									"const numeroResidenciaGerado = gerarNumeroResidencia();\r",
									"pm.environment.set(\"numeroResidencia\", numeroResidenciaGerado);\r",
									"\r",
									"function bairro() {\r",
									"    const names = ['Leblon', 'Ipanema', 'Copacabana', 'Barra da Tijuca', 'Botafogo', 'Lapa', 'Santa Teresa', 'Jardim Botânico', 'Flamengo', 'São Conrado', 'Moema', 'Vila Madalena', 'Pinheiros', 'Jardins', 'Aclimação', 'Brooklin', 'Tatuapé', 'Vila Progredior', 'Vila Nova Conceição', 'Campo Belo','Centro', 'Praia de Belas', 'Moinhos de Vento', 'Petrópolis', 'Tristeza', 'Caminho das Árvores', 'Pituba', 'Stella Maris', 'Parque Atlântico', 'Costa Azul', 'Vila Galvão', 'Santo Amaro', 'Perdizes', 'Aclimação', 'Vila Sônia', 'Cidade Dutra', 'São Bernardo do Campo', 'Vila Mariana', 'Bela Vista', 'Liberdade','Pinheiros', 'Itaim Bibi', 'Santa Cecília', 'Tucuruvi', 'Chácara Santo Antônio', 'Água Fria', 'Vila Olímpia', 'Vila São Francisco', 'Consolação', 'Vila Madalena']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Bairro\", bairro())\r",
									"\r",
									"function cidade() {\r",
									"    const names = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador', 'Curitiba', 'Fortaleza', 'Recife', 'Brasília', 'Manaus', 'Vitória', 'Goiânia', 'Belém', 'Natal', 'São Luís', 'Maceió', 'Campo Grande', 'João Pessoa', 'Aracaju', 'Cuiabá', 'Florianópolis', 'Teresina', 'Palmas', 'Macapá', 'Rio Branco', 'Boa Vista', 'Porto Velho', 'Anápolis', 'Caruaru', 'Londrina','Marabá', 'Araraquara', 'Sorocaba', 'Santos', 'Niterói', 'Mogi das Cruzes', 'Caxias do Sul', 'Barueri', 'Campinas', 'São José', 'Ponta Grossa', 'Jundiaí', 'Uberlândia', 'Diadema', 'Santo André', 'São Bernardo do Campo', 'Itaquaquecetuba', 'Ribeirão Preto', 'Juiz de Fora']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Cidade\", cidade())\r",
									"\r",
									"function abreviacao() {\r",
									"    const names = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"AbreviacaoEstado\", abreviacao())\r",
									"\r",
									"function randomCep() {\r",
									"    let randomCep = '';\r",
									"   \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        randomCep += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCep;\r",
									"}\r",
									"pm.environment.set(\"cep\", randomCep());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 201\", function(){\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Mensagem de sucesso\",function(){\r",
									"    pm.expect(pm.response.json().msg).to.include(\"Registro realizado com sucesso\")\r",
									"})\r",
									"\r",
									"pm.test(\"Status é True\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.status).to.be.true;\r",
									"})\r",
									"\r",
									"pm.test(\"Nome da Empresa é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.corporateName).to.equal(pm.environment.get(\"nomeEmpresa\"))\r",
									"})\r",
									"\r",
									"pm.test(\"CNPJ é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.registerCompany).to.equal(pm.environment.get(\"CNPJ\"))\r",
									"})\r",
									"\r",
									"pm.test(\"Email é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.mail).to.equal(\"test@test.com.pt\")\r",
									"    })\r",
									"\r",
									"// Função para validar CNPJ com base nos dígitos verificadores\r",
									"function validarCNPJ(cnpj) {\r",
									"    // Remover qualquer caractere que não seja número\r",
									"    cnpj = cnpj.replace(/\\D/g, '');\r",
									"\r",
									"    // Verifica se o CNPJ tem 14 dígitos\r",
									"    if (cnpj.length !== 14) {\r",
									"        return false;\r",
									"    }\r",
									"\r",
									"    // Cálculo do primeiro dígito verificador\r",
									"    let soma = 0;\r",
									"    let multiplicadoresPrimeiro = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    \r",
									"    for (let i = 0; i < 12; i++) {\r",
									"        soma += parseInt(cnpj[i]) * multiplicadoresPrimeiro[i];\r",
									"    }\r",
									"\r",
									"    let resto = soma % 11;\r",
									"    let primeiroDV = resto < 2 ? 0 : 11 - resto;\r",
									"\r",
									"    // Cálculo do segundo dígito verificador\r",
									"    soma = 0;\r",
									"    let multiplicadoresSegundo = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    \r",
									"    for (let i = 0; i < 13; i++) {\r",
									"        soma += parseInt(cnpj[i]) * multiplicadoresSegundo[i];\r",
									"    }\r",
									"\r",
									"    resto = soma % 11;\r",
									"    let segundoDV = resto < 2 ? 0 : 11 - resto;\r",
									"\r",
									"    // Comparar com os dígitos do CNPJ enviado\r",
									"    return cnpj[12] == primeiroDV && cnpj[13] == segundoDV;\r",
									"}\r",
									"\r",
									"// Obter o CNPJ da resposta da API (supondo que está no campo \"cnpj\")\r",
									"let cnpjRecebido = pm.response.json().newCompany.registerCompany; \r",
									"\r",
									"// Executar a validação\r",
									"if (!validarCNPJ(cnpjRecebido)) {\r",
									"    pm.test(\"O CNPJ retornado é inválido!\", function () {\r",
									"        pm.expect(false).to.be.true;\r",
									"    });\r",
									"} else {\r",
									"    pm.test(\"O CNPJ retornado é válido!\", function () {\r",
									"        pm.expect(true).to.be.true;\r",
									"    });\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomeEmpresa}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"test@test.com.pt\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"{{fullnameUser}}\",\r\n  \"telephone\": \"{{telefone}}\",\r\n  \"serviceDescription\": \"{{Descricao}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{cep}}\",\r\n      \"city\": \"{{Cidade}}\",\r\n      \"state\": \"{{AbreviacaoEstado}}\",\r\n      \"district\": \"{{Bairro}}\",\r\n      \"street\": \"{{logradouroCompleto}}\",\r\n      \"number\": \"{{numeroResidencia}}\",\r\n      \"complement\": \"\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTM0MSwiZXhwIjoxNzM5MzE1NzQxfQ.cgJqYe74cprHCRTY9YLF_B-Hfgfp8l8lr6gDrEuqMi4' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"corporateName\": \"Matheus Sousa Testes\",\r\n  \"registerCompany\": \"57126456000155\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com o campo Email com espaço entre o nome e o dominio",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function empresa() {\r",
									"    const names = [\"TechNova\", \"Bytewave\", \"Cyberion\", \"InovaTech\", \"Nexabyte\", \"Softtron\", \"Codeverse\", \"Dataflux\", \"Infinitron\", \"LogiCore\", \"Zentek\",\"Neurobyte\", \"Cloudix\", \"Sysnova\", \"Hexabit\", \"AIgorithm\", \"Quantumix\", \"Webtron\", \"Netflux\", \"Cyberflux\", \"Deepcode\", \"Techpulse\", \"Synaptech\", \"Codexis\", \"Nexonix\", \"Algobyte\", \"Infobyte\", \"Datazen\", \"Digiflow\", \"Innovix\", \"Coretron\", \"Zybernet\", \"Neurotech\", \"Nanobyte\", \"Virtunix\", \"Codexel\", \"Optibit\", \"Bitnova\", \"Globotron\", \"Digiware\", \"Skytech\", \"Cybervox\", \"Techspire\", \"Softbit\", \"MetaTech\", \"Synthron\", \"Virtuabyte\", \"Cloudtron\", \"Algonix\", \"Bitzen\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Empresa\", empresa())\r",
									"\r",
									"function tag() {\r",
									"    const tagnames = ['Solutions', 'Tech', 'Digital', 'Systems', 'Software', 'Cloud', 'AI', 'Cyber', 'Data', 'Analytics','Network', 'Security', 'Labs', 'Smart', 'Logic', 'Innovation', 'IT', 'Global', 'Developers', 'Code', 'Techno', 'Automations', 'Cloudware', 'Dynamics', 'Vision', 'Intelligence', 'NextGen', 'Computing', 'Innovators', 'Engineering', 'Performance', 'Softworks', 'Logicware', 'Digitalware', 'Transform', 'Platform', 'Smartware', 'Dataflow', 'Byte', 'Edge', 'Nexus', 'Techworks', 'Bit', 'Virtual', 'SystemsX', 'Infotech', 'Genix', 'Quantum', 'Bitware', 'CloudX'];\r",
									"\r",
									"    const randomTastName = tagnames[Math.floor(Math.random() * tagnames.length)]\r",
									"    return randomTastName\r",
									"}\r",
									"pm.environment.set(\"Tag\", tag())\r",
									"\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"Empresa\") + \" \" + pm.environment.get(\"Tag\"))\r",
									"\r",
									"\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"\r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									"\r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									"\r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									"\r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									"\r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									"\r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"CNPJ\", cnpjGerado);\r",
									"\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function gerarTelefone() {\r",
									"    // Gerando um DDD aleatório entre 11 e 99\r",
									"    const ddd = Math.floor(Math.random() * (99 - 11 + 1)) + 11;\r",
									"\r",
									"    // Gerando o número de telefone com 9 dígitos, começando com 9\r",
									"    const numero = Math.floor(Math.random() * 100000000) + 900000000; // Gera um número aleatório entre 900000000 e 999999999 (começando com '9')\r",
									"\r",
									"    // Concatenando +55, o DDD e o número gerado para formar o telefone\r",
									"    const telefone = `55${ddd}${numero.toString().slice(0, 5)}${numero.toString().slice(5, 9)}`;\r",
									"\r",
									"    return telefone;\r",
									"}\r",
									"\r",
									"// Gerando o número de telefone e armazenando como variável de ambiente\r",
									"const telefoneGerado = gerarTelefone();\r",
									"pm.environment.set(\"telefone\", telefoneGerado);\r",
									"\r",
									"function descricao() {\r",
									"    const names = [\"Testes\", \"Automação\", \"FrontEnd\", \"Backend\",\"Banco de Dados\", \"IA\",\"AWS\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Descricao\", descricao())\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"NomeRua\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"NomeRuas\", lastname())\r",
									"\r",
									"pm.environment.set(\"nomeruaComposto\", \r",
									"    pm.environment.get(\"NomeRua\") + \" \" + pm.environment.get(\"NomeRuas\"))\r",
									"\r",
									"function logradouro() {\r",
									"    const names = [\"Avenida\", \"Rua\", \"Alameda\", \"Travessa\", \"Praça\", \"Rodovia\", \"Estrada\", \"Largo\", \"Viaduto\", \"Marginal\", \"Parque\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Logradouro\", logradouro())\r",
									"\r",
									"pm.environment.set(\"logradouroCompleto\", \r",
									"    pm.environment.get(\"Logradouro\") + \" \" + pm.environment.get(\"nomeruaComposto\"))\r",
									"\r",
									"\r",
									"function gerarNumeroResidencia() {\r",
									"    // Definindo a probabilidade de gerar números com mais de 5 caracteres\r",
									"    const tamanhoNumero = Math.random() < 0.8 ? Math.floor(Math.random() * 5) + 1 : Math.floor(Math.random() * 6) + 5;\r",
									"\r",
									"    // Gerando um número aleatório com o tamanho definido\r",
									"    let numeroResidencia = Math.floor(Math.random() * Math.pow(10, tamanhoNumero)).toString(); // Gera número aleatório com o tamanho desejado\r",
									"\r",
									"    // Se o primeiro caractere for 0, remove-o\r",
									"    if (numeroResidencia[0] === '0') {\r",
									"        numeroResidencia = numeroResidencia.slice(1); // Remove o primeiro caractere\r",
									"    }\r",
									"\r",
									"    // Garantindo que o número tenha no máximo 10 caracteres\r",
									"    if (numeroResidencia.length > 10) {\r",
									"        numeroResidencia = numeroResidencia.slice(0, 10); // Limita a 10 caracteres\r",
									"    }\r",
									"\r",
									"    return numeroResidencia;\r",
									"}\r",
									"\r",
									"// Gerando o número de residência e armazenando como variável de ambiente\r",
									"const numeroResidenciaGerado = gerarNumeroResidencia();\r",
									"pm.environment.set(\"numeroResidencia\", numeroResidenciaGerado);\r",
									"\r",
									"function bairro() {\r",
									"    const names = ['Leblon', 'Ipanema', 'Copacabana', 'Barra da Tijuca', 'Botafogo', 'Lapa', 'Santa Teresa', 'Jardim Botânico', 'Flamengo', 'São Conrado', 'Moema', 'Vila Madalena', 'Pinheiros', 'Jardins', 'Aclimação', 'Brooklin', 'Tatuapé', 'Vila Progredior', 'Vila Nova Conceição', 'Campo Belo','Centro', 'Praia de Belas', 'Moinhos de Vento', 'Petrópolis', 'Tristeza', 'Caminho das Árvores', 'Pituba', 'Stella Maris', 'Parque Atlântico', 'Costa Azul', 'Vila Galvão', 'Santo Amaro', 'Perdizes', 'Aclimação', 'Vila Sônia', 'Cidade Dutra', 'São Bernardo do Campo', 'Vila Mariana', 'Bela Vista', 'Liberdade','Pinheiros', 'Itaim Bibi', 'Santa Cecília', 'Tucuruvi', 'Chácara Santo Antônio', 'Água Fria', 'Vila Olímpia', 'Vila São Francisco', 'Consolação', 'Vila Madalena']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Bairro\", bairro())\r",
									"\r",
									"function cidade() {\r",
									"    const names = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador', 'Curitiba', 'Fortaleza', 'Recife', 'Brasília', 'Manaus', 'Vitória', 'Goiânia', 'Belém', 'Natal', 'São Luís', 'Maceió', 'Campo Grande', 'João Pessoa', 'Aracaju', 'Cuiabá', 'Florianópolis', 'Teresina', 'Palmas', 'Macapá', 'Rio Branco', 'Boa Vista', 'Porto Velho', 'Anápolis', 'Caruaru', 'Londrina','Marabá', 'Araraquara', 'Sorocaba', 'Santos', 'Niterói', 'Mogi das Cruzes', 'Caxias do Sul', 'Barueri', 'Campinas', 'São José', 'Ponta Grossa', 'Jundiaí', 'Uberlândia', 'Diadema', 'Santo André', 'São Bernardo do Campo', 'Itaquaquecetuba', 'Ribeirão Preto', 'Juiz de Fora']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Cidade\", cidade())\r",
									"\r",
									"function abreviacao() {\r",
									"    const names = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"AbreviacaoEstado\", abreviacao())\r",
									"\r",
									"function randomCep() {\r",
									"    let randomCep = '';\r",
									"   \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        randomCep += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCep;\r",
									"}\r",
									"pm.environment.set(\"cep\", randomCep());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Mensagem de erro\",function(){\r",
									"    pm.expect(pm.response.json().error[0]).to.equal(\"O campo 'Email' informado é inválido. Informe um e-mail no formato [nome@domínio.com].\")\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomeEmpresa}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"test@ test.com.pt\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"{{fullnameUser}}\",\r\n  \"telephone\": \"{{telefone}}\",\r\n  \"serviceDescription\": \"{{Descricao}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{cep}}\",\r\n      \"city\": \"{{Cidade}}\",\r\n      \"state\": \"{{AbreviacaoEstado}}\",\r\n      \"district\": \"{{Bairro}}\",\r\n      \"street\": \"{{logradouroCompleto}}\",\r\n      \"number\": \"{{numeroResidencia}}\",\r\n      \"complement\": \"\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTM0MSwiZXhwIjoxNzM5MzE1NzQxfQ.cgJqYe74cprHCRTY9YLF_B-Hfgfp8l8lr6gDrEuqMi4' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"corporateName\": \"Matheus Sousa Testes\",\r\n  \"registerCompany\": \"57126456000155\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com o campo Email com dominio invalido",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function empresa() {\r",
									"    const names = [\"TechNova\", \"Bytewave\", \"Cyberion\", \"InovaTech\", \"Nexabyte\", \"Softtron\", \"Codeverse\", \"Dataflux\", \"Infinitron\", \"LogiCore\", \"Zentek\",\"Neurobyte\", \"Cloudix\", \"Sysnova\", \"Hexabit\", \"AIgorithm\", \"Quantumix\", \"Webtron\", \"Netflux\", \"Cyberflux\", \"Deepcode\", \"Techpulse\", \"Synaptech\", \"Codexis\", \"Nexonix\", \"Algobyte\", \"Infobyte\", \"Datazen\", \"Digiflow\", \"Innovix\", \"Coretron\", \"Zybernet\", \"Neurotech\", \"Nanobyte\", \"Virtunix\", \"Codexel\", \"Optibit\", \"Bitnova\", \"Globotron\", \"Digiware\", \"Skytech\", \"Cybervox\", \"Techspire\", \"Softbit\", \"MetaTech\", \"Synthron\", \"Virtuabyte\", \"Cloudtron\", \"Algonix\", \"Bitzen\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Empresa\", empresa())\r",
									"\r",
									"function tag() {\r",
									"    const tagnames = ['Solutions', 'Tech', 'Digital', 'Systems', 'Software', 'Cloud', 'AI', 'Cyber', 'Data', 'Analytics','Network', 'Security', 'Labs', 'Smart', 'Logic', 'Innovation', 'IT', 'Global', 'Developers', 'Code', 'Techno', 'Automations', 'Cloudware', 'Dynamics', 'Vision', 'Intelligence', 'NextGen', 'Computing', 'Innovators', 'Engineering', 'Performance', 'Softworks', 'Logicware', 'Digitalware', 'Transform', 'Platform', 'Smartware', 'Dataflow', 'Byte', 'Edge', 'Nexus', 'Techworks', 'Bit', 'Virtual', 'SystemsX', 'Infotech', 'Genix', 'Quantum', 'Bitware', 'CloudX'];\r",
									"\r",
									"    const randomTastName = tagnames[Math.floor(Math.random() * tagnames.length)]\r",
									"    return randomTastName\r",
									"}\r",
									"pm.environment.set(\"Tag\", tag())\r",
									"\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"Empresa\") + \" \" + pm.environment.get(\"Tag\"))\r",
									"\r",
									"\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"\r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									"\r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									"\r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									"\r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									"\r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									"\r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"CNPJ\", cnpjGerado);\r",
									"\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function gerarTelefone() {\r",
									"    // Gerando um DDD aleatório entre 11 e 99\r",
									"    const ddd = Math.floor(Math.random() * (99 - 11 + 1)) + 11;\r",
									"\r",
									"    // Gerando o número de telefone com 9 dígitos, começando com 9\r",
									"    const numero = Math.floor(Math.random() * 100000000) + 900000000; // Gera um número aleatório entre 900000000 e 999999999 (começando com '9')\r",
									"\r",
									"    // Concatenando +55, o DDD e o número gerado para formar o telefone\r",
									"    const telefone = `55${ddd}${numero.toString().slice(0, 5)}${numero.toString().slice(5, 9)}`;\r",
									"\r",
									"    return telefone;\r",
									"}\r",
									"\r",
									"// Gerando o número de telefone e armazenando como variável de ambiente\r",
									"const telefoneGerado = gerarTelefone();\r",
									"pm.environment.set(\"telefone\", telefoneGerado);\r",
									"\r",
									"function descricao() {\r",
									"    const names = [\"Testes\", \"Automação\", \"FrontEnd\", \"Backend\",\"Banco de Dados\", \"IA\",\"AWS\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Descricao\", descricao())\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"NomeRua\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"NomeRuas\", lastname())\r",
									"\r",
									"pm.environment.set(\"nomeruaComposto\", \r",
									"    pm.environment.get(\"NomeRua\") + \" \" + pm.environment.get(\"NomeRuas\"))\r",
									"\r",
									"function logradouro() {\r",
									"    const names = [\"Avenida\", \"Rua\", \"Alameda\", \"Travessa\", \"Praça\", \"Rodovia\", \"Estrada\", \"Largo\", \"Viaduto\", \"Marginal\", \"Parque\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Logradouro\", logradouro())\r",
									"\r",
									"pm.environment.set(\"logradouroCompleto\", \r",
									"    pm.environment.get(\"Logradouro\") + \" \" + pm.environment.get(\"nomeruaComposto\"))\r",
									"\r",
									"\r",
									"function gerarNumeroResidencia() {\r",
									"    // Definindo a probabilidade de gerar números com mais de 5 caracteres\r",
									"    const tamanhoNumero = Math.random() < 0.8 ? Math.floor(Math.random() * 5) + 1 : Math.floor(Math.random() * 6) + 5;\r",
									"\r",
									"    // Gerando um número aleatório com o tamanho definido\r",
									"    let numeroResidencia = Math.floor(Math.random() * Math.pow(10, tamanhoNumero)).toString(); // Gera número aleatório com o tamanho desejado\r",
									"\r",
									"    // Se o primeiro caractere for 0, remove-o\r",
									"    if (numeroResidencia[0] === '0') {\r",
									"        numeroResidencia = numeroResidencia.slice(1); // Remove o primeiro caractere\r",
									"    }\r",
									"\r",
									"    // Garantindo que o número tenha no máximo 10 caracteres\r",
									"    if (numeroResidencia.length > 10) {\r",
									"        numeroResidencia = numeroResidencia.slice(0, 10); // Limita a 10 caracteres\r",
									"    }\r",
									"\r",
									"    return numeroResidencia;\r",
									"}\r",
									"\r",
									"// Gerando o número de residência e armazenando como variável de ambiente\r",
									"const numeroResidenciaGerado = gerarNumeroResidencia();\r",
									"pm.environment.set(\"numeroResidencia\", numeroResidenciaGerado);\r",
									"\r",
									"function bairro() {\r",
									"    const names = ['Leblon', 'Ipanema', 'Copacabana', 'Barra da Tijuca', 'Botafogo', 'Lapa', 'Santa Teresa', 'Jardim Botânico', 'Flamengo', 'São Conrado', 'Moema', 'Vila Madalena', 'Pinheiros', 'Jardins', 'Aclimação', 'Brooklin', 'Tatuapé', 'Vila Progredior', 'Vila Nova Conceição', 'Campo Belo','Centro', 'Praia de Belas', 'Moinhos de Vento', 'Petrópolis', 'Tristeza', 'Caminho das Árvores', 'Pituba', 'Stella Maris', 'Parque Atlântico', 'Costa Azul', 'Vila Galvão', 'Santo Amaro', 'Perdizes', 'Aclimação', 'Vila Sônia', 'Cidade Dutra', 'São Bernardo do Campo', 'Vila Mariana', 'Bela Vista', 'Liberdade','Pinheiros', 'Itaim Bibi', 'Santa Cecília', 'Tucuruvi', 'Chácara Santo Antônio', 'Água Fria', 'Vila Olímpia', 'Vila São Francisco', 'Consolação', 'Vila Madalena']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Bairro\", bairro())\r",
									"\r",
									"function cidade() {\r",
									"    const names = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador', 'Curitiba', 'Fortaleza', 'Recife', 'Brasília', 'Manaus', 'Vitória', 'Goiânia', 'Belém', 'Natal', 'São Luís', 'Maceió', 'Campo Grande', 'João Pessoa', 'Aracaju', 'Cuiabá', 'Florianópolis', 'Teresina', 'Palmas', 'Macapá', 'Rio Branco', 'Boa Vista', 'Porto Velho', 'Anápolis', 'Caruaru', 'Londrina','Marabá', 'Araraquara', 'Sorocaba', 'Santos', 'Niterói', 'Mogi das Cruzes', 'Caxias do Sul', 'Barueri', 'Campinas', 'São José', 'Ponta Grossa', 'Jundiaí', 'Uberlândia', 'Diadema', 'Santo André', 'São Bernardo do Campo', 'Itaquaquecetuba', 'Ribeirão Preto', 'Juiz de Fora']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Cidade\", cidade())\r",
									"\r",
									"function abreviacao() {\r",
									"    const names = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"AbreviacaoEstado\", abreviacao())\r",
									"\r",
									"function randomCep() {\r",
									"    let randomCep = '';\r",
									"   \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        randomCep += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCep;\r",
									"}\r",
									"pm.environment.set(\"cep\", randomCep());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomeEmpresa}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"test@test.com.ptbrptbr\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"{{fullnameUser}}\",\r\n  \"telephone\": \"{{telefone}}\",\r\n  \"serviceDescription\": \"{{Descricao}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{cep}}\",\r\n      \"city\": \"{{Cidade}}\",\r\n      \"state\": \"{{AbreviacaoEstado}}\",\r\n      \"district\": \"{{Bairro}}\",\r\n      \"street\": \"{{logradouroCompleto}}\",\r\n      \"number\": \"{{numeroResidencia}}\",\r\n      \"complement\": \"\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTM0MSwiZXhwIjoxNzM5MzE1NzQxfQ.cgJqYe74cprHCRTY9YLF_B-Hfgfp8l8lr6gDrEuqMi4' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"corporateName\": \"Matheus Sousa Testes\",\r\n  \"registerCompany\": \"57126456000155\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com o campo Descrição em branco",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function empresa() {\r",
									"    const names = [\"TechNova\", \"Bytewave\", \"Cyberion\", \"InovaTech\", \"Nexabyte\", \"Softtron\", \"Codeverse\", \"Dataflux\", \"Infinitron\", \"LogiCore\", \"Zentek\",\"Neurobyte\", \"Cloudix\", \"Sysnova\", \"Hexabit\", \"AIgorithm\", \"Quantumix\", \"Webtron\", \"Netflux\", \"Cyberflux\", \"Deepcode\", \"Techpulse\", \"Synaptech\", \"Codexis\", \"Nexonix\", \"Algobyte\", \"Infobyte\", \"Datazen\", \"Digiflow\", \"Innovix\", \"Coretron\", \"Zybernet\", \"Neurotech\", \"Nanobyte\", \"Virtunix\", \"Codexel\", \"Optibit\", \"Bitnova\", \"Globotron\", \"Digiware\", \"Skytech\", \"Cybervox\", \"Techspire\", \"Softbit\", \"MetaTech\", \"Synthron\", \"Virtuabyte\", \"Cloudtron\", \"Algonix\", \"Bitzen\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Empresa\", empresa())\r",
									"\r",
									"function tag() {\r",
									"    const tagnames = ['Solutions', 'Tech', 'Digital', 'Systems', 'Software', 'Cloud', 'AI', 'Cyber', 'Data', 'Analytics','Network', 'Security', 'Labs', 'Smart', 'Logic', 'Innovation', 'IT', 'Global', 'Developers', 'Code', 'Techno', 'Automations', 'Cloudware', 'Dynamics', 'Vision', 'Intelligence', 'NextGen', 'Computing', 'Innovators', 'Engineering', 'Performance', 'Softworks', 'Logicware', 'Digitalware', 'Transform', 'Platform', 'Smartware', 'Dataflow', 'Byte', 'Edge', 'Nexus', 'Techworks', 'Bit', 'Virtual', 'SystemsX', 'Infotech', 'Genix', 'Quantum', 'Bitware', 'CloudX'];\r",
									"\r",
									"    const randomTastName = tagnames[Math.floor(Math.random() * tagnames.length)]\r",
									"    return randomTastName\r",
									"}\r",
									"pm.environment.set(\"Tag\", tag())\r",
									"\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"Empresa\") + \" \" + pm.environment.get(\"Tag\"))\r",
									"\r",
									"\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"\r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									"\r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									"\r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									"\r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									"\r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									"\r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"CNPJ\", cnpjGerado);\r",
									"\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function gerarTelefone() {\r",
									"    // Gerando um DDD aleatório entre 11 e 99\r",
									"    const ddd = Math.floor(Math.random() * (99 - 11 + 1)) + 11;\r",
									"\r",
									"    // Gerando o número de telefone com 9 dígitos, começando com 9\r",
									"    const numero = Math.floor(Math.random() * 100000000) + 900000000; // Gera um número aleatório entre 900000000 e 999999999 (começando com '9')\r",
									"\r",
									"    // Concatenando +55, o DDD e o número gerado para formar o telefone\r",
									"    const telefone = `55${ddd}${numero.toString().slice(0, 5)}${numero.toString().slice(5, 9)}`;\r",
									"\r",
									"    return telefone;\r",
									"}\r",
									"\r",
									"// Gerando o número de telefone e armazenando como variável de ambiente\r",
									"const telefoneGerado = gerarTelefone();\r",
									"pm.environment.set(\"telefone\", telefoneGerado);\r",
									"\r",
									"function descricao() {\r",
									"    const names = [\"Testes\", \"Automação\", \"FrontEnd\", \"Backend\",\"Banco de Dados\", \"IA\",\"AWS\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Descricao\", descricao())\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"NomeRua\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"NomeRuas\", lastname())\r",
									"\r",
									"pm.environment.set(\"nomeruaComposto\", \r",
									"    pm.environment.get(\"NomeRua\") + \" \" + pm.environment.get(\"NomeRuas\"))\r",
									"\r",
									"function logradouro() {\r",
									"    const names = [\"Avenida\", \"Rua\", \"Alameda\", \"Travessa\", \"Praça\", \"Rodovia\", \"Estrada\", \"Largo\", \"Viaduto\", \"Marginal\", \"Parque\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Logradouro\", logradouro())\r",
									"\r",
									"pm.environment.set(\"logradouroCompleto\", \r",
									"    pm.environment.get(\"Logradouro\") + \" \" + pm.environment.get(\"nomeruaComposto\"))\r",
									"\r",
									"\r",
									"function gerarNumeroResidencia() {\r",
									"    // Definindo a probabilidade de gerar números com mais de 5 caracteres\r",
									"    const tamanhoNumero = Math.random() < 0.8 ? Math.floor(Math.random() * 5) + 1 : Math.floor(Math.random() * 6) + 5;\r",
									"\r",
									"    // Gerando um número aleatório com o tamanho definido\r",
									"    let numeroResidencia = Math.floor(Math.random() * Math.pow(10, tamanhoNumero)).toString(); // Gera número aleatório com o tamanho desejado\r",
									"\r",
									"    // Se o primeiro caractere for 0, remove-o\r",
									"    if (numeroResidencia[0] === '0') {\r",
									"        numeroResidencia = numeroResidencia.slice(1); // Remove o primeiro caractere\r",
									"    }\r",
									"\r",
									"    // Garantindo que o número tenha no máximo 10 caracteres\r",
									"    if (numeroResidencia.length > 10) {\r",
									"        numeroResidencia = numeroResidencia.slice(0, 10); // Limita a 10 caracteres\r",
									"    }\r",
									"\r",
									"    return numeroResidencia;\r",
									"}\r",
									"\r",
									"// Gerando o número de residência e armazenando como variável de ambiente\r",
									"const numeroResidenciaGerado = gerarNumeroResidencia();\r",
									"pm.environment.set(\"numeroResidencia\", numeroResidenciaGerado);\r",
									"\r",
									"function bairro() {\r",
									"    const names = ['Leblon', 'Ipanema', 'Copacabana', 'Barra da Tijuca', 'Botafogo', 'Lapa', 'Santa Teresa', 'Jardim Botânico', 'Flamengo', 'São Conrado', 'Moema', 'Vila Madalena', 'Pinheiros', 'Jardins', 'Aclimação', 'Brooklin', 'Tatuapé', 'Vila Progredior', 'Vila Nova Conceição', 'Campo Belo','Centro', 'Praia de Belas', 'Moinhos de Vento', 'Petrópolis', 'Tristeza', 'Caminho das Árvores', 'Pituba', 'Stella Maris', 'Parque Atlântico', 'Costa Azul', 'Vila Galvão', 'Santo Amaro', 'Perdizes', 'Aclimação', 'Vila Sônia', 'Cidade Dutra', 'São Bernardo do Campo', 'Vila Mariana', 'Bela Vista', 'Liberdade','Pinheiros', 'Itaim Bibi', 'Santa Cecília', 'Tucuruvi', 'Chácara Santo Antônio', 'Água Fria', 'Vila Olímpia', 'Vila São Francisco', 'Consolação', 'Vila Madalena']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Bairro\", bairro())\r",
									"\r",
									"function cidade() {\r",
									"    const names = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador', 'Curitiba', 'Fortaleza', 'Recife', 'Brasília', 'Manaus', 'Vitória', 'Goiânia', 'Belém', 'Natal', 'São Luís', 'Maceió', 'Campo Grande', 'João Pessoa', 'Aracaju', 'Cuiabá', 'Florianópolis', 'Teresina', 'Palmas', 'Macapá', 'Rio Branco', 'Boa Vista', 'Porto Velho', 'Anápolis', 'Caruaru', 'Londrina','Marabá', 'Araraquara', 'Sorocaba', 'Santos', 'Niterói', 'Mogi das Cruzes', 'Caxias do Sul', 'Barueri', 'Campinas', 'São José', 'Ponta Grossa', 'Jundiaí', 'Uberlândia', 'Diadema', 'Santo André', 'São Bernardo do Campo', 'Itaquaquecetuba', 'Ribeirão Preto', 'Juiz de Fora']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Cidade\", cidade())\r",
									"\r",
									"function abreviacao() {\r",
									"    const names = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"AbreviacaoEstado\", abreviacao())\r",
									"\r",
									"function randomCep() {\r",
									"    let randomCep = '';\r",
									"   \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        randomCep += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCep;\r",
									"}\r",
									"pm.environment.set(\"cep\", randomCep());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Mensagem de erro\",function(){\r",
									"     pm.expect(pm.response.json().error[0]).to.equal(\"O campo Descrição é obrigatório.\")\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomeEmpresa}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"{{fullnameUser}}\",\r\n  \"telephone\": \"{{telefone}}\",\r\n  \"serviceDescription\": \"\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{cep}}\",\r\n      \"city\": \"{{Cidade}}\",\r\n      \"state\": \"{{AbreviacaoEstado}}\",\r\n      \"district\": \"{{Bairro}}\",\r\n      \"street\": \"{{logradouroCompleto}}\",\r\n      \"number\": \"{{numeroResidencia}}\",\r\n      \"complement\": \"\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTM0MSwiZXhwIjoxNzM5MzE1NzQxfQ.cgJqYe74cprHCRTY9YLF_B-Hfgfp8l8lr6gDrEuqMi4' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"corporateName\": \"Matheus Sousa Testes\",\r\n  \"registerCompany\": \"57126456000155\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com o campo Descrição com letras e numeros",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function empresa() {\r",
									"    const names = [\"TechNova\", \"Bytewave\", \"Cyberion\", \"InovaTech\", \"Nexabyte\", \"Softtron\", \"Codeverse\", \"Dataflux\", \"Infinitron\", \"LogiCore\", \"Zentek\",\"Neurobyte\", \"Cloudix\", \"Sysnova\", \"Hexabit\", \"AIgorithm\", \"Quantumix\", \"Webtron\", \"Netflux\", \"Cyberflux\", \"Deepcode\", \"Techpulse\", \"Synaptech\", \"Codexis\", \"Nexonix\", \"Algobyte\", \"Infobyte\", \"Datazen\", \"Digiflow\", \"Innovix\", \"Coretron\", \"Zybernet\", \"Neurotech\", \"Nanobyte\", \"Virtunix\", \"Codexel\", \"Optibit\", \"Bitnova\", \"Globotron\", \"Digiware\", \"Skytech\", \"Cybervox\", \"Techspire\", \"Softbit\", \"MetaTech\", \"Synthron\", \"Virtuabyte\", \"Cloudtron\", \"Algonix\", \"Bitzen\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Empresa\", empresa())\r",
									"\r",
									"function tag() {\r",
									"    const tagnames = ['Solutions', 'Tech', 'Digital', 'Systems', 'Software', 'Cloud', 'AI', 'Cyber', 'Data', 'Analytics','Network', 'Security', 'Labs', 'Smart', 'Logic', 'Innovation', 'IT', 'Global', 'Developers', 'Code', 'Techno', 'Automations', 'Cloudware', 'Dynamics', 'Vision', 'Intelligence', 'NextGen', 'Computing', 'Innovators', 'Engineering', 'Performance', 'Softworks', 'Logicware', 'Digitalware', 'Transform', 'Platform', 'Smartware', 'Dataflow', 'Byte', 'Edge', 'Nexus', 'Techworks', 'Bit', 'Virtual', 'SystemsX', 'Infotech', 'Genix', 'Quantum', 'Bitware', 'CloudX'];\r",
									"\r",
									"    const randomTastName = tagnames[Math.floor(Math.random() * tagnames.length)]\r",
									"    return randomTastName\r",
									"}\r",
									"pm.environment.set(\"Tag\", tag())\r",
									"\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"Empresa\") + \" \" + pm.environment.get(\"Tag\"))\r",
									"\r",
									"\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"\r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									"\r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									"\r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									"\r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									"\r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									"\r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"CNPJ\", cnpjGerado);\r",
									"\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function gerarTelefone() {\r",
									"    // Gerando um DDD aleatório entre 11 e 99\r",
									"    const ddd = Math.floor(Math.random() * (99 - 11 + 1)) + 11;\r",
									"\r",
									"    // Gerando o número de telefone com 9 dígitos, começando com 9\r",
									"    const numero = Math.floor(Math.random() * 100000000) + 900000000; // Gera um número aleatório entre 900000000 e 999999999 (começando com '9')\r",
									"\r",
									"    // Concatenando +55, o DDD e o número gerado para formar o telefone\r",
									"    const telefone = `55${ddd}${numero.toString().slice(0, 5)}${numero.toString().slice(5, 9)}`;\r",
									"\r",
									"    return telefone;\r",
									"}\r",
									"\r",
									"// Gerando o número de telefone e armazenando como variável de ambiente\r",
									"const telefoneGerado = gerarTelefone();\r",
									"pm.environment.set(\"telefone\", telefoneGerado);\r",
									"\r",
									"function descricao() {\r",
									"    const names = [\"Testes\", \"Automação\", \"FrontEnd\", \"Backend\",\"Banco de Dados\", \"IA\",\"AWS\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Descricao\", descricao())\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"NomeRua\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"NomeRuas\", lastname())\r",
									"\r",
									"pm.environment.set(\"nomeruaComposto\", \r",
									"    pm.environment.get(\"NomeRua\") + \" \" + pm.environment.get(\"NomeRuas\"))\r",
									"\r",
									"function logradouro() {\r",
									"    const names = [\"Avenida\", \"Rua\", \"Alameda\", \"Travessa\", \"Praça\", \"Rodovia\", \"Estrada\", \"Largo\", \"Viaduto\", \"Marginal\", \"Parque\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Logradouro\", logradouro())\r",
									"\r",
									"pm.environment.set(\"logradouroCompleto\", \r",
									"    pm.environment.get(\"Logradouro\") + \" \" + pm.environment.get(\"nomeruaComposto\"))\r",
									"\r",
									"\r",
									"function gerarNumeroResidencia() {\r",
									"    // Definindo a probabilidade de gerar números com mais de 5 caracteres\r",
									"    const tamanhoNumero = Math.random() < 0.8 ? Math.floor(Math.random() * 5) + 1 : Math.floor(Math.random() * 6) + 5;\r",
									"\r",
									"    // Gerando um número aleatório com o tamanho definido\r",
									"    let numeroResidencia = Math.floor(Math.random() * Math.pow(10, tamanhoNumero)).toString(); // Gera número aleatório com o tamanho desejado\r",
									"\r",
									"    // Se o primeiro caractere for 0, remove-o\r",
									"    if (numeroResidencia[0] === '0') {\r",
									"        numeroResidencia = numeroResidencia.slice(1); // Remove o primeiro caractere\r",
									"    }\r",
									"\r",
									"    // Garantindo que o número tenha no máximo 10 caracteres\r",
									"    if (numeroResidencia.length > 10) {\r",
									"        numeroResidencia = numeroResidencia.slice(0, 10); // Limita a 10 caracteres\r",
									"    }\r",
									"\r",
									"    return numeroResidencia;\r",
									"}\r",
									"\r",
									"// Gerando o número de residência e armazenando como variável de ambiente\r",
									"const numeroResidenciaGerado = gerarNumeroResidencia();\r",
									"pm.environment.set(\"numeroResidencia\", numeroResidenciaGerado);\r",
									"\r",
									"function bairro() {\r",
									"    const names = ['Leblon', 'Ipanema', 'Copacabana', 'Barra da Tijuca', 'Botafogo', 'Lapa', 'Santa Teresa', 'Jardim Botânico', 'Flamengo', 'São Conrado', 'Moema', 'Vila Madalena', 'Pinheiros', 'Jardins', 'Aclimação', 'Brooklin', 'Tatuapé', 'Vila Progredior', 'Vila Nova Conceição', 'Campo Belo','Centro', 'Praia de Belas', 'Moinhos de Vento', 'Petrópolis', 'Tristeza', 'Caminho das Árvores', 'Pituba', 'Stella Maris', 'Parque Atlântico', 'Costa Azul', 'Vila Galvão', 'Santo Amaro', 'Perdizes', 'Aclimação', 'Vila Sônia', 'Cidade Dutra', 'São Bernardo do Campo', 'Vila Mariana', 'Bela Vista', 'Liberdade','Pinheiros', 'Itaim Bibi', 'Santa Cecília', 'Tucuruvi', 'Chácara Santo Antônio', 'Água Fria', 'Vila Olímpia', 'Vila São Francisco', 'Consolação', 'Vila Madalena']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Bairro\", bairro())\r",
									"\r",
									"function cidade() {\r",
									"    const names = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador', 'Curitiba', 'Fortaleza', 'Recife', 'Brasília', 'Manaus', 'Vitória', 'Goiânia', 'Belém', 'Natal', 'São Luís', 'Maceió', 'Campo Grande', 'João Pessoa', 'Aracaju', 'Cuiabá', 'Florianópolis', 'Teresina', 'Palmas', 'Macapá', 'Rio Branco', 'Boa Vista', 'Porto Velho', 'Anápolis', 'Caruaru', 'Londrina','Marabá', 'Araraquara', 'Sorocaba', 'Santos', 'Niterói', 'Mogi das Cruzes', 'Caxias do Sul', 'Barueri', 'Campinas', 'São José', 'Ponta Grossa', 'Jundiaí', 'Uberlândia', 'Diadema', 'Santo André', 'São Bernardo do Campo', 'Itaquaquecetuba', 'Ribeirão Preto', 'Juiz de Fora']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Cidade\", cidade())\r",
									"\r",
									"function abreviacao() {\r",
									"    const names = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"AbreviacaoEstado\", abreviacao())\r",
									"\r",
									"function randomCep() {\r",
									"    let randomCep = '';\r",
									"   \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        randomCep += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCep;\r",
									"}\r",
									"pm.environment.set(\"cep\", randomCep());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 201\", function(){\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Mensagem de sucesso\",function(){\r",
									"    pm.expect(pm.response.json().msg).to.include(\"Registro realizado com sucesso\")\r",
									"})\r",
									"\r",
									"pm.test(\"Status é True\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.status).to.be.true;\r",
									"})\r",
									"\r",
									"pm.test(\"Nome da Empresa é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.corporateName).to.equal(pm.environment.get(\"nomeEmpresa\"))\r",
									"})\r",
									"\r",
									"pm.test(\"CNPJ é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.registerCompany).to.equal(pm.environment.get(\"CNPJ\"))\r",
									"})\r",
									"\r",
									"\r",
									"// Função para validar CNPJ com base nos dígitos verificadores\r",
									"function validarCNPJ(cnpj) {\r",
									"    // Remover qualquer caractere que não seja número\r",
									"    cnpj = cnpj.replace(/\\D/g, '');\r",
									"\r",
									"    // Verifica se o CNPJ tem 14 dígitos\r",
									"    if (cnpj.length !== 14) {\r",
									"        return false;\r",
									"    }\r",
									"\r",
									"    // Cálculo do primeiro dígito verificador\r",
									"    let soma = 0;\r",
									"    let multiplicadoresPrimeiro = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    \r",
									"    for (let i = 0; i < 12; i++) {\r",
									"        soma += parseInt(cnpj[i]) * multiplicadoresPrimeiro[i];\r",
									"    }\r",
									"\r",
									"    let resto = soma % 11;\r",
									"    let primeiroDV = resto < 2 ? 0 : 11 - resto;\r",
									"\r",
									"    // Cálculo do segundo dígito verificador\r",
									"    soma = 0;\r",
									"    let multiplicadoresSegundo = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    \r",
									"    for (let i = 0; i < 13; i++) {\r",
									"        soma += parseInt(cnpj[i]) * multiplicadoresSegundo[i];\r",
									"    }\r",
									"\r",
									"    resto = soma % 11;\r",
									"    let segundoDV = resto < 2 ? 0 : 11 - resto;\r",
									"\r",
									"    // Comparar com os dígitos do CNPJ enviado\r",
									"    return cnpj[12] == primeiroDV && cnpj[13] == segundoDV;\r",
									"}\r",
									"\r",
									"// Obter o CNPJ da resposta da API (supondo que está no campo \"cnpj\")\r",
									"let cnpjRecebido = pm.response.json().newCompany.registerCompany; \r",
									"\r",
									"// Executar a validação\r",
									"if (!validarCNPJ(cnpjRecebido)) {\r",
									"    pm.test(\"O CNPJ retornado é inválido!\", function () {\r",
									"        pm.expect(false).to.be.true;\r",
									"    });\r",
									"} else {\r",
									"    pm.test(\"O CNPJ retornado é válido!\", function () {\r",
									"        pm.expect(true).to.be.true;\r",
									"    });\r",
									"}\r",
									"\r",
									"pm.test(\"Descrição é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.serviceDescription).to.equal(\"Vamos la 10\")\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomeEmpresa}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"{{fullnameUser}}\",\r\n  \"telephone\": \"{{telefone}}\",\r\n  \"serviceDescription\": \"Vamos la 10\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{cep}}\",\r\n      \"city\": \"{{Cidade}}\",\r\n      \"state\": \"{{AbreviacaoEstado}}\",\r\n      \"district\": \"{{Bairro}}\",\r\n      \"street\": \"{{logradouroCompleto}}\",\r\n      \"number\": \"{{numeroResidencia}}\",\r\n      \"complement\": \"\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTM0MSwiZXhwIjoxNzM5MzE1NzQxfQ.cgJqYe74cprHCRTY9YLF_B-Hfgfp8l8lr6gDrEuqMi4' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"corporateName\": \"Matheus Sousa Testes\",\r\n  \"registerCompany\": \"57126456000155\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com o campo Descrição somente com numeros",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function empresa() {\r",
									"    const names = [\"TechNova\", \"Bytewave\", \"Cyberion\", \"InovaTech\", \"Nexabyte\", \"Softtron\", \"Codeverse\", \"Dataflux\", \"Infinitron\", \"LogiCore\", \"Zentek\",\"Neurobyte\", \"Cloudix\", \"Sysnova\", \"Hexabit\", \"AIgorithm\", \"Quantumix\", \"Webtron\", \"Netflux\", \"Cyberflux\", \"Deepcode\", \"Techpulse\", \"Synaptech\", \"Codexis\", \"Nexonix\", \"Algobyte\", \"Infobyte\", \"Datazen\", \"Digiflow\", \"Innovix\", \"Coretron\", \"Zybernet\", \"Neurotech\", \"Nanobyte\", \"Virtunix\", \"Codexel\", \"Optibit\", \"Bitnova\", \"Globotron\", \"Digiware\", \"Skytech\", \"Cybervox\", \"Techspire\", \"Softbit\", \"MetaTech\", \"Synthron\", \"Virtuabyte\", \"Cloudtron\", \"Algonix\", \"Bitzen\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Empresa\", empresa())\r",
									"\r",
									"function tag() {\r",
									"    const tagnames = ['Solutions', 'Tech', 'Digital', 'Systems', 'Software', 'Cloud', 'AI', 'Cyber', 'Data', 'Analytics','Network', 'Security', 'Labs', 'Smart', 'Logic', 'Innovation', 'IT', 'Global', 'Developers', 'Code', 'Techno', 'Automations', 'Cloudware', 'Dynamics', 'Vision', 'Intelligence', 'NextGen', 'Computing', 'Innovators', 'Engineering', 'Performance', 'Softworks', 'Logicware', 'Digitalware', 'Transform', 'Platform', 'Smartware', 'Dataflow', 'Byte', 'Edge', 'Nexus', 'Techworks', 'Bit', 'Virtual', 'SystemsX', 'Infotech', 'Genix', 'Quantum', 'Bitware', 'CloudX'];\r",
									"\r",
									"    const randomTastName = tagnames[Math.floor(Math.random() * tagnames.length)]\r",
									"    return randomTastName\r",
									"}\r",
									"pm.environment.set(\"Tag\", tag())\r",
									"\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"Empresa\") + \" \" + pm.environment.get(\"Tag\"))\r",
									"\r",
									"\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"\r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									"\r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									"\r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									"\r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									"\r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									"\r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"CNPJ\", cnpjGerado);\r",
									"\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function gerarTelefone() {\r",
									"    // Gerando um DDD aleatório entre 11 e 99\r",
									"    const ddd = Math.floor(Math.random() * (99 - 11 + 1)) + 11;\r",
									"\r",
									"    // Gerando o número de telefone com 9 dígitos, começando com 9\r",
									"    const numero = Math.floor(Math.random() * 100000000) + 900000000; // Gera um número aleatório entre 900000000 e 999999999 (começando com '9')\r",
									"\r",
									"    // Concatenando +55, o DDD e o número gerado para formar o telefone\r",
									"    const telefone = `55${ddd}${numero.toString().slice(0, 5)}${numero.toString().slice(5, 9)}`;\r",
									"\r",
									"    return telefone;\r",
									"}\r",
									"\r",
									"// Gerando o número de telefone e armazenando como variável de ambiente\r",
									"const telefoneGerado = gerarTelefone();\r",
									"pm.environment.set(\"telefone\", telefoneGerado);\r",
									"\r",
									"function descricao() {\r",
									"    const names = [\"Testes\", \"Automação\", \"FrontEnd\", \"Backend\",\"Banco de Dados\", \"IA\",\"AWS\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Descricao\", descricao())\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"NomeRua\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"NomeRuas\", lastname())\r",
									"\r",
									"pm.environment.set(\"nomeruaComposto\", \r",
									"    pm.environment.get(\"NomeRua\") + \" \" + pm.environment.get(\"NomeRuas\"))\r",
									"\r",
									"function logradouro() {\r",
									"    const names = [\"Avenida\", \"Rua\", \"Alameda\", \"Travessa\", \"Praça\", \"Rodovia\", \"Estrada\", \"Largo\", \"Viaduto\", \"Marginal\", \"Parque\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Logradouro\", logradouro())\r",
									"\r",
									"pm.environment.set(\"logradouroCompleto\", \r",
									"    pm.environment.get(\"Logradouro\") + \" \" + pm.environment.get(\"nomeruaComposto\"))\r",
									"\r",
									"\r",
									"function gerarNumeroResidencia() {\r",
									"    // Definindo a probabilidade de gerar números com mais de 5 caracteres\r",
									"    const tamanhoNumero = Math.random() < 0.8 ? Math.floor(Math.random() * 5) + 1 : Math.floor(Math.random() * 6) + 5;\r",
									"\r",
									"    // Gerando um número aleatório com o tamanho definido\r",
									"    let numeroResidencia = Math.floor(Math.random() * Math.pow(10, tamanhoNumero)).toString(); // Gera número aleatório com o tamanho desejado\r",
									"\r",
									"    // Se o primeiro caractere for 0, remove-o\r",
									"    if (numeroResidencia[0] === '0') {\r",
									"        numeroResidencia = numeroResidencia.slice(1); // Remove o primeiro caractere\r",
									"    }\r",
									"\r",
									"    // Garantindo que o número tenha no máximo 10 caracteres\r",
									"    if (numeroResidencia.length > 10) {\r",
									"        numeroResidencia = numeroResidencia.slice(0, 10); // Limita a 10 caracteres\r",
									"    }\r",
									"\r",
									"    return numeroResidencia;\r",
									"}\r",
									"\r",
									"// Gerando o número de residência e armazenando como variável de ambiente\r",
									"const numeroResidenciaGerado = gerarNumeroResidencia();\r",
									"pm.environment.set(\"numeroResidencia\", numeroResidenciaGerado);\r",
									"\r",
									"function bairro() {\r",
									"    const names = ['Leblon', 'Ipanema', 'Copacabana', 'Barra da Tijuca', 'Botafogo', 'Lapa', 'Santa Teresa', 'Jardim Botânico', 'Flamengo', 'São Conrado', 'Moema', 'Vila Madalena', 'Pinheiros', 'Jardins', 'Aclimação', 'Brooklin', 'Tatuapé', 'Vila Progredior', 'Vila Nova Conceição', 'Campo Belo','Centro', 'Praia de Belas', 'Moinhos de Vento', 'Petrópolis', 'Tristeza', 'Caminho das Árvores', 'Pituba', 'Stella Maris', 'Parque Atlântico', 'Costa Azul', 'Vila Galvão', 'Santo Amaro', 'Perdizes', 'Aclimação', 'Vila Sônia', 'Cidade Dutra', 'São Bernardo do Campo', 'Vila Mariana', 'Bela Vista', 'Liberdade','Pinheiros', 'Itaim Bibi', 'Santa Cecília', 'Tucuruvi', 'Chácara Santo Antônio', 'Água Fria', 'Vila Olímpia', 'Vila São Francisco', 'Consolação', 'Vila Madalena']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Bairro\", bairro())\r",
									"\r",
									"function cidade() {\r",
									"    const names = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador', 'Curitiba', 'Fortaleza', 'Recife', 'Brasília', 'Manaus', 'Vitória', 'Goiânia', 'Belém', 'Natal', 'São Luís', 'Maceió', 'Campo Grande', 'João Pessoa', 'Aracaju', 'Cuiabá', 'Florianópolis', 'Teresina', 'Palmas', 'Macapá', 'Rio Branco', 'Boa Vista', 'Porto Velho', 'Anápolis', 'Caruaru', 'Londrina','Marabá', 'Araraquara', 'Sorocaba', 'Santos', 'Niterói', 'Mogi das Cruzes', 'Caxias do Sul', 'Barueri', 'Campinas', 'São José', 'Ponta Grossa', 'Jundiaí', 'Uberlândia', 'Diadema', 'Santo André', 'São Bernardo do Campo', 'Itaquaquecetuba', 'Ribeirão Preto', 'Juiz de Fora']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Cidade\", cidade())\r",
									"\r",
									"function abreviacao() {\r",
									"    const names = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"AbreviacaoEstado\", abreviacao())\r",
									"\r",
									"function randomCep() {\r",
									"    let randomCep = '';\r",
									"   \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        randomCep += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCep;\r",
									"}\r",
									"pm.environment.set(\"cep\", randomCep());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 201\", function(){\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Mensagem de sucesso\",function(){\r",
									"    pm.expect(pm.response.json().msg).to.include(\"Registro realizado com sucesso\")\r",
									"})\r",
									"\r",
									"pm.test(\"Status é True\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.status).to.be.true;\r",
									"})\r",
									"\r",
									"pm.test(\"Nome da Empresa é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.corporateName).to.equal(pm.environment.get(\"nomeEmpresa\"))\r",
									"})\r",
									"\r",
									"pm.test(\"CNPJ é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.registerCompany).to.equal(pm.environment.get(\"CNPJ\"))\r",
									"})\r",
									"\r",
									"\r",
									"// Função para validar CNPJ com base nos dígitos verificadores\r",
									"function validarCNPJ(cnpj) {\r",
									"    // Remover qualquer caractere que não seja número\r",
									"    cnpj = cnpj.replace(/\\D/g, '');\r",
									"\r",
									"    // Verifica se o CNPJ tem 14 dígitos\r",
									"    if (cnpj.length !== 14) {\r",
									"        return false;\r",
									"    }\r",
									"\r",
									"    // Cálculo do primeiro dígito verificador\r",
									"    let soma = 0;\r",
									"    let multiplicadoresPrimeiro = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    \r",
									"    for (let i = 0; i < 12; i++) {\r",
									"        soma += parseInt(cnpj[i]) * multiplicadoresPrimeiro[i];\r",
									"    }\r",
									"\r",
									"    let resto = soma % 11;\r",
									"    let primeiroDV = resto < 2 ? 0 : 11 - resto;\r",
									"\r",
									"    // Cálculo do segundo dígito verificador\r",
									"    soma = 0;\r",
									"    let multiplicadoresSegundo = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    \r",
									"    for (let i = 0; i < 13; i++) {\r",
									"        soma += parseInt(cnpj[i]) * multiplicadoresSegundo[i];\r",
									"    }\r",
									"\r",
									"    resto = soma % 11;\r",
									"    let segundoDV = resto < 2 ? 0 : 11 - resto;\r",
									"\r",
									"    // Comparar com os dígitos do CNPJ enviado\r",
									"    return cnpj[12] == primeiroDV && cnpj[13] == segundoDV;\r",
									"}\r",
									"\r",
									"// Obter o CNPJ da resposta da API (supondo que está no campo \"cnpj\")\r",
									"let cnpjRecebido = pm.response.json().newCompany.registerCompany; \r",
									"\r",
									"// Executar a validação\r",
									"if (!validarCNPJ(cnpjRecebido)) {\r",
									"    pm.test(\"O CNPJ retornado é inválido!\", function () {\r",
									"        pm.expect(false).to.be.true;\r",
									"    });\r",
									"} else {\r",
									"    pm.test(\"O CNPJ retornado é válido!\", function () {\r",
									"        pm.expect(true).to.be.true;\r",
									"    });\r",
									"}\r",
									"\r",
									"pm.test(\"Descrição é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.serviceDescription).to.equal(\"123456\")\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomeEmpresa}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"{{fullnameUser}}\",\r\n  \"telephone\": \"{{telefone}}\",\r\n  \"serviceDescription\": \"123456\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{cep}}\",\r\n      \"city\": \"{{Cidade}}\",\r\n      \"state\": \"{{AbreviacaoEstado}}\",\r\n      \"district\": \"{{Bairro}}\",\r\n      \"street\": \"{{logradouroCompleto}}\",\r\n      \"number\": \"{{numeroResidencia}}\",\r\n      \"complement\": \"\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTM0MSwiZXhwIjoxNzM5MzE1NzQxfQ.cgJqYe74cprHCRTY9YLF_B-Hfgfp8l8lr6gDrEuqMi4' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"corporateName\": \"Matheus Sousa Testes\",\r\n  \"registerCompany\": \"57126456000155\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com o campo Descrição com caracteres especiais",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function empresa() {\r",
									"    const names = [\"TechNova\", \"Bytewave\", \"Cyberion\", \"InovaTech\", \"Nexabyte\", \"Softtron\", \"Codeverse\", \"Dataflux\", \"Infinitron\", \"LogiCore\", \"Zentek\",\"Neurobyte\", \"Cloudix\", \"Sysnova\", \"Hexabit\", \"AIgorithm\", \"Quantumix\", \"Webtron\", \"Netflux\", \"Cyberflux\", \"Deepcode\", \"Techpulse\", \"Synaptech\", \"Codexis\", \"Nexonix\", \"Algobyte\", \"Infobyte\", \"Datazen\", \"Digiflow\", \"Innovix\", \"Coretron\", \"Zybernet\", \"Neurotech\", \"Nanobyte\", \"Virtunix\", \"Codexel\", \"Optibit\", \"Bitnova\", \"Globotron\", \"Digiware\", \"Skytech\", \"Cybervox\", \"Techspire\", \"Softbit\", \"MetaTech\", \"Synthron\", \"Virtuabyte\", \"Cloudtron\", \"Algonix\", \"Bitzen\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Empresa\", empresa())\r",
									"\r",
									"function tag() {\r",
									"    const tagnames = ['Solutions', 'Tech', 'Digital', 'Systems', 'Software', 'Cloud', 'AI', 'Cyber', 'Data', 'Analytics','Network', 'Security', 'Labs', 'Smart', 'Logic', 'Innovation', 'IT', 'Global', 'Developers', 'Code', 'Techno', 'Automations', 'Cloudware', 'Dynamics', 'Vision', 'Intelligence', 'NextGen', 'Computing', 'Innovators', 'Engineering', 'Performance', 'Softworks', 'Logicware', 'Digitalware', 'Transform', 'Platform', 'Smartware', 'Dataflow', 'Byte', 'Edge', 'Nexus', 'Techworks', 'Bit', 'Virtual', 'SystemsX', 'Infotech', 'Genix', 'Quantum', 'Bitware', 'CloudX'];\r",
									"\r",
									"    const randomTastName = tagnames[Math.floor(Math.random() * tagnames.length)]\r",
									"    return randomTastName\r",
									"}\r",
									"pm.environment.set(\"Tag\", tag())\r",
									"\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"Empresa\") + \" \" + pm.environment.get(\"Tag\"))\r",
									"\r",
									"\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"\r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									"\r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									"\r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									"\r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									"\r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									"\r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"CNPJ\", cnpjGerado);\r",
									"\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function gerarTelefone() {\r",
									"    // Gerando um DDD aleatório entre 11 e 99\r",
									"    const ddd = Math.floor(Math.random() * (99 - 11 + 1)) + 11;\r",
									"\r",
									"    // Gerando o número de telefone com 9 dígitos, começando com 9\r",
									"    const numero = Math.floor(Math.random() * 100000000) + 900000000; // Gera um número aleatório entre 900000000 e 999999999 (começando com '9')\r",
									"\r",
									"    // Concatenando +55, o DDD e o número gerado para formar o telefone\r",
									"    const telefone = `55${ddd}${numero.toString().slice(0, 5)}${numero.toString().slice(5, 9)}`;\r",
									"\r",
									"    return telefone;\r",
									"}\r",
									"\r",
									"// Gerando o número de telefone e armazenando como variável de ambiente\r",
									"const telefoneGerado = gerarTelefone();\r",
									"pm.environment.set(\"telefone\", telefoneGerado);\r",
									"\r",
									"function descricao() {\r",
									"    const names = [\"Testes\", \"Automação\", \"FrontEnd\", \"Backend\",\"Banco de Dados\", \"IA\",\"AWS\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Descricao\", descricao())\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"NomeRua\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"NomeRuas\", lastname())\r",
									"\r",
									"pm.environment.set(\"nomeruaComposto\", \r",
									"    pm.environment.get(\"NomeRua\") + \" \" + pm.environment.get(\"NomeRuas\"))\r",
									"\r",
									"function logradouro() {\r",
									"    const names = [\"Avenida\", \"Rua\", \"Alameda\", \"Travessa\", \"Praça\", \"Rodovia\", \"Estrada\", \"Largo\", \"Viaduto\", \"Marginal\", \"Parque\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Logradouro\", logradouro())\r",
									"\r",
									"pm.environment.set(\"logradouroCompleto\", \r",
									"    pm.environment.get(\"Logradouro\") + \" \" + pm.environment.get(\"nomeruaComposto\"))\r",
									"\r",
									"\r",
									"function gerarNumeroResidencia() {\r",
									"    // Definindo a probabilidade de gerar números com mais de 5 caracteres\r",
									"    const tamanhoNumero = Math.random() < 0.8 ? Math.floor(Math.random() * 5) + 1 : Math.floor(Math.random() * 6) + 5;\r",
									"\r",
									"    // Gerando um número aleatório com o tamanho definido\r",
									"    let numeroResidencia = Math.floor(Math.random() * Math.pow(10, tamanhoNumero)).toString(); // Gera número aleatório com o tamanho desejado\r",
									"\r",
									"    // Se o primeiro caractere for 0, remove-o\r",
									"    if (numeroResidencia[0] === '0') {\r",
									"        numeroResidencia = numeroResidencia.slice(1); // Remove o primeiro caractere\r",
									"    }\r",
									"\r",
									"    // Garantindo que o número tenha no máximo 10 caracteres\r",
									"    if (numeroResidencia.length > 10) {\r",
									"        numeroResidencia = numeroResidencia.slice(0, 10); // Limita a 10 caracteres\r",
									"    }\r",
									"\r",
									"    return numeroResidencia;\r",
									"}\r",
									"\r",
									"// Gerando o número de residência e armazenando como variável de ambiente\r",
									"const numeroResidenciaGerado = gerarNumeroResidencia();\r",
									"pm.environment.set(\"numeroResidencia\", numeroResidenciaGerado);\r",
									"\r",
									"function bairro() {\r",
									"    const names = ['Leblon', 'Ipanema', 'Copacabana', 'Barra da Tijuca', 'Botafogo', 'Lapa', 'Santa Teresa', 'Jardim Botânico', 'Flamengo', 'São Conrado', 'Moema', 'Vila Madalena', 'Pinheiros', 'Jardins', 'Aclimação', 'Brooklin', 'Tatuapé', 'Vila Progredior', 'Vila Nova Conceição', 'Campo Belo','Centro', 'Praia de Belas', 'Moinhos de Vento', 'Petrópolis', 'Tristeza', 'Caminho das Árvores', 'Pituba', 'Stella Maris', 'Parque Atlântico', 'Costa Azul', 'Vila Galvão', 'Santo Amaro', 'Perdizes', 'Aclimação', 'Vila Sônia', 'Cidade Dutra', 'São Bernardo do Campo', 'Vila Mariana', 'Bela Vista', 'Liberdade','Pinheiros', 'Itaim Bibi', 'Santa Cecília', 'Tucuruvi', 'Chácara Santo Antônio', 'Água Fria', 'Vila Olímpia', 'Vila São Francisco', 'Consolação', 'Vila Madalena']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Bairro\", bairro())\r",
									"\r",
									"function cidade() {\r",
									"    const names = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador', 'Curitiba', 'Fortaleza', 'Recife', 'Brasília', 'Manaus', 'Vitória', 'Goiânia', 'Belém', 'Natal', 'São Luís', 'Maceió', 'Campo Grande', 'João Pessoa', 'Aracaju', 'Cuiabá', 'Florianópolis', 'Teresina', 'Palmas', 'Macapá', 'Rio Branco', 'Boa Vista', 'Porto Velho', 'Anápolis', 'Caruaru', 'Londrina','Marabá', 'Araraquara', 'Sorocaba', 'Santos', 'Niterói', 'Mogi das Cruzes', 'Caxias do Sul', 'Barueri', 'Campinas', 'São José', 'Ponta Grossa', 'Jundiaí', 'Uberlândia', 'Diadema', 'Santo André', 'São Bernardo do Campo', 'Itaquaquecetuba', 'Ribeirão Preto', 'Juiz de Fora']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Cidade\", cidade())\r",
									"\r",
									"function abreviacao() {\r",
									"    const names = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"AbreviacaoEstado\", abreviacao())\r",
									"\r",
									"function randomCep() {\r",
									"    let randomCep = '';\r",
									"   \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        randomCep += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCep;\r",
									"}\r",
									"pm.environment.set(\"cep\", randomCep());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomeEmpresa}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"{{fullnameUser}}\",\r\n  \"telephone\": \"{{telefone}}\",\r\n  \"serviceDescription\": \"Tech I@\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{cep}}\",\r\n      \"city\": \"{{Cidade}}\",\r\n      \"state\": \"{{AbreviacaoEstado}}\",\r\n      \"district\": \"{{Bairro}}\",\r\n      \"street\": \"{{logradouroCompleto}}\",\r\n      \"number\": \"{{numeroResidencia}}\",\r\n      \"complement\": \"\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTM0MSwiZXhwIjoxNzM5MzE1NzQxfQ.cgJqYe74cprHCRTY9YLF_B-Hfgfp8l8lr6gDrEuqMi4' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"corporateName\": \"Matheus Sousa Testes\",\r\n  \"registerCompany\": \"57126456000155\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com o campo Logradouro em branco",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function empresa() {\r",
									"    const names = [\"TechNova\", \"Bytewave\", \"Cyberion\", \"InovaTech\", \"Nexabyte\", \"Softtron\", \"Codeverse\", \"Dataflux\", \"Infinitron\", \"LogiCore\", \"Zentek\",\"Neurobyte\", \"Cloudix\", \"Sysnova\", \"Hexabit\", \"AIgorithm\", \"Quantumix\", \"Webtron\", \"Netflux\", \"Cyberflux\", \"Deepcode\", \"Techpulse\", \"Synaptech\", \"Codexis\", \"Nexonix\", \"Algobyte\", \"Infobyte\", \"Datazen\", \"Digiflow\", \"Innovix\", \"Coretron\", \"Zybernet\", \"Neurotech\", \"Nanobyte\", \"Virtunix\", \"Codexel\", \"Optibit\", \"Bitnova\", \"Globotron\", \"Digiware\", \"Skytech\", \"Cybervox\", \"Techspire\", \"Softbit\", \"MetaTech\", \"Synthron\", \"Virtuabyte\", \"Cloudtron\", \"Algonix\", \"Bitzen\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Empresa\", empresa())\r",
									"\r",
									"function tag() {\r",
									"    const tagnames = ['Solutions', 'Tech', 'Digital', 'Systems', 'Software', 'Cloud', 'AI', 'Cyber', 'Data', 'Analytics','Network', 'Security', 'Labs', 'Smart', 'Logic', 'Innovation', 'IT', 'Global', 'Developers', 'Code', 'Techno', 'Automations', 'Cloudware', 'Dynamics', 'Vision', 'Intelligence', 'NextGen', 'Computing', 'Innovators', 'Engineering', 'Performance', 'Softworks', 'Logicware', 'Digitalware', 'Transform', 'Platform', 'Smartware', 'Dataflow', 'Byte', 'Edge', 'Nexus', 'Techworks', 'Bit', 'Virtual', 'SystemsX', 'Infotech', 'Genix', 'Quantum', 'Bitware', 'CloudX'];\r",
									"\r",
									"    const randomTastName = tagnames[Math.floor(Math.random() * tagnames.length)]\r",
									"    return randomTastName\r",
									"}\r",
									"pm.environment.set(\"Tag\", tag())\r",
									"\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"Empresa\") + \" \" + pm.environment.get(\"Tag\"))\r",
									"\r",
									"\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"\r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									"\r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									"\r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									"\r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									"\r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									"\r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"CNPJ\", cnpjGerado);\r",
									"\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function gerarTelefone() {\r",
									"    // Gerando um DDD aleatório entre 11 e 99\r",
									"    const ddd = Math.floor(Math.random() * (99 - 11 + 1)) + 11;\r",
									"\r",
									"    // Gerando o número de telefone com 9 dígitos, começando com 9\r",
									"    const numero = Math.floor(Math.random() * 100000000) + 900000000; // Gera um número aleatório entre 900000000 e 999999999 (começando com '9')\r",
									"\r",
									"    // Concatenando +55, o DDD e o número gerado para formar o telefone\r",
									"    const telefone = `55${ddd}${numero.toString().slice(0, 5)}${numero.toString().slice(5, 9)}`;\r",
									"\r",
									"    return telefone;\r",
									"}\r",
									"\r",
									"// Gerando o número de telefone e armazenando como variável de ambiente\r",
									"const telefoneGerado = gerarTelefone();\r",
									"pm.environment.set(\"telefone\", telefoneGerado);\r",
									"\r",
									"function descricao() {\r",
									"    const names = [\"Testes\", \"Automação\", \"FrontEnd\", \"Backend\",\"Banco de Dados\", \"IA\",\"AWS\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Descricao\", descricao())\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"NomeRua\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"NomeRuas\", lastname())\r",
									"\r",
									"pm.environment.set(\"nomeruaComposto\", \r",
									"    pm.environment.get(\"NomeRua\") + \" \" + pm.environment.get(\"NomeRuas\"))\r",
									"\r",
									"function logradouro() {\r",
									"    const names = [\"Avenida\", \"Rua\", \"Alameda\", \"Travessa\", \"Praça\", \"Rodovia\", \"Estrada\", \"Largo\", \"Viaduto\", \"Marginal\", \"Parque\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Logradouro\", logradouro())\r",
									"\r",
									"pm.environment.set(\"logradouroCompleto\", \r",
									"    pm.environment.get(\"Logradouro\") + \" \" + pm.environment.get(\"nomeruaComposto\"))\r",
									"\r",
									"\r",
									"function gerarNumeroResidencia() {\r",
									"    // Definindo a probabilidade de gerar números com mais de 5 caracteres\r",
									"    const tamanhoNumero = Math.random() < 0.8 ? Math.floor(Math.random() * 5) + 1 : Math.floor(Math.random() * 6) + 5;\r",
									"\r",
									"    // Gerando um número aleatório com o tamanho definido\r",
									"    let numeroResidencia = Math.floor(Math.random() * Math.pow(10, tamanhoNumero)).toString(); // Gera número aleatório com o tamanho desejado\r",
									"\r",
									"    // Se o primeiro caractere for 0, remove-o\r",
									"    if (numeroResidencia[0] === '0') {\r",
									"        numeroResidencia = numeroResidencia.slice(1); // Remove o primeiro caractere\r",
									"    }\r",
									"\r",
									"    // Garantindo que o número tenha no máximo 10 caracteres\r",
									"    if (numeroResidencia.length > 10) {\r",
									"        numeroResidencia = numeroResidencia.slice(0, 10); // Limita a 10 caracteres\r",
									"    }\r",
									"\r",
									"    return numeroResidencia;\r",
									"}\r",
									"\r",
									"// Gerando o número de residência e armazenando como variável de ambiente\r",
									"const numeroResidenciaGerado = gerarNumeroResidencia();\r",
									"pm.environment.set(\"numeroResidencia\", numeroResidenciaGerado);\r",
									"\r",
									"function bairro() {\r",
									"    const names = ['Leblon', 'Ipanema', 'Copacabana', 'Barra da Tijuca', 'Botafogo', 'Lapa', 'Santa Teresa', 'Jardim Botânico', 'Flamengo', 'São Conrado', 'Moema', 'Vila Madalena', 'Pinheiros', 'Jardins', 'Aclimação', 'Brooklin', 'Tatuapé', 'Vila Progredior', 'Vila Nova Conceição', 'Campo Belo','Centro', 'Praia de Belas', 'Moinhos de Vento', 'Petrópolis', 'Tristeza', 'Caminho das Árvores', 'Pituba', 'Stella Maris', 'Parque Atlântico', 'Costa Azul', 'Vila Galvão', 'Santo Amaro', 'Perdizes', 'Aclimação', 'Vila Sônia', 'Cidade Dutra', 'São Bernardo do Campo', 'Vila Mariana', 'Bela Vista', 'Liberdade','Pinheiros', 'Itaim Bibi', 'Santa Cecília', 'Tucuruvi', 'Chácara Santo Antônio', 'Água Fria', 'Vila Olímpia', 'Vila São Francisco', 'Consolação', 'Vila Madalena']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Bairro\", bairro())\r",
									"\r",
									"function cidade() {\r",
									"    const names = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador', 'Curitiba', 'Fortaleza', 'Recife', 'Brasília', 'Manaus', 'Vitória', 'Goiânia', 'Belém', 'Natal', 'São Luís', 'Maceió', 'Campo Grande', 'João Pessoa', 'Aracaju', 'Cuiabá', 'Florianópolis', 'Teresina', 'Palmas', 'Macapá', 'Rio Branco', 'Boa Vista', 'Porto Velho', 'Anápolis', 'Caruaru', 'Londrina','Marabá', 'Araraquara', 'Sorocaba', 'Santos', 'Niterói', 'Mogi das Cruzes', 'Caxias do Sul', 'Barueri', 'Campinas', 'São José', 'Ponta Grossa', 'Jundiaí', 'Uberlândia', 'Diadema', 'Santo André', 'São Bernardo do Campo', 'Itaquaquecetuba', 'Ribeirão Preto', 'Juiz de Fora']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Cidade\", cidade())\r",
									"\r",
									"function abreviacao() {\r",
									"    const names = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"AbreviacaoEstado\", abreviacao())\r",
									"\r",
									"function randomCep() {\r",
									"    let randomCep = '';\r",
									"   \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        randomCep += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCep;\r",
									"}\r",
									"pm.environment.set(\"cep\", randomCep());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Mensagem de erro\",function(){\r",
									"     pm.expect(pm.response.json().error[0]).to.equal(\"O campo Logradouro é obrigatório.\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomeEmpresa}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"{{fullnameUser}}\",\r\n  \"telephone\": \"{{telefone}}\",\r\n  \"serviceDescription\": \"{{Descricao}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{cep}}\",\r\n      \"city\": \"{{Cidade}}\",\r\n      \"state\": \"{{AbreviacaoEstado}}\",\r\n      \"district\": \"{{Bairro}}\",\r\n      \"street\": \"\",\r\n      \"number\": \"{{numeroResidencia}}\",\r\n      \"complement\": \"\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTM0MSwiZXhwIjoxNzM5MzE1NzQxfQ.cgJqYe74cprHCRTY9YLF_B-Hfgfp8l8lr6gDrEuqMi4' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"corporateName\": \"Matheus Sousa Testes\",\r\n  \"registerCompany\": \"57126456000155\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com o campo Logradouro com letras e numero",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function empresa() {\r",
									"    const names = [\"TechNova\", \"Bytewave\", \"Cyberion\", \"InovaTech\", \"Nexabyte\", \"Softtron\", \"Codeverse\", \"Dataflux\", \"Infinitron\", \"LogiCore\", \"Zentek\",\"Neurobyte\", \"Cloudix\", \"Sysnova\", \"Hexabit\", \"AIgorithm\", \"Quantumix\", \"Webtron\", \"Netflux\", \"Cyberflux\", \"Deepcode\", \"Techpulse\", \"Synaptech\", \"Codexis\", \"Nexonix\", \"Algobyte\", \"Infobyte\", \"Datazen\", \"Digiflow\", \"Innovix\", \"Coretron\", \"Zybernet\", \"Neurotech\", \"Nanobyte\", \"Virtunix\", \"Codexel\", \"Optibit\", \"Bitnova\", \"Globotron\", \"Digiware\", \"Skytech\", \"Cybervox\", \"Techspire\", \"Softbit\", \"MetaTech\", \"Synthron\", \"Virtuabyte\", \"Cloudtron\", \"Algonix\", \"Bitzen\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Empresa\", empresa())\r",
									"\r",
									"function tag() {\r",
									"    const tagnames = ['Solutions', 'Tech', 'Digital', 'Systems', 'Software', 'Cloud', 'AI', 'Cyber', 'Data', 'Analytics','Network', 'Security', 'Labs', 'Smart', 'Logic', 'Innovation', 'IT', 'Global', 'Developers', 'Code', 'Techno', 'Automations', 'Cloudware', 'Dynamics', 'Vision', 'Intelligence', 'NextGen', 'Computing', 'Innovators', 'Engineering', 'Performance', 'Softworks', 'Logicware', 'Digitalware', 'Transform', 'Platform', 'Smartware', 'Dataflow', 'Byte', 'Edge', 'Nexus', 'Techworks', 'Bit', 'Virtual', 'SystemsX', 'Infotech', 'Genix', 'Quantum', 'Bitware', 'CloudX'];\r",
									"\r",
									"    const randomTastName = tagnames[Math.floor(Math.random() * tagnames.length)]\r",
									"    return randomTastName\r",
									"}\r",
									"pm.environment.set(\"Tag\", tag())\r",
									"\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"Empresa\") + \" \" + pm.environment.get(\"Tag\"))\r",
									"\r",
									"\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"\r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									"\r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									"\r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									"\r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									"\r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									"\r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"CNPJ\", cnpjGerado);\r",
									"\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function gerarTelefone() {\r",
									"    // Gerando um DDD aleatório entre 11 e 99\r",
									"    const ddd = Math.floor(Math.random() * (99 - 11 + 1)) + 11;\r",
									"\r",
									"    // Gerando o número de telefone com 9 dígitos, começando com 9\r",
									"    const numero = Math.floor(Math.random() * 100000000) + 900000000; // Gera um número aleatório entre 900000000 e 999999999 (começando com '9')\r",
									"\r",
									"    // Concatenando +55, o DDD e o número gerado para formar o telefone\r",
									"    const telefone = `55${ddd}${numero.toString().slice(0, 5)}${numero.toString().slice(5, 9)}`;\r",
									"\r",
									"    return telefone;\r",
									"}\r",
									"\r",
									"// Gerando o número de telefone e armazenando como variável de ambiente\r",
									"const telefoneGerado = gerarTelefone();\r",
									"pm.environment.set(\"telefone\", telefoneGerado);\r",
									"\r",
									"function descricao() {\r",
									"    const names = [\"Testes\", \"Automação\", \"FrontEnd\", \"Backend\",\"Banco de Dados\", \"IA\",\"AWS\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Descricao\", descricao())\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"NomeRua\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"NomeRuas\", lastname())\r",
									"\r",
									"pm.environment.set(\"nomeruaComposto\", \r",
									"    pm.environment.get(\"NomeRua\") + \" \" + pm.environment.get(\"NomeRuas\"))\r",
									"\r",
									"function logradouro() {\r",
									"    const names = [\"Avenida\", \"Rua\", \"Alameda\", \"Travessa\", \"Praça\", \"Rodovia\", \"Estrada\", \"Largo\", \"Viaduto\", \"Marginal\", \"Parque\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Logradouro\", logradouro())\r",
									"\r",
									"pm.environment.set(\"logradouroCompleto\", \r",
									"    pm.environment.get(\"Logradouro\") + \" \" + pm.environment.get(\"nomeruaComposto\"))\r",
									"\r",
									"\r",
									"function gerarNumeroResidencia() {\r",
									"    // Definindo a probabilidade de gerar números com mais de 5 caracteres\r",
									"    const tamanhoNumero = Math.random() < 0.8 ? Math.floor(Math.random() * 5) + 1 : Math.floor(Math.random() * 6) + 5;\r",
									"\r",
									"    // Gerando um número aleatório com o tamanho definido\r",
									"    let numeroResidencia = Math.floor(Math.random() * Math.pow(10, tamanhoNumero)).toString(); // Gera número aleatório com o tamanho desejado\r",
									"\r",
									"    // Se o primeiro caractere for 0, remove-o\r",
									"    if (numeroResidencia[0] === '0') {\r",
									"        numeroResidencia = numeroResidencia.slice(1); // Remove o primeiro caractere\r",
									"    }\r",
									"\r",
									"    // Garantindo que o número tenha no máximo 10 caracteres\r",
									"    if (numeroResidencia.length > 10) {\r",
									"        numeroResidencia = numeroResidencia.slice(0, 10); // Limita a 10 caracteres\r",
									"    }\r",
									"\r",
									"    return numeroResidencia;\r",
									"}\r",
									"\r",
									"// Gerando o número de residência e armazenando como variável de ambiente\r",
									"const numeroResidenciaGerado = gerarNumeroResidencia();\r",
									"pm.environment.set(\"numeroResidencia\", numeroResidenciaGerado);\r",
									"\r",
									"function bairro() {\r",
									"    const names = ['Leblon', 'Ipanema', 'Copacabana', 'Barra da Tijuca', 'Botafogo', 'Lapa', 'Santa Teresa', 'Jardim Botânico', 'Flamengo', 'São Conrado', 'Moema', 'Vila Madalena', 'Pinheiros', 'Jardins', 'Aclimação', 'Brooklin', 'Tatuapé', 'Vila Progredior', 'Vila Nova Conceição', 'Campo Belo','Centro', 'Praia de Belas', 'Moinhos de Vento', 'Petrópolis', 'Tristeza', 'Caminho das Árvores', 'Pituba', 'Stella Maris', 'Parque Atlântico', 'Costa Azul', 'Vila Galvão', 'Santo Amaro', 'Perdizes', 'Aclimação', 'Vila Sônia', 'Cidade Dutra', 'São Bernardo do Campo', 'Vila Mariana', 'Bela Vista', 'Liberdade','Pinheiros', 'Itaim Bibi', 'Santa Cecília', 'Tucuruvi', 'Chácara Santo Antônio', 'Água Fria', 'Vila Olímpia', 'Vila São Francisco', 'Consolação', 'Vila Madalena']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Bairro\", bairro())\r",
									"\r",
									"function cidade() {\r",
									"    const names = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador', 'Curitiba', 'Fortaleza', 'Recife', 'Brasília', 'Manaus', 'Vitória', 'Goiânia', 'Belém', 'Natal', 'São Luís', 'Maceió', 'Campo Grande', 'João Pessoa', 'Aracaju', 'Cuiabá', 'Florianópolis', 'Teresina', 'Palmas', 'Macapá', 'Rio Branco', 'Boa Vista', 'Porto Velho', 'Anápolis', 'Caruaru', 'Londrina','Marabá', 'Araraquara', 'Sorocaba', 'Santos', 'Niterói', 'Mogi das Cruzes', 'Caxias do Sul', 'Barueri', 'Campinas', 'São José', 'Ponta Grossa', 'Jundiaí', 'Uberlândia', 'Diadema', 'Santo André', 'São Bernardo do Campo', 'Itaquaquecetuba', 'Ribeirão Preto', 'Juiz de Fora']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Cidade\", cidade())\r",
									"\r",
									"function abreviacao() {\r",
									"    const names = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"AbreviacaoEstado\", abreviacao())\r",
									"\r",
									"function randomCep() {\r",
									"    let randomCep = '';\r",
									"   \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        randomCep += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCep;\r",
									"}\r",
									"pm.environment.set(\"cep\", randomCep());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 201\", function(){\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Mensagem de sucesso\",function(){\r",
									"    pm.expect(pm.response.json().msg).to.include(\"Registro realizado com sucesso\")\r",
									"})\r",
									"\r",
									"pm.test(\"Status é True\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.status).to.be.true;\r",
									"})\r",
									"\r",
									"pm.test(\"Nome da Empresa é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.corporateName).to.equal(pm.environment.get(\"nomeEmpresa\"))\r",
									"})\r",
									"\r",
									"pm.test(\"CNPJ é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.registerCompany).to.equal(pm.environment.get(\"CNPJ\"))\r",
									"})\r",
									"\r",
									"\r",
									"// Função para validar CNPJ com base nos dígitos verificadores\r",
									"function validarCNPJ(cnpj) {\r",
									"    // Remover qualquer caractere que não seja número\r",
									"    cnpj = cnpj.replace(/\\D/g, '');\r",
									"\r",
									"    // Verifica se o CNPJ tem 14 dígitos\r",
									"    if (cnpj.length !== 14) {\r",
									"        return false;\r",
									"    }\r",
									"\r",
									"    // Cálculo do primeiro dígito verificador\r",
									"    let soma = 0;\r",
									"    let multiplicadoresPrimeiro = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    \r",
									"    for (let i = 0; i < 12; i++) {\r",
									"        soma += parseInt(cnpj[i]) * multiplicadoresPrimeiro[i];\r",
									"    }\r",
									"\r",
									"    let resto = soma % 11;\r",
									"    let primeiroDV = resto < 2 ? 0 : 11 - resto;\r",
									"\r",
									"    // Cálculo do segundo dígito verificador\r",
									"    soma = 0;\r",
									"    let multiplicadoresSegundo = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    \r",
									"    for (let i = 0; i < 13; i++) {\r",
									"        soma += parseInt(cnpj[i]) * multiplicadoresSegundo[i];\r",
									"    }\r",
									"\r",
									"    resto = soma % 11;\r",
									"    let segundoDV = resto < 2 ? 0 : 11 - resto;\r",
									"\r",
									"    // Comparar com os dígitos do CNPJ enviado\r",
									"    return cnpj[12] == primeiroDV && cnpj[13] == segundoDV;\r",
									"}\r",
									"\r",
									"// Obter o CNPJ da resposta da API (supondo que está no campo \"cnpj\")\r",
									"let cnpjRecebido = pm.response.json().newCompany.registerCompany; \r",
									"\r",
									"// Executar a validação\r",
									"if (!validarCNPJ(cnpjRecebido)) {\r",
									"    pm.test(\"O CNPJ retornado é inválido!\", function () {\r",
									"        pm.expect(false).to.be.true;\r",
									"    });\r",
									"} else {\r",
									"    pm.test(\"O CNPJ retornado é válido!\", function () {\r",
									"        pm.expect(true).to.be.true;\r",
									"    });\r",
									"}\r",
									"\r",
									"pm.test(\"Nome da Rua é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.address[0].street).to.equal(\"Rua José 15\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomeEmpresa}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"{{fullnameUser}}\",\r\n  \"telephone\": \"{{telefone}}\",\r\n  \"serviceDescription\": \"{{Descricao}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{cep}}\",\r\n      \"city\": \"{{Cidade}}\",\r\n      \"state\": \"{{AbreviacaoEstado}}\",\r\n      \"district\": \"{{Bairro}}\",\r\n      \"street\": \"Rua José 15\",\r\n      \"number\": \"{{numeroResidencia}}\",\r\n      \"complement\": \"\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTM0MSwiZXhwIjoxNzM5MzE1NzQxfQ.cgJqYe74cprHCRTY9YLF_B-Hfgfp8l8lr6gDrEuqMi4' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"corporateName\": \"Matheus Sousa Testes\",\r\n  \"registerCompany\": \"57126456000155\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com o campo Logradouro somente com numeros",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function empresa() {\r",
									"    const names = [\"TechNova\", \"Bytewave\", \"Cyberion\", \"InovaTech\", \"Nexabyte\", \"Softtron\", \"Codeverse\", \"Dataflux\", \"Infinitron\", \"LogiCore\", \"Zentek\",\"Neurobyte\", \"Cloudix\", \"Sysnova\", \"Hexabit\", \"AIgorithm\", \"Quantumix\", \"Webtron\", \"Netflux\", \"Cyberflux\", \"Deepcode\", \"Techpulse\", \"Synaptech\", \"Codexis\", \"Nexonix\", \"Algobyte\", \"Infobyte\", \"Datazen\", \"Digiflow\", \"Innovix\", \"Coretron\", \"Zybernet\", \"Neurotech\", \"Nanobyte\", \"Virtunix\", \"Codexel\", \"Optibit\", \"Bitnova\", \"Globotron\", \"Digiware\", \"Skytech\", \"Cybervox\", \"Techspire\", \"Softbit\", \"MetaTech\", \"Synthron\", \"Virtuabyte\", \"Cloudtron\", \"Algonix\", \"Bitzen\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Empresa\", empresa())\r",
									"\r",
									"function tag() {\r",
									"    const tagnames = ['Solutions', 'Tech', 'Digital', 'Systems', 'Software', 'Cloud', 'AI', 'Cyber', 'Data', 'Analytics','Network', 'Security', 'Labs', 'Smart', 'Logic', 'Innovation', 'IT', 'Global', 'Developers', 'Code', 'Techno', 'Automations', 'Cloudware', 'Dynamics', 'Vision', 'Intelligence', 'NextGen', 'Computing', 'Innovators', 'Engineering', 'Performance', 'Softworks', 'Logicware', 'Digitalware', 'Transform', 'Platform', 'Smartware', 'Dataflow', 'Byte', 'Edge', 'Nexus', 'Techworks', 'Bit', 'Virtual', 'SystemsX', 'Infotech', 'Genix', 'Quantum', 'Bitware', 'CloudX'];\r",
									"\r",
									"    const randomTastName = tagnames[Math.floor(Math.random() * tagnames.length)]\r",
									"    return randomTastName\r",
									"}\r",
									"pm.environment.set(\"Tag\", tag())\r",
									"\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"Empresa\") + \" \" + pm.environment.get(\"Tag\"))\r",
									"\r",
									"\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"\r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									"\r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									"\r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									"\r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									"\r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									"\r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"CNPJ\", cnpjGerado);\r",
									"\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function gerarTelefone() {\r",
									"    // Gerando um DDD aleatório entre 11 e 99\r",
									"    const ddd = Math.floor(Math.random() * (99 - 11 + 1)) + 11;\r",
									"\r",
									"    // Gerando o número de telefone com 9 dígitos, começando com 9\r",
									"    const numero = Math.floor(Math.random() * 100000000) + 900000000; // Gera um número aleatório entre 900000000 e 999999999 (começando com '9')\r",
									"\r",
									"    // Concatenando +55, o DDD e o número gerado para formar o telefone\r",
									"    const telefone = `55${ddd}${numero.toString().slice(0, 5)}${numero.toString().slice(5, 9)}`;\r",
									"\r",
									"    return telefone;\r",
									"}\r",
									"\r",
									"// Gerando o número de telefone e armazenando como variável de ambiente\r",
									"const telefoneGerado = gerarTelefone();\r",
									"pm.environment.set(\"telefone\", telefoneGerado);\r",
									"\r",
									"function descricao() {\r",
									"    const names = [\"Testes\", \"Automação\", \"FrontEnd\", \"Backend\",\"Banco de Dados\", \"IA\",\"AWS\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Descricao\", descricao())\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"NomeRua\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"NomeRuas\", lastname())\r",
									"\r",
									"pm.environment.set(\"nomeruaComposto\", \r",
									"    pm.environment.get(\"NomeRua\") + \" \" + pm.environment.get(\"NomeRuas\"))\r",
									"\r",
									"function logradouro() {\r",
									"    const names = [\"Avenida\", \"Rua\", \"Alameda\", \"Travessa\", \"Praça\", \"Rodovia\", \"Estrada\", \"Largo\", \"Viaduto\", \"Marginal\", \"Parque\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Logradouro\", logradouro())\r",
									"\r",
									"pm.environment.set(\"logradouroCompleto\", \r",
									"    pm.environment.get(\"Logradouro\") + \" \" + pm.environment.get(\"nomeruaComposto\"))\r",
									"\r",
									"\r",
									"function gerarNumeroResidencia() {\r",
									"    // Definindo a probabilidade de gerar números com mais de 5 caracteres\r",
									"    const tamanhoNumero = Math.random() < 0.8 ? Math.floor(Math.random() * 5) + 1 : Math.floor(Math.random() * 6) + 5;\r",
									"\r",
									"    // Gerando um número aleatório com o tamanho definido\r",
									"    let numeroResidencia = Math.floor(Math.random() * Math.pow(10, tamanhoNumero)).toString(); // Gera número aleatório com o tamanho desejado\r",
									"\r",
									"    // Se o primeiro caractere for 0, remove-o\r",
									"    if (numeroResidencia[0] === '0') {\r",
									"        numeroResidencia = numeroResidencia.slice(1); // Remove o primeiro caractere\r",
									"    }\r",
									"\r",
									"    // Garantindo que o número tenha no máximo 10 caracteres\r",
									"    if (numeroResidencia.length > 10) {\r",
									"        numeroResidencia = numeroResidencia.slice(0, 10); // Limita a 10 caracteres\r",
									"    }\r",
									"\r",
									"    return numeroResidencia;\r",
									"}\r",
									"\r",
									"// Gerando o número de residência e armazenando como variável de ambiente\r",
									"const numeroResidenciaGerado = gerarNumeroResidencia();\r",
									"pm.environment.set(\"numeroResidencia\", numeroResidenciaGerado);\r",
									"\r",
									"function bairro() {\r",
									"    const names = ['Leblon', 'Ipanema', 'Copacabana', 'Barra da Tijuca', 'Botafogo', 'Lapa', 'Santa Teresa', 'Jardim Botânico', 'Flamengo', 'São Conrado', 'Moema', 'Vila Madalena', 'Pinheiros', 'Jardins', 'Aclimação', 'Brooklin', 'Tatuapé', 'Vila Progredior', 'Vila Nova Conceição', 'Campo Belo','Centro', 'Praia de Belas', 'Moinhos de Vento', 'Petrópolis', 'Tristeza', 'Caminho das Árvores', 'Pituba', 'Stella Maris', 'Parque Atlântico', 'Costa Azul', 'Vila Galvão', 'Santo Amaro', 'Perdizes', 'Aclimação', 'Vila Sônia', 'Cidade Dutra', 'São Bernardo do Campo', 'Vila Mariana', 'Bela Vista', 'Liberdade','Pinheiros', 'Itaim Bibi', 'Santa Cecília', 'Tucuruvi', 'Chácara Santo Antônio', 'Água Fria', 'Vila Olímpia', 'Vila São Francisco', 'Consolação', 'Vila Madalena']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Bairro\", bairro())\r",
									"\r",
									"function cidade() {\r",
									"    const names = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador', 'Curitiba', 'Fortaleza', 'Recife', 'Brasília', 'Manaus', 'Vitória', 'Goiânia', 'Belém', 'Natal', 'São Luís', 'Maceió', 'Campo Grande', 'João Pessoa', 'Aracaju', 'Cuiabá', 'Florianópolis', 'Teresina', 'Palmas', 'Macapá', 'Rio Branco', 'Boa Vista', 'Porto Velho', 'Anápolis', 'Caruaru', 'Londrina','Marabá', 'Araraquara', 'Sorocaba', 'Santos', 'Niterói', 'Mogi das Cruzes', 'Caxias do Sul', 'Barueri', 'Campinas', 'São José', 'Ponta Grossa', 'Jundiaí', 'Uberlândia', 'Diadema', 'Santo André', 'São Bernardo do Campo', 'Itaquaquecetuba', 'Ribeirão Preto', 'Juiz de Fora']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Cidade\", cidade())\r",
									"\r",
									"function abreviacao() {\r",
									"    const names = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"AbreviacaoEstado\", abreviacao())\r",
									"\r",
									"function randomCep() {\r",
									"    let randomCep = '';\r",
									"   \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        randomCep += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCep;\r",
									"}\r",
									"pm.environment.set(\"cep\", randomCep());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 201\", function(){\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Mensagem de sucesso\",function(){\r",
									"    pm.expect(pm.response.json().msg).to.include(\"Registro realizado com sucesso\")\r",
									"})\r",
									"\r",
									"pm.test(\"Status é True\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.status).to.be.true;\r",
									"})\r",
									"\r",
									"pm.test(\"Nome da Empresa é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.corporateName).to.equal(pm.environment.get(\"nomeEmpresa\"))\r",
									"})\r",
									"\r",
									"pm.test(\"CNPJ é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.registerCompany).to.equal(pm.environment.get(\"CNPJ\"))\r",
									"})\r",
									"\r",
									"\r",
									"// Função para validar CNPJ com base nos dígitos verificadores\r",
									"function validarCNPJ(cnpj) {\r",
									"    // Remover qualquer caractere que não seja número\r",
									"    cnpj = cnpj.replace(/\\D/g, '');\r",
									"\r",
									"    // Verifica se o CNPJ tem 14 dígitos\r",
									"    if (cnpj.length !== 14) {\r",
									"        return false;\r",
									"    }\r",
									"\r",
									"    // Cálculo do primeiro dígito verificador\r",
									"    let soma = 0;\r",
									"    let multiplicadoresPrimeiro = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    \r",
									"    for (let i = 0; i < 12; i++) {\r",
									"        soma += parseInt(cnpj[i]) * multiplicadoresPrimeiro[i];\r",
									"    }\r",
									"\r",
									"    let resto = soma % 11;\r",
									"    let primeiroDV = resto < 2 ? 0 : 11 - resto;\r",
									"\r",
									"    // Cálculo do segundo dígito verificador\r",
									"    soma = 0;\r",
									"    let multiplicadoresSegundo = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    \r",
									"    for (let i = 0; i < 13; i++) {\r",
									"        soma += parseInt(cnpj[i]) * multiplicadoresSegundo[i];\r",
									"    }\r",
									"\r",
									"    resto = soma % 11;\r",
									"    let segundoDV = resto < 2 ? 0 : 11 - resto;\r",
									"\r",
									"    // Comparar com os dígitos do CNPJ enviado\r",
									"    return cnpj[12] == primeiroDV && cnpj[13] == segundoDV;\r",
									"}\r",
									"\r",
									"// Obter o CNPJ da resposta da API (supondo que está no campo \"cnpj\")\r",
									"let cnpjRecebido = pm.response.json().newCompany.registerCompany; \r",
									"\r",
									"// Executar a validação\r",
									"if (!validarCNPJ(cnpjRecebido)) {\r",
									"    pm.test(\"O CNPJ retornado é inválido!\", function () {\r",
									"        pm.expect(false).to.be.true;\r",
									"    });\r",
									"} else {\r",
									"    pm.test(\"O CNPJ retornado é válido!\", function () {\r",
									"        pm.expect(true).to.be.true;\r",
									"    });\r",
									"}\r",
									"\r",
									"pm.test(\"Nome da Rua é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.address[0].street).to.equal(\"1500\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomeEmpresa}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"{{fullnameUser}}\",\r\n  \"telephone\": \"{{telefone}}\",\r\n  \"serviceDescription\": \"{{Descricao}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{cep}}\",\r\n      \"city\": \"{{Cidade}}\",\r\n      \"state\": \"{{AbreviacaoEstado}}\",\r\n      \"district\": \"{{Bairro}}\",\r\n      \"street\": \"1500\",\r\n      \"number\": \"{{numeroResidencia}}\",\r\n      \"complement\": \"\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTM0MSwiZXhwIjoxNzM5MzE1NzQxfQ.cgJqYe74cprHCRTY9YLF_B-Hfgfp8l8lr6gDrEuqMi4' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"corporateName\": \"Matheus Sousa Testes\",\r\n  \"registerCompany\": \"57126456000155\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com o campo Logradouro com mais de 50 caracteres",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function empresa() {\r",
									"    const names = [\"TechNova\", \"Bytewave\", \"Cyberion\", \"InovaTech\", \"Nexabyte\", \"Softtron\", \"Codeverse\", \"Dataflux\", \"Infinitron\", \"LogiCore\", \"Zentek\",\"Neurobyte\", \"Cloudix\", \"Sysnova\", \"Hexabit\", \"AIgorithm\", \"Quantumix\", \"Webtron\", \"Netflux\", \"Cyberflux\", \"Deepcode\", \"Techpulse\", \"Synaptech\", \"Codexis\", \"Nexonix\", \"Algobyte\", \"Infobyte\", \"Datazen\", \"Digiflow\", \"Innovix\", \"Coretron\", \"Zybernet\", \"Neurotech\", \"Nanobyte\", \"Virtunix\", \"Codexel\", \"Optibit\", \"Bitnova\", \"Globotron\", \"Digiware\", \"Skytech\", \"Cybervox\", \"Techspire\", \"Softbit\", \"MetaTech\", \"Synthron\", \"Virtuabyte\", \"Cloudtron\", \"Algonix\", \"Bitzen\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Empresa\", empresa())\r",
									"\r",
									"function tag() {\r",
									"    const tagnames = ['Solutions', 'Tech', 'Digital', 'Systems', 'Software', 'Cloud', 'AI', 'Cyber', 'Data', 'Analytics','Network', 'Security', 'Labs', 'Smart', 'Logic', 'Innovation', 'IT', 'Global', 'Developers', 'Code', 'Techno', 'Automations', 'Cloudware', 'Dynamics', 'Vision', 'Intelligence', 'NextGen', 'Computing', 'Innovators', 'Engineering', 'Performance', 'Softworks', 'Logicware', 'Digitalware', 'Transform', 'Platform', 'Smartware', 'Dataflow', 'Byte', 'Edge', 'Nexus', 'Techworks', 'Bit', 'Virtual', 'SystemsX', 'Infotech', 'Genix', 'Quantum', 'Bitware', 'CloudX'];\r",
									"\r",
									"    const randomTastName = tagnames[Math.floor(Math.random() * tagnames.length)]\r",
									"    return randomTastName\r",
									"}\r",
									"pm.environment.set(\"Tag\", tag())\r",
									"\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"Empresa\") + \" \" + pm.environment.get(\"Tag\"))\r",
									"\r",
									"\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"\r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									"\r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									"\r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									"\r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									"\r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									"\r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"CNPJ\", cnpjGerado);\r",
									"\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function gerarTelefone() {\r",
									"    // Gerando um DDD aleatório entre 11 e 99\r",
									"    const ddd = Math.floor(Math.random() * (99 - 11 + 1)) + 11;\r",
									"\r",
									"    // Gerando o número de telefone com 9 dígitos, começando com 9\r",
									"    const numero = Math.floor(Math.random() * 100000000) + 900000000; // Gera um número aleatório entre 900000000 e 999999999 (começando com '9')\r",
									"\r",
									"    // Concatenando +55, o DDD e o número gerado para formar o telefone\r",
									"    const telefone = `55${ddd}${numero.toString().slice(0, 5)}${numero.toString().slice(5, 9)}`;\r",
									"\r",
									"    return telefone;\r",
									"}\r",
									"\r",
									"// Gerando o número de telefone e armazenando como variável de ambiente\r",
									"const telefoneGerado = gerarTelefone();\r",
									"pm.environment.set(\"telefone\", telefoneGerado);\r",
									"\r",
									"function descricao() {\r",
									"    const names = [\"Testes\", \"Automação\", \"FrontEnd\", \"Backend\",\"Banco de Dados\", \"IA\",\"AWS\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Descricao\", descricao())\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"NomeRua\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"NomeRuas\", lastname())\r",
									"\r",
									"pm.environment.set(\"nomeruaComposto\", \r",
									"    pm.environment.get(\"NomeRua\") + \" \" + pm.environment.get(\"NomeRuas\"))\r",
									"\r",
									"function logradouro() {\r",
									"    const names = [\"Avenida\", \"Rua\", \"Alameda\", \"Travessa\", \"Praça\", \"Rodovia\", \"Estrada\", \"Largo\", \"Viaduto\", \"Marginal\", \"Parque\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Logradouro\", logradouro())\r",
									"\r",
									"pm.environment.set(\"logradouroCompleto\", \r",
									"    pm.environment.get(\"Logradouro\") + \" \" + pm.environment.get(\"nomeruaComposto\"))\r",
									"\r",
									"\r",
									"function gerarNumeroResidencia() {\r",
									"    // Definindo a probabilidade de gerar números com mais de 5 caracteres\r",
									"    const tamanhoNumero = Math.random() < 0.8 ? Math.floor(Math.random() * 5) + 1 : Math.floor(Math.random() * 6) + 5;\r",
									"\r",
									"    // Gerando um número aleatório com o tamanho definido\r",
									"    let numeroResidencia = Math.floor(Math.random() * Math.pow(10, tamanhoNumero)).toString(); // Gera número aleatório com o tamanho desejado\r",
									"\r",
									"    // Se o primeiro caractere for 0, remove-o\r",
									"    if (numeroResidencia[0] === '0') {\r",
									"        numeroResidencia = numeroResidencia.slice(1); // Remove o primeiro caractere\r",
									"    }\r",
									"\r",
									"    // Garantindo que o número tenha no máximo 10 caracteres\r",
									"    if (numeroResidencia.length > 10) {\r",
									"        numeroResidencia = numeroResidencia.slice(0, 10); // Limita a 10 caracteres\r",
									"    }\r",
									"\r",
									"    return numeroResidencia;\r",
									"}\r",
									"\r",
									"// Gerando o número de residência e armazenando como variável de ambiente\r",
									"const numeroResidenciaGerado = gerarNumeroResidencia();\r",
									"pm.environment.set(\"numeroResidencia\", numeroResidenciaGerado);\r",
									"\r",
									"function bairro() {\r",
									"    const names = ['Leblon', 'Ipanema', 'Copacabana', 'Barra da Tijuca', 'Botafogo', 'Lapa', 'Santa Teresa', 'Jardim Botânico', 'Flamengo', 'São Conrado', 'Moema', 'Vila Madalena', 'Pinheiros', 'Jardins', 'Aclimação', 'Brooklin', 'Tatuapé', 'Vila Progredior', 'Vila Nova Conceição', 'Campo Belo','Centro', 'Praia de Belas', 'Moinhos de Vento', 'Petrópolis', 'Tristeza', 'Caminho das Árvores', 'Pituba', 'Stella Maris', 'Parque Atlântico', 'Costa Azul', 'Vila Galvão', 'Santo Amaro', 'Perdizes', 'Aclimação', 'Vila Sônia', 'Cidade Dutra', 'São Bernardo do Campo', 'Vila Mariana', 'Bela Vista', 'Liberdade','Pinheiros', 'Itaim Bibi', 'Santa Cecília', 'Tucuruvi', 'Chácara Santo Antônio', 'Água Fria', 'Vila Olímpia', 'Vila São Francisco', 'Consolação', 'Vila Madalena']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Bairro\", bairro())\r",
									"\r",
									"function cidade() {\r",
									"    const names = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador', 'Curitiba', 'Fortaleza', 'Recife', 'Brasília', 'Manaus', 'Vitória', 'Goiânia', 'Belém', 'Natal', 'São Luís', 'Maceió', 'Campo Grande', 'João Pessoa', 'Aracaju', 'Cuiabá', 'Florianópolis', 'Teresina', 'Palmas', 'Macapá', 'Rio Branco', 'Boa Vista', 'Porto Velho', 'Anápolis', 'Caruaru', 'Londrina','Marabá', 'Araraquara', 'Sorocaba', 'Santos', 'Niterói', 'Mogi das Cruzes', 'Caxias do Sul', 'Barueri', 'Campinas', 'São José', 'Ponta Grossa', 'Jundiaí', 'Uberlândia', 'Diadema', 'Santo André', 'São Bernardo do Campo', 'Itaquaquecetuba', 'Ribeirão Preto', 'Juiz de Fora']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Cidade\", cidade())\r",
									"\r",
									"function abreviacao() {\r",
									"    const names = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"AbreviacaoEstado\", abreviacao())\r",
									"\r",
									"function randomCep() {\r",
									"    let randomCep = '';\r",
									"   \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        randomCep += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCep;\r",
									"}\r",
									"pm.environment.set(\"cep\", randomCep());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomeEmpresa}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"{{fullnameUser}}\",\r\n  \"telephone\": \"{{telefone}}\",\r\n  \"serviceDescription\": \"{{Descricao}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{cep}}\",\r\n      \"city\": \"{{Cidade}}\",\r\n      \"state\": \"{{AbreviacaoEstado}}\",\r\n      \"district\": \"{{Bairro}}\",\r\n      \"street\": \"Rua para testar que nao e permitido ter mais do que cinquenta caracteres\",\r\n      \"number\": \"{{numeroResidencia}}\",\r\n      \"complement\": \"\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTM0MSwiZXhwIjoxNzM5MzE1NzQxfQ.cgJqYe74cprHCRTY9YLF_B-Hfgfp8l8lr6gDrEuqMi4' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"corporateName\": \"Matheus Sousa Testes\",\r\n  \"registerCompany\": \"57126456000155\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com o campo Logradouro com caracteres especial invalido",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function empresa() {\r",
									"    const names = [\"TechNova\", \"Bytewave\", \"Cyberion\", \"InovaTech\", \"Nexabyte\", \"Softtron\", \"Codeverse\", \"Dataflux\", \"Infinitron\", \"LogiCore\", \"Zentek\",\"Neurobyte\", \"Cloudix\", \"Sysnova\", \"Hexabit\", \"AIgorithm\", \"Quantumix\", \"Webtron\", \"Netflux\", \"Cyberflux\", \"Deepcode\", \"Techpulse\", \"Synaptech\", \"Codexis\", \"Nexonix\", \"Algobyte\", \"Infobyte\", \"Datazen\", \"Digiflow\", \"Innovix\", \"Coretron\", \"Zybernet\", \"Neurotech\", \"Nanobyte\", \"Virtunix\", \"Codexel\", \"Optibit\", \"Bitnova\", \"Globotron\", \"Digiware\", \"Skytech\", \"Cybervox\", \"Techspire\", \"Softbit\", \"MetaTech\", \"Synthron\", \"Virtuabyte\", \"Cloudtron\", \"Algonix\", \"Bitzen\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Empresa\", empresa())\r",
									"\r",
									"function tag() {\r",
									"    const tagnames = ['Solutions', 'Tech', 'Digital', 'Systems', 'Software', 'Cloud', 'AI', 'Cyber', 'Data', 'Analytics','Network', 'Security', 'Labs', 'Smart', 'Logic', 'Innovation', 'IT', 'Global', 'Developers', 'Code', 'Techno', 'Automations', 'Cloudware', 'Dynamics', 'Vision', 'Intelligence', 'NextGen', 'Computing', 'Innovators', 'Engineering', 'Performance', 'Softworks', 'Logicware', 'Digitalware', 'Transform', 'Platform', 'Smartware', 'Dataflow', 'Byte', 'Edge', 'Nexus', 'Techworks', 'Bit', 'Virtual', 'SystemsX', 'Infotech', 'Genix', 'Quantum', 'Bitware', 'CloudX'];\r",
									"\r",
									"    const randomTastName = tagnames[Math.floor(Math.random() * tagnames.length)]\r",
									"    return randomTastName\r",
									"}\r",
									"pm.environment.set(\"Tag\", tag())\r",
									"\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"Empresa\") + \" \" + pm.environment.get(\"Tag\"))\r",
									"\r",
									"\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"\r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									"\r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									"\r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									"\r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									"\r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									"\r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"CNPJ\", cnpjGerado);\r",
									"\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function gerarTelefone() {\r",
									"    // Gerando um DDD aleatório entre 11 e 99\r",
									"    const ddd = Math.floor(Math.random() * (99 - 11 + 1)) + 11;\r",
									"\r",
									"    // Gerando o número de telefone com 9 dígitos, começando com 9\r",
									"    const numero = Math.floor(Math.random() * 100000000) + 900000000; // Gera um número aleatório entre 900000000 e 999999999 (começando com '9')\r",
									"\r",
									"    // Concatenando +55, o DDD e o número gerado para formar o telefone\r",
									"    const telefone = `55${ddd}${numero.toString().slice(0, 5)}${numero.toString().slice(5, 9)}`;\r",
									"\r",
									"    return telefone;\r",
									"}\r",
									"\r",
									"// Gerando o número de telefone e armazenando como variável de ambiente\r",
									"const telefoneGerado = gerarTelefone();\r",
									"pm.environment.set(\"telefone\", telefoneGerado);\r",
									"\r",
									"function descricao() {\r",
									"    const names = [\"Testes\", \"Automação\", \"FrontEnd\", \"Backend\",\"Banco de Dados\", \"IA\",\"AWS\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Descricao\", descricao())\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"NomeRua\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"NomeRuas\", lastname())\r",
									"\r",
									"pm.environment.set(\"nomeruaComposto\", \r",
									"    pm.environment.get(\"NomeRua\") + \" \" + pm.environment.get(\"NomeRuas\"))\r",
									"\r",
									"function logradouro() {\r",
									"    const names = [\"Avenida\", \"Rua\", \"Alameda\", \"Travessa\", \"Praça\", \"Rodovia\", \"Estrada\", \"Largo\", \"Viaduto\", \"Marginal\", \"Parque\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Logradouro\", logradouro())\r",
									"\r",
									"pm.environment.set(\"logradouroCompleto\", \r",
									"    pm.environment.get(\"Logradouro\") + \" \" + pm.environment.get(\"nomeruaComposto\"))\r",
									"\r",
									"\r",
									"function gerarNumeroResidencia() {\r",
									"    // Definindo a probabilidade de gerar números com mais de 5 caracteres\r",
									"    const tamanhoNumero = Math.random() < 0.8 ? Math.floor(Math.random() * 5) + 1 : Math.floor(Math.random() * 6) + 5;\r",
									"\r",
									"    // Gerando um número aleatório com o tamanho definido\r",
									"    let numeroResidencia = Math.floor(Math.random() * Math.pow(10, tamanhoNumero)).toString(); // Gera número aleatório com o tamanho desejado\r",
									"\r",
									"    // Se o primeiro caractere for 0, remove-o\r",
									"    if (numeroResidencia[0] === '0') {\r",
									"        numeroResidencia = numeroResidencia.slice(1); // Remove o primeiro caractere\r",
									"    }\r",
									"\r",
									"    // Garantindo que o número tenha no máximo 10 caracteres\r",
									"    if (numeroResidencia.length > 10) {\r",
									"        numeroResidencia = numeroResidencia.slice(0, 10); // Limita a 10 caracteres\r",
									"    }\r",
									"\r",
									"    return numeroResidencia;\r",
									"}\r",
									"\r",
									"// Gerando o número de residência e armazenando como variável de ambiente\r",
									"const numeroResidenciaGerado = gerarNumeroResidencia();\r",
									"pm.environment.set(\"numeroResidencia\", numeroResidenciaGerado);\r",
									"\r",
									"function bairro() {\r",
									"    const names = ['Leblon', 'Ipanema', 'Copacabana', 'Barra da Tijuca', 'Botafogo', 'Lapa', 'Santa Teresa', 'Jardim Botânico', 'Flamengo', 'São Conrado', 'Moema', 'Vila Madalena', 'Pinheiros', 'Jardins', 'Aclimação', 'Brooklin', 'Tatuapé', 'Vila Progredior', 'Vila Nova Conceição', 'Campo Belo','Centro', 'Praia de Belas', 'Moinhos de Vento', 'Petrópolis', 'Tristeza', 'Caminho das Árvores', 'Pituba', 'Stella Maris', 'Parque Atlântico', 'Costa Azul', 'Vila Galvão', 'Santo Amaro', 'Perdizes', 'Aclimação', 'Vila Sônia', 'Cidade Dutra', 'São Bernardo do Campo', 'Vila Mariana', 'Bela Vista', 'Liberdade','Pinheiros', 'Itaim Bibi', 'Santa Cecília', 'Tucuruvi', 'Chácara Santo Antônio', 'Água Fria', 'Vila Olímpia', 'Vila São Francisco', 'Consolação', 'Vila Madalena']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Bairro\", bairro())\r",
									"\r",
									"function cidade() {\r",
									"    const names = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador', 'Curitiba', 'Fortaleza', 'Recife', 'Brasília', 'Manaus', 'Vitória', 'Goiânia', 'Belém', 'Natal', 'São Luís', 'Maceió', 'Campo Grande', 'João Pessoa', 'Aracaju', 'Cuiabá', 'Florianópolis', 'Teresina', 'Palmas', 'Macapá', 'Rio Branco', 'Boa Vista', 'Porto Velho', 'Anápolis', 'Caruaru', 'Londrina','Marabá', 'Araraquara', 'Sorocaba', 'Santos', 'Niterói', 'Mogi das Cruzes', 'Caxias do Sul', 'Barueri', 'Campinas', 'São José', 'Ponta Grossa', 'Jundiaí', 'Uberlândia', 'Diadema', 'Santo André', 'São Bernardo do Campo', 'Itaquaquecetuba', 'Ribeirão Preto', 'Juiz de Fora']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Cidade\", cidade())\r",
									"\r",
									"function abreviacao() {\r",
									"    const names = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"AbreviacaoEstado\", abreviacao())\r",
									"\r",
									"function randomCep() {\r",
									"    let randomCep = '';\r",
									"   \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        randomCep += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCep;\r",
									"}\r",
									"pm.environment.set(\"cep\", randomCep());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Mensagem de erro\",function(){\r",
									"    pm.expect(pm.response.json().error[0]).to.equal(\"O campo 'logradouro' só pode conter letras, números e os caracteres especiais 'ª', 'º', '‘' e '-'\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomeEmpresa}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"{{fullnameUser}}\",\r\n  \"telephone\": \"{{telefone}}\",\r\n  \"serviceDescription\": \"{{Descricao}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{cep}}\",\r\n      \"city\": \"{{Cidade}}\",\r\n      \"state\": \"{{AbreviacaoEstado}}\",\r\n      \"district\": \"{{Bairro}}\",\r\n      \"street\": \"Rua Joao & Maria\",\r\n      \"number\": \"{{numeroResidencia}}\",\r\n      \"complement\": \"\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTM0MSwiZXhwIjoxNzM5MzE1NzQxfQ.cgJqYe74cprHCRTY9YLF_B-Hfgfp8l8lr6gDrEuqMi4' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"corporateName\": \"Matheus Sousa Testes\",\r\n  \"registerCompany\": \"57126456000155\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com o campo Logradouro com caracteres especial 'º'",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function empresa() {\r",
									"    const names = [\"TechNova\", \"Bytewave\", \"Cyberion\", \"InovaTech\", \"Nexabyte\", \"Softtron\", \"Codeverse\", \"Dataflux\", \"Infinitron\", \"LogiCore\", \"Zentek\",\"Neurobyte\", \"Cloudix\", \"Sysnova\", \"Hexabit\", \"AIgorithm\", \"Quantumix\", \"Webtron\", \"Netflux\", \"Cyberflux\", \"Deepcode\", \"Techpulse\", \"Synaptech\", \"Codexis\", \"Nexonix\", \"Algobyte\", \"Infobyte\", \"Datazen\", \"Digiflow\", \"Innovix\", \"Coretron\", \"Zybernet\", \"Neurotech\", \"Nanobyte\", \"Virtunix\", \"Codexel\", \"Optibit\", \"Bitnova\", \"Globotron\", \"Digiware\", \"Skytech\", \"Cybervox\", \"Techspire\", \"Softbit\", \"MetaTech\", \"Synthron\", \"Virtuabyte\", \"Cloudtron\", \"Algonix\", \"Bitzen\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Empresa\", empresa())\r",
									"\r",
									"function tag() {\r",
									"    const tagnames = ['Solutions', 'Tech', 'Digital', 'Systems', 'Software', 'Cloud', 'AI', 'Cyber', 'Data', 'Analytics','Network', 'Security', 'Labs', 'Smart', 'Logic', 'Innovation', 'IT', 'Global', 'Developers', 'Code', 'Techno', 'Automations', 'Cloudware', 'Dynamics', 'Vision', 'Intelligence', 'NextGen', 'Computing', 'Innovators', 'Engineering', 'Performance', 'Softworks', 'Logicware', 'Digitalware', 'Transform', 'Platform', 'Smartware', 'Dataflow', 'Byte', 'Edge', 'Nexus', 'Techworks', 'Bit', 'Virtual', 'SystemsX', 'Infotech', 'Genix', 'Quantum', 'Bitware', 'CloudX'];\r",
									"\r",
									"    const randomTastName = tagnames[Math.floor(Math.random() * tagnames.length)]\r",
									"    return randomTastName\r",
									"}\r",
									"pm.environment.set(\"Tag\", tag())\r",
									"\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"Empresa\") + \" \" + pm.environment.get(\"Tag\"))\r",
									"\r",
									"\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"\r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									"\r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									"\r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									"\r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									"\r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									"\r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"CNPJ\", cnpjGerado);\r",
									"\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function gerarTelefone() {\r",
									"    // Gerando um DDD aleatório entre 11 e 99\r",
									"    const ddd = Math.floor(Math.random() * (99 - 11 + 1)) + 11;\r",
									"\r",
									"    // Gerando o número de telefone com 9 dígitos, começando com 9\r",
									"    const numero = Math.floor(Math.random() * 100000000) + 900000000; // Gera um número aleatório entre 900000000 e 999999999 (começando com '9')\r",
									"\r",
									"    // Concatenando +55, o DDD e o número gerado para formar o telefone\r",
									"    const telefone = `55${ddd}${numero.toString().slice(0, 5)}${numero.toString().slice(5, 9)}`;\r",
									"\r",
									"    return telefone;\r",
									"}\r",
									"\r",
									"// Gerando o número de telefone e armazenando como variável de ambiente\r",
									"const telefoneGerado = gerarTelefone();\r",
									"pm.environment.set(\"telefone\", telefoneGerado);\r",
									"\r",
									"function descricao() {\r",
									"    const names = [\"Testes\", \"Automação\", \"FrontEnd\", \"Backend\",\"Banco de Dados\", \"IA\",\"AWS\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Descricao\", descricao())\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"NomeRua\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"NomeRuas\", lastname())\r",
									"\r",
									"pm.environment.set(\"nomeruaComposto\", \r",
									"    pm.environment.get(\"NomeRua\") + \" \" + pm.environment.get(\"NomeRuas\"))\r",
									"\r",
									"function logradouro() {\r",
									"    const names = [\"Avenida\", \"Rua\", \"Alameda\", \"Travessa\", \"Praça\", \"Rodovia\", \"Estrada\", \"Largo\", \"Viaduto\", \"Marginal\", \"Parque\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Logradouro\", logradouro())\r",
									"\r",
									"pm.environment.set(\"logradouroCompleto\", \r",
									"    pm.environment.get(\"Logradouro\") + \" \" + pm.environment.get(\"nomeruaComposto\"))\r",
									"\r",
									"\r",
									"function gerarNumeroResidencia() {\r",
									"    // Definindo a probabilidade de gerar números com mais de 5 caracteres\r",
									"    const tamanhoNumero = Math.random() < 0.8 ? Math.floor(Math.random() * 5) + 1 : Math.floor(Math.random() * 6) + 5;\r",
									"\r",
									"    // Gerando um número aleatório com o tamanho definido\r",
									"    let numeroResidencia = Math.floor(Math.random() * Math.pow(10, tamanhoNumero)).toString(); // Gera número aleatório com o tamanho desejado\r",
									"\r",
									"    // Se o primeiro caractere for 0, remove-o\r",
									"    if (numeroResidencia[0] === '0') {\r",
									"        numeroResidencia = numeroResidencia.slice(1); // Remove o primeiro caractere\r",
									"    }\r",
									"\r",
									"    // Garantindo que o número tenha no máximo 10 caracteres\r",
									"    if (numeroResidencia.length > 10) {\r",
									"        numeroResidencia = numeroResidencia.slice(0, 10); // Limita a 10 caracteres\r",
									"    }\r",
									"\r",
									"    return numeroResidencia;\r",
									"}\r",
									"\r",
									"// Gerando o número de residência e armazenando como variável de ambiente\r",
									"const numeroResidenciaGerado = gerarNumeroResidencia();\r",
									"pm.environment.set(\"numeroResidencia\", numeroResidenciaGerado);\r",
									"\r",
									"function bairro() {\r",
									"    const names = ['Leblon', 'Ipanema', 'Copacabana', 'Barra da Tijuca', 'Botafogo', 'Lapa', 'Santa Teresa', 'Jardim Botânico', 'Flamengo', 'São Conrado', 'Moema', 'Vila Madalena', 'Pinheiros', 'Jardins', 'Aclimação', 'Brooklin', 'Tatuapé', 'Vila Progredior', 'Vila Nova Conceição', 'Campo Belo','Centro', 'Praia de Belas', 'Moinhos de Vento', 'Petrópolis', 'Tristeza', 'Caminho das Árvores', 'Pituba', 'Stella Maris', 'Parque Atlântico', 'Costa Azul', 'Vila Galvão', 'Santo Amaro', 'Perdizes', 'Aclimação', 'Vila Sônia', 'Cidade Dutra', 'São Bernardo do Campo', 'Vila Mariana', 'Bela Vista', 'Liberdade','Pinheiros', 'Itaim Bibi', 'Santa Cecília', 'Tucuruvi', 'Chácara Santo Antônio', 'Água Fria', 'Vila Olímpia', 'Vila São Francisco', 'Consolação', 'Vila Madalena']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Bairro\", bairro())\r",
									"\r",
									"function cidade() {\r",
									"    const names = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador', 'Curitiba', 'Fortaleza', 'Recife', 'Brasília', 'Manaus', 'Vitória', 'Goiânia', 'Belém', 'Natal', 'São Luís', 'Maceió', 'Campo Grande', 'João Pessoa', 'Aracaju', 'Cuiabá', 'Florianópolis', 'Teresina', 'Palmas', 'Macapá', 'Rio Branco', 'Boa Vista', 'Porto Velho', 'Anápolis', 'Caruaru', 'Londrina','Marabá', 'Araraquara', 'Sorocaba', 'Santos', 'Niterói', 'Mogi das Cruzes', 'Caxias do Sul', 'Barueri', 'Campinas', 'São José', 'Ponta Grossa', 'Jundiaí', 'Uberlândia', 'Diadema', 'Santo André', 'São Bernardo do Campo', 'Itaquaquecetuba', 'Ribeirão Preto', 'Juiz de Fora']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Cidade\", cidade())\r",
									"\r",
									"function abreviacao() {\r",
									"    const names = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"AbreviacaoEstado\", abreviacao())\r",
									"\r",
									"function randomCep() {\r",
									"    let randomCep = '';\r",
									"   \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        randomCep += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCep;\r",
									"}\r",
									"pm.environment.set(\"cep\", randomCep());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 201\", function(){\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Mensagem de sucesso\",function(){\r",
									"    pm.expect(pm.response.json().msg).to.include(\"Registro realizado com sucesso\")\r",
									"})\r",
									"\r",
									"pm.test(\"Status é True\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.status).to.be.true;\r",
									"})\r",
									"\r",
									"pm.test(\"Nome da Empresa é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.corporateName).to.equal(pm.environment.get(\"nomeEmpresa\"))\r",
									"})\r",
									"\r",
									"pm.test(\"CNPJ é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.registerCompany).to.equal(pm.environment.get(\"CNPJ\"))\r",
									"})\r",
									"\r",
									"\r",
									"// Função para validar CNPJ com base nos dígitos verificadores\r",
									"function validarCNPJ(cnpj) {\r",
									"    // Remover qualquer caractere que não seja número\r",
									"    cnpj = cnpj.replace(/\\D/g, '');\r",
									"\r",
									"    // Verifica se o CNPJ tem 14 dígitos\r",
									"    if (cnpj.length !== 14) {\r",
									"        return false;\r",
									"    }\r",
									"\r",
									"    // Cálculo do primeiro dígito verificador\r",
									"    let soma = 0;\r",
									"    let multiplicadoresPrimeiro = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    \r",
									"    for (let i = 0; i < 12; i++) {\r",
									"        soma += parseInt(cnpj[i]) * multiplicadoresPrimeiro[i];\r",
									"    }\r",
									"\r",
									"    let resto = soma % 11;\r",
									"    let primeiroDV = resto < 2 ? 0 : 11 - resto;\r",
									"\r",
									"    // Cálculo do segundo dígito verificador\r",
									"    soma = 0;\r",
									"    let multiplicadoresSegundo = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    \r",
									"    for (let i = 0; i < 13; i++) {\r",
									"        soma += parseInt(cnpj[i]) * multiplicadoresSegundo[i];\r",
									"    }\r",
									"\r",
									"    resto = soma % 11;\r",
									"    let segundoDV = resto < 2 ? 0 : 11 - resto;\r",
									"\r",
									"    // Comparar com os dígitos do CNPJ enviado\r",
									"    return cnpj[12] == primeiroDV && cnpj[13] == segundoDV;\r",
									"}\r",
									"\r",
									"// Obter o CNPJ da resposta da API (supondo que está no campo \"cnpj\")\r",
									"let cnpjRecebido = pm.response.json().newCompany.registerCompany; \r",
									"\r",
									"// Executar a validação\r",
									"if (!validarCNPJ(cnpjRecebido)) {\r",
									"    pm.test(\"O CNPJ retornado é inválido!\", function () {\r",
									"        pm.expect(false).to.be.true;\r",
									"    });\r",
									"} else {\r",
									"    pm.test(\"O CNPJ retornado é válido!\", function () {\r",
									"        pm.expect(true).to.be.true;\r",
									"    });\r",
									"}\r",
									"\r",
									"pm.test(\"Nome da Rua é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.address[0].street).to.equal(\"Avenida 1º de Abril\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomeEmpresa}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"{{fullnameUser}}\",\r\n  \"telephone\": \"{{telefone}}\",\r\n  \"serviceDescription\": \"{{Descricao}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{cep}}\",\r\n      \"city\": \"{{Cidade}}\",\r\n      \"state\": \"{{AbreviacaoEstado}}\",\r\n      \"district\": \"{{Bairro}}\",\r\n      \"street\": \"Avenida 1º de Abril\",\r\n      \"number\": \"{{numeroResidencia}}\",\r\n      \"complement\": \"\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTM0MSwiZXhwIjoxNzM5MzE1NzQxfQ.cgJqYe74cprHCRTY9YLF_B-Hfgfp8l8lr6gDrEuqMi4' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"corporateName\": \"Matheus Sousa Testes\",\r\n  \"registerCompany\": \"57126456000155\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com o campo Logradouro com caracteres especial 'ª'",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function empresa() {\r",
									"    const names = [\"TechNova\", \"Bytewave\", \"Cyberion\", \"InovaTech\", \"Nexabyte\", \"Softtron\", \"Codeverse\", \"Dataflux\", \"Infinitron\", \"LogiCore\", \"Zentek\",\"Neurobyte\", \"Cloudix\", \"Sysnova\", \"Hexabit\", \"AIgorithm\", \"Quantumix\", \"Webtron\", \"Netflux\", \"Cyberflux\", \"Deepcode\", \"Techpulse\", \"Synaptech\", \"Codexis\", \"Nexonix\", \"Algobyte\", \"Infobyte\", \"Datazen\", \"Digiflow\", \"Innovix\", \"Coretron\", \"Zybernet\", \"Neurotech\", \"Nanobyte\", \"Virtunix\", \"Codexel\", \"Optibit\", \"Bitnova\", \"Globotron\", \"Digiware\", \"Skytech\", \"Cybervox\", \"Techspire\", \"Softbit\", \"MetaTech\", \"Synthron\", \"Virtuabyte\", \"Cloudtron\", \"Algonix\", \"Bitzen\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Empresa\", empresa())\r",
									"\r",
									"function tag() {\r",
									"    const tagnames = ['Solutions', 'Tech', 'Digital', 'Systems', 'Software', 'Cloud', 'AI', 'Cyber', 'Data', 'Analytics','Network', 'Security', 'Labs', 'Smart', 'Logic', 'Innovation', 'IT', 'Global', 'Developers', 'Code', 'Techno', 'Automations', 'Cloudware', 'Dynamics', 'Vision', 'Intelligence', 'NextGen', 'Computing', 'Innovators', 'Engineering', 'Performance', 'Softworks', 'Logicware', 'Digitalware', 'Transform', 'Platform', 'Smartware', 'Dataflow', 'Byte', 'Edge', 'Nexus', 'Techworks', 'Bit', 'Virtual', 'SystemsX', 'Infotech', 'Genix', 'Quantum', 'Bitware', 'CloudX'];\r",
									"\r",
									"    const randomTastName = tagnames[Math.floor(Math.random() * tagnames.length)]\r",
									"    return randomTastName\r",
									"}\r",
									"pm.environment.set(\"Tag\", tag())\r",
									"\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"Empresa\") + \" \" + pm.environment.get(\"Tag\"))\r",
									"\r",
									"\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"\r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									"\r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									"\r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									"\r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									"\r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									"\r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"CNPJ\", cnpjGerado);\r",
									"\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function gerarTelefone() {\r",
									"    // Gerando um DDD aleatório entre 11 e 99\r",
									"    const ddd = Math.floor(Math.random() * (99 - 11 + 1)) + 11;\r",
									"\r",
									"    // Gerando o número de telefone com 9 dígitos, começando com 9\r",
									"    const numero = Math.floor(Math.random() * 100000000) + 900000000; // Gera um número aleatório entre 900000000 e 999999999 (começando com '9')\r",
									"\r",
									"    // Concatenando +55, o DDD e o número gerado para formar o telefone\r",
									"    const telefone = `55${ddd}${numero.toString().slice(0, 5)}${numero.toString().slice(5, 9)}`;\r",
									"\r",
									"    return telefone;\r",
									"}\r",
									"\r",
									"// Gerando o número de telefone e armazenando como variável de ambiente\r",
									"const telefoneGerado = gerarTelefone();\r",
									"pm.environment.set(\"telefone\", telefoneGerado);\r",
									"\r",
									"function descricao() {\r",
									"    const names = [\"Testes\", \"Automação\", \"FrontEnd\", \"Backend\",\"Banco de Dados\", \"IA\",\"AWS\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Descricao\", descricao())\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"NomeRua\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"NomeRuas\", lastname())\r",
									"\r",
									"pm.environment.set(\"nomeruaComposto\", \r",
									"    pm.environment.get(\"NomeRua\") + \" \" + pm.environment.get(\"NomeRuas\"))\r",
									"\r",
									"function logradouro() {\r",
									"    const names = [\"Avenida\", \"Rua\", \"Alameda\", \"Travessa\", \"Praça\", \"Rodovia\", \"Estrada\", \"Largo\", \"Viaduto\", \"Marginal\", \"Parque\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Logradouro\", logradouro())\r",
									"\r",
									"pm.environment.set(\"logradouroCompleto\", \r",
									"    pm.environment.get(\"Logradouro\") + \" \" + pm.environment.get(\"nomeruaComposto\"))\r",
									"\r",
									"\r",
									"function gerarNumeroResidencia() {\r",
									"    // Definindo a probabilidade de gerar números com mais de 5 caracteres\r",
									"    const tamanhoNumero = Math.random() < 0.8 ? Math.floor(Math.random() * 5) + 1 : Math.floor(Math.random() * 6) + 5;\r",
									"\r",
									"    // Gerando um número aleatório com o tamanho definido\r",
									"    let numeroResidencia = Math.floor(Math.random() * Math.pow(10, tamanhoNumero)).toString(); // Gera número aleatório com o tamanho desejado\r",
									"\r",
									"    // Se o primeiro caractere for 0, remove-o\r",
									"    if (numeroResidencia[0] === '0') {\r",
									"        numeroResidencia = numeroResidencia.slice(1); // Remove o primeiro caractere\r",
									"    }\r",
									"\r",
									"    // Garantindo que o número tenha no máximo 10 caracteres\r",
									"    if (numeroResidencia.length > 10) {\r",
									"        numeroResidencia = numeroResidencia.slice(0, 10); // Limita a 10 caracteres\r",
									"    }\r",
									"\r",
									"    return numeroResidencia;\r",
									"}\r",
									"\r",
									"// Gerando o número de residência e armazenando como variável de ambiente\r",
									"const numeroResidenciaGerado = gerarNumeroResidencia();\r",
									"pm.environment.set(\"numeroResidencia\", numeroResidenciaGerado);\r",
									"\r",
									"function bairro() {\r",
									"    const names = ['Leblon', 'Ipanema', 'Copacabana', 'Barra da Tijuca', 'Botafogo', 'Lapa', 'Santa Teresa', 'Jardim Botânico', 'Flamengo', 'São Conrado', 'Moema', 'Vila Madalena', 'Pinheiros', 'Jardins', 'Aclimação', 'Brooklin', 'Tatuapé', 'Vila Progredior', 'Vila Nova Conceição', 'Campo Belo','Centro', 'Praia de Belas', 'Moinhos de Vento', 'Petrópolis', 'Tristeza', 'Caminho das Árvores', 'Pituba', 'Stella Maris', 'Parque Atlântico', 'Costa Azul', 'Vila Galvão', 'Santo Amaro', 'Perdizes', 'Aclimação', 'Vila Sônia', 'Cidade Dutra', 'São Bernardo do Campo', 'Vila Mariana', 'Bela Vista', 'Liberdade','Pinheiros', 'Itaim Bibi', 'Santa Cecília', 'Tucuruvi', 'Chácara Santo Antônio', 'Água Fria', 'Vila Olímpia', 'Vila São Francisco', 'Consolação', 'Vila Madalena']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Bairro\", bairro())\r",
									"\r",
									"function cidade() {\r",
									"    const names = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador', 'Curitiba', 'Fortaleza', 'Recife', 'Brasília', 'Manaus', 'Vitória', 'Goiânia', 'Belém', 'Natal', 'São Luís', 'Maceió', 'Campo Grande', 'João Pessoa', 'Aracaju', 'Cuiabá', 'Florianópolis', 'Teresina', 'Palmas', 'Macapá', 'Rio Branco', 'Boa Vista', 'Porto Velho', 'Anápolis', 'Caruaru', 'Londrina','Marabá', 'Araraquara', 'Sorocaba', 'Santos', 'Niterói', 'Mogi das Cruzes', 'Caxias do Sul', 'Barueri', 'Campinas', 'São José', 'Ponta Grossa', 'Jundiaí', 'Uberlândia', 'Diadema', 'Santo André', 'São Bernardo do Campo', 'Itaquaquecetuba', 'Ribeirão Preto', 'Juiz de Fora']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Cidade\", cidade())\r",
									"\r",
									"function abreviacao() {\r",
									"    const names = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"AbreviacaoEstado\", abreviacao())\r",
									"\r",
									"function randomCep() {\r",
									"    let randomCep = '';\r",
									"   \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        randomCep += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCep;\r",
									"}\r",
									"pm.environment.set(\"cep\", randomCep());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 201\", function(){\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Mensagem de sucesso\",function(){\r",
									"    pm.expect(pm.response.json().msg).to.include(\"Registro realizado com sucesso\")\r",
									"})\r",
									"\r",
									"pm.test(\"Status é True\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.status).to.be.true;\r",
									"})\r",
									"\r",
									"pm.test(\"Nome da Empresa é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.corporateName).to.equal(pm.environment.get(\"nomeEmpresa\"))\r",
									"})\r",
									"\r",
									"pm.test(\"CNPJ é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.registerCompany).to.equal(pm.environment.get(\"CNPJ\"))\r",
									"})\r",
									"\r",
									"\r",
									"// Função para validar CNPJ com base nos dígitos verificadores\r",
									"function validarCNPJ(cnpj) {\r",
									"    // Remover qualquer caractere que não seja número\r",
									"    cnpj = cnpj.replace(/\\D/g, '');\r",
									"\r",
									"    // Verifica se o CNPJ tem 14 dígitos\r",
									"    if (cnpj.length !== 14) {\r",
									"        return false;\r",
									"    }\r",
									"\r",
									"    // Cálculo do primeiro dígito verificador\r",
									"    let soma = 0;\r",
									"    let multiplicadoresPrimeiro = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    \r",
									"    for (let i = 0; i < 12; i++) {\r",
									"        soma += parseInt(cnpj[i]) * multiplicadoresPrimeiro[i];\r",
									"    }\r",
									"\r",
									"    let resto = soma % 11;\r",
									"    let primeiroDV = resto < 2 ? 0 : 11 - resto;\r",
									"\r",
									"    // Cálculo do segundo dígito verificador\r",
									"    soma = 0;\r",
									"    let multiplicadoresSegundo = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    \r",
									"    for (let i = 0; i < 13; i++) {\r",
									"        soma += parseInt(cnpj[i]) * multiplicadoresSegundo[i];\r",
									"    }\r",
									"\r",
									"    resto = soma % 11;\r",
									"    let segundoDV = resto < 2 ? 0 : 11 - resto;\r",
									"\r",
									"    // Comparar com os dígitos do CNPJ enviado\r",
									"    return cnpj[12] == primeiroDV && cnpj[13] == segundoDV;\r",
									"}\r",
									"\r",
									"// Obter o CNPJ da resposta da API (supondo que está no campo \"cnpj\")\r",
									"let cnpjRecebido = pm.response.json().newCompany.registerCompany; \r",
									"\r",
									"// Executar a validação\r",
									"if (!validarCNPJ(cnpjRecebido)) {\r",
									"    pm.test(\"O CNPJ retornado é inválido!\", function () {\r",
									"        pm.expect(false).to.be.true;\r",
									"    });\r",
									"} else {\r",
									"    pm.test(\"O CNPJ retornado é válido!\", function () {\r",
									"        pm.expect(true).to.be.true;\r",
									"    });\r",
									"}\r",
									"\r",
									"pm.test(\"Nome da Rua é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.address[0].street).to.equal(\"Rua Daenerys 1ª de seu nome\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomeEmpresa}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"{{fullnameUser}}\",\r\n  \"telephone\": \"{{telefone}}\",\r\n  \"serviceDescription\": \"{{Descricao}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{cep}}\",\r\n      \"city\": \"{{Cidade}}\",\r\n      \"state\": \"{{AbreviacaoEstado}}\",\r\n      \"district\": \"{{Bairro}}\",\r\n      \"street\": \"Rua Daenerys 1ª de seu nome\",\r\n      \"number\": \"{{numeroResidencia}}\",\r\n      \"complement\": \"\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTM0MSwiZXhwIjoxNzM5MzE1NzQxfQ.cgJqYe74cprHCRTY9YLF_B-Hfgfp8l8lr6gDrEuqMi4' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"corporateName\": \"Matheus Sousa Testes\",\r\n  \"registerCompany\": \"57126456000155\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com o campo Logradouro com caracteres especial '-'",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function empresa() {\r",
									"    const names = [\"TechNova\", \"Bytewave\", \"Cyberion\", \"InovaTech\", \"Nexabyte\", \"Softtron\", \"Codeverse\", \"Dataflux\", \"Infinitron\", \"LogiCore\", \"Zentek\",\"Neurobyte\", \"Cloudix\", \"Sysnova\", \"Hexabit\", \"AIgorithm\", \"Quantumix\", \"Webtron\", \"Netflux\", \"Cyberflux\", \"Deepcode\", \"Techpulse\", \"Synaptech\", \"Codexis\", \"Nexonix\", \"Algobyte\", \"Infobyte\", \"Datazen\", \"Digiflow\", \"Innovix\", \"Coretron\", \"Zybernet\", \"Neurotech\", \"Nanobyte\", \"Virtunix\", \"Codexel\", \"Optibit\", \"Bitnova\", \"Globotron\", \"Digiware\", \"Skytech\", \"Cybervox\", \"Techspire\", \"Softbit\", \"MetaTech\", \"Synthron\", \"Virtuabyte\", \"Cloudtron\", \"Algonix\", \"Bitzen\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Empresa\", empresa())\r",
									"\r",
									"function tag() {\r",
									"    const tagnames = ['Solutions', 'Tech', 'Digital', 'Systems', 'Software', 'Cloud', 'AI', 'Cyber', 'Data', 'Analytics','Network', 'Security', 'Labs', 'Smart', 'Logic', 'Innovation', 'IT', 'Global', 'Developers', 'Code', 'Techno', 'Automations', 'Cloudware', 'Dynamics', 'Vision', 'Intelligence', 'NextGen', 'Computing', 'Innovators', 'Engineering', 'Performance', 'Softworks', 'Logicware', 'Digitalware', 'Transform', 'Platform', 'Smartware', 'Dataflow', 'Byte', 'Edge', 'Nexus', 'Techworks', 'Bit', 'Virtual', 'SystemsX', 'Infotech', 'Genix', 'Quantum', 'Bitware', 'CloudX'];\r",
									"\r",
									"    const randomTastName = tagnames[Math.floor(Math.random() * tagnames.length)]\r",
									"    return randomTastName\r",
									"}\r",
									"pm.environment.set(\"Tag\", tag())\r",
									"\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"Empresa\") + \" \" + pm.environment.get(\"Tag\"))\r",
									"\r",
									"\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"\r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									"\r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									"\r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									"\r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									"\r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									"\r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"CNPJ\", cnpjGerado);\r",
									"\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function gerarTelefone() {\r",
									"    // Gerando um DDD aleatório entre 11 e 99\r",
									"    const ddd = Math.floor(Math.random() * (99 - 11 + 1)) + 11;\r",
									"\r",
									"    // Gerando o número de telefone com 9 dígitos, começando com 9\r",
									"    const numero = Math.floor(Math.random() * 100000000) + 900000000; // Gera um número aleatório entre 900000000 e 999999999 (começando com '9')\r",
									"\r",
									"    // Concatenando +55, o DDD e o número gerado para formar o telefone\r",
									"    const telefone = `55${ddd}${numero.toString().slice(0, 5)}${numero.toString().slice(5, 9)}`;\r",
									"\r",
									"    return telefone;\r",
									"}\r",
									"\r",
									"// Gerando o número de telefone e armazenando como variável de ambiente\r",
									"const telefoneGerado = gerarTelefone();\r",
									"pm.environment.set(\"telefone\", telefoneGerado);\r",
									"\r",
									"function descricao() {\r",
									"    const names = [\"Testes\", \"Automação\", \"FrontEnd\", \"Backend\",\"Banco de Dados\", \"IA\",\"AWS\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Descricao\", descricao())\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"NomeRua\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"NomeRuas\", lastname())\r",
									"\r",
									"pm.environment.set(\"nomeruaComposto\", \r",
									"    pm.environment.get(\"NomeRua\") + \" \" + pm.environment.get(\"NomeRuas\"))\r",
									"\r",
									"function logradouro() {\r",
									"    const names = [\"Avenida\", \"Rua\", \"Alameda\", \"Travessa\", \"Praça\", \"Rodovia\", \"Estrada\", \"Largo\", \"Viaduto\", \"Marginal\", \"Parque\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Logradouro\", logradouro())\r",
									"\r",
									"pm.environment.set(\"logradouroCompleto\", \r",
									"    pm.environment.get(\"Logradouro\") + \" \" + pm.environment.get(\"nomeruaComposto\"))\r",
									"\r",
									"\r",
									"function gerarNumeroResidencia() {\r",
									"    // Definindo a probabilidade de gerar números com mais de 5 caracteres\r",
									"    const tamanhoNumero = Math.random() < 0.8 ? Math.floor(Math.random() * 5) + 1 : Math.floor(Math.random() * 6) + 5;\r",
									"\r",
									"    // Gerando um número aleatório com o tamanho definido\r",
									"    let numeroResidencia = Math.floor(Math.random() * Math.pow(10, tamanhoNumero)).toString(); // Gera número aleatório com o tamanho desejado\r",
									"\r",
									"    // Se o primeiro caractere for 0, remove-o\r",
									"    if (numeroResidencia[0] === '0') {\r",
									"        numeroResidencia = numeroResidencia.slice(1); // Remove o primeiro caractere\r",
									"    }\r",
									"\r",
									"    // Garantindo que o número tenha no máximo 10 caracteres\r",
									"    if (numeroResidencia.length > 10) {\r",
									"        numeroResidencia = numeroResidencia.slice(0, 10); // Limita a 10 caracteres\r",
									"    }\r",
									"\r",
									"    return numeroResidencia;\r",
									"}\r",
									"\r",
									"// Gerando o número de residência e armazenando como variável de ambiente\r",
									"const numeroResidenciaGerado = gerarNumeroResidencia();\r",
									"pm.environment.set(\"numeroResidencia\", numeroResidenciaGerado);\r",
									"\r",
									"function bairro() {\r",
									"    const names = ['Leblon', 'Ipanema', 'Copacabana', 'Barra da Tijuca', 'Botafogo', 'Lapa', 'Santa Teresa', 'Jardim Botânico', 'Flamengo', 'São Conrado', 'Moema', 'Vila Madalena', 'Pinheiros', 'Jardins', 'Aclimação', 'Brooklin', 'Tatuapé', 'Vila Progredior', 'Vila Nova Conceição', 'Campo Belo','Centro', 'Praia de Belas', 'Moinhos de Vento', 'Petrópolis', 'Tristeza', 'Caminho das Árvores', 'Pituba', 'Stella Maris', 'Parque Atlântico', 'Costa Azul', 'Vila Galvão', 'Santo Amaro', 'Perdizes', 'Aclimação', 'Vila Sônia', 'Cidade Dutra', 'São Bernardo do Campo', 'Vila Mariana', 'Bela Vista', 'Liberdade','Pinheiros', 'Itaim Bibi', 'Santa Cecília', 'Tucuruvi', 'Chácara Santo Antônio', 'Água Fria', 'Vila Olímpia', 'Vila São Francisco', 'Consolação', 'Vila Madalena']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Bairro\", bairro())\r",
									"\r",
									"function cidade() {\r",
									"    const names = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador', 'Curitiba', 'Fortaleza', 'Recife', 'Brasília', 'Manaus', 'Vitória', 'Goiânia', 'Belém', 'Natal', 'São Luís', 'Maceió', 'Campo Grande', 'João Pessoa', 'Aracaju', 'Cuiabá', 'Florianópolis', 'Teresina', 'Palmas', 'Macapá', 'Rio Branco', 'Boa Vista', 'Porto Velho', 'Anápolis', 'Caruaru', 'Londrina','Marabá', 'Araraquara', 'Sorocaba', 'Santos', 'Niterói', 'Mogi das Cruzes', 'Caxias do Sul', 'Barueri', 'Campinas', 'São José', 'Ponta Grossa', 'Jundiaí', 'Uberlândia', 'Diadema', 'Santo André', 'São Bernardo do Campo', 'Itaquaquecetuba', 'Ribeirão Preto', 'Juiz de Fora']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Cidade\", cidade())\r",
									"\r",
									"function abreviacao() {\r",
									"    const names = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"AbreviacaoEstado\", abreviacao())\r",
									"\r",
									"function randomCep() {\r",
									"    let randomCep = '';\r",
									"   \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        randomCep += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCep;\r",
									"}\r",
									"pm.environment.set(\"cep\", randomCep());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 201\", function(){\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Mensagem de sucesso\",function(){\r",
									"    pm.expect(pm.response.json().msg).to.include(\"Registro realizado com sucesso\")\r",
									"})\r",
									"\r",
									"pm.test(\"Status é True\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.status).to.be.true;\r",
									"})\r",
									"\r",
									"pm.test(\"Nome da Empresa é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.corporateName).to.equal(pm.environment.get(\"nomeEmpresa\"))\r",
									"})\r",
									"\r",
									"pm.test(\"CNPJ é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.registerCompany).to.equal(pm.environment.get(\"CNPJ\"))\r",
									"})\r",
									"\r",
									"\r",
									"// Função para validar CNPJ com base nos dígitos verificadores\r",
									"function validarCNPJ(cnpj) {\r",
									"    // Remover qualquer caractere que não seja número\r",
									"    cnpj = cnpj.replace(/\\D/g, '');\r",
									"\r",
									"    // Verifica se o CNPJ tem 14 dígitos\r",
									"    if (cnpj.length !== 14) {\r",
									"        return false;\r",
									"    }\r",
									"\r",
									"    // Cálculo do primeiro dígito verificador\r",
									"    let soma = 0;\r",
									"    let multiplicadoresPrimeiro = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    \r",
									"    for (let i = 0; i < 12; i++) {\r",
									"        soma += parseInt(cnpj[i]) * multiplicadoresPrimeiro[i];\r",
									"    }\r",
									"\r",
									"    let resto = soma % 11;\r",
									"    let primeiroDV = resto < 2 ? 0 : 11 - resto;\r",
									"\r",
									"    // Cálculo do segundo dígito verificador\r",
									"    soma = 0;\r",
									"    let multiplicadoresSegundo = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    \r",
									"    for (let i = 0; i < 13; i++) {\r",
									"        soma += parseInt(cnpj[i]) * multiplicadoresSegundo[i];\r",
									"    }\r",
									"\r",
									"    resto = soma % 11;\r",
									"    let segundoDV = resto < 2 ? 0 : 11 - resto;\r",
									"\r",
									"    // Comparar com os dígitos do CNPJ enviado\r",
									"    return cnpj[12] == primeiroDV && cnpj[13] == segundoDV;\r",
									"}\r",
									"\r",
									"// Obter o CNPJ da resposta da API (supondo que está no campo \"cnpj\")\r",
									"let cnpjRecebido = pm.response.json().newCompany.registerCompany; \r",
									"\r",
									"// Executar a validação\r",
									"if (!validarCNPJ(cnpjRecebido)) {\r",
									"    pm.test(\"O CNPJ retornado é inválido!\", function () {\r",
									"        pm.expect(false).to.be.true;\r",
									"    });\r",
									"} else {\r",
									"    pm.test(\"O CNPJ retornado é válido!\", function () {\r",
									"        pm.expect(true).to.be.true;\r",
									"    });\r",
									"}\r",
									"\r",
									"pm.test(\"Nome da Rua é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.address[0].street).to.equal(\"Rua Pre-Req\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomeEmpresa}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"{{fullnameUser}}\",\r\n  \"telephone\": \"{{telefone}}\",\r\n  \"serviceDescription\": \"{{Descricao}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{cep}}\",\r\n      \"city\": \"{{Cidade}}\",\r\n      \"state\": \"{{AbreviacaoEstado}}\",\r\n      \"district\": \"{{Bairro}}\",\r\n      \"street\": \"Rua Pre-Req\",\r\n      \"number\": \"{{numeroResidencia}}\",\r\n      \"complement\": \"\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTM0MSwiZXhwIjoxNzM5MzE1NzQxfQ.cgJqYe74cprHCRTY9YLF_B-Hfgfp8l8lr6gDrEuqMi4' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"corporateName\": \"Matheus Sousa Testes\",\r\n  \"registerCompany\": \"57126456000155\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com o campo Logradouro com caracteres especial '‘'",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function empresa() {\r",
									"    const names = [\"TechNova\", \"Bytewave\", \"Cyberion\", \"InovaTech\", \"Nexabyte\", \"Softtron\", \"Codeverse\", \"Dataflux\", \"Infinitron\", \"LogiCore\", \"Zentek\",\"Neurobyte\", \"Cloudix\", \"Sysnova\", \"Hexabit\", \"AIgorithm\", \"Quantumix\", \"Webtron\", \"Netflux\", \"Cyberflux\", \"Deepcode\", \"Techpulse\", \"Synaptech\", \"Codexis\", \"Nexonix\", \"Algobyte\", \"Infobyte\", \"Datazen\", \"Digiflow\", \"Innovix\", \"Coretron\", \"Zybernet\", \"Neurotech\", \"Nanobyte\", \"Virtunix\", \"Codexel\", \"Optibit\", \"Bitnova\", \"Globotron\", \"Digiware\", \"Skytech\", \"Cybervox\", \"Techspire\", \"Softbit\", \"MetaTech\", \"Synthron\", \"Virtuabyte\", \"Cloudtron\", \"Algonix\", \"Bitzen\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Empresa\", empresa())\r",
									"\r",
									"function tag() {\r",
									"    const tagnames = ['Solutions', 'Tech', 'Digital', 'Systems', 'Software', 'Cloud', 'AI', 'Cyber', 'Data', 'Analytics','Network', 'Security', 'Labs', 'Smart', 'Logic', 'Innovation', 'IT', 'Global', 'Developers', 'Code', 'Techno', 'Automations', 'Cloudware', 'Dynamics', 'Vision', 'Intelligence', 'NextGen', 'Computing', 'Innovators', 'Engineering', 'Performance', 'Softworks', 'Logicware', 'Digitalware', 'Transform', 'Platform', 'Smartware', 'Dataflow', 'Byte', 'Edge', 'Nexus', 'Techworks', 'Bit', 'Virtual', 'SystemsX', 'Infotech', 'Genix', 'Quantum', 'Bitware', 'CloudX'];\r",
									"\r",
									"    const randomTastName = tagnames[Math.floor(Math.random() * tagnames.length)]\r",
									"    return randomTastName\r",
									"}\r",
									"pm.environment.set(\"Tag\", tag())\r",
									"\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"Empresa\") + \" \" + pm.environment.get(\"Tag\"))\r",
									"\r",
									"\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"\r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									"\r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									"\r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									"\r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									"\r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									"\r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"CNPJ\", cnpjGerado);\r",
									"\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function gerarTelefone() {\r",
									"    // Gerando um DDD aleatório entre 11 e 99\r",
									"    const ddd = Math.floor(Math.random() * (99 - 11 + 1)) + 11;\r",
									"\r",
									"    // Gerando o número de telefone com 9 dígitos, começando com 9\r",
									"    const numero = Math.floor(Math.random() * 100000000) + 900000000; // Gera um número aleatório entre 900000000 e 999999999 (começando com '9')\r",
									"\r",
									"    // Concatenando +55, o DDD e o número gerado para formar o telefone\r",
									"    const telefone = `55${ddd}${numero.toString().slice(0, 5)}${numero.toString().slice(5, 9)}`;\r",
									"\r",
									"    return telefone;\r",
									"}\r",
									"\r",
									"// Gerando o número de telefone e armazenando como variável de ambiente\r",
									"const telefoneGerado = gerarTelefone();\r",
									"pm.environment.set(\"telefone\", telefoneGerado);\r",
									"\r",
									"function descricao() {\r",
									"    const names = [\"Testes\", \"Automação\", \"FrontEnd\", \"Backend\",\"Banco de Dados\", \"IA\",\"AWS\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Descricao\", descricao())\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"NomeRua\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"NomeRuas\", lastname())\r",
									"\r",
									"pm.environment.set(\"nomeruaComposto\", \r",
									"    pm.environment.get(\"NomeRua\") + \" \" + pm.environment.get(\"NomeRuas\"))\r",
									"\r",
									"function logradouro() {\r",
									"    const names = [\"Avenida\", \"Rua\", \"Alameda\", \"Travessa\", \"Praça\", \"Rodovia\", \"Estrada\", \"Largo\", \"Viaduto\", \"Marginal\", \"Parque\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Logradouro\", logradouro())\r",
									"\r",
									"pm.environment.set(\"logradouroCompleto\", \r",
									"    pm.environment.get(\"Logradouro\") + \" \" + pm.environment.get(\"nomeruaComposto\"))\r",
									"\r",
									"\r",
									"function gerarNumeroResidencia() {\r",
									"    // Definindo a probabilidade de gerar números com mais de 5 caracteres\r",
									"    const tamanhoNumero = Math.random() < 0.8 ? Math.floor(Math.random() * 5) + 1 : Math.floor(Math.random() * 6) + 5;\r",
									"\r",
									"    // Gerando um número aleatório com o tamanho definido\r",
									"    let numeroResidencia = Math.floor(Math.random() * Math.pow(10, tamanhoNumero)).toString(); // Gera número aleatório com o tamanho desejado\r",
									"\r",
									"    // Se o primeiro caractere for 0, remove-o\r",
									"    if (numeroResidencia[0] === '0') {\r",
									"        numeroResidencia = numeroResidencia.slice(1); // Remove o primeiro caractere\r",
									"    }\r",
									"\r",
									"    // Garantindo que o número tenha no máximo 10 caracteres\r",
									"    if (numeroResidencia.length > 10) {\r",
									"        numeroResidencia = numeroResidencia.slice(0, 10); // Limita a 10 caracteres\r",
									"    }\r",
									"\r",
									"    return numeroResidencia;\r",
									"}\r",
									"\r",
									"// Gerando o número de residência e armazenando como variável de ambiente\r",
									"const numeroResidenciaGerado = gerarNumeroResidencia();\r",
									"pm.environment.set(\"numeroResidencia\", numeroResidenciaGerado);\r",
									"\r",
									"function bairro() {\r",
									"    const names = ['Leblon', 'Ipanema', 'Copacabana', 'Barra da Tijuca', 'Botafogo', 'Lapa', 'Santa Teresa', 'Jardim Botânico', 'Flamengo', 'São Conrado', 'Moema', 'Vila Madalena', 'Pinheiros', 'Jardins', 'Aclimação', 'Brooklin', 'Tatuapé', 'Vila Progredior', 'Vila Nova Conceição', 'Campo Belo','Centro', 'Praia de Belas', 'Moinhos de Vento', 'Petrópolis', 'Tristeza', 'Caminho das Árvores', 'Pituba', 'Stella Maris', 'Parque Atlântico', 'Costa Azul', 'Vila Galvão', 'Santo Amaro', 'Perdizes', 'Aclimação', 'Vila Sônia', 'Cidade Dutra', 'São Bernardo do Campo', 'Vila Mariana', 'Bela Vista', 'Liberdade','Pinheiros', 'Itaim Bibi', 'Santa Cecília', 'Tucuruvi', 'Chácara Santo Antônio', 'Água Fria', 'Vila Olímpia', 'Vila São Francisco', 'Consolação', 'Vila Madalena']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Bairro\", bairro())\r",
									"\r",
									"function cidade() {\r",
									"    const names = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador', 'Curitiba', 'Fortaleza', 'Recife', 'Brasília', 'Manaus', 'Vitória', 'Goiânia', 'Belém', 'Natal', 'São Luís', 'Maceió', 'Campo Grande', 'João Pessoa', 'Aracaju', 'Cuiabá', 'Florianópolis', 'Teresina', 'Palmas', 'Macapá', 'Rio Branco', 'Boa Vista', 'Porto Velho', 'Anápolis', 'Caruaru', 'Londrina','Marabá', 'Araraquara', 'Sorocaba', 'Santos', 'Niterói', 'Mogi das Cruzes', 'Caxias do Sul', 'Barueri', 'Campinas', 'São José', 'Ponta Grossa', 'Jundiaí', 'Uberlândia', 'Diadema', 'Santo André', 'São Bernardo do Campo', 'Itaquaquecetuba', 'Ribeirão Preto', 'Juiz de Fora']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Cidade\", cidade())\r",
									"\r",
									"function abreviacao() {\r",
									"    const names = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"AbreviacaoEstado\", abreviacao())\r",
									"\r",
									"function randomCep() {\r",
									"    let randomCep = '';\r",
									"   \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        randomCep += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCep;\r",
									"}\r",
									"pm.environment.set(\"cep\", randomCep());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 201\", function(){\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Mensagem de sucesso\",function(){\r",
									"    pm.expect(pm.response.json().msg).to.include(\"Registro realizado com sucesso\")\r",
									"})\r",
									"\r",
									"pm.test(\"Status é True\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.status).to.be.true;\r",
									"})\r",
									"\r",
									"pm.test(\"Nome da Empresa é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.corporateName).to.equal(pm.environment.get(\"nomeEmpresa\"))\r",
									"})\r",
									"\r",
									"pm.test(\"CNPJ é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.registerCompany).to.equal(pm.environment.get(\"CNPJ\"))\r",
									"})\r",
									"\r",
									"\r",
									"// Função para validar CNPJ com base nos dígitos verificadores\r",
									"function validarCNPJ(cnpj) {\r",
									"    // Remover qualquer caractere que não seja número\r",
									"    cnpj = cnpj.replace(/\\D/g, '');\r",
									"\r",
									"    // Verifica se o CNPJ tem 14 dígitos\r",
									"    if (cnpj.length !== 14) {\r",
									"        return false;\r",
									"    }\r",
									"\r",
									"    // Cálculo do primeiro dígito verificador\r",
									"    let soma = 0;\r",
									"    let multiplicadoresPrimeiro = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    \r",
									"    for (let i = 0; i < 12; i++) {\r",
									"        soma += parseInt(cnpj[i]) * multiplicadoresPrimeiro[i];\r",
									"    }\r",
									"\r",
									"    let resto = soma % 11;\r",
									"    let primeiroDV = resto < 2 ? 0 : 11 - resto;\r",
									"\r",
									"    // Cálculo do segundo dígito verificador\r",
									"    soma = 0;\r",
									"    let multiplicadoresSegundo = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    \r",
									"    for (let i = 0; i < 13; i++) {\r",
									"        soma += parseInt(cnpj[i]) * multiplicadoresSegundo[i];\r",
									"    }\r",
									"\r",
									"    resto = soma % 11;\r",
									"    let segundoDV = resto < 2 ? 0 : 11 - resto;\r",
									"\r",
									"    // Comparar com os dígitos do CNPJ enviado\r",
									"    return cnpj[12] == primeiroDV && cnpj[13] == segundoDV;\r",
									"}\r",
									"\r",
									"// Obter o CNPJ da resposta da API (supondo que está no campo \"cnpj\")\r",
									"let cnpjRecebido = pm.response.json().newCompany.registerCompany; \r",
									"\r",
									"// Executar a validação\r",
									"if (!validarCNPJ(cnpjRecebido)) {\r",
									"    pm.test(\"O CNPJ retornado é inválido!\", function () {\r",
									"        pm.expect(false).to.be.true;\r",
									"    });\r",
									"} else {\r",
									"    pm.test(\"O CNPJ retornado é válido!\", function () {\r",
									"        pm.expect(true).to.be.true;\r",
									"    });\r",
									"}\r",
									"\r",
									"pm.test(\"Nome da Rua é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.address[0].street).to.equal(\"Rua 'Abre Aspas'\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomeEmpresa}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"{{fullnameUser}}\",\r\n  \"telephone\": \"{{telefone}}\",\r\n  \"serviceDescription\": \"{{Descricao}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{cep}}\",\r\n      \"city\": \"{{Cidade}}\",\r\n      \"state\": \"{{AbreviacaoEstado}}\",\r\n      \"district\": \"{{Bairro}}\",\r\n      \"street\": \"Rua 'Abre Aspas'\",\r\n      \"number\": \"{{numeroResidencia}}\",\r\n      \"complement\": \"\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTM0MSwiZXhwIjoxNzM5MzE1NzQxfQ.cgJqYe74cprHCRTY9YLF_B-Hfgfp8l8lr6gDrEuqMi4' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"corporateName\": \"Matheus Sousa Testes\",\r\n  \"registerCompany\": \"57126456000155\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com o campo Numero em branco",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function empresa() {\r",
									"    const names = [\"TechNova\", \"Bytewave\", \"Cyberion\", \"InovaTech\", \"Nexabyte\", \"Softtron\", \"Codeverse\", \"Dataflux\", \"Infinitron\", \"LogiCore\", \"Zentek\",\"Neurobyte\", \"Cloudix\", \"Sysnova\", \"Hexabit\", \"AIgorithm\", \"Quantumix\", \"Webtron\", \"Netflux\", \"Cyberflux\", \"Deepcode\", \"Techpulse\", \"Synaptech\", \"Codexis\", \"Nexonix\", \"Algobyte\", \"Infobyte\", \"Datazen\", \"Digiflow\", \"Innovix\", \"Coretron\", \"Zybernet\", \"Neurotech\", \"Nanobyte\", \"Virtunix\", \"Codexel\", \"Optibit\", \"Bitnova\", \"Globotron\", \"Digiware\", \"Skytech\", \"Cybervox\", \"Techspire\", \"Softbit\", \"MetaTech\", \"Synthron\", \"Virtuabyte\", \"Cloudtron\", \"Algonix\", \"Bitzen\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Empresa\", empresa())\r",
									"\r",
									"function tag() {\r",
									"    const tagnames = ['Solutions', 'Tech', 'Digital', 'Systems', 'Software', 'Cloud', 'AI', 'Cyber', 'Data', 'Analytics','Network', 'Security', 'Labs', 'Smart', 'Logic', 'Innovation', 'IT', 'Global', 'Developers', 'Code', 'Techno', 'Automations', 'Cloudware', 'Dynamics', 'Vision', 'Intelligence', 'NextGen', 'Computing', 'Innovators', 'Engineering', 'Performance', 'Softworks', 'Logicware', 'Digitalware', 'Transform', 'Platform', 'Smartware', 'Dataflow', 'Byte', 'Edge', 'Nexus', 'Techworks', 'Bit', 'Virtual', 'SystemsX', 'Infotech', 'Genix', 'Quantum', 'Bitware', 'CloudX'];\r",
									"\r",
									"    const randomTastName = tagnames[Math.floor(Math.random() * tagnames.length)]\r",
									"    return randomTastName\r",
									"}\r",
									"pm.environment.set(\"Tag\", tag())\r",
									"\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"Empresa\") + \" \" + pm.environment.get(\"Tag\"))\r",
									"\r",
									"\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"\r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									"\r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									"\r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									"\r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									"\r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									"\r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"CNPJ\", cnpjGerado);\r",
									"\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function gerarTelefone() {\r",
									"    // Gerando um DDD aleatório entre 11 e 99\r",
									"    const ddd = Math.floor(Math.random() * (99 - 11 + 1)) + 11;\r",
									"\r",
									"    // Gerando o número de telefone com 9 dígitos, começando com 9\r",
									"    const numero = Math.floor(Math.random() * 100000000) + 900000000; // Gera um número aleatório entre 900000000 e 999999999 (começando com '9')\r",
									"\r",
									"    // Concatenando +55, o DDD e o número gerado para formar o telefone\r",
									"    const telefone = `55${ddd}${numero.toString().slice(0, 5)}${numero.toString().slice(5, 9)}`;\r",
									"\r",
									"    return telefone;\r",
									"}\r",
									"\r",
									"// Gerando o número de telefone e armazenando como variável de ambiente\r",
									"const telefoneGerado = gerarTelefone();\r",
									"pm.environment.set(\"telefone\", telefoneGerado);\r",
									"\r",
									"function descricao() {\r",
									"    const names = [\"Testes\", \"Automação\", \"FrontEnd\", \"Backend\",\"Banco de Dados\", \"IA\",\"AWS\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Descricao\", descricao())\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"NomeRua\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"NomeRuas\", lastname())\r",
									"\r",
									"pm.environment.set(\"nomeruaComposto\", \r",
									"    pm.environment.get(\"NomeRua\") + \" \" + pm.environment.get(\"NomeRuas\"))\r",
									"\r",
									"function logradouro() {\r",
									"    const names = [\"Avenida\", \"Rua\", \"Alameda\", \"Travessa\", \"Praça\", \"Rodovia\", \"Estrada\", \"Largo\", \"Viaduto\", \"Marginal\", \"Parque\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Logradouro\", logradouro())\r",
									"\r",
									"pm.environment.set(\"logradouroCompleto\", \r",
									"    pm.environment.get(\"Logradouro\") + \" \" + pm.environment.get(\"nomeruaComposto\"))\r",
									"\r",
									"\r",
									"function gerarNumeroResidencia() {\r",
									"    // Definindo a probabilidade de gerar números com mais de 5 caracteres\r",
									"    const tamanhoNumero = Math.random() < 0.8 ? Math.floor(Math.random() * 5) + 1 : Math.floor(Math.random() * 6) + 5;\r",
									"\r",
									"    // Gerando um número aleatório com o tamanho definido\r",
									"    let numeroResidencia = Math.floor(Math.random() * Math.pow(10, tamanhoNumero)).toString(); // Gera número aleatório com o tamanho desejado\r",
									"\r",
									"    // Se o primeiro caractere for 0, remove-o\r",
									"    if (numeroResidencia[0] === '0') {\r",
									"        numeroResidencia = numeroResidencia.slice(1); // Remove o primeiro caractere\r",
									"    }\r",
									"\r",
									"    // Garantindo que o número tenha no máximo 10 caracteres\r",
									"    if (numeroResidencia.length > 10) {\r",
									"        numeroResidencia = numeroResidencia.slice(0, 10); // Limita a 10 caracteres\r",
									"    }\r",
									"\r",
									"    return numeroResidencia;\r",
									"}\r",
									"\r",
									"// Gerando o número de residência e armazenando como variável de ambiente\r",
									"const numeroResidenciaGerado = gerarNumeroResidencia();\r",
									"pm.environment.set(\"numeroResidencia\", numeroResidenciaGerado);\r",
									"\r",
									"function bairro() {\r",
									"    const names = ['Leblon', 'Ipanema', 'Copacabana', 'Barra da Tijuca', 'Botafogo', 'Lapa', 'Santa Teresa', 'Jardim Botânico', 'Flamengo', 'São Conrado', 'Moema', 'Vila Madalena', 'Pinheiros', 'Jardins', 'Aclimação', 'Brooklin', 'Tatuapé', 'Vila Progredior', 'Vila Nova Conceição', 'Campo Belo','Centro', 'Praia de Belas', 'Moinhos de Vento', 'Petrópolis', 'Tristeza', 'Caminho das Árvores', 'Pituba', 'Stella Maris', 'Parque Atlântico', 'Costa Azul', 'Vila Galvão', 'Santo Amaro', 'Perdizes', 'Aclimação', 'Vila Sônia', 'Cidade Dutra', 'São Bernardo do Campo', 'Vila Mariana', 'Bela Vista', 'Liberdade','Pinheiros', 'Itaim Bibi', 'Santa Cecília', 'Tucuruvi', 'Chácara Santo Antônio', 'Água Fria', 'Vila Olímpia', 'Vila São Francisco', 'Consolação', 'Vila Madalena']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Bairro\", bairro())\r",
									"\r",
									"function cidade() {\r",
									"    const names = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador', 'Curitiba', 'Fortaleza', 'Recife', 'Brasília', 'Manaus', 'Vitória', 'Goiânia', 'Belém', 'Natal', 'São Luís', 'Maceió', 'Campo Grande', 'João Pessoa', 'Aracaju', 'Cuiabá', 'Florianópolis', 'Teresina', 'Palmas', 'Macapá', 'Rio Branco', 'Boa Vista', 'Porto Velho', 'Anápolis', 'Caruaru', 'Londrina','Marabá', 'Araraquara', 'Sorocaba', 'Santos', 'Niterói', 'Mogi das Cruzes', 'Caxias do Sul', 'Barueri', 'Campinas', 'São José', 'Ponta Grossa', 'Jundiaí', 'Uberlândia', 'Diadema', 'Santo André', 'São Bernardo do Campo', 'Itaquaquecetuba', 'Ribeirão Preto', 'Juiz de Fora']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Cidade\", cidade())\r",
									"\r",
									"function abreviacao() {\r",
									"    const names = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"AbreviacaoEstado\", abreviacao())\r",
									"\r",
									"function randomCep() {\r",
									"    let randomCep = '';\r",
									"   \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        randomCep += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCep;\r",
									"}\r",
									"pm.environment.set(\"cep\", randomCep());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Mensagem de erro\",function(){\r",
									"     pm.expect(pm.response.json().error[0]).to.equal(\"O campo Número é obrigatório\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomeEmpresa}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"{{fullnameUser}}\",\r\n  \"telephone\": \"{{telefone}}\",\r\n  \"serviceDescription\": \"{{Descricao}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{cep}}\",\r\n      \"city\": \"{{Cidade}}\",\r\n      \"state\": \"{{AbreviacaoEstado}}\",\r\n      \"district\": \"{{Bairro}}\",\r\n      \"street\": \"{{logradouroCompleto}}\",\r\n      \"number\": \"\",\r\n      \"complement\": \"\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTM0MSwiZXhwIjoxNzM5MzE1NzQxfQ.cgJqYe74cprHCRTY9YLF_B-Hfgfp8l8lr6gDrEuqMi4' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"corporateName\": \"Matheus Sousa Testes\",\r\n  \"registerCompany\": \"57126456000155\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com o campo Numero com caracteres especiais",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function empresa() {\r",
									"    const names = [\"TechNova\", \"Bytewave\", \"Cyberion\", \"InovaTech\", \"Nexabyte\", \"Softtron\", \"Codeverse\", \"Dataflux\", \"Infinitron\", \"LogiCore\", \"Zentek\",\"Neurobyte\", \"Cloudix\", \"Sysnova\", \"Hexabit\", \"AIgorithm\", \"Quantumix\", \"Webtron\", \"Netflux\", \"Cyberflux\", \"Deepcode\", \"Techpulse\", \"Synaptech\", \"Codexis\", \"Nexonix\", \"Algobyte\", \"Infobyte\", \"Datazen\", \"Digiflow\", \"Innovix\", \"Coretron\", \"Zybernet\", \"Neurotech\", \"Nanobyte\", \"Virtunix\", \"Codexel\", \"Optibit\", \"Bitnova\", \"Globotron\", \"Digiware\", \"Skytech\", \"Cybervox\", \"Techspire\", \"Softbit\", \"MetaTech\", \"Synthron\", \"Virtuabyte\", \"Cloudtron\", \"Algonix\", \"Bitzen\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Empresa\", empresa())\r",
									"\r",
									"function tag() {\r",
									"    const tagnames = ['Solutions', 'Tech', 'Digital', 'Systems', 'Software', 'Cloud', 'AI', 'Cyber', 'Data', 'Analytics','Network', 'Security', 'Labs', 'Smart', 'Logic', 'Innovation', 'IT', 'Global', 'Developers', 'Code', 'Techno', 'Automations', 'Cloudware', 'Dynamics', 'Vision', 'Intelligence', 'NextGen', 'Computing', 'Innovators', 'Engineering', 'Performance', 'Softworks', 'Logicware', 'Digitalware', 'Transform', 'Platform', 'Smartware', 'Dataflow', 'Byte', 'Edge', 'Nexus', 'Techworks', 'Bit', 'Virtual', 'SystemsX', 'Infotech', 'Genix', 'Quantum', 'Bitware', 'CloudX'];\r",
									"\r",
									"    const randomTastName = tagnames[Math.floor(Math.random() * tagnames.length)]\r",
									"    return randomTastName\r",
									"}\r",
									"pm.environment.set(\"Tag\", tag())\r",
									"\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"Empresa\") + \" \" + pm.environment.get(\"Tag\"))\r",
									"\r",
									"\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"\r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									"\r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									"\r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									"\r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									"\r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									"\r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"CNPJ\", cnpjGerado);\r",
									"\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function gerarTelefone() {\r",
									"    // Gerando um DDD aleatório entre 11 e 99\r",
									"    const ddd = Math.floor(Math.random() * (99 - 11 + 1)) + 11;\r",
									"\r",
									"    // Gerando o número de telefone com 9 dígitos, começando com 9\r",
									"    const numero = Math.floor(Math.random() * 100000000) + 900000000; // Gera um número aleatório entre 900000000 e 999999999 (começando com '9')\r",
									"\r",
									"    // Concatenando +55, o DDD e o número gerado para formar o telefone\r",
									"    const telefone = `55${ddd}${numero.toString().slice(0, 5)}${numero.toString().slice(5, 9)}`;\r",
									"\r",
									"    return telefone;\r",
									"}\r",
									"\r",
									"// Gerando o número de telefone e armazenando como variável de ambiente\r",
									"const telefoneGerado = gerarTelefone();\r",
									"pm.environment.set(\"telefone\", telefoneGerado);\r",
									"\r",
									"function descricao() {\r",
									"    const names = [\"Testes\", \"Automação\", \"FrontEnd\", \"Backend\",\"Banco de Dados\", \"IA\",\"AWS\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Descricao\", descricao())\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"NomeRua\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"NomeRuas\", lastname())\r",
									"\r",
									"pm.environment.set(\"nomeruaComposto\", \r",
									"    pm.environment.get(\"NomeRua\") + \" \" + pm.environment.get(\"NomeRuas\"))\r",
									"\r",
									"function logradouro() {\r",
									"    const names = [\"Avenida\", \"Rua\", \"Alameda\", \"Travessa\", \"Praça\", \"Rodovia\", \"Estrada\", \"Largo\", \"Viaduto\", \"Marginal\", \"Parque\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Logradouro\", logradouro())\r",
									"\r",
									"pm.environment.set(\"logradouroCompleto\", \r",
									"    pm.environment.get(\"Logradouro\") + \" \" + pm.environment.get(\"nomeruaComposto\"))\r",
									"\r",
									"\r",
									"function gerarNumeroResidencia() {\r",
									"    // Definindo a probabilidade de gerar números com mais de 5 caracteres\r",
									"    const tamanhoNumero = Math.random() < 0.8 ? Math.floor(Math.random() * 5) + 1 : Math.floor(Math.random() * 6) + 5;\r",
									"\r",
									"    // Gerando um número aleatório com o tamanho definido\r",
									"    let numeroResidencia = Math.floor(Math.random() * Math.pow(10, tamanhoNumero)).toString(); // Gera número aleatório com o tamanho desejado\r",
									"\r",
									"    // Se o primeiro caractere for 0, remove-o\r",
									"    if (numeroResidencia[0] === '0') {\r",
									"        numeroResidencia = numeroResidencia.slice(1); // Remove o primeiro caractere\r",
									"    }\r",
									"\r",
									"    // Garantindo que o número tenha no máximo 10 caracteres\r",
									"    if (numeroResidencia.length > 10) {\r",
									"        numeroResidencia = numeroResidencia.slice(0, 10); // Limita a 10 caracteres\r",
									"    }\r",
									"\r",
									"    return numeroResidencia;\r",
									"}\r",
									"\r",
									"// Gerando o número de residência e armazenando como variável de ambiente\r",
									"const numeroResidenciaGerado = gerarNumeroResidencia();\r",
									"pm.environment.set(\"numeroResidencia\", numeroResidenciaGerado);\r",
									"\r",
									"function bairro() {\r",
									"    const names = ['Leblon', 'Ipanema', 'Copacabana', 'Barra da Tijuca', 'Botafogo', 'Lapa', 'Santa Teresa', 'Jardim Botânico', 'Flamengo', 'São Conrado', 'Moema', 'Vila Madalena', 'Pinheiros', 'Jardins', 'Aclimação', 'Brooklin', 'Tatuapé', 'Vila Progredior', 'Vila Nova Conceição', 'Campo Belo','Centro', 'Praia de Belas', 'Moinhos de Vento', 'Petrópolis', 'Tristeza', 'Caminho das Árvores', 'Pituba', 'Stella Maris', 'Parque Atlântico', 'Costa Azul', 'Vila Galvão', 'Santo Amaro', 'Perdizes', 'Aclimação', 'Vila Sônia', 'Cidade Dutra', 'São Bernardo do Campo', 'Vila Mariana', 'Bela Vista', 'Liberdade','Pinheiros', 'Itaim Bibi', 'Santa Cecília', 'Tucuruvi', 'Chácara Santo Antônio', 'Água Fria', 'Vila Olímpia', 'Vila São Francisco', 'Consolação', 'Vila Madalena']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Bairro\", bairro())\r",
									"\r",
									"function cidade() {\r",
									"    const names = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador', 'Curitiba', 'Fortaleza', 'Recife', 'Brasília', 'Manaus', 'Vitória', 'Goiânia', 'Belém', 'Natal', 'São Luís', 'Maceió', 'Campo Grande', 'João Pessoa', 'Aracaju', 'Cuiabá', 'Florianópolis', 'Teresina', 'Palmas', 'Macapá', 'Rio Branco', 'Boa Vista', 'Porto Velho', 'Anápolis', 'Caruaru', 'Londrina','Marabá', 'Araraquara', 'Sorocaba', 'Santos', 'Niterói', 'Mogi das Cruzes', 'Caxias do Sul', 'Barueri', 'Campinas', 'São José', 'Ponta Grossa', 'Jundiaí', 'Uberlândia', 'Diadema', 'Santo André', 'São Bernardo do Campo', 'Itaquaquecetuba', 'Ribeirão Preto', 'Juiz de Fora']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Cidade\", cidade())\r",
									"\r",
									"function abreviacao() {\r",
									"    const names = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"AbreviacaoEstado\", abreviacao())\r",
									"\r",
									"function randomCep() {\r",
									"    let randomCep = '';\r",
									"   \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        randomCep += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCep;\r",
									"}\r",
									"pm.environment.set(\"cep\", randomCep());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomeEmpresa}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"{{fullnameUser}}\",\r\n  \"telephone\": \"{{telefone}}\",\r\n  \"serviceDescription\": \"{{Descricao}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{cep}}\",\r\n      \"city\": \"{{Cidade}}\",\r\n      \"state\": \"{{AbreviacaoEstado}}\",\r\n      \"district\": \"{{Bairro}}\",\r\n      \"street\": \"{{logradouroCompleto}}\",\r\n      \"number\": \"10@\",\r\n      \"complement\": \"\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTM0MSwiZXhwIjoxNzM5MzE1NzQxfQ.cgJqYe74cprHCRTY9YLF_B-Hfgfp8l8lr6gDrEuqMi4' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"corporateName\": \"Matheus Sousa Testes\",\r\n  \"registerCompany\": \"57126456000155\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com o campo Numero com letras e numero",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function empresa() {\r",
									"    const names = [\"TechNova\", \"Bytewave\", \"Cyberion\", \"InovaTech\", \"Nexabyte\", \"Softtron\", \"Codeverse\", \"Dataflux\", \"Infinitron\", \"LogiCore\", \"Zentek\",\"Neurobyte\", \"Cloudix\", \"Sysnova\", \"Hexabit\", \"AIgorithm\", \"Quantumix\", \"Webtron\", \"Netflux\", \"Cyberflux\", \"Deepcode\", \"Techpulse\", \"Synaptech\", \"Codexis\", \"Nexonix\", \"Algobyte\", \"Infobyte\", \"Datazen\", \"Digiflow\", \"Innovix\", \"Coretron\", \"Zybernet\", \"Neurotech\", \"Nanobyte\", \"Virtunix\", \"Codexel\", \"Optibit\", \"Bitnova\", \"Globotron\", \"Digiware\", \"Skytech\", \"Cybervox\", \"Techspire\", \"Softbit\", \"MetaTech\", \"Synthron\", \"Virtuabyte\", \"Cloudtron\", \"Algonix\", \"Bitzen\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Empresa\", empresa())\r",
									"\r",
									"function tag() {\r",
									"    const tagnames = ['Solutions', 'Tech', 'Digital', 'Systems', 'Software', 'Cloud', 'AI', 'Cyber', 'Data', 'Analytics','Network', 'Security', 'Labs', 'Smart', 'Logic', 'Innovation', 'IT', 'Global', 'Developers', 'Code', 'Techno', 'Automations', 'Cloudware', 'Dynamics', 'Vision', 'Intelligence', 'NextGen', 'Computing', 'Innovators', 'Engineering', 'Performance', 'Softworks', 'Logicware', 'Digitalware', 'Transform', 'Platform', 'Smartware', 'Dataflow', 'Byte', 'Edge', 'Nexus', 'Techworks', 'Bit', 'Virtual', 'SystemsX', 'Infotech', 'Genix', 'Quantum', 'Bitware', 'CloudX'];\r",
									"\r",
									"    const randomTastName = tagnames[Math.floor(Math.random() * tagnames.length)]\r",
									"    return randomTastName\r",
									"}\r",
									"pm.environment.set(\"Tag\", tag())\r",
									"\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"Empresa\") + \" \" + pm.environment.get(\"Tag\"))\r",
									"\r",
									"\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"\r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									"\r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									"\r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									"\r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									"\r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									"\r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"CNPJ\", cnpjGerado);\r",
									"\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function gerarTelefone() {\r",
									"    // Gerando um DDD aleatório entre 11 e 99\r",
									"    const ddd = Math.floor(Math.random() * (99 - 11 + 1)) + 11;\r",
									"\r",
									"    // Gerando o número de telefone com 9 dígitos, começando com 9\r",
									"    const numero = Math.floor(Math.random() * 100000000) + 900000000; // Gera um número aleatório entre 900000000 e 999999999 (começando com '9')\r",
									"\r",
									"    // Concatenando +55, o DDD e o número gerado para formar o telefone\r",
									"    const telefone = `55${ddd}${numero.toString().slice(0, 5)}${numero.toString().slice(5, 9)}`;\r",
									"\r",
									"    return telefone;\r",
									"}\r",
									"\r",
									"// Gerando o número de telefone e armazenando como variável de ambiente\r",
									"const telefoneGerado = gerarTelefone();\r",
									"pm.environment.set(\"telefone\", telefoneGerado);\r",
									"\r",
									"function descricao() {\r",
									"    const names = [\"Testes\", \"Automação\", \"FrontEnd\", \"Backend\",\"Banco de Dados\", \"IA\",\"AWS\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Descricao\", descricao())\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"NomeRua\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"NomeRuas\", lastname())\r",
									"\r",
									"pm.environment.set(\"nomeruaComposto\", \r",
									"    pm.environment.get(\"NomeRua\") + \" \" + pm.environment.get(\"NomeRuas\"))\r",
									"\r",
									"function logradouro() {\r",
									"    const names = [\"Avenida\", \"Rua\", \"Alameda\", \"Travessa\", \"Praça\", \"Rodovia\", \"Estrada\", \"Largo\", \"Viaduto\", \"Marginal\", \"Parque\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Logradouro\", logradouro())\r",
									"\r",
									"pm.environment.set(\"logradouroCompleto\", \r",
									"    pm.environment.get(\"Logradouro\") + \" \" + pm.environment.get(\"nomeruaComposto\"))\r",
									"\r",
									"\r",
									"function gerarNumeroResidencia() {\r",
									"    // Definindo a probabilidade de gerar números com mais de 5 caracteres\r",
									"    const tamanhoNumero = Math.random() < 0.8 ? Math.floor(Math.random() * 5) + 1 : Math.floor(Math.random() * 6) + 5;\r",
									"\r",
									"    // Gerando um número aleatório com o tamanho definido\r",
									"    let numeroResidencia = Math.floor(Math.random() * Math.pow(10, tamanhoNumero)).toString(); // Gera número aleatório com o tamanho desejado\r",
									"\r",
									"    // Se o primeiro caractere for 0, remove-o\r",
									"    if (numeroResidencia[0] === '0') {\r",
									"        numeroResidencia = numeroResidencia.slice(1); // Remove o primeiro caractere\r",
									"    }\r",
									"\r",
									"    // Garantindo que o número tenha no máximo 10 caracteres\r",
									"    if (numeroResidencia.length > 10) {\r",
									"        numeroResidencia = numeroResidencia.slice(0, 10); // Limita a 10 caracteres\r",
									"    }\r",
									"\r",
									"    return numeroResidencia;\r",
									"}\r",
									"\r",
									"// Gerando o número de residência e armazenando como variável de ambiente\r",
									"const numeroResidenciaGerado = gerarNumeroResidencia();\r",
									"pm.environment.set(\"numeroResidencia\", numeroResidenciaGerado);\r",
									"\r",
									"function bairro() {\r",
									"    const names = ['Leblon', 'Ipanema', 'Copacabana', 'Barra da Tijuca', 'Botafogo', 'Lapa', 'Santa Teresa', 'Jardim Botânico', 'Flamengo', 'São Conrado', 'Moema', 'Vila Madalena', 'Pinheiros', 'Jardins', 'Aclimação', 'Brooklin', 'Tatuapé', 'Vila Progredior', 'Vila Nova Conceição', 'Campo Belo','Centro', 'Praia de Belas', 'Moinhos de Vento', 'Petrópolis', 'Tristeza', 'Caminho das Árvores', 'Pituba', 'Stella Maris', 'Parque Atlântico', 'Costa Azul', 'Vila Galvão', 'Santo Amaro', 'Perdizes', 'Aclimação', 'Vila Sônia', 'Cidade Dutra', 'São Bernardo do Campo', 'Vila Mariana', 'Bela Vista', 'Liberdade','Pinheiros', 'Itaim Bibi', 'Santa Cecília', 'Tucuruvi', 'Chácara Santo Antônio', 'Água Fria', 'Vila Olímpia', 'Vila São Francisco', 'Consolação', 'Vila Madalena']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Bairro\", bairro())\r",
									"\r",
									"function cidade() {\r",
									"    const names = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador', 'Curitiba', 'Fortaleza', 'Recife', 'Brasília', 'Manaus', 'Vitória', 'Goiânia', 'Belém', 'Natal', 'São Luís', 'Maceió', 'Campo Grande', 'João Pessoa', 'Aracaju', 'Cuiabá', 'Florianópolis', 'Teresina', 'Palmas', 'Macapá', 'Rio Branco', 'Boa Vista', 'Porto Velho', 'Anápolis', 'Caruaru', 'Londrina','Marabá', 'Araraquara', 'Sorocaba', 'Santos', 'Niterói', 'Mogi das Cruzes', 'Caxias do Sul', 'Barueri', 'Campinas', 'São José', 'Ponta Grossa', 'Jundiaí', 'Uberlândia', 'Diadema', 'Santo André', 'São Bernardo do Campo', 'Itaquaquecetuba', 'Ribeirão Preto', 'Juiz de Fora']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Cidade\", cidade())\r",
									"\r",
									"function abreviacao() {\r",
									"    const names = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"AbreviacaoEstado\", abreviacao())\r",
									"\r",
									"function randomCep() {\r",
									"    let randomCep = '';\r",
									"   \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        randomCep += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCep;\r",
									"}\r",
									"pm.environment.set(\"cep\", randomCep());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomeEmpresa}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"{{fullnameUser}}\",\r\n  \"telephone\": \"{{telefone}}\",\r\n  \"serviceDescription\": \"{{Descricao}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{cep}}\",\r\n      \"city\": \"{{Cidade}}\",\r\n      \"state\": \"{{AbreviacaoEstado}}\",\r\n      \"district\": \"{{Bairro}}\",\r\n      \"street\": \"{{logradouroCompleto}}\",\r\n      \"number\": \"12b\",\r\n      \"complement\": \"\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTM0MSwiZXhwIjoxNzM5MzE1NzQxfQ.cgJqYe74cprHCRTY9YLF_B-Hfgfp8l8lr6gDrEuqMi4' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"corporateName\": \"Matheus Sousa Testes\",\r\n  \"registerCompany\": \"57126456000155\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com o campo Numero com mais de 10 caracteres",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function empresa() {\r",
									"    const names = [\"TechNova\", \"Bytewave\", \"Cyberion\", \"InovaTech\", \"Nexabyte\", \"Softtron\", \"Codeverse\", \"Dataflux\", \"Infinitron\", \"LogiCore\", \"Zentek\",\"Neurobyte\", \"Cloudix\", \"Sysnova\", \"Hexabit\", \"AIgorithm\", \"Quantumix\", \"Webtron\", \"Netflux\", \"Cyberflux\", \"Deepcode\", \"Techpulse\", \"Synaptech\", \"Codexis\", \"Nexonix\", \"Algobyte\", \"Infobyte\", \"Datazen\", \"Digiflow\", \"Innovix\", \"Coretron\", \"Zybernet\", \"Neurotech\", \"Nanobyte\", \"Virtunix\", \"Codexel\", \"Optibit\", \"Bitnova\", \"Globotron\", \"Digiware\", \"Skytech\", \"Cybervox\", \"Techspire\", \"Softbit\", \"MetaTech\", \"Synthron\", \"Virtuabyte\", \"Cloudtron\", \"Algonix\", \"Bitzen\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Empresa\", empresa())\r",
									"\r",
									"function tag() {\r",
									"    const tagnames = ['Solutions', 'Tech', 'Digital', 'Systems', 'Software', 'Cloud', 'AI', 'Cyber', 'Data', 'Analytics','Network', 'Security', 'Labs', 'Smart', 'Logic', 'Innovation', 'IT', 'Global', 'Developers', 'Code', 'Techno', 'Automations', 'Cloudware', 'Dynamics', 'Vision', 'Intelligence', 'NextGen', 'Computing', 'Innovators', 'Engineering', 'Performance', 'Softworks', 'Logicware', 'Digitalware', 'Transform', 'Platform', 'Smartware', 'Dataflow', 'Byte', 'Edge', 'Nexus', 'Techworks', 'Bit', 'Virtual', 'SystemsX', 'Infotech', 'Genix', 'Quantum', 'Bitware', 'CloudX'];\r",
									"\r",
									"    const randomTastName = tagnames[Math.floor(Math.random() * tagnames.length)]\r",
									"    return randomTastName\r",
									"}\r",
									"pm.environment.set(\"Tag\", tag())\r",
									"\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"Empresa\") + \" \" + pm.environment.get(\"Tag\"))\r",
									"\r",
									"\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"\r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									"\r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									"\r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									"\r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									"\r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									"\r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"CNPJ\", cnpjGerado);\r",
									"\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function gerarTelefone() {\r",
									"    // Gerando um DDD aleatório entre 11 e 99\r",
									"    const ddd = Math.floor(Math.random() * (99 - 11 + 1)) + 11;\r",
									"\r",
									"    // Gerando o número de telefone com 9 dígitos, começando com 9\r",
									"    const numero = Math.floor(Math.random() * 100000000) + 900000000; // Gera um número aleatório entre 900000000 e 999999999 (começando com '9')\r",
									"\r",
									"    // Concatenando +55, o DDD e o número gerado para formar o telefone\r",
									"    const telefone = `55${ddd}${numero.toString().slice(0, 5)}${numero.toString().slice(5, 9)}`;\r",
									"\r",
									"    return telefone;\r",
									"}\r",
									"\r",
									"// Gerando o número de telefone e armazenando como variável de ambiente\r",
									"const telefoneGerado = gerarTelefone();\r",
									"pm.environment.set(\"telefone\", telefoneGerado);\r",
									"\r",
									"function descricao() {\r",
									"    const names = [\"Testes\", \"Automação\", \"FrontEnd\", \"Backend\",\"Banco de Dados\", \"IA\",\"AWS\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Descricao\", descricao())\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"NomeRua\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"NomeRuas\", lastname())\r",
									"\r",
									"pm.environment.set(\"nomeruaComposto\", \r",
									"    pm.environment.get(\"NomeRua\") + \" \" + pm.environment.get(\"NomeRuas\"))\r",
									"\r",
									"function logradouro() {\r",
									"    const names = [\"Avenida\", \"Rua\", \"Alameda\", \"Travessa\", \"Praça\", \"Rodovia\", \"Estrada\", \"Largo\", \"Viaduto\", \"Marginal\", \"Parque\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Logradouro\", logradouro())\r",
									"\r",
									"pm.environment.set(\"logradouroCompleto\", \r",
									"    pm.environment.get(\"Logradouro\") + \" \" + pm.environment.get(\"nomeruaComposto\"))\r",
									"\r",
									"\r",
									"function gerarNumeroResidencia() {\r",
									"    // Definindo a probabilidade de gerar números com mais de 5 caracteres\r",
									"    const tamanhoNumero = Math.random() < 0.8 ? Math.floor(Math.random() * 5) + 1 : Math.floor(Math.random() * 6) + 5;\r",
									"\r",
									"    // Gerando um número aleatório com o tamanho definido\r",
									"    let numeroResidencia = Math.floor(Math.random() * Math.pow(10, tamanhoNumero)).toString(); // Gera número aleatório com o tamanho desejado\r",
									"\r",
									"    // Se o primeiro caractere for 0, remove-o\r",
									"    if (numeroResidencia[0] === '0') {\r",
									"        numeroResidencia = numeroResidencia.slice(1); // Remove o primeiro caractere\r",
									"    }\r",
									"\r",
									"    // Garantindo que o número tenha no máximo 10 caracteres\r",
									"    if (numeroResidencia.length > 10) {\r",
									"        numeroResidencia = numeroResidencia.slice(0, 10); // Limita a 10 caracteres\r",
									"    }\r",
									"\r",
									"    return numeroResidencia;\r",
									"}\r",
									"\r",
									"// Gerando o número de residência e armazenando como variável de ambiente\r",
									"const numeroResidenciaGerado = gerarNumeroResidencia();\r",
									"pm.environment.set(\"numeroResidencia\", numeroResidenciaGerado);\r",
									"\r",
									"function bairro() {\r",
									"    const names = ['Leblon', 'Ipanema', 'Copacabana', 'Barra da Tijuca', 'Botafogo', 'Lapa', 'Santa Teresa', 'Jardim Botânico', 'Flamengo', 'São Conrado', 'Moema', 'Vila Madalena', 'Pinheiros', 'Jardins', 'Aclimação', 'Brooklin', 'Tatuapé', 'Vila Progredior', 'Vila Nova Conceição', 'Campo Belo','Centro', 'Praia de Belas', 'Moinhos de Vento', 'Petrópolis', 'Tristeza', 'Caminho das Árvores', 'Pituba', 'Stella Maris', 'Parque Atlântico', 'Costa Azul', 'Vila Galvão', 'Santo Amaro', 'Perdizes', 'Aclimação', 'Vila Sônia', 'Cidade Dutra', 'São Bernardo do Campo', 'Vila Mariana', 'Bela Vista', 'Liberdade','Pinheiros', 'Itaim Bibi', 'Santa Cecília', 'Tucuruvi', 'Chácara Santo Antônio', 'Água Fria', 'Vila Olímpia', 'Vila São Francisco', 'Consolação', 'Vila Madalena']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Bairro\", bairro())\r",
									"\r",
									"function cidade() {\r",
									"    const names = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador', 'Curitiba', 'Fortaleza', 'Recife', 'Brasília', 'Manaus', 'Vitória', 'Goiânia', 'Belém', 'Natal', 'São Luís', 'Maceió', 'Campo Grande', 'João Pessoa', 'Aracaju', 'Cuiabá', 'Florianópolis', 'Teresina', 'Palmas', 'Macapá', 'Rio Branco', 'Boa Vista', 'Porto Velho', 'Anápolis', 'Caruaru', 'Londrina','Marabá', 'Araraquara', 'Sorocaba', 'Santos', 'Niterói', 'Mogi das Cruzes', 'Caxias do Sul', 'Barueri', 'Campinas', 'São José', 'Ponta Grossa', 'Jundiaí', 'Uberlândia', 'Diadema', 'Santo André', 'São Bernardo do Campo', 'Itaquaquecetuba', 'Ribeirão Preto', 'Juiz de Fora']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Cidade\", cidade())\r",
									"\r",
									"function abreviacao() {\r",
									"    const names = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"AbreviacaoEstado\", abreviacao())\r",
									"\r",
									"function randomCep() {\r",
									"    let randomCep = '';\r",
									"   \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        randomCep += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCep;\r",
									"}\r",
									"pm.environment.set(\"cep\", randomCep());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomeEmpresa}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"{{fullnameUser}}\",\r\n  \"telephone\": \"{{telefone}}\",\r\n  \"serviceDescription\": \"{{Descricao}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{cep}}\",\r\n      \"city\": \"{{Cidade}}\",\r\n      \"state\": \"{{AbreviacaoEstado}}\",\r\n      \"district\": \"{{Bairro}}\",\r\n      \"street\": \"{{logradouroCompleto}}\",\r\n      \"number\": \"1234567890123\",\r\n      \"complement\": \"\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTM0MSwiZXhwIjoxNzM5MzE1NzQxfQ.cgJqYe74cprHCRTY9YLF_B-Hfgfp8l8lr6gDrEuqMi4' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"corporateName\": \"Matheus Sousa Testes\",\r\n  \"registerCompany\": \"57126456000155\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com o campo Numero so com letras",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function empresa() {\r",
									"    const names = [\"TechNova\", \"Bytewave\", \"Cyberion\", \"InovaTech\", \"Nexabyte\", \"Softtron\", \"Codeverse\", \"Dataflux\", \"Infinitron\", \"LogiCore\", \"Zentek\",\"Neurobyte\", \"Cloudix\", \"Sysnova\", \"Hexabit\", \"AIgorithm\", \"Quantumix\", \"Webtron\", \"Netflux\", \"Cyberflux\", \"Deepcode\", \"Techpulse\", \"Synaptech\", \"Codexis\", \"Nexonix\", \"Algobyte\", \"Infobyte\", \"Datazen\", \"Digiflow\", \"Innovix\", \"Coretron\", \"Zybernet\", \"Neurotech\", \"Nanobyte\", \"Virtunix\", \"Codexel\", \"Optibit\", \"Bitnova\", \"Globotron\", \"Digiware\", \"Skytech\", \"Cybervox\", \"Techspire\", \"Softbit\", \"MetaTech\", \"Synthron\", \"Virtuabyte\", \"Cloudtron\", \"Algonix\", \"Bitzen\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Empresa\", empresa())\r",
									"\r",
									"function tag() {\r",
									"    const tagnames = ['Solutions', 'Tech', 'Digital', 'Systems', 'Software', 'Cloud', 'AI', 'Cyber', 'Data', 'Analytics','Network', 'Security', 'Labs', 'Smart', 'Logic', 'Innovation', 'IT', 'Global', 'Developers', 'Code', 'Techno', 'Automations', 'Cloudware', 'Dynamics', 'Vision', 'Intelligence', 'NextGen', 'Computing', 'Innovators', 'Engineering', 'Performance', 'Softworks', 'Logicware', 'Digitalware', 'Transform', 'Platform', 'Smartware', 'Dataflow', 'Byte', 'Edge', 'Nexus', 'Techworks', 'Bit', 'Virtual', 'SystemsX', 'Infotech', 'Genix', 'Quantum', 'Bitware', 'CloudX'];\r",
									"\r",
									"    const randomTastName = tagnames[Math.floor(Math.random() * tagnames.length)]\r",
									"    return randomTastName\r",
									"}\r",
									"pm.environment.set(\"Tag\", tag())\r",
									"\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"Empresa\") + \" \" + pm.environment.get(\"Tag\"))\r",
									"\r",
									"\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"\r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									"\r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									"\r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									"\r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									"\r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									"\r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"CNPJ\", cnpjGerado);\r",
									"\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function gerarTelefone() {\r",
									"    // Gerando um DDD aleatório entre 11 e 99\r",
									"    const ddd = Math.floor(Math.random() * (99 - 11 + 1)) + 11;\r",
									"\r",
									"    // Gerando o número de telefone com 9 dígitos, começando com 9\r",
									"    const numero = Math.floor(Math.random() * 100000000) + 900000000; // Gera um número aleatório entre 900000000 e 999999999 (começando com '9')\r",
									"\r",
									"    // Concatenando +55, o DDD e o número gerado para formar o telefone\r",
									"    const telefone = `55${ddd}${numero.toString().slice(0, 5)}${numero.toString().slice(5, 9)}`;\r",
									"\r",
									"    return telefone;\r",
									"}\r",
									"\r",
									"// Gerando o número de telefone e armazenando como variável de ambiente\r",
									"const telefoneGerado = gerarTelefone();\r",
									"pm.environment.set(\"telefone\", telefoneGerado);\r",
									"\r",
									"function descricao() {\r",
									"    const names = [\"Testes\", \"Automação\", \"FrontEnd\", \"Backend\",\"Banco de Dados\", \"IA\",\"AWS\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Descricao\", descricao())\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"NomeRua\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"NomeRuas\", lastname())\r",
									"\r",
									"pm.environment.set(\"nomeruaComposto\", \r",
									"    pm.environment.get(\"NomeRua\") + \" \" + pm.environment.get(\"NomeRuas\"))\r",
									"\r",
									"function logradouro() {\r",
									"    const names = [\"Avenida\", \"Rua\", \"Alameda\", \"Travessa\", \"Praça\", \"Rodovia\", \"Estrada\", \"Largo\", \"Viaduto\", \"Marginal\", \"Parque\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Logradouro\", logradouro())\r",
									"\r",
									"pm.environment.set(\"logradouroCompleto\", \r",
									"    pm.environment.get(\"Logradouro\") + \" \" + pm.environment.get(\"nomeruaComposto\"))\r",
									"\r",
									"\r",
									"function gerarNumeroResidencia() {\r",
									"    // Definindo a probabilidade de gerar números com mais de 5 caracteres\r",
									"    const tamanhoNumero = Math.random() < 0.8 ? Math.floor(Math.random() * 5) + 1 : Math.floor(Math.random() * 6) + 5;\r",
									"\r",
									"    // Gerando um número aleatório com o tamanho definido\r",
									"    let numeroResidencia = Math.floor(Math.random() * Math.pow(10, tamanhoNumero)).toString(); // Gera número aleatório com o tamanho desejado\r",
									"\r",
									"    // Se o primeiro caractere for 0, remove-o\r",
									"    if (numeroResidencia[0] === '0') {\r",
									"        numeroResidencia = numeroResidencia.slice(1); // Remove o primeiro caractere\r",
									"    }\r",
									"\r",
									"    // Garantindo que o número tenha no máximo 10 caracteres\r",
									"    if (numeroResidencia.length > 10) {\r",
									"        numeroResidencia = numeroResidencia.slice(0, 10); // Limita a 10 caracteres\r",
									"    }\r",
									"\r",
									"    return numeroResidencia;\r",
									"}\r",
									"\r",
									"// Gerando o número de residência e armazenando como variável de ambiente\r",
									"const numeroResidenciaGerado = gerarNumeroResidencia();\r",
									"pm.environment.set(\"numeroResidencia\", numeroResidenciaGerado);\r",
									"\r",
									"function bairro() {\r",
									"    const names = ['Leblon', 'Ipanema', 'Copacabana', 'Barra da Tijuca', 'Botafogo', 'Lapa', 'Santa Teresa', 'Jardim Botânico', 'Flamengo', 'São Conrado', 'Moema', 'Vila Madalena', 'Pinheiros', 'Jardins', 'Aclimação', 'Brooklin', 'Tatuapé', 'Vila Progredior', 'Vila Nova Conceição', 'Campo Belo','Centro', 'Praia de Belas', 'Moinhos de Vento', 'Petrópolis', 'Tristeza', 'Caminho das Árvores', 'Pituba', 'Stella Maris', 'Parque Atlântico', 'Costa Azul', 'Vila Galvão', 'Santo Amaro', 'Perdizes', 'Aclimação', 'Vila Sônia', 'Cidade Dutra', 'São Bernardo do Campo', 'Vila Mariana', 'Bela Vista', 'Liberdade','Pinheiros', 'Itaim Bibi', 'Santa Cecília', 'Tucuruvi', 'Chácara Santo Antônio', 'Água Fria', 'Vila Olímpia', 'Vila São Francisco', 'Consolação', 'Vila Madalena']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Bairro\", bairro())\r",
									"\r",
									"function cidade() {\r",
									"    const names = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador', 'Curitiba', 'Fortaleza', 'Recife', 'Brasília', 'Manaus', 'Vitória', 'Goiânia', 'Belém', 'Natal', 'São Luís', 'Maceió', 'Campo Grande', 'João Pessoa', 'Aracaju', 'Cuiabá', 'Florianópolis', 'Teresina', 'Palmas', 'Macapá', 'Rio Branco', 'Boa Vista', 'Porto Velho', 'Anápolis', 'Caruaru', 'Londrina','Marabá', 'Araraquara', 'Sorocaba', 'Santos', 'Niterói', 'Mogi das Cruzes', 'Caxias do Sul', 'Barueri', 'Campinas', 'São José', 'Ponta Grossa', 'Jundiaí', 'Uberlândia', 'Diadema', 'Santo André', 'São Bernardo do Campo', 'Itaquaquecetuba', 'Ribeirão Preto', 'Juiz de Fora']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Cidade\", cidade())\r",
									"\r",
									"function abreviacao() {\r",
									"    const names = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"AbreviacaoEstado\", abreviacao())\r",
									"\r",
									"function randomCep() {\r",
									"    let randomCep = '';\r",
									"   \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        randomCep += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCep;\r",
									"}\r",
									"pm.environment.set(\"cep\", randomCep());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomeEmpresa}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"{{fullnameUser}}\",\r\n  \"telephone\": \"{{telefone}}\",\r\n  \"serviceDescription\": \"{{Descricao}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{cep}}\",\r\n      \"city\": \"{{Cidade}}\",\r\n      \"state\": \"{{AbreviacaoEstado}}\",\r\n      \"district\": \"{{Bairro}}\",\r\n      \"street\": \"{{logradouroCompleto}}\",\r\n      \"number\": \"Dez\",\r\n      \"complement\": \"\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTM0MSwiZXhwIjoxNzM5MzE1NzQxfQ.cgJqYe74cprHCRTY9YLF_B-Hfgfp8l8lr6gDrEuqMi4' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"corporateName\": \"Matheus Sousa Testes\",\r\n  \"registerCompany\": \"57126456000155\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com o campo Complemento com letras e numeros",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function empresa() {\r",
									"    const names = [\"TechNova\", \"Bytewave\", \"Cyberion\", \"InovaTech\", \"Nexabyte\", \"Softtron\", \"Codeverse\", \"Dataflux\", \"Infinitron\", \"LogiCore\", \"Zentek\",\"Neurobyte\", \"Cloudix\", \"Sysnova\", \"Hexabit\", \"AIgorithm\", \"Quantumix\", \"Webtron\", \"Netflux\", \"Cyberflux\", \"Deepcode\", \"Techpulse\", \"Synaptech\", \"Codexis\", \"Nexonix\", \"Algobyte\", \"Infobyte\", \"Datazen\", \"Digiflow\", \"Innovix\", \"Coretron\", \"Zybernet\", \"Neurotech\", \"Nanobyte\", \"Virtunix\", \"Codexel\", \"Optibit\", \"Bitnova\", \"Globotron\", \"Digiware\", \"Skytech\", \"Cybervox\", \"Techspire\", \"Softbit\", \"MetaTech\", \"Synthron\", \"Virtuabyte\", \"Cloudtron\", \"Algonix\", \"Bitzen\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Empresa\", empresa())\r",
									"\r",
									"function tag() {\r",
									"    const tagnames = ['Solutions', 'Tech', 'Digital', 'Systems', 'Software', 'Cloud', 'AI', 'Cyber', 'Data', 'Analytics','Network', 'Security', 'Labs', 'Smart', 'Logic', 'Innovation', 'IT', 'Global', 'Developers', 'Code', 'Techno', 'Automations', 'Cloudware', 'Dynamics', 'Vision', 'Intelligence', 'NextGen', 'Computing', 'Innovators', 'Engineering', 'Performance', 'Softworks', 'Logicware', 'Digitalware', 'Transform', 'Platform', 'Smartware', 'Dataflow', 'Byte', 'Edge', 'Nexus', 'Techworks', 'Bit', 'Virtual', 'SystemsX', 'Infotech', 'Genix', 'Quantum', 'Bitware', 'CloudX'];\r",
									"\r",
									"    const randomTastName = tagnames[Math.floor(Math.random() * tagnames.length)]\r",
									"    return randomTastName\r",
									"}\r",
									"pm.environment.set(\"Tag\", tag())\r",
									"\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"Empresa\") + \" \" + pm.environment.get(\"Tag\"))\r",
									"\r",
									"\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"\r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									"\r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									"\r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									"\r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									"\r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									"\r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"CNPJ\", cnpjGerado);\r",
									"\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function gerarTelefone() {\r",
									"    // Gerando um DDD aleatório entre 11 e 99\r",
									"    const ddd = Math.floor(Math.random() * (99 - 11 + 1)) + 11;\r",
									"\r",
									"    // Gerando o número de telefone com 9 dígitos, começando com 9\r",
									"    const numero = Math.floor(Math.random() * 100000000) + 900000000; // Gera um número aleatório entre 900000000 e 999999999 (começando com '9')\r",
									"\r",
									"    // Concatenando +55, o DDD e o número gerado para formar o telefone\r",
									"    const telefone = `55${ddd}${numero.toString().slice(0, 5)}${numero.toString().slice(5, 9)}`;\r",
									"\r",
									"    return telefone;\r",
									"}\r",
									"\r",
									"// Gerando o número de telefone e armazenando como variável de ambiente\r",
									"const telefoneGerado = gerarTelefone();\r",
									"pm.environment.set(\"telefone\", telefoneGerado);\r",
									"\r",
									"function descricao() {\r",
									"    const names = [\"Testes\", \"Automação\", \"FrontEnd\", \"Backend\",\"Banco de Dados\", \"IA\",\"AWS\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Descricao\", descricao())\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"NomeRua\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"NomeRuas\", lastname())\r",
									"\r",
									"pm.environment.set(\"nomeruaComposto\", \r",
									"    pm.environment.get(\"NomeRua\") + \" \" + pm.environment.get(\"NomeRuas\"))\r",
									"\r",
									"function logradouro() {\r",
									"    const names = [\"Avenida\", \"Rua\", \"Alameda\", \"Travessa\", \"Praça\", \"Rodovia\", \"Estrada\", \"Largo\", \"Viaduto\", \"Marginal\", \"Parque\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Logradouro\", logradouro())\r",
									"\r",
									"pm.environment.set(\"logradouroCompleto\", \r",
									"    pm.environment.get(\"Logradouro\") + \" \" + pm.environment.get(\"nomeruaComposto\"))\r",
									"\r",
									"\r",
									"function gerarNumeroResidencia() {\r",
									"    // Definindo a probabilidade de gerar números com mais de 5 caracteres\r",
									"    const tamanhoNumero = Math.random() < 0.8 ? Math.floor(Math.random() * 5) + 1 : Math.floor(Math.random() * 6) + 5;\r",
									"\r",
									"    // Gerando um número aleatório com o tamanho definido\r",
									"    let numeroResidencia = Math.floor(Math.random() * Math.pow(10, tamanhoNumero)).toString(); // Gera número aleatório com o tamanho desejado\r",
									"\r",
									"    // Se o primeiro caractere for 0, remove-o\r",
									"    if (numeroResidencia[0] === '0') {\r",
									"        numeroResidencia = numeroResidencia.slice(1); // Remove o primeiro caractere\r",
									"    }\r",
									"\r",
									"    // Garantindo que o número tenha no máximo 10 caracteres\r",
									"    if (numeroResidencia.length > 10) {\r",
									"        numeroResidencia = numeroResidencia.slice(0, 10); // Limita a 10 caracteres\r",
									"    }\r",
									"\r",
									"    return numeroResidencia;\r",
									"}\r",
									"\r",
									"// Gerando o número de residência e armazenando como variável de ambiente\r",
									"const numeroResidenciaGerado = gerarNumeroResidencia();\r",
									"pm.environment.set(\"numeroResidencia\", numeroResidenciaGerado);\r",
									"\r",
									"function bairro() {\r",
									"    const names = ['Leblon', 'Ipanema', 'Copacabana', 'Barra da Tijuca', 'Botafogo', 'Lapa', 'Santa Teresa', 'Jardim Botânico', 'Flamengo', 'São Conrado', 'Moema', 'Vila Madalena', 'Pinheiros', 'Jardins', 'Aclimação', 'Brooklin', 'Tatuapé', 'Vila Progredior', 'Vila Nova Conceição', 'Campo Belo','Centro', 'Praia de Belas', 'Moinhos de Vento', 'Petrópolis', 'Tristeza', 'Caminho das Árvores', 'Pituba', 'Stella Maris', 'Parque Atlântico', 'Costa Azul', 'Vila Galvão', 'Santo Amaro', 'Perdizes', 'Aclimação', 'Vila Sônia', 'Cidade Dutra', 'São Bernardo do Campo', 'Vila Mariana', 'Bela Vista', 'Liberdade','Pinheiros', 'Itaim Bibi', 'Santa Cecília', 'Tucuruvi', 'Chácara Santo Antônio', 'Água Fria', 'Vila Olímpia', 'Vila São Francisco', 'Consolação', 'Vila Madalena']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Bairro\", bairro())\r",
									"\r",
									"function cidade() {\r",
									"    const names = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador', 'Curitiba', 'Fortaleza', 'Recife', 'Brasília', 'Manaus', 'Vitória', 'Goiânia', 'Belém', 'Natal', 'São Luís', 'Maceió', 'Campo Grande', 'João Pessoa', 'Aracaju', 'Cuiabá', 'Florianópolis', 'Teresina', 'Palmas', 'Macapá', 'Rio Branco', 'Boa Vista', 'Porto Velho', 'Anápolis', 'Caruaru', 'Londrina','Marabá', 'Araraquara', 'Sorocaba', 'Santos', 'Niterói', 'Mogi das Cruzes', 'Caxias do Sul', 'Barueri', 'Campinas', 'São José', 'Ponta Grossa', 'Jundiaí', 'Uberlândia', 'Diadema', 'Santo André', 'São Bernardo do Campo', 'Itaquaquecetuba', 'Ribeirão Preto', 'Juiz de Fora']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Cidade\", cidade())\r",
									"\r",
									"function abreviacao() {\r",
									"    const names = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"AbreviacaoEstado\", abreviacao())\r",
									"\r",
									"function randomCep() {\r",
									"    let randomCep = '';\r",
									"   \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        randomCep += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCep;\r",
									"}\r",
									"pm.environment.set(\"cep\", randomCep());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 201\", function(){\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Mensagem de sucesso\",function(){\r",
									"    pm.expect(pm.response.json().msg).to.equal(\"Registro realizado com sucesso\")\r",
									"})\r",
									"\r",
									"pm.test(\"Status é True\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.status).to.be.true;\r",
									"})\r",
									"\r",
									"pm.test(\"Nome da Empresa é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.corporateName).to.equal(pm.environment.get(\"nomeEmpresa\"))\r",
									"})\r",
									"\r",
									"pm.test(\"CNPJ é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.registerCompany).to.equal(pm.environment.get(\"CNPJ\"))\r",
									"})\r",
									"\r",
									"\r",
									"// Função para validar CNPJ com base nos dígitos verificadores\r",
									"function validarCNPJ(cnpj) {\r",
									"    // Remover qualquer caractere que não seja número\r",
									"    cnpj = cnpj.replace(/\\D/g, '');\r",
									"\r",
									"    // Verifica se o CNPJ tem 14 dígitos\r",
									"    if (cnpj.length !== 14) {\r",
									"        return false;\r",
									"    }\r",
									"\r",
									"    // Cálculo do primeiro dígito verificador\r",
									"    let soma = 0;\r",
									"    let multiplicadoresPrimeiro = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    \r",
									"    for (let i = 0; i < 12; i++) {\r",
									"        soma += parseInt(cnpj[i]) * multiplicadoresPrimeiro[i];\r",
									"    }\r",
									"\r",
									"    let resto = soma % 11;\r",
									"    let primeiroDV = resto < 2 ? 0 : 11 - resto;\r",
									"\r",
									"    // Cálculo do segundo dígito verificador\r",
									"    soma = 0;\r",
									"    let multiplicadoresSegundo = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    \r",
									"    for (let i = 0; i < 13; i++) {\r",
									"        soma += parseInt(cnpj[i]) * multiplicadoresSegundo[i];\r",
									"    }\r",
									"\r",
									"    resto = soma % 11;\r",
									"    let segundoDV = resto < 2 ? 0 : 11 - resto;\r",
									"\r",
									"    // Comparar com os dígitos do CNPJ enviado\r",
									"    return cnpj[12] == primeiroDV && cnpj[13] == segundoDV;\r",
									"}\r",
									"\r",
									"// Obter o CNPJ da resposta da API (supondo que está no campo \"cnpj\")\r",
									"let cnpjRecebido = pm.response.json().newCompany.registerCompany; \r",
									"\r",
									"// Executar a validação\r",
									"if (!validarCNPJ(cnpjRecebido)) {\r",
									"    pm.test(\"O CNPJ retornado é inválido!\", function () {\r",
									"        pm.expect(false).to.be.true;\r",
									"    });\r",
									"} else {\r",
									"    pm.test(\"O CNPJ retornado é válido!\", function () {\r",
									"        pm.expect(true).to.be.true;\r",
									"    });\r",
									"}\r",
									"\r",
									"pm.test(\"Complemento é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.address[0].complement).to.equal(\"Casa 2\")\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomeEmpresa}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"{{fullnameUser}}\",\r\n  \"telephone\": \"{{telefone}}\",\r\n  \"serviceDescription\": \"{{Descricao}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{cep}}\",\r\n      \"city\": \"{{Cidade}}\",\r\n      \"state\": \"{{AbreviacaoEstado}}\",\r\n      \"district\": \"{{Bairro}}\",\r\n      \"street\": \"{{logradouroCompleto}}\",\r\n      \"number\": \"{{numeroResidencia}}\",\r\n      \"complement\": \"Casa 2\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTM0MSwiZXhwIjoxNzM5MzE1NzQxfQ.cgJqYe74cprHCRTY9YLF_B-Hfgfp8l8lr6gDrEuqMi4' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"corporateName\": \"Matheus Sousa Testes\",\r\n  \"registerCompany\": \"57126456000155\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com o campo Complemento somente com letras",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function empresa() {\r",
									"    const names = [\"TechNova\", \"Bytewave\", \"Cyberion\", \"InovaTech\", \"Nexabyte\", \"Softtron\", \"Codeverse\", \"Dataflux\", \"Infinitron\", \"LogiCore\", \"Zentek\",\"Neurobyte\", \"Cloudix\", \"Sysnova\", \"Hexabit\", \"AIgorithm\", \"Quantumix\", \"Webtron\", \"Netflux\", \"Cyberflux\", \"Deepcode\", \"Techpulse\", \"Synaptech\", \"Codexis\", \"Nexonix\", \"Algobyte\", \"Infobyte\", \"Datazen\", \"Digiflow\", \"Innovix\", \"Coretron\", \"Zybernet\", \"Neurotech\", \"Nanobyte\", \"Virtunix\", \"Codexel\", \"Optibit\", \"Bitnova\", \"Globotron\", \"Digiware\", \"Skytech\", \"Cybervox\", \"Techspire\", \"Softbit\", \"MetaTech\", \"Synthron\", \"Virtuabyte\", \"Cloudtron\", \"Algonix\", \"Bitzen\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Empresa\", empresa())\r",
									"\r",
									"function tag() {\r",
									"    const tagnames = ['Solutions', 'Tech', 'Digital', 'Systems', 'Software', 'Cloud', 'AI', 'Cyber', 'Data', 'Analytics','Network', 'Security', 'Labs', 'Smart', 'Logic', 'Innovation', 'IT', 'Global', 'Developers', 'Code', 'Techno', 'Automations', 'Cloudware', 'Dynamics', 'Vision', 'Intelligence', 'NextGen', 'Computing', 'Innovators', 'Engineering', 'Performance', 'Softworks', 'Logicware', 'Digitalware', 'Transform', 'Platform', 'Smartware', 'Dataflow', 'Byte', 'Edge', 'Nexus', 'Techworks', 'Bit', 'Virtual', 'SystemsX', 'Infotech', 'Genix', 'Quantum', 'Bitware', 'CloudX'];\r",
									"\r",
									"    const randomTastName = tagnames[Math.floor(Math.random() * tagnames.length)]\r",
									"    return randomTastName\r",
									"}\r",
									"pm.environment.set(\"Tag\", tag())\r",
									"\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"Empresa\") + \" \" + pm.environment.get(\"Tag\"))\r",
									"\r",
									"\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"\r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									"\r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									"\r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									"\r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									"\r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									"\r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"CNPJ\", cnpjGerado);\r",
									"\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function gerarTelefone() {\r",
									"    // Gerando um DDD aleatório entre 11 e 99\r",
									"    const ddd = Math.floor(Math.random() * (99 - 11 + 1)) + 11;\r",
									"\r",
									"    // Gerando o número de telefone com 9 dígitos, começando com 9\r",
									"    const numero = Math.floor(Math.random() * 100000000) + 900000000; // Gera um número aleatório entre 900000000 e 999999999 (começando com '9')\r",
									"\r",
									"    // Concatenando +55, o DDD e o número gerado para formar o telefone\r",
									"    const telefone = `55${ddd}${numero.toString().slice(0, 5)}${numero.toString().slice(5, 9)}`;\r",
									"\r",
									"    return telefone;\r",
									"}\r",
									"\r",
									"// Gerando o número de telefone e armazenando como variável de ambiente\r",
									"const telefoneGerado = gerarTelefone();\r",
									"pm.environment.set(\"telefone\", telefoneGerado);\r",
									"\r",
									"function descricao() {\r",
									"    const names = [\"Testes\", \"Automação\", \"FrontEnd\", \"Backend\",\"Banco de Dados\", \"IA\",\"AWS\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Descricao\", descricao())\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"NomeRua\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"NomeRuas\", lastname())\r",
									"\r",
									"pm.environment.set(\"nomeruaComposto\", \r",
									"    pm.environment.get(\"NomeRua\") + \" \" + pm.environment.get(\"NomeRuas\"))\r",
									"\r",
									"function logradouro() {\r",
									"    const names = [\"Avenida\", \"Rua\", \"Alameda\", \"Travessa\", \"Praça\", \"Rodovia\", \"Estrada\", \"Largo\", \"Viaduto\", \"Marginal\", \"Parque\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Logradouro\", logradouro())\r",
									"\r",
									"pm.environment.set(\"logradouroCompleto\", \r",
									"    pm.environment.get(\"Logradouro\") + \" \" + pm.environment.get(\"nomeruaComposto\"))\r",
									"\r",
									"\r",
									"function gerarNumeroResidencia() {\r",
									"    // Definindo a probabilidade de gerar números com mais de 5 caracteres\r",
									"    const tamanhoNumero = Math.random() < 0.8 ? Math.floor(Math.random() * 5) + 1 : Math.floor(Math.random() * 6) + 5;\r",
									"\r",
									"    // Gerando um número aleatório com o tamanho definido\r",
									"    let numeroResidencia = Math.floor(Math.random() * Math.pow(10, tamanhoNumero)).toString(); // Gera número aleatório com o tamanho desejado\r",
									"\r",
									"    // Se o primeiro caractere for 0, remove-o\r",
									"    if (numeroResidencia[0] === '0') {\r",
									"        numeroResidencia = numeroResidencia.slice(1); // Remove o primeiro caractere\r",
									"    }\r",
									"\r",
									"    // Garantindo que o número tenha no máximo 10 caracteres\r",
									"    if (numeroResidencia.length > 10) {\r",
									"        numeroResidencia = numeroResidencia.slice(0, 10); // Limita a 10 caracteres\r",
									"    }\r",
									"\r",
									"    return numeroResidencia;\r",
									"}\r",
									"\r",
									"// Gerando o número de residência e armazenando como variável de ambiente\r",
									"const numeroResidenciaGerado = gerarNumeroResidencia();\r",
									"pm.environment.set(\"numeroResidencia\", numeroResidenciaGerado);\r",
									"\r",
									"function bairro() {\r",
									"    const names = ['Leblon', 'Ipanema', 'Copacabana', 'Barra da Tijuca', 'Botafogo', 'Lapa', 'Santa Teresa', 'Jardim Botânico', 'Flamengo', 'São Conrado', 'Moema', 'Vila Madalena', 'Pinheiros', 'Jardins', 'Aclimação', 'Brooklin', 'Tatuapé', 'Vila Progredior', 'Vila Nova Conceição', 'Campo Belo','Centro', 'Praia de Belas', 'Moinhos de Vento', 'Petrópolis', 'Tristeza', 'Caminho das Árvores', 'Pituba', 'Stella Maris', 'Parque Atlântico', 'Costa Azul', 'Vila Galvão', 'Santo Amaro', 'Perdizes', 'Aclimação', 'Vila Sônia', 'Cidade Dutra', 'São Bernardo do Campo', 'Vila Mariana', 'Bela Vista', 'Liberdade','Pinheiros', 'Itaim Bibi', 'Santa Cecília', 'Tucuruvi', 'Chácara Santo Antônio', 'Água Fria', 'Vila Olímpia', 'Vila São Francisco', 'Consolação', 'Vila Madalena']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Bairro\", bairro())\r",
									"\r",
									"function cidade() {\r",
									"    const names = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador', 'Curitiba', 'Fortaleza', 'Recife', 'Brasília', 'Manaus', 'Vitória', 'Goiânia', 'Belém', 'Natal', 'São Luís', 'Maceió', 'Campo Grande', 'João Pessoa', 'Aracaju', 'Cuiabá', 'Florianópolis', 'Teresina', 'Palmas', 'Macapá', 'Rio Branco', 'Boa Vista', 'Porto Velho', 'Anápolis', 'Caruaru', 'Londrina','Marabá', 'Araraquara', 'Sorocaba', 'Santos', 'Niterói', 'Mogi das Cruzes', 'Caxias do Sul', 'Barueri', 'Campinas', 'São José', 'Ponta Grossa', 'Jundiaí', 'Uberlândia', 'Diadema', 'Santo André', 'São Bernardo do Campo', 'Itaquaquecetuba', 'Ribeirão Preto', 'Juiz de Fora']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Cidade\", cidade())\r",
									"\r",
									"function abreviacao() {\r",
									"    const names = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"AbreviacaoEstado\", abreviacao())\r",
									"\r",
									"function randomCep() {\r",
									"    let randomCep = '';\r",
									"   \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        randomCep += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCep;\r",
									"}\r",
									"pm.environment.set(\"cep\", randomCep());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 201\", function(){\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Mensagem de sucesso\",function(){\r",
									"    pm.expect(pm.response.json().msg).to.equal(\"Registro realizado com sucesso\")\r",
									"})\r",
									"\r",
									"pm.test(\"Status é True\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.status).to.be.true;\r",
									"})\r",
									"\r",
									"pm.test(\"Nome da Empresa é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.corporateName).to.equal(pm.environment.get(\"nomeEmpresa\"))\r",
									"})\r",
									"\r",
									"pm.test(\"CNPJ é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.registerCompany).to.equal(pm.environment.get(\"CNPJ\"))\r",
									"})\r",
									"\r",
									"\r",
									"// Função para validar CNPJ com base nos dígitos verificadores\r",
									"function validarCNPJ(cnpj) {\r",
									"    // Remover qualquer caractere que não seja número\r",
									"    cnpj = cnpj.replace(/\\D/g, '');\r",
									"\r",
									"    // Verifica se o CNPJ tem 14 dígitos\r",
									"    if (cnpj.length !== 14) {\r",
									"        return false;\r",
									"    }\r",
									"\r",
									"    // Cálculo do primeiro dígito verificador\r",
									"    let soma = 0;\r",
									"    let multiplicadoresPrimeiro = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    \r",
									"    for (let i = 0; i < 12; i++) {\r",
									"        soma += parseInt(cnpj[i]) * multiplicadoresPrimeiro[i];\r",
									"    }\r",
									"\r",
									"    let resto = soma % 11;\r",
									"    let primeiroDV = resto < 2 ? 0 : 11 - resto;\r",
									"\r",
									"    // Cálculo do segundo dígito verificador\r",
									"    soma = 0;\r",
									"    let multiplicadoresSegundo = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    \r",
									"    for (let i = 0; i < 13; i++) {\r",
									"        soma += parseInt(cnpj[i]) * multiplicadoresSegundo[i];\r",
									"    }\r",
									"\r",
									"    resto = soma % 11;\r",
									"    let segundoDV = resto < 2 ? 0 : 11 - resto;\r",
									"\r",
									"    // Comparar com os dígitos do CNPJ enviado\r",
									"    return cnpj[12] == primeiroDV && cnpj[13] == segundoDV;\r",
									"}\r",
									"\r",
									"// Obter o CNPJ da resposta da API (supondo que está no campo \"cnpj\")\r",
									"let cnpjRecebido = pm.response.json().newCompany.registerCompany; \r",
									"\r",
									"// Executar a validação\r",
									"if (!validarCNPJ(cnpjRecebido)) {\r",
									"    pm.test(\"O CNPJ retornado é inválido!\", function () {\r",
									"        pm.expect(false).to.be.true;\r",
									"    });\r",
									"} else {\r",
									"    pm.test(\"O CNPJ retornado é válido!\", function () {\r",
									"        pm.expect(true).to.be.true;\r",
									"    });\r",
									"}\r",
									"\r",
									"pm.test(\"Complemento é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.address[0].complement).to.equal(\"Casa do fundo\")\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomeEmpresa}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"{{fullnameUser}}\",\r\n  \"telephone\": \"{{telefone}}\",\r\n  \"serviceDescription\": \"{{Descricao}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{cep}}\",\r\n      \"city\": \"{{Cidade}}\",\r\n      \"state\": \"{{AbreviacaoEstado}}\",\r\n      \"district\": \"{{Bairro}}\",\r\n      \"street\": \"{{logradouroCompleto}}\",\r\n      \"number\": \"{{numeroResidencia}}\",\r\n      \"complement\": \"Casa do fundo\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTM0MSwiZXhwIjoxNzM5MzE1NzQxfQ.cgJqYe74cprHCRTY9YLF_B-Hfgfp8l8lr6gDrEuqMi4' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"corporateName\": \"Matheus Sousa Testes\",\r\n  \"registerCompany\": \"57126456000155\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com o campo Complemento somente com numeros",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function empresa() {\r",
									"    const names = [\"TechNova\", \"Bytewave\", \"Cyberion\", \"InovaTech\", \"Nexabyte\", \"Softtron\", \"Codeverse\", \"Dataflux\", \"Infinitron\", \"LogiCore\", \"Zentek\",\"Neurobyte\", \"Cloudix\", \"Sysnova\", \"Hexabit\", \"AIgorithm\", \"Quantumix\", \"Webtron\", \"Netflux\", \"Cyberflux\", \"Deepcode\", \"Techpulse\", \"Synaptech\", \"Codexis\", \"Nexonix\", \"Algobyte\", \"Infobyte\", \"Datazen\", \"Digiflow\", \"Innovix\", \"Coretron\", \"Zybernet\", \"Neurotech\", \"Nanobyte\", \"Virtunix\", \"Codexel\", \"Optibit\", \"Bitnova\", \"Globotron\", \"Digiware\", \"Skytech\", \"Cybervox\", \"Techspire\", \"Softbit\", \"MetaTech\", \"Synthron\", \"Virtuabyte\", \"Cloudtron\", \"Algonix\", \"Bitzen\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Empresa\", empresa())\r",
									"\r",
									"function tag() {\r",
									"    const tagnames = ['Solutions', 'Tech', 'Digital', 'Systems', 'Software', 'Cloud', 'AI', 'Cyber', 'Data', 'Analytics','Network', 'Security', 'Labs', 'Smart', 'Logic', 'Innovation', 'IT', 'Global', 'Developers', 'Code', 'Techno', 'Automations', 'Cloudware', 'Dynamics', 'Vision', 'Intelligence', 'NextGen', 'Computing', 'Innovators', 'Engineering', 'Performance', 'Softworks', 'Logicware', 'Digitalware', 'Transform', 'Platform', 'Smartware', 'Dataflow', 'Byte', 'Edge', 'Nexus', 'Techworks', 'Bit', 'Virtual', 'SystemsX', 'Infotech', 'Genix', 'Quantum', 'Bitware', 'CloudX'];\r",
									"\r",
									"    const randomTastName = tagnames[Math.floor(Math.random() * tagnames.length)]\r",
									"    return randomTastName\r",
									"}\r",
									"pm.environment.set(\"Tag\", tag())\r",
									"\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"Empresa\") + \" \" + pm.environment.get(\"Tag\"))\r",
									"\r",
									"\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"\r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									"\r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									"\r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									"\r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									"\r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									"\r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"CNPJ\", cnpjGerado);\r",
									"\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function gerarTelefone() {\r",
									"    // Gerando um DDD aleatório entre 11 e 99\r",
									"    const ddd = Math.floor(Math.random() * (99 - 11 + 1)) + 11;\r",
									"\r",
									"    // Gerando o número de telefone com 9 dígitos, começando com 9\r",
									"    const numero = Math.floor(Math.random() * 100000000) + 900000000; // Gera um número aleatório entre 900000000 e 999999999 (começando com '9')\r",
									"\r",
									"    // Concatenando +55, o DDD e o número gerado para formar o telefone\r",
									"    const telefone = `55${ddd}${numero.toString().slice(0, 5)}${numero.toString().slice(5, 9)}`;\r",
									"\r",
									"    return telefone;\r",
									"}\r",
									"\r",
									"// Gerando o número de telefone e armazenando como variável de ambiente\r",
									"const telefoneGerado = gerarTelefone();\r",
									"pm.environment.set(\"telefone\", telefoneGerado);\r",
									"\r",
									"function descricao() {\r",
									"    const names = [\"Testes\", \"Automação\", \"FrontEnd\", \"Backend\",\"Banco de Dados\", \"IA\",\"AWS\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Descricao\", descricao())\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"NomeRua\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"NomeRuas\", lastname())\r",
									"\r",
									"pm.environment.set(\"nomeruaComposto\", \r",
									"    pm.environment.get(\"NomeRua\") + \" \" + pm.environment.get(\"NomeRuas\"))\r",
									"\r",
									"function logradouro() {\r",
									"    const names = [\"Avenida\", \"Rua\", \"Alameda\", \"Travessa\", \"Praça\", \"Rodovia\", \"Estrada\", \"Largo\", \"Viaduto\", \"Marginal\", \"Parque\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Logradouro\", logradouro())\r",
									"\r",
									"pm.environment.set(\"logradouroCompleto\", \r",
									"    pm.environment.get(\"Logradouro\") + \" \" + pm.environment.get(\"nomeruaComposto\"))\r",
									"\r",
									"\r",
									"function gerarNumeroResidencia() {\r",
									"    // Definindo a probabilidade de gerar números com mais de 5 caracteres\r",
									"    const tamanhoNumero = Math.random() < 0.8 ? Math.floor(Math.random() * 5) + 1 : Math.floor(Math.random() * 6) + 5;\r",
									"\r",
									"    // Gerando um número aleatório com o tamanho definido\r",
									"    let numeroResidencia = Math.floor(Math.random() * Math.pow(10, tamanhoNumero)).toString(); // Gera número aleatório com o tamanho desejado\r",
									"\r",
									"    // Se o primeiro caractere for 0, remove-o\r",
									"    if (numeroResidencia[0] === '0') {\r",
									"        numeroResidencia = numeroResidencia.slice(1); // Remove o primeiro caractere\r",
									"    }\r",
									"\r",
									"    // Garantindo que o número tenha no máximo 10 caracteres\r",
									"    if (numeroResidencia.length > 10) {\r",
									"        numeroResidencia = numeroResidencia.slice(0, 10); // Limita a 10 caracteres\r",
									"    }\r",
									"\r",
									"    return numeroResidencia;\r",
									"}\r",
									"\r",
									"// Gerando o número de residência e armazenando como variável de ambiente\r",
									"const numeroResidenciaGerado = gerarNumeroResidencia();\r",
									"pm.environment.set(\"numeroResidencia\", numeroResidenciaGerado);\r",
									"\r",
									"function bairro() {\r",
									"    const names = ['Leblon', 'Ipanema', 'Copacabana', 'Barra da Tijuca', 'Botafogo', 'Lapa', 'Santa Teresa', 'Jardim Botânico', 'Flamengo', 'São Conrado', 'Moema', 'Vila Madalena', 'Pinheiros', 'Jardins', 'Aclimação', 'Brooklin', 'Tatuapé', 'Vila Progredior', 'Vila Nova Conceição', 'Campo Belo','Centro', 'Praia de Belas', 'Moinhos de Vento', 'Petrópolis', 'Tristeza', 'Caminho das Árvores', 'Pituba', 'Stella Maris', 'Parque Atlântico', 'Costa Azul', 'Vila Galvão', 'Santo Amaro', 'Perdizes', 'Aclimação', 'Vila Sônia', 'Cidade Dutra', 'São Bernardo do Campo', 'Vila Mariana', 'Bela Vista', 'Liberdade','Pinheiros', 'Itaim Bibi', 'Santa Cecília', 'Tucuruvi', 'Chácara Santo Antônio', 'Água Fria', 'Vila Olímpia', 'Vila São Francisco', 'Consolação', 'Vila Madalena']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Bairro\", bairro())\r",
									"\r",
									"function cidade() {\r",
									"    const names = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador', 'Curitiba', 'Fortaleza', 'Recife', 'Brasília', 'Manaus', 'Vitória', 'Goiânia', 'Belém', 'Natal', 'São Luís', 'Maceió', 'Campo Grande', 'João Pessoa', 'Aracaju', 'Cuiabá', 'Florianópolis', 'Teresina', 'Palmas', 'Macapá', 'Rio Branco', 'Boa Vista', 'Porto Velho', 'Anápolis', 'Caruaru', 'Londrina','Marabá', 'Araraquara', 'Sorocaba', 'Santos', 'Niterói', 'Mogi das Cruzes', 'Caxias do Sul', 'Barueri', 'Campinas', 'São José', 'Ponta Grossa', 'Jundiaí', 'Uberlândia', 'Diadema', 'Santo André', 'São Bernardo do Campo', 'Itaquaquecetuba', 'Ribeirão Preto', 'Juiz de Fora']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Cidade\", cidade())\r",
									"\r",
									"function abreviacao() {\r",
									"    const names = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"AbreviacaoEstado\", abreviacao())\r",
									"\r",
									"function randomCep() {\r",
									"    let randomCep = '';\r",
									"   \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        randomCep += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCep;\r",
									"}\r",
									"pm.environment.set(\"cep\", randomCep());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 201\", function(){\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Mensagem de sucesso\",function(){\r",
									"    pm.expect(pm.response.json().msg).to.equal(\"Registro realizado com sucesso\")\r",
									"})\r",
									"\r",
									"pm.test(\"Status é True\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.status).to.be.true;\r",
									"})\r",
									"\r",
									"pm.test(\"Nome da Empresa é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.corporateName).to.equal(pm.environment.get(\"nomeEmpresa\"))\r",
									"})\r",
									"\r",
									"pm.test(\"CNPJ é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.registerCompany).to.equal(pm.environment.get(\"CNPJ\"))\r",
									"})\r",
									"\r",
									"\r",
									"// Função para validar CNPJ com base nos dígitos verificadores\r",
									"function validarCNPJ(cnpj) {\r",
									"    // Remover qualquer caractere que não seja número\r",
									"    cnpj = cnpj.replace(/\\D/g, '');\r",
									"\r",
									"    // Verifica se o CNPJ tem 14 dígitos\r",
									"    if (cnpj.length !== 14) {\r",
									"        return false;\r",
									"    }\r",
									"\r",
									"    // Cálculo do primeiro dígito verificador\r",
									"    let soma = 0;\r",
									"    let multiplicadoresPrimeiro = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    \r",
									"    for (let i = 0; i < 12; i++) {\r",
									"        soma += parseInt(cnpj[i]) * multiplicadoresPrimeiro[i];\r",
									"    }\r",
									"\r",
									"    let resto = soma % 11;\r",
									"    let primeiroDV = resto < 2 ? 0 : 11 - resto;\r",
									"\r",
									"    // Cálculo do segundo dígito verificador\r",
									"    soma = 0;\r",
									"    let multiplicadoresSegundo = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    \r",
									"    for (let i = 0; i < 13; i++) {\r",
									"        soma += parseInt(cnpj[i]) * multiplicadoresSegundo[i];\r",
									"    }\r",
									"\r",
									"    resto = soma % 11;\r",
									"    let segundoDV = resto < 2 ? 0 : 11 - resto;\r",
									"\r",
									"    // Comparar com os dígitos do CNPJ enviado\r",
									"    return cnpj[12] == primeiroDV && cnpj[13] == segundoDV;\r",
									"}\r",
									"\r",
									"// Obter o CNPJ da resposta da API (supondo que está no campo \"cnpj\")\r",
									"let cnpjRecebido = pm.response.json().newCompany.registerCompany; \r",
									"\r",
									"// Executar a validação\r",
									"if (!validarCNPJ(cnpjRecebido)) {\r",
									"    pm.test(\"O CNPJ retornado é inválido!\", function () {\r",
									"        pm.expect(false).to.be.true;\r",
									"    });\r",
									"} else {\r",
									"    pm.test(\"O CNPJ retornado é válido!\", function () {\r",
									"        pm.expect(true).to.be.true;\r",
									"    });\r",
									"}\r",
									"\r",
									"pm.test(\"Complemento é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.address[0].complement).to.equal(\"125\")\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomeEmpresa}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"{{fullnameUser}}\",\r\n  \"telephone\": \"{{telefone}}\",\r\n  \"serviceDescription\": \"{{Descricao}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{cep}}\",\r\n      \"city\": \"{{Cidade}}\",\r\n      \"state\": \"{{AbreviacaoEstado}}\",\r\n      \"district\": \"{{Bairro}}\",\r\n      \"street\": \"{{logradouroCompleto}}\",\r\n      \"number\": \"{{numeroResidencia}}\",\r\n      \"complement\": \"125\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTM0MSwiZXhwIjoxNzM5MzE1NzQxfQ.cgJqYe74cprHCRTY9YLF_B-Hfgfp8l8lr6gDrEuqMi4' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"corporateName\": \"Matheus Sousa Testes\",\r\n  \"registerCompany\": \"57126456000155\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com o campo Complemento com caracteres especial '‘'",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function empresa() {\r",
									"    const names = [\"TechNova\", \"Bytewave\", \"Cyberion\", \"InovaTech\", \"Nexabyte\", \"Softtron\", \"Codeverse\", \"Dataflux\", \"Infinitron\", \"LogiCore\", \"Zentek\",\"Neurobyte\", \"Cloudix\", \"Sysnova\", \"Hexabit\", \"AIgorithm\", \"Quantumix\", \"Webtron\", \"Netflux\", \"Cyberflux\", \"Deepcode\", \"Techpulse\", \"Synaptech\", \"Codexis\", \"Nexonix\", \"Algobyte\", \"Infobyte\", \"Datazen\", \"Digiflow\", \"Innovix\", \"Coretron\", \"Zybernet\", \"Neurotech\", \"Nanobyte\", \"Virtunix\", \"Codexel\", \"Optibit\", \"Bitnova\", \"Globotron\", \"Digiware\", \"Skytech\", \"Cybervox\", \"Techspire\", \"Softbit\", \"MetaTech\", \"Synthron\", \"Virtuabyte\", \"Cloudtron\", \"Algonix\", \"Bitzen\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Empresa\", empresa())\r",
									"\r",
									"function tag() {\r",
									"    const tagnames = ['Solutions', 'Tech', 'Digital', 'Systems', 'Software', 'Cloud', 'AI', 'Cyber', 'Data', 'Analytics','Network', 'Security', 'Labs', 'Smart', 'Logic', 'Innovation', 'IT', 'Global', 'Developers', 'Code', 'Techno', 'Automations', 'Cloudware', 'Dynamics', 'Vision', 'Intelligence', 'NextGen', 'Computing', 'Innovators', 'Engineering', 'Performance', 'Softworks', 'Logicware', 'Digitalware', 'Transform', 'Platform', 'Smartware', 'Dataflow', 'Byte', 'Edge', 'Nexus', 'Techworks', 'Bit', 'Virtual', 'SystemsX', 'Infotech', 'Genix', 'Quantum', 'Bitware', 'CloudX'];\r",
									"\r",
									"    const randomTastName = tagnames[Math.floor(Math.random() * tagnames.length)]\r",
									"    return randomTastName\r",
									"}\r",
									"pm.environment.set(\"Tag\", tag())\r",
									"\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"Empresa\") + \" \" + pm.environment.get(\"Tag\"))\r",
									"\r",
									"\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"\r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									"\r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									"\r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									"\r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									"\r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									"\r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"CNPJ\", cnpjGerado);\r",
									"\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function gerarTelefone() {\r",
									"    // Gerando um DDD aleatório entre 11 e 99\r",
									"    const ddd = Math.floor(Math.random() * (99 - 11 + 1)) + 11;\r",
									"\r",
									"    // Gerando o número de telefone com 9 dígitos, começando com 9\r",
									"    const numero = Math.floor(Math.random() * 100000000) + 900000000; // Gera um número aleatório entre 900000000 e 999999999 (começando com '9')\r",
									"\r",
									"    // Concatenando +55, o DDD e o número gerado para formar o telefone\r",
									"    const telefone = `55${ddd}${numero.toString().slice(0, 5)}${numero.toString().slice(5, 9)}`;\r",
									"\r",
									"    return telefone;\r",
									"}\r",
									"\r",
									"// Gerando o número de telefone e armazenando como variável de ambiente\r",
									"const telefoneGerado = gerarTelefone();\r",
									"pm.environment.set(\"telefone\", telefoneGerado);\r",
									"\r",
									"function descricao() {\r",
									"    const names = [\"Testes\", \"Automação\", \"FrontEnd\", \"Backend\",\"Banco de Dados\", \"IA\",\"AWS\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Descricao\", descricao())\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"NomeRua\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"NomeRuas\", lastname())\r",
									"\r",
									"pm.environment.set(\"nomeruaComposto\", \r",
									"    pm.environment.get(\"NomeRua\") + \" \" + pm.environment.get(\"NomeRuas\"))\r",
									"\r",
									"function logradouro() {\r",
									"    const names = [\"Avenida\", \"Rua\", \"Alameda\", \"Travessa\", \"Praça\", \"Rodovia\", \"Estrada\", \"Largo\", \"Viaduto\", \"Marginal\", \"Parque\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Logradouro\", logradouro())\r",
									"\r",
									"pm.environment.set(\"logradouroCompleto\", \r",
									"    pm.environment.get(\"Logradouro\") + \" \" + pm.environment.get(\"nomeruaComposto\"))\r",
									"\r",
									"\r",
									"function gerarNumeroResidencia() {\r",
									"    // Definindo a probabilidade de gerar números com mais de 5 caracteres\r",
									"    const tamanhoNumero = Math.random() < 0.8 ? Math.floor(Math.random() * 5) + 1 : Math.floor(Math.random() * 6) + 5;\r",
									"\r",
									"    // Gerando um número aleatório com o tamanho definido\r",
									"    let numeroResidencia = Math.floor(Math.random() * Math.pow(10, tamanhoNumero)).toString(); // Gera número aleatório com o tamanho desejado\r",
									"\r",
									"    // Se o primeiro caractere for 0, remove-o\r",
									"    if (numeroResidencia[0] === '0') {\r",
									"        numeroResidencia = numeroResidencia.slice(1); // Remove o primeiro caractere\r",
									"    }\r",
									"\r",
									"    // Garantindo que o número tenha no máximo 10 caracteres\r",
									"    if (numeroResidencia.length > 10) {\r",
									"        numeroResidencia = numeroResidencia.slice(0, 10); // Limita a 10 caracteres\r",
									"    }\r",
									"\r",
									"    return numeroResidencia;\r",
									"}\r",
									"\r",
									"// Gerando o número de residência e armazenando como variável de ambiente\r",
									"const numeroResidenciaGerado = gerarNumeroResidencia();\r",
									"pm.environment.set(\"numeroResidencia\", numeroResidenciaGerado);\r",
									"\r",
									"function bairro() {\r",
									"    const names = ['Leblon', 'Ipanema', 'Copacabana', 'Barra da Tijuca', 'Botafogo', 'Lapa', 'Santa Teresa', 'Jardim Botânico', 'Flamengo', 'São Conrado', 'Moema', 'Vila Madalena', 'Pinheiros', 'Jardins', 'Aclimação', 'Brooklin', 'Tatuapé', 'Vila Progredior', 'Vila Nova Conceição', 'Campo Belo','Centro', 'Praia de Belas', 'Moinhos de Vento', 'Petrópolis', 'Tristeza', 'Caminho das Árvores', 'Pituba', 'Stella Maris', 'Parque Atlântico', 'Costa Azul', 'Vila Galvão', 'Santo Amaro', 'Perdizes', 'Aclimação', 'Vila Sônia', 'Cidade Dutra', 'São Bernardo do Campo', 'Vila Mariana', 'Bela Vista', 'Liberdade','Pinheiros', 'Itaim Bibi', 'Santa Cecília', 'Tucuruvi', 'Chácara Santo Antônio', 'Água Fria', 'Vila Olímpia', 'Vila São Francisco', 'Consolação', 'Vila Madalena']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Bairro\", bairro())\r",
									"\r",
									"function cidade() {\r",
									"    const names = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador', 'Curitiba', 'Fortaleza', 'Recife', 'Brasília', 'Manaus', 'Vitória', 'Goiânia', 'Belém', 'Natal', 'São Luís', 'Maceió', 'Campo Grande', 'João Pessoa', 'Aracaju', 'Cuiabá', 'Florianópolis', 'Teresina', 'Palmas', 'Macapá', 'Rio Branco', 'Boa Vista', 'Porto Velho', 'Anápolis', 'Caruaru', 'Londrina','Marabá', 'Araraquara', 'Sorocaba', 'Santos', 'Niterói', 'Mogi das Cruzes', 'Caxias do Sul', 'Barueri', 'Campinas', 'São José', 'Ponta Grossa', 'Jundiaí', 'Uberlândia', 'Diadema', 'Santo André', 'São Bernardo do Campo', 'Itaquaquecetuba', 'Ribeirão Preto', 'Juiz de Fora']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Cidade\", cidade())\r",
									"\r",
									"function abreviacao() {\r",
									"    const names = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"AbreviacaoEstado\", abreviacao())\r",
									"\r",
									"function randomCep() {\r",
									"    let randomCep = '';\r",
									"   \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        randomCep += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCep;\r",
									"}\r",
									"pm.environment.set(\"cep\", randomCep());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 201\", function(){\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Mensagem de sucesso\",function(){\r",
									"    pm.expect(pm.response.json().msg).to.equal(\"Registro realizado com sucesso\")\r",
									"})\r",
									"\r",
									"pm.test(\"Status é True\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.status).to.be.true;\r",
									"})\r",
									"\r",
									"pm.test(\"Nome da Empresa é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.corporateName).to.equal(pm.environment.get(\"nomeEmpresa\"))\r",
									"})\r",
									"\r",
									"pm.test(\"CNPJ é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.registerCompany).to.equal(pm.environment.get(\"CNPJ\"))\r",
									"})\r",
									"\r",
									"\r",
									"// Função para validar CNPJ com base nos dígitos verificadores\r",
									"function validarCNPJ(cnpj) {\r",
									"    // Remover qualquer caractere que não seja número\r",
									"    cnpj = cnpj.replace(/\\D/g, '');\r",
									"\r",
									"    // Verifica se o CNPJ tem 14 dígitos\r",
									"    if (cnpj.length !== 14) {\r",
									"        return false;\r",
									"    }\r",
									"\r",
									"    // Cálculo do primeiro dígito verificador\r",
									"    let soma = 0;\r",
									"    let multiplicadoresPrimeiro = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    \r",
									"    for (let i = 0; i < 12; i++) {\r",
									"        soma += parseInt(cnpj[i]) * multiplicadoresPrimeiro[i];\r",
									"    }\r",
									"\r",
									"    let resto = soma % 11;\r",
									"    let primeiroDV = resto < 2 ? 0 : 11 - resto;\r",
									"\r",
									"    // Cálculo do segundo dígito verificador\r",
									"    soma = 0;\r",
									"    let multiplicadoresSegundo = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    \r",
									"    for (let i = 0; i < 13; i++) {\r",
									"        soma += parseInt(cnpj[i]) * multiplicadoresSegundo[i];\r",
									"    }\r",
									"\r",
									"    resto = soma % 11;\r",
									"    let segundoDV = resto < 2 ? 0 : 11 - resto;\r",
									"\r",
									"    // Comparar com os dígitos do CNPJ enviado\r",
									"    return cnpj[12] == primeiroDV && cnpj[13] == segundoDV;\r",
									"}\r",
									"\r",
									"// Obter o CNPJ da resposta da API (supondo que está no campo \"cnpj\")\r",
									"let cnpjRecebido = pm.response.json().newCompany.registerCompany; \r",
									"\r",
									"// Executar a validação\r",
									"if (!validarCNPJ(cnpjRecebido)) {\r",
									"    pm.test(\"O CNPJ retornado é inválido!\", function () {\r",
									"        pm.expect(false).to.be.true;\r",
									"    });\r",
									"} else {\r",
									"    pm.test(\"O CNPJ retornado é válido!\", function () {\r",
									"        pm.expect(true).to.be.true;\r",
									"    });\r",
									"}\r",
									"\r",
									"pm.test(\"Complemento é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.address[0].complement).to.equal(\"Apartamento's\")\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomeEmpresa}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"{{fullnameUser}}\",\r\n  \"telephone\": \"{{telefone}}\",\r\n  \"serviceDescription\": \"{{Descricao}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{cep}}\",\r\n      \"city\": \"{{Cidade}}\",\r\n      \"state\": \"{{AbreviacaoEstado}}\",\r\n      \"district\": \"{{Bairro}}\",\r\n      \"street\": \"{{logradouroCompleto}}\",\r\n      \"number\": \"{{numeroResidencia}}\",\r\n      \"complement\": \"Apartamento's\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTM0MSwiZXhwIjoxNzM5MzE1NzQxfQ.cgJqYe74cprHCRTY9YLF_B-Hfgfp8l8lr6gDrEuqMi4' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"corporateName\": \"Matheus Sousa Testes\",\r\n  \"registerCompany\": \"57126456000155\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com o campo Complemento com caracteres especial 'º'",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function empresa() {\r",
									"    const names = [\"TechNova\", \"Bytewave\", \"Cyberion\", \"InovaTech\", \"Nexabyte\", \"Softtron\", \"Codeverse\", \"Dataflux\", \"Infinitron\", \"LogiCore\", \"Zentek\",\"Neurobyte\", \"Cloudix\", \"Sysnova\", \"Hexabit\", \"AIgorithm\", \"Quantumix\", \"Webtron\", \"Netflux\", \"Cyberflux\", \"Deepcode\", \"Techpulse\", \"Synaptech\", \"Codexis\", \"Nexonix\", \"Algobyte\", \"Infobyte\", \"Datazen\", \"Digiflow\", \"Innovix\", \"Coretron\", \"Zybernet\", \"Neurotech\", \"Nanobyte\", \"Virtunix\", \"Codexel\", \"Optibit\", \"Bitnova\", \"Globotron\", \"Digiware\", \"Skytech\", \"Cybervox\", \"Techspire\", \"Softbit\", \"MetaTech\", \"Synthron\", \"Virtuabyte\", \"Cloudtron\", \"Algonix\", \"Bitzen\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Empresa\", empresa())\r",
									"\r",
									"function tag() {\r",
									"    const tagnames = ['Solutions', 'Tech', 'Digital', 'Systems', 'Software', 'Cloud', 'AI', 'Cyber', 'Data', 'Analytics','Network', 'Security', 'Labs', 'Smart', 'Logic', 'Innovation', 'IT', 'Global', 'Developers', 'Code', 'Techno', 'Automations', 'Cloudware', 'Dynamics', 'Vision', 'Intelligence', 'NextGen', 'Computing', 'Innovators', 'Engineering', 'Performance', 'Softworks', 'Logicware', 'Digitalware', 'Transform', 'Platform', 'Smartware', 'Dataflow', 'Byte', 'Edge', 'Nexus', 'Techworks', 'Bit', 'Virtual', 'SystemsX', 'Infotech', 'Genix', 'Quantum', 'Bitware', 'CloudX'];\r",
									"\r",
									"    const randomTastName = tagnames[Math.floor(Math.random() * tagnames.length)]\r",
									"    return randomTastName\r",
									"}\r",
									"pm.environment.set(\"Tag\", tag())\r",
									"\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"Empresa\") + \" \" + pm.environment.get(\"Tag\"))\r",
									"\r",
									"\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"\r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									"\r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									"\r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									"\r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									"\r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									"\r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"CNPJ\", cnpjGerado);\r",
									"\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function gerarTelefone() {\r",
									"    // Gerando um DDD aleatório entre 11 e 99\r",
									"    const ddd = Math.floor(Math.random() * (99 - 11 + 1)) + 11;\r",
									"\r",
									"    // Gerando o número de telefone com 9 dígitos, começando com 9\r",
									"    const numero = Math.floor(Math.random() * 100000000) + 900000000; // Gera um número aleatório entre 900000000 e 999999999 (começando com '9')\r",
									"\r",
									"    // Concatenando +55, o DDD e o número gerado para formar o telefone\r",
									"    const telefone = `55${ddd}${numero.toString().slice(0, 5)}${numero.toString().slice(5, 9)}`;\r",
									"\r",
									"    return telefone;\r",
									"}\r",
									"\r",
									"// Gerando o número de telefone e armazenando como variável de ambiente\r",
									"const telefoneGerado = gerarTelefone();\r",
									"pm.environment.set(\"telefone\", telefoneGerado);\r",
									"\r",
									"function descricao() {\r",
									"    const names = [\"Testes\", \"Automação\", \"FrontEnd\", \"Backend\",\"Banco de Dados\", \"IA\",\"AWS\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Descricao\", descricao())\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"NomeRua\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"NomeRuas\", lastname())\r",
									"\r",
									"pm.environment.set(\"nomeruaComposto\", \r",
									"    pm.environment.get(\"NomeRua\") + \" \" + pm.environment.get(\"NomeRuas\"))\r",
									"\r",
									"function logradouro() {\r",
									"    const names = [\"Avenida\", \"Rua\", \"Alameda\", \"Travessa\", \"Praça\", \"Rodovia\", \"Estrada\", \"Largo\", \"Viaduto\", \"Marginal\", \"Parque\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Logradouro\", logradouro())\r",
									"\r",
									"pm.environment.set(\"logradouroCompleto\", \r",
									"    pm.environment.get(\"Logradouro\") + \" \" + pm.environment.get(\"nomeruaComposto\"))\r",
									"\r",
									"\r",
									"function gerarNumeroResidencia() {\r",
									"    // Definindo a probabilidade de gerar números com mais de 5 caracteres\r",
									"    const tamanhoNumero = Math.random() < 0.8 ? Math.floor(Math.random() * 5) + 1 : Math.floor(Math.random() * 6) + 5;\r",
									"\r",
									"    // Gerando um número aleatório com o tamanho definido\r",
									"    let numeroResidencia = Math.floor(Math.random() * Math.pow(10, tamanhoNumero)).toString(); // Gera número aleatório com o tamanho desejado\r",
									"\r",
									"    // Se o primeiro caractere for 0, remove-o\r",
									"    if (numeroResidencia[0] === '0') {\r",
									"        numeroResidencia = numeroResidencia.slice(1); // Remove o primeiro caractere\r",
									"    }\r",
									"\r",
									"    // Garantindo que o número tenha no máximo 10 caracteres\r",
									"    if (numeroResidencia.length > 10) {\r",
									"        numeroResidencia = numeroResidencia.slice(0, 10); // Limita a 10 caracteres\r",
									"    }\r",
									"\r",
									"    return numeroResidencia;\r",
									"}\r",
									"\r",
									"// Gerando o número de residência e armazenando como variável de ambiente\r",
									"const numeroResidenciaGerado = gerarNumeroResidencia();\r",
									"pm.environment.set(\"numeroResidencia\", numeroResidenciaGerado);\r",
									"\r",
									"function bairro() {\r",
									"    const names = ['Leblon', 'Ipanema', 'Copacabana', 'Barra da Tijuca', 'Botafogo', 'Lapa', 'Santa Teresa', 'Jardim Botânico', 'Flamengo', 'São Conrado', 'Moema', 'Vila Madalena', 'Pinheiros', 'Jardins', 'Aclimação', 'Brooklin', 'Tatuapé', 'Vila Progredior', 'Vila Nova Conceição', 'Campo Belo','Centro', 'Praia de Belas', 'Moinhos de Vento', 'Petrópolis', 'Tristeza', 'Caminho das Árvores', 'Pituba', 'Stella Maris', 'Parque Atlântico', 'Costa Azul', 'Vila Galvão', 'Santo Amaro', 'Perdizes', 'Aclimação', 'Vila Sônia', 'Cidade Dutra', 'São Bernardo do Campo', 'Vila Mariana', 'Bela Vista', 'Liberdade','Pinheiros', 'Itaim Bibi', 'Santa Cecília', 'Tucuruvi', 'Chácara Santo Antônio', 'Água Fria', 'Vila Olímpia', 'Vila São Francisco', 'Consolação', 'Vila Madalena']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Bairro\", bairro())\r",
									"\r",
									"function cidade() {\r",
									"    const names = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador', 'Curitiba', 'Fortaleza', 'Recife', 'Brasília', 'Manaus', 'Vitória', 'Goiânia', 'Belém', 'Natal', 'São Luís', 'Maceió', 'Campo Grande', 'João Pessoa', 'Aracaju', 'Cuiabá', 'Florianópolis', 'Teresina', 'Palmas', 'Macapá', 'Rio Branco', 'Boa Vista', 'Porto Velho', 'Anápolis', 'Caruaru', 'Londrina','Marabá', 'Araraquara', 'Sorocaba', 'Santos', 'Niterói', 'Mogi das Cruzes', 'Caxias do Sul', 'Barueri', 'Campinas', 'São José', 'Ponta Grossa', 'Jundiaí', 'Uberlândia', 'Diadema', 'Santo André', 'São Bernardo do Campo', 'Itaquaquecetuba', 'Ribeirão Preto', 'Juiz de Fora']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Cidade\", cidade())\r",
									"\r",
									"function abreviacao() {\r",
									"    const names = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"AbreviacaoEstado\", abreviacao())\r",
									"\r",
									"function randomCep() {\r",
									"    let randomCep = '';\r",
									"   \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        randomCep += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCep;\r",
									"}\r",
									"pm.environment.set(\"cep\", randomCep());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 201\", function(){\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Mensagem de sucesso\",function(){\r",
									"    pm.expect(pm.response.json().msg).to.equal(\"Registro realizado com sucesso\")\r",
									"})\r",
									"\r",
									"pm.test(\"Status é True\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.status).to.be.true;\r",
									"})\r",
									"\r",
									"pm.test(\"Nome da Empresa é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.corporateName).to.equal(pm.environment.get(\"nomeEmpresa\"))\r",
									"})\r",
									"\r",
									"pm.test(\"CNPJ é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.registerCompany).to.equal(pm.environment.get(\"CNPJ\"))\r",
									"})\r",
									"\r",
									"\r",
									"// Função para validar CNPJ com base nos dígitos verificadores\r",
									"function validarCNPJ(cnpj) {\r",
									"    // Remover qualquer caractere que não seja número\r",
									"    cnpj = cnpj.replace(/\\D/g, '');\r",
									"\r",
									"    // Verifica se o CNPJ tem 14 dígitos\r",
									"    if (cnpj.length !== 14) {\r",
									"        return false;\r",
									"    }\r",
									"\r",
									"    // Cálculo do primeiro dígito verificador\r",
									"    let soma = 0;\r",
									"    let multiplicadoresPrimeiro = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    \r",
									"    for (let i = 0; i < 12; i++) {\r",
									"        soma += parseInt(cnpj[i]) * multiplicadoresPrimeiro[i];\r",
									"    }\r",
									"\r",
									"    let resto = soma % 11;\r",
									"    let primeiroDV = resto < 2 ? 0 : 11 - resto;\r",
									"\r",
									"    // Cálculo do segundo dígito verificador\r",
									"    soma = 0;\r",
									"    let multiplicadoresSegundo = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    \r",
									"    for (let i = 0; i < 13; i++) {\r",
									"        soma += parseInt(cnpj[i]) * multiplicadoresSegundo[i];\r",
									"    }\r",
									"\r",
									"    resto = soma % 11;\r",
									"    let segundoDV = resto < 2 ? 0 : 11 - resto;\r",
									"\r",
									"    // Comparar com os dígitos do CNPJ enviado\r",
									"    return cnpj[12] == primeiroDV && cnpj[13] == segundoDV;\r",
									"}\r",
									"\r",
									"// Obter o CNPJ da resposta da API (supondo que está no campo \"cnpj\")\r",
									"let cnpjRecebido = pm.response.json().newCompany.registerCompany; \r",
									"\r",
									"// Executar a validação\r",
									"if (!validarCNPJ(cnpjRecebido)) {\r",
									"    pm.test(\"O CNPJ retornado é inválido!\", function () {\r",
									"        pm.expect(false).to.be.true;\r",
									"    });\r",
									"} else {\r",
									"    pm.test(\"O CNPJ retornado é válido!\", function () {\r",
									"        pm.expect(true).to.be.true;\r",
									"    });\r",
									"}\r",
									"\r",
									"pm.test(\"Complemento é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.address[0].complement).to.equal(\"5º Andar Apartamento 53\")\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomeEmpresa}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"{{fullnameUser}}\",\r\n  \"telephone\": \"{{telefone}}\",\r\n  \"serviceDescription\": \"{{Descricao}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{cep}}\",\r\n      \"city\": \"{{Cidade}}\",\r\n      \"state\": \"{{AbreviacaoEstado}}\",\r\n      \"district\": \"{{Bairro}}\",\r\n      \"street\": \"{{logradouroCompleto}}\",\r\n      \"number\": \"{{numeroResidencia}}\",\r\n      \"complement\": \"5º Andar Apartamento 53\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTM0MSwiZXhwIjoxNzM5MzE1NzQxfQ.cgJqYe74cprHCRTY9YLF_B-Hfgfp8l8lr6gDrEuqMi4' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"corporateName\": \"Matheus Sousa Testes\",\r\n  \"registerCompany\": \"57126456000155\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com o campo Complemento com caracteres especial 'ª'",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function empresa() {\r",
									"    const names = [\"TechNova\", \"Bytewave\", \"Cyberion\", \"InovaTech\", \"Nexabyte\", \"Softtron\", \"Codeverse\", \"Dataflux\", \"Infinitron\", \"LogiCore\", \"Zentek\",\"Neurobyte\", \"Cloudix\", \"Sysnova\", \"Hexabit\", \"AIgorithm\", \"Quantumix\", \"Webtron\", \"Netflux\", \"Cyberflux\", \"Deepcode\", \"Techpulse\", \"Synaptech\", \"Codexis\", \"Nexonix\", \"Algobyte\", \"Infobyte\", \"Datazen\", \"Digiflow\", \"Innovix\", \"Coretron\", \"Zybernet\", \"Neurotech\", \"Nanobyte\", \"Virtunix\", \"Codexel\", \"Optibit\", \"Bitnova\", \"Globotron\", \"Digiware\", \"Skytech\", \"Cybervox\", \"Techspire\", \"Softbit\", \"MetaTech\", \"Synthron\", \"Virtuabyte\", \"Cloudtron\", \"Algonix\", \"Bitzen\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Empresa\", empresa())\r",
									"\r",
									"function tag() {\r",
									"    const tagnames = ['Solutions', 'Tech', 'Digital', 'Systems', 'Software', 'Cloud', 'AI', 'Cyber', 'Data', 'Analytics','Network', 'Security', 'Labs', 'Smart', 'Logic', 'Innovation', 'IT', 'Global', 'Developers', 'Code', 'Techno', 'Automations', 'Cloudware', 'Dynamics', 'Vision', 'Intelligence', 'NextGen', 'Computing', 'Innovators', 'Engineering', 'Performance', 'Softworks', 'Logicware', 'Digitalware', 'Transform', 'Platform', 'Smartware', 'Dataflow', 'Byte', 'Edge', 'Nexus', 'Techworks', 'Bit', 'Virtual', 'SystemsX', 'Infotech', 'Genix', 'Quantum', 'Bitware', 'CloudX'];\r",
									"\r",
									"    const randomTastName = tagnames[Math.floor(Math.random() * tagnames.length)]\r",
									"    return randomTastName\r",
									"}\r",
									"pm.environment.set(\"Tag\", tag())\r",
									"\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"Empresa\") + \" \" + pm.environment.get(\"Tag\"))\r",
									"\r",
									"\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"\r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									"\r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									"\r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									"\r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									"\r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									"\r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"CNPJ\", cnpjGerado);\r",
									"\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function gerarTelefone() {\r",
									"    // Gerando um DDD aleatório entre 11 e 99\r",
									"    const ddd = Math.floor(Math.random() * (99 - 11 + 1)) + 11;\r",
									"\r",
									"    // Gerando o número de telefone com 9 dígitos, começando com 9\r",
									"    const numero = Math.floor(Math.random() * 100000000) + 900000000; // Gera um número aleatório entre 900000000 e 999999999 (começando com '9')\r",
									"\r",
									"    // Concatenando +55, o DDD e o número gerado para formar o telefone\r",
									"    const telefone = `55${ddd}${numero.toString().slice(0, 5)}${numero.toString().slice(5, 9)}`;\r",
									"\r",
									"    return telefone;\r",
									"}\r",
									"\r",
									"// Gerando o número de telefone e armazenando como variável de ambiente\r",
									"const telefoneGerado = gerarTelefone();\r",
									"pm.environment.set(\"telefone\", telefoneGerado);\r",
									"\r",
									"function descricao() {\r",
									"    const names = [\"Testes\", \"Automação\", \"FrontEnd\", \"Backend\",\"Banco de Dados\", \"IA\",\"AWS\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Descricao\", descricao())\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"NomeRua\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"NomeRuas\", lastname())\r",
									"\r",
									"pm.environment.set(\"nomeruaComposto\", \r",
									"    pm.environment.get(\"NomeRua\") + \" \" + pm.environment.get(\"NomeRuas\"))\r",
									"\r",
									"function logradouro() {\r",
									"    const names = [\"Avenida\", \"Rua\", \"Alameda\", \"Travessa\", \"Praça\", \"Rodovia\", \"Estrada\", \"Largo\", \"Viaduto\", \"Marginal\", \"Parque\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Logradouro\", logradouro())\r",
									"\r",
									"pm.environment.set(\"logradouroCompleto\", \r",
									"    pm.environment.get(\"Logradouro\") + \" \" + pm.environment.get(\"nomeruaComposto\"))\r",
									"\r",
									"\r",
									"function gerarNumeroResidencia() {\r",
									"    // Definindo a probabilidade de gerar números com mais de 5 caracteres\r",
									"    const tamanhoNumero = Math.random() < 0.8 ? Math.floor(Math.random() * 5) + 1 : Math.floor(Math.random() * 6) + 5;\r",
									"\r",
									"    // Gerando um número aleatório com o tamanho definido\r",
									"    let numeroResidencia = Math.floor(Math.random() * Math.pow(10, tamanhoNumero)).toString(); // Gera número aleatório com o tamanho desejado\r",
									"\r",
									"    // Se o primeiro caractere for 0, remove-o\r",
									"    if (numeroResidencia[0] === '0') {\r",
									"        numeroResidencia = numeroResidencia.slice(1); // Remove o primeiro caractere\r",
									"    }\r",
									"\r",
									"    // Garantindo que o número tenha no máximo 10 caracteres\r",
									"    if (numeroResidencia.length > 10) {\r",
									"        numeroResidencia = numeroResidencia.slice(0, 10); // Limita a 10 caracteres\r",
									"    }\r",
									"\r",
									"    return numeroResidencia;\r",
									"}\r",
									"\r",
									"// Gerando o número de residência e armazenando como variável de ambiente\r",
									"const numeroResidenciaGerado = gerarNumeroResidencia();\r",
									"pm.environment.set(\"numeroResidencia\", numeroResidenciaGerado);\r",
									"\r",
									"function bairro() {\r",
									"    const names = ['Leblon', 'Ipanema', 'Copacabana', 'Barra da Tijuca', 'Botafogo', 'Lapa', 'Santa Teresa', 'Jardim Botânico', 'Flamengo', 'São Conrado', 'Moema', 'Vila Madalena', 'Pinheiros', 'Jardins', 'Aclimação', 'Brooklin', 'Tatuapé', 'Vila Progredior', 'Vila Nova Conceição', 'Campo Belo','Centro', 'Praia de Belas', 'Moinhos de Vento', 'Petrópolis', 'Tristeza', 'Caminho das Árvores', 'Pituba', 'Stella Maris', 'Parque Atlântico', 'Costa Azul', 'Vila Galvão', 'Santo Amaro', 'Perdizes', 'Aclimação', 'Vila Sônia', 'Cidade Dutra', 'São Bernardo do Campo', 'Vila Mariana', 'Bela Vista', 'Liberdade','Pinheiros', 'Itaim Bibi', 'Santa Cecília', 'Tucuruvi', 'Chácara Santo Antônio', 'Água Fria', 'Vila Olímpia', 'Vila São Francisco', 'Consolação', 'Vila Madalena']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Bairro\", bairro())\r",
									"\r",
									"function cidade() {\r",
									"    const names = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador', 'Curitiba', 'Fortaleza', 'Recife', 'Brasília', 'Manaus', 'Vitória', 'Goiânia', 'Belém', 'Natal', 'São Luís', 'Maceió', 'Campo Grande', 'João Pessoa', 'Aracaju', 'Cuiabá', 'Florianópolis', 'Teresina', 'Palmas', 'Macapá', 'Rio Branco', 'Boa Vista', 'Porto Velho', 'Anápolis', 'Caruaru', 'Londrina','Marabá', 'Araraquara', 'Sorocaba', 'Santos', 'Niterói', 'Mogi das Cruzes', 'Caxias do Sul', 'Barueri', 'Campinas', 'São José', 'Ponta Grossa', 'Jundiaí', 'Uberlândia', 'Diadema', 'Santo André', 'São Bernardo do Campo', 'Itaquaquecetuba', 'Ribeirão Preto', 'Juiz de Fora']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Cidade\", cidade())\r",
									"\r",
									"function abreviacao() {\r",
									"    const names = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"AbreviacaoEstado\", abreviacao())\r",
									"\r",
									"function randomCep() {\r",
									"    let randomCep = '';\r",
									"   \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        randomCep += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCep;\r",
									"}\r",
									"pm.environment.set(\"cep\", randomCep());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 201\", function(){\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Mensagem de sucesso\",function(){\r",
									"    pm.expect(pm.response.json().msg).to.equal(\"Registro realizado com sucesso\")\r",
									"})\r",
									"\r",
									"pm.test(\"Status é True\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.status).to.be.true;\r",
									"})\r",
									"\r",
									"pm.test(\"Nome da Empresa é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.corporateName).to.equal(pm.environment.get(\"nomeEmpresa\"))\r",
									"})\r",
									"\r",
									"pm.test(\"CNPJ é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.registerCompany).to.equal(pm.environment.get(\"CNPJ\"))\r",
									"})\r",
									"\r",
									"\r",
									"// Função para validar CNPJ com base nos dígitos verificadores\r",
									"function validarCNPJ(cnpj) {\r",
									"    // Remover qualquer caractere que não seja número\r",
									"    cnpj = cnpj.replace(/\\D/g, '');\r",
									"\r",
									"    // Verifica se o CNPJ tem 14 dígitos\r",
									"    if (cnpj.length !== 14) {\r",
									"        return false;\r",
									"    }\r",
									"\r",
									"    // Cálculo do primeiro dígito verificador\r",
									"    let soma = 0;\r",
									"    let multiplicadoresPrimeiro = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    \r",
									"    for (let i = 0; i < 12; i++) {\r",
									"        soma += parseInt(cnpj[i]) * multiplicadoresPrimeiro[i];\r",
									"    }\r",
									"\r",
									"    let resto = soma % 11;\r",
									"    let primeiroDV = resto < 2 ? 0 : 11 - resto;\r",
									"\r",
									"    // Cálculo do segundo dígito verificador\r",
									"    soma = 0;\r",
									"    let multiplicadoresSegundo = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    \r",
									"    for (let i = 0; i < 13; i++) {\r",
									"        soma += parseInt(cnpj[i]) * multiplicadoresSegundo[i];\r",
									"    }\r",
									"\r",
									"    resto = soma % 11;\r",
									"    let segundoDV = resto < 2 ? 0 : 11 - resto;\r",
									"\r",
									"    // Comparar com os dígitos do CNPJ enviado\r",
									"    return cnpj[12] == primeiroDV && cnpj[13] == segundoDV;\r",
									"}\r",
									"\r",
									"// Obter o CNPJ da resposta da API (supondo que está no campo \"cnpj\")\r",
									"let cnpjRecebido = pm.response.json().newCompany.registerCompany; \r",
									"\r",
									"// Executar a validação\r",
									"if (!validarCNPJ(cnpjRecebido)) {\r",
									"    pm.test(\"O CNPJ retornado é inválido!\", function () {\r",
									"        pm.expect(false).to.be.true;\r",
									"    });\r",
									"} else {\r",
									"    pm.test(\"O CNPJ retornado é válido!\", function () {\r",
									"        pm.expect(true).to.be.true;\r",
									"    });\r",
									"}\r",
									"\r",
									"pm.test(\"Complemento é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.address[0].complement).to.equal(\"3ª Casa\")\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomeEmpresa}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"{{fullnameUser}}\",\r\n  \"telephone\": \"{{telefone}}\",\r\n  \"serviceDescription\": \"{{Descricao}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{cep}}\",\r\n      \"city\": \"{{Cidade}}\",\r\n      \"state\": \"{{AbreviacaoEstado}}\",\r\n      \"district\": \"{{Bairro}}\",\r\n      \"street\": \"{{logradouroCompleto}}\",\r\n      \"number\": \"{{numeroResidencia}}\",\r\n      \"complement\": \"3ª Casa\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTM0MSwiZXhwIjoxNzM5MzE1NzQxfQ.cgJqYe74cprHCRTY9YLF_B-Hfgfp8l8lr6gDrEuqMi4' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"corporateName\": \"Matheus Sousa Testes\",\r\n  \"registerCompany\": \"57126456000155\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com o campo Complemento com caracteres especial '-'",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function empresa() {\r",
									"    const names = [\"TechNova\", \"Bytewave\", \"Cyberion\", \"InovaTech\", \"Nexabyte\", \"Softtron\", \"Codeverse\", \"Dataflux\", \"Infinitron\", \"LogiCore\", \"Zentek\",\"Neurobyte\", \"Cloudix\", \"Sysnova\", \"Hexabit\", \"AIgorithm\", \"Quantumix\", \"Webtron\", \"Netflux\", \"Cyberflux\", \"Deepcode\", \"Techpulse\", \"Synaptech\", \"Codexis\", \"Nexonix\", \"Algobyte\", \"Infobyte\", \"Datazen\", \"Digiflow\", \"Innovix\", \"Coretron\", \"Zybernet\", \"Neurotech\", \"Nanobyte\", \"Virtunix\", \"Codexel\", \"Optibit\", \"Bitnova\", \"Globotron\", \"Digiware\", \"Skytech\", \"Cybervox\", \"Techspire\", \"Softbit\", \"MetaTech\", \"Synthron\", \"Virtuabyte\", \"Cloudtron\", \"Algonix\", \"Bitzen\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Empresa\", empresa())\r",
									"\r",
									"function tag() {\r",
									"    const tagnames = ['Solutions', 'Tech', 'Digital', 'Systems', 'Software', 'Cloud', 'AI', 'Cyber', 'Data', 'Analytics','Network', 'Security', 'Labs', 'Smart', 'Logic', 'Innovation', 'IT', 'Global', 'Developers', 'Code', 'Techno', 'Automations', 'Cloudware', 'Dynamics', 'Vision', 'Intelligence', 'NextGen', 'Computing', 'Innovators', 'Engineering', 'Performance', 'Softworks', 'Logicware', 'Digitalware', 'Transform', 'Platform', 'Smartware', 'Dataflow', 'Byte', 'Edge', 'Nexus', 'Techworks', 'Bit', 'Virtual', 'SystemsX', 'Infotech', 'Genix', 'Quantum', 'Bitware', 'CloudX'];\r",
									"\r",
									"    const randomTastName = tagnames[Math.floor(Math.random() * tagnames.length)]\r",
									"    return randomTastName\r",
									"}\r",
									"pm.environment.set(\"Tag\", tag())\r",
									"\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"Empresa\") + \" \" + pm.environment.get(\"Tag\"))\r",
									"\r",
									"\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"\r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									"\r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									"\r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									"\r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									"\r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									"\r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"CNPJ\", cnpjGerado);\r",
									"\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function gerarTelefone() {\r",
									"    // Gerando um DDD aleatório entre 11 e 99\r",
									"    const ddd = Math.floor(Math.random() * (99 - 11 + 1)) + 11;\r",
									"\r",
									"    // Gerando o número de telefone com 9 dígitos, começando com 9\r",
									"    const numero = Math.floor(Math.random() * 100000000) + 900000000; // Gera um número aleatório entre 900000000 e 999999999 (começando com '9')\r",
									"\r",
									"    // Concatenando +55, o DDD e o número gerado para formar o telefone\r",
									"    const telefone = `55${ddd}${numero.toString().slice(0, 5)}${numero.toString().slice(5, 9)}`;\r",
									"\r",
									"    return telefone;\r",
									"}\r",
									"\r",
									"// Gerando o número de telefone e armazenando como variável de ambiente\r",
									"const telefoneGerado = gerarTelefone();\r",
									"pm.environment.set(\"telefone\", telefoneGerado);\r",
									"\r",
									"function descricao() {\r",
									"    const names = [\"Testes\", \"Automação\", \"FrontEnd\", \"Backend\",\"Banco de Dados\", \"IA\",\"AWS\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Descricao\", descricao())\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"NomeRua\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"NomeRuas\", lastname())\r",
									"\r",
									"pm.environment.set(\"nomeruaComposto\", \r",
									"    pm.environment.get(\"NomeRua\") + \" \" + pm.environment.get(\"NomeRuas\"))\r",
									"\r",
									"function logradouro() {\r",
									"    const names = [\"Avenida\", \"Rua\", \"Alameda\", \"Travessa\", \"Praça\", \"Rodovia\", \"Estrada\", \"Largo\", \"Viaduto\", \"Marginal\", \"Parque\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Logradouro\", logradouro())\r",
									"\r",
									"pm.environment.set(\"logradouroCompleto\", \r",
									"    pm.environment.get(\"Logradouro\") + \" \" + pm.environment.get(\"nomeruaComposto\"))\r",
									"\r",
									"\r",
									"function gerarNumeroResidencia() {\r",
									"    // Definindo a probabilidade de gerar números com mais de 5 caracteres\r",
									"    const tamanhoNumero = Math.random() < 0.8 ? Math.floor(Math.random() * 5) + 1 : Math.floor(Math.random() * 6) + 5;\r",
									"\r",
									"    // Gerando um número aleatório com o tamanho definido\r",
									"    let numeroResidencia = Math.floor(Math.random() * Math.pow(10, tamanhoNumero)).toString(); // Gera número aleatório com o tamanho desejado\r",
									"\r",
									"    // Se o primeiro caractere for 0, remove-o\r",
									"    if (numeroResidencia[0] === '0') {\r",
									"        numeroResidencia = numeroResidencia.slice(1); // Remove o primeiro caractere\r",
									"    }\r",
									"\r",
									"    // Garantindo que o número tenha no máximo 10 caracteres\r",
									"    if (numeroResidencia.length > 10) {\r",
									"        numeroResidencia = numeroResidencia.slice(0, 10); // Limita a 10 caracteres\r",
									"    }\r",
									"\r",
									"    return numeroResidencia;\r",
									"}\r",
									"\r",
									"// Gerando o número de residência e armazenando como variável de ambiente\r",
									"const numeroResidenciaGerado = gerarNumeroResidencia();\r",
									"pm.environment.set(\"numeroResidencia\", numeroResidenciaGerado);\r",
									"\r",
									"function bairro() {\r",
									"    const names = ['Leblon', 'Ipanema', 'Copacabana', 'Barra da Tijuca', 'Botafogo', 'Lapa', 'Santa Teresa', 'Jardim Botânico', 'Flamengo', 'São Conrado', 'Moema', 'Vila Madalena', 'Pinheiros', 'Jardins', 'Aclimação', 'Brooklin', 'Tatuapé', 'Vila Progredior', 'Vila Nova Conceição', 'Campo Belo','Centro', 'Praia de Belas', 'Moinhos de Vento', 'Petrópolis', 'Tristeza', 'Caminho das Árvores', 'Pituba', 'Stella Maris', 'Parque Atlântico', 'Costa Azul', 'Vila Galvão', 'Santo Amaro', 'Perdizes', 'Aclimação', 'Vila Sônia', 'Cidade Dutra', 'São Bernardo do Campo', 'Vila Mariana', 'Bela Vista', 'Liberdade','Pinheiros', 'Itaim Bibi', 'Santa Cecília', 'Tucuruvi', 'Chácara Santo Antônio', 'Água Fria', 'Vila Olímpia', 'Vila São Francisco', 'Consolação', 'Vila Madalena']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Bairro\", bairro())\r",
									"\r",
									"function cidade() {\r",
									"    const names = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador', 'Curitiba', 'Fortaleza', 'Recife', 'Brasília', 'Manaus', 'Vitória', 'Goiânia', 'Belém', 'Natal', 'São Luís', 'Maceió', 'Campo Grande', 'João Pessoa', 'Aracaju', 'Cuiabá', 'Florianópolis', 'Teresina', 'Palmas', 'Macapá', 'Rio Branco', 'Boa Vista', 'Porto Velho', 'Anápolis', 'Caruaru', 'Londrina','Marabá', 'Araraquara', 'Sorocaba', 'Santos', 'Niterói', 'Mogi das Cruzes', 'Caxias do Sul', 'Barueri', 'Campinas', 'São José', 'Ponta Grossa', 'Jundiaí', 'Uberlândia', 'Diadema', 'Santo André', 'São Bernardo do Campo', 'Itaquaquecetuba', 'Ribeirão Preto', 'Juiz de Fora']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Cidade\", cidade())\r",
									"\r",
									"function abreviacao() {\r",
									"    const names = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"AbreviacaoEstado\", abreviacao())\r",
									"\r",
									"function randomCep() {\r",
									"    let randomCep = '';\r",
									"   \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        randomCep += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCep;\r",
									"}\r",
									"pm.environment.set(\"cep\", randomCep());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 201\", function(){\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Mensagem de sucesso\",function(){\r",
									"    pm.expect(pm.response.json().msg).to.equal(\"Registro realizado com sucesso\")\r",
									"})\r",
									"\r",
									"pm.test(\"Status é True\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.status).to.be.true;\r",
									"})\r",
									"\r",
									"pm.test(\"Nome da Empresa é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.corporateName).to.equal(pm.environment.get(\"nomeEmpresa\"))\r",
									"})\r",
									"\r",
									"pm.test(\"CNPJ é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.registerCompany).to.equal(pm.environment.get(\"CNPJ\"))\r",
									"})\r",
									"\r",
									"\r",
									"// Função para validar CNPJ com base nos dígitos verificadores\r",
									"function validarCNPJ(cnpj) {\r",
									"    // Remover qualquer caractere que não seja número\r",
									"    cnpj = cnpj.replace(/\\D/g, '');\r",
									"\r",
									"    // Verifica se o CNPJ tem 14 dígitos\r",
									"    if (cnpj.length !== 14) {\r",
									"        return false;\r",
									"    }\r",
									"\r",
									"    // Cálculo do primeiro dígito verificador\r",
									"    let soma = 0;\r",
									"    let multiplicadoresPrimeiro = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    \r",
									"    for (let i = 0; i < 12; i++) {\r",
									"        soma += parseInt(cnpj[i]) * multiplicadoresPrimeiro[i];\r",
									"    }\r",
									"\r",
									"    let resto = soma % 11;\r",
									"    let primeiroDV = resto < 2 ? 0 : 11 - resto;\r",
									"\r",
									"    // Cálculo do segundo dígito verificador\r",
									"    soma = 0;\r",
									"    let multiplicadoresSegundo = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    \r",
									"    for (let i = 0; i < 13; i++) {\r",
									"        soma += parseInt(cnpj[i]) * multiplicadoresSegundo[i];\r",
									"    }\r",
									"\r",
									"    resto = soma % 11;\r",
									"    let segundoDV = resto < 2 ? 0 : 11 - resto;\r",
									"\r",
									"    // Comparar com os dígitos do CNPJ enviado\r",
									"    return cnpj[12] == primeiroDV && cnpj[13] == segundoDV;\r",
									"}\r",
									"\r",
									"// Obter o CNPJ da resposta da API (supondo que está no campo \"cnpj\")\r",
									"let cnpjRecebido = pm.response.json().newCompany.registerCompany; \r",
									"\r",
									"// Executar a validação\r",
									"if (!validarCNPJ(cnpjRecebido)) {\r",
									"    pm.test(\"O CNPJ retornado é inválido!\", function () {\r",
									"        pm.expect(false).to.be.true;\r",
									"    });\r",
									"} else {\r",
									"    pm.test(\"O CNPJ retornado é válido!\", function () {\r",
									"        pm.expect(true).to.be.true;\r",
									"    });\r",
									"}\r",
									"\r",
									"pm.test(\"Complemento é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.address[0].complement).to.equal(\"Ron-Bugado\")\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomeEmpresa}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"{{fullnameUser}}\",\r\n  \"telephone\": \"{{telefone}}\",\r\n  \"serviceDescription\": \"{{Descricao}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{cep}}\",\r\n      \"city\": \"{{Cidade}}\",\r\n      \"state\": \"{{AbreviacaoEstado}}\",\r\n      \"district\": \"{{Bairro}}\",\r\n      \"street\": \"{{logradouroCompleto}}\",\r\n      \"number\": \"{{numeroResidencia}}\",\r\n      \"complement\": \"Ron-Bugado\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTM0MSwiZXhwIjoxNzM5MzE1NzQxfQ.cgJqYe74cprHCRTY9YLF_B-Hfgfp8l8lr6gDrEuqMi4' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"corporateName\": \"Matheus Sousa Testes\",\r\n  \"registerCompany\": \"57126456000155\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com o campo Complemento com caractere especial invalido",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function empresa() {\r",
									"    const names = [\"TechNova\", \"Bytewave\", \"Cyberion\", \"InovaTech\", \"Nexabyte\", \"Softtron\", \"Codeverse\", \"Dataflux\", \"Infinitron\", \"LogiCore\", \"Zentek\",\"Neurobyte\", \"Cloudix\", \"Sysnova\", \"Hexabit\", \"AIgorithm\", \"Quantumix\", \"Webtron\", \"Netflux\", \"Cyberflux\", \"Deepcode\", \"Techpulse\", \"Synaptech\", \"Codexis\", \"Nexonix\", \"Algobyte\", \"Infobyte\", \"Datazen\", \"Digiflow\", \"Innovix\", \"Coretron\", \"Zybernet\", \"Neurotech\", \"Nanobyte\", \"Virtunix\", \"Codexel\", \"Optibit\", \"Bitnova\", \"Globotron\", \"Digiware\", \"Skytech\", \"Cybervox\", \"Techspire\", \"Softbit\", \"MetaTech\", \"Synthron\", \"Virtuabyte\", \"Cloudtron\", \"Algonix\", \"Bitzen\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Empresa\", empresa())\r",
									"\r",
									"function tag() {\r",
									"    const tagnames = ['Solutions', 'Tech', 'Digital', 'Systems', 'Software', 'Cloud', 'AI', 'Cyber', 'Data', 'Analytics','Network', 'Security', 'Labs', 'Smart', 'Logic', 'Innovation', 'IT', 'Global', 'Developers', 'Code', 'Techno', 'Automations', 'Cloudware', 'Dynamics', 'Vision', 'Intelligence', 'NextGen', 'Computing', 'Innovators', 'Engineering', 'Performance', 'Softworks', 'Logicware', 'Digitalware', 'Transform', 'Platform', 'Smartware', 'Dataflow', 'Byte', 'Edge', 'Nexus', 'Techworks', 'Bit', 'Virtual', 'SystemsX', 'Infotech', 'Genix', 'Quantum', 'Bitware', 'CloudX'];\r",
									"\r",
									"    const randomTastName = tagnames[Math.floor(Math.random() * tagnames.length)]\r",
									"    return randomTastName\r",
									"}\r",
									"pm.environment.set(\"Tag\", tag())\r",
									"\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"Empresa\") + \" \" + pm.environment.get(\"Tag\"))\r",
									"\r",
									"\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"\r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									"\r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									"\r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									"\r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									"\r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									"\r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"CNPJ\", cnpjGerado);\r",
									"\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function gerarTelefone() {\r",
									"    // Gerando um DDD aleatório entre 11 e 99\r",
									"    const ddd = Math.floor(Math.random() * (99 - 11 + 1)) + 11;\r",
									"\r",
									"    // Gerando o número de telefone com 9 dígitos, começando com 9\r",
									"    const numero = Math.floor(Math.random() * 100000000) + 900000000; // Gera um número aleatório entre 900000000 e 999999999 (começando com '9')\r",
									"\r",
									"    // Concatenando +55, o DDD e o número gerado para formar o telefone\r",
									"    const telefone = `55${ddd}${numero.toString().slice(0, 5)}${numero.toString().slice(5, 9)}`;\r",
									"\r",
									"    return telefone;\r",
									"}\r",
									"\r",
									"// Gerando o número de telefone e armazenando como variável de ambiente\r",
									"const telefoneGerado = gerarTelefone();\r",
									"pm.environment.set(\"telefone\", telefoneGerado);\r",
									"\r",
									"function descricao() {\r",
									"    const names = [\"Testes\", \"Automação\", \"FrontEnd\", \"Backend\",\"Banco de Dados\", \"IA\",\"AWS\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Descricao\", descricao())\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"NomeRua\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"NomeRuas\", lastname())\r",
									"\r",
									"pm.environment.set(\"nomeruaComposto\", \r",
									"    pm.environment.get(\"NomeRua\") + \" \" + pm.environment.get(\"NomeRuas\"))\r",
									"\r",
									"function logradouro() {\r",
									"    const names = [\"Avenida\", \"Rua\", \"Alameda\", \"Travessa\", \"Praça\", \"Rodovia\", \"Estrada\", \"Largo\", \"Viaduto\", \"Marginal\", \"Parque\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Logradouro\", logradouro())\r",
									"\r",
									"pm.environment.set(\"logradouroCompleto\", \r",
									"    pm.environment.get(\"Logradouro\") + \" \" + pm.environment.get(\"nomeruaComposto\"))\r",
									"\r",
									"\r",
									"function gerarNumeroResidencia() {\r",
									"    // Definindo a probabilidade de gerar números com mais de 5 caracteres\r",
									"    const tamanhoNumero = Math.random() < 0.8 ? Math.floor(Math.random() * 5) + 1 : Math.floor(Math.random() * 6) + 5;\r",
									"\r",
									"    // Gerando um número aleatório com o tamanho definido\r",
									"    let numeroResidencia = Math.floor(Math.random() * Math.pow(10, tamanhoNumero)).toString(); // Gera número aleatório com o tamanho desejado\r",
									"\r",
									"    // Se o primeiro caractere for 0, remove-o\r",
									"    if (numeroResidencia[0] === '0') {\r",
									"        numeroResidencia = numeroResidencia.slice(1); // Remove o primeiro caractere\r",
									"    }\r",
									"\r",
									"    // Garantindo que o número tenha no máximo 10 caracteres\r",
									"    if (numeroResidencia.length > 10) {\r",
									"        numeroResidencia = numeroResidencia.slice(0, 10); // Limita a 10 caracteres\r",
									"    }\r",
									"\r",
									"    return numeroResidencia;\r",
									"}\r",
									"\r",
									"// Gerando o número de residência e armazenando como variável de ambiente\r",
									"const numeroResidenciaGerado = gerarNumeroResidencia();\r",
									"pm.environment.set(\"numeroResidencia\", numeroResidenciaGerado);\r",
									"\r",
									"function bairro() {\r",
									"    const names = ['Leblon', 'Ipanema', 'Copacabana', 'Barra da Tijuca', 'Botafogo', 'Lapa', 'Santa Teresa', 'Jardim Botânico', 'Flamengo', 'São Conrado', 'Moema', 'Vila Madalena', 'Pinheiros', 'Jardins', 'Aclimação', 'Brooklin', 'Tatuapé', 'Vila Progredior', 'Vila Nova Conceição', 'Campo Belo','Centro', 'Praia de Belas', 'Moinhos de Vento', 'Petrópolis', 'Tristeza', 'Caminho das Árvores', 'Pituba', 'Stella Maris', 'Parque Atlântico', 'Costa Azul', 'Vila Galvão', 'Santo Amaro', 'Perdizes', 'Aclimação', 'Vila Sônia', 'Cidade Dutra', 'São Bernardo do Campo', 'Vila Mariana', 'Bela Vista', 'Liberdade','Pinheiros', 'Itaim Bibi', 'Santa Cecília', 'Tucuruvi', 'Chácara Santo Antônio', 'Água Fria', 'Vila Olímpia', 'Vila São Francisco', 'Consolação', 'Vila Madalena']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Bairro\", bairro())\r",
									"\r",
									"function cidade() {\r",
									"    const names = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador', 'Curitiba', 'Fortaleza', 'Recife', 'Brasília', 'Manaus', 'Vitória', 'Goiânia', 'Belém', 'Natal', 'São Luís', 'Maceió', 'Campo Grande', 'João Pessoa', 'Aracaju', 'Cuiabá', 'Florianópolis', 'Teresina', 'Palmas', 'Macapá', 'Rio Branco', 'Boa Vista', 'Porto Velho', 'Anápolis', 'Caruaru', 'Londrina','Marabá', 'Araraquara', 'Sorocaba', 'Santos', 'Niterói', 'Mogi das Cruzes', 'Caxias do Sul', 'Barueri', 'Campinas', 'São José', 'Ponta Grossa', 'Jundiaí', 'Uberlândia', 'Diadema', 'Santo André', 'São Bernardo do Campo', 'Itaquaquecetuba', 'Ribeirão Preto', 'Juiz de Fora']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Cidade\", cidade())\r",
									"\r",
									"function abreviacao() {\r",
									"    const names = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"AbreviacaoEstado\", abreviacao())\r",
									"\r",
									"function randomCep() {\r",
									"    let randomCep = '';\r",
									"   \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        randomCep += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCep;\r",
									"}\r",
									"pm.environment.set(\"cep\", randomCep());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomeEmpresa}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"{{fullnameUser}}\",\r\n  \"telephone\": \"{{telefone}}\",\r\n  \"serviceDescription\": \"{{Descricao}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{cep}}\",\r\n      \"city\": \"{{Cidade}}\",\r\n      \"state\": \"{{AbreviacaoEstado}}\",\r\n      \"district\": \"{{Bairro}}\",\r\n      \"street\": \"{{logradouroCompleto}}\",\r\n      \"number\": \"{{numeroResidencia}}\",\r\n      \"complement\": \"Churrasco > sushi\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTM0MSwiZXhwIjoxNzM5MzE1NzQxfQ.cgJqYe74cprHCRTY9YLF_B-Hfgfp8l8lr6gDrEuqMi4' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"corporateName\": \"Matheus Sousa Testes\",\r\n  \"registerCompany\": \"57126456000155\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com o campo Complemento com mais de 80 caracteres",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function empresa() {\r",
									"    const names = [\"TechNova\", \"Bytewave\", \"Cyberion\", \"InovaTech\", \"Nexabyte\", \"Softtron\", \"Codeverse\", \"Dataflux\", \"Infinitron\", \"LogiCore\", \"Zentek\",\"Neurobyte\", \"Cloudix\", \"Sysnova\", \"Hexabit\", \"AIgorithm\", \"Quantumix\", \"Webtron\", \"Netflux\", \"Cyberflux\", \"Deepcode\", \"Techpulse\", \"Synaptech\", \"Codexis\", \"Nexonix\", \"Algobyte\", \"Infobyte\", \"Datazen\", \"Digiflow\", \"Innovix\", \"Coretron\", \"Zybernet\", \"Neurotech\", \"Nanobyte\", \"Virtunix\", \"Codexel\", \"Optibit\", \"Bitnova\", \"Globotron\", \"Digiware\", \"Skytech\", \"Cybervox\", \"Techspire\", \"Softbit\", \"MetaTech\", \"Synthron\", \"Virtuabyte\", \"Cloudtron\", \"Algonix\", \"Bitzen\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Empresa\", empresa())\r",
									"\r",
									"function tag() {\r",
									"    const tagnames = ['Solutions', 'Tech', 'Digital', 'Systems', 'Software', 'Cloud', 'AI', 'Cyber', 'Data', 'Analytics','Network', 'Security', 'Labs', 'Smart', 'Logic', 'Innovation', 'IT', 'Global', 'Developers', 'Code', 'Techno', 'Automations', 'Cloudware', 'Dynamics', 'Vision', 'Intelligence', 'NextGen', 'Computing', 'Innovators', 'Engineering', 'Performance', 'Softworks', 'Logicware', 'Digitalware', 'Transform', 'Platform', 'Smartware', 'Dataflow', 'Byte', 'Edge', 'Nexus', 'Techworks', 'Bit', 'Virtual', 'SystemsX', 'Infotech', 'Genix', 'Quantum', 'Bitware', 'CloudX'];\r",
									"\r",
									"    const randomTastName = tagnames[Math.floor(Math.random() * tagnames.length)]\r",
									"    return randomTastName\r",
									"}\r",
									"pm.environment.set(\"Tag\", tag())\r",
									"\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"Empresa\") + \" \" + pm.environment.get(\"Tag\"))\r",
									"\r",
									"\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"\r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									"\r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									"\r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									"\r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									"\r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									"\r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"CNPJ\", cnpjGerado);\r",
									"\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function gerarTelefone() {\r",
									"    // Gerando um DDD aleatório entre 11 e 99\r",
									"    const ddd = Math.floor(Math.random() * (99 - 11 + 1)) + 11;\r",
									"\r",
									"    // Gerando o número de telefone com 9 dígitos, começando com 9\r",
									"    const numero = Math.floor(Math.random() * 100000000) + 900000000; // Gera um número aleatório entre 900000000 e 999999999 (começando com '9')\r",
									"\r",
									"    // Concatenando +55, o DDD e o número gerado para formar o telefone\r",
									"    const telefone = `55${ddd}${numero.toString().slice(0, 5)}${numero.toString().slice(5, 9)}`;\r",
									"\r",
									"    return telefone;\r",
									"}\r",
									"\r",
									"// Gerando o número de telefone e armazenando como variável de ambiente\r",
									"const telefoneGerado = gerarTelefone();\r",
									"pm.environment.set(\"telefone\", telefoneGerado);\r",
									"\r",
									"function descricao() {\r",
									"    const names = [\"Testes\", \"Automação\", \"FrontEnd\", \"Backend\",\"Banco de Dados\", \"IA\",\"AWS\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Descricao\", descricao())\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"NomeRua\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"NomeRuas\", lastname())\r",
									"\r",
									"pm.environment.set(\"nomeruaComposto\", \r",
									"    pm.environment.get(\"NomeRua\") + \" \" + pm.environment.get(\"NomeRuas\"))\r",
									"\r",
									"function logradouro() {\r",
									"    const names = [\"Avenida\", \"Rua\", \"Alameda\", \"Travessa\", \"Praça\", \"Rodovia\", \"Estrada\", \"Largo\", \"Viaduto\", \"Marginal\", \"Parque\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Logradouro\", logradouro())\r",
									"\r",
									"pm.environment.set(\"logradouroCompleto\", \r",
									"    pm.environment.get(\"Logradouro\") + \" \" + pm.environment.get(\"nomeruaComposto\"))\r",
									"\r",
									"\r",
									"function gerarNumeroResidencia() {\r",
									"    // Definindo a probabilidade de gerar números com mais de 5 caracteres\r",
									"    const tamanhoNumero = Math.random() < 0.8 ? Math.floor(Math.random() * 5) + 1 : Math.floor(Math.random() * 6) + 5;\r",
									"\r",
									"    // Gerando um número aleatório com o tamanho definido\r",
									"    let numeroResidencia = Math.floor(Math.random() * Math.pow(10, tamanhoNumero)).toString(); // Gera número aleatório com o tamanho desejado\r",
									"\r",
									"    // Se o primeiro caractere for 0, remove-o\r",
									"    if (numeroResidencia[0] === '0') {\r",
									"        numeroResidencia = numeroResidencia.slice(1); // Remove o primeiro caractere\r",
									"    }\r",
									"\r",
									"    // Garantindo que o número tenha no máximo 10 caracteres\r",
									"    if (numeroResidencia.length > 10) {\r",
									"        numeroResidencia = numeroResidencia.slice(0, 10); // Limita a 10 caracteres\r",
									"    }\r",
									"\r",
									"    return numeroResidencia;\r",
									"}\r",
									"\r",
									"// Gerando o número de residência e armazenando como variável de ambiente\r",
									"const numeroResidenciaGerado = gerarNumeroResidencia();\r",
									"pm.environment.set(\"numeroResidencia\", numeroResidenciaGerado);\r",
									"\r",
									"function bairro() {\r",
									"    const names = ['Leblon', 'Ipanema', 'Copacabana', 'Barra da Tijuca', 'Botafogo', 'Lapa', 'Santa Teresa', 'Jardim Botânico', 'Flamengo', 'São Conrado', 'Moema', 'Vila Madalena', 'Pinheiros', 'Jardins', 'Aclimação', 'Brooklin', 'Tatuapé', 'Vila Progredior', 'Vila Nova Conceição', 'Campo Belo','Centro', 'Praia de Belas', 'Moinhos de Vento', 'Petrópolis', 'Tristeza', 'Caminho das Árvores', 'Pituba', 'Stella Maris', 'Parque Atlântico', 'Costa Azul', 'Vila Galvão', 'Santo Amaro', 'Perdizes', 'Aclimação', 'Vila Sônia', 'Cidade Dutra', 'São Bernardo do Campo', 'Vila Mariana', 'Bela Vista', 'Liberdade','Pinheiros', 'Itaim Bibi', 'Santa Cecília', 'Tucuruvi', 'Chácara Santo Antônio', 'Água Fria', 'Vila Olímpia', 'Vila São Francisco', 'Consolação', 'Vila Madalena']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Bairro\", bairro())\r",
									"\r",
									"function cidade() {\r",
									"    const names = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador', 'Curitiba', 'Fortaleza', 'Recife', 'Brasília', 'Manaus', 'Vitória', 'Goiânia', 'Belém', 'Natal', 'São Luís', 'Maceió', 'Campo Grande', 'João Pessoa', 'Aracaju', 'Cuiabá', 'Florianópolis', 'Teresina', 'Palmas', 'Macapá', 'Rio Branco', 'Boa Vista', 'Porto Velho', 'Anápolis', 'Caruaru', 'Londrina','Marabá', 'Araraquara', 'Sorocaba', 'Santos', 'Niterói', 'Mogi das Cruzes', 'Caxias do Sul', 'Barueri', 'Campinas', 'São José', 'Ponta Grossa', 'Jundiaí', 'Uberlândia', 'Diadema', 'Santo André', 'São Bernardo do Campo', 'Itaquaquecetuba', 'Ribeirão Preto', 'Juiz de Fora']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Cidade\", cidade())\r",
									"\r",
									"function abreviacao() {\r",
									"    const names = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"AbreviacaoEstado\", abreviacao())\r",
									"\r",
									"function randomCep() {\r",
									"    let randomCep = '';\r",
									"   \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        randomCep += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCep;\r",
									"}\r",
									"pm.environment.set(\"cep\", randomCep());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomeEmpresa}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"{{fullnameUser}}\",\r\n  \"telephone\": \"{{telefone}}\",\r\n  \"serviceDescription\": \"{{Descricao}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{cep}}\",\r\n      \"city\": \"{{Cidade}}\",\r\n      \"state\": \"{{AbreviacaoEstado}}\",\r\n      \"district\": \"{{Bairro}}\",\r\n      \"street\": \"{{logradouroCompleto}}\",\r\n      \"number\": \"{{numeroResidencia}}\",\r\n      \"complement\": \"Ouviram do Ipiranga as margens plácidas De um povo heroico, o brado retumbante E o Sol da liberdade, em raios fúlgidos Brilhou no céu da pátria nesse instante\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTM0MSwiZXhwIjoxNzM5MzE1NzQxfQ.cgJqYe74cprHCRTY9YLF_B-Hfgfp8l8lr6gDrEuqMi4' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"corporateName\": \"Matheus Sousa Testes\",\r\n  \"registerCompany\": \"57126456000155\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com o campo Bairro em branco",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function empresa() {\r",
									"    const names = [\"TechNova\", \"Bytewave\", \"Cyberion\", \"InovaTech\", \"Nexabyte\", \"Softtron\", \"Codeverse\", \"Dataflux\", \"Infinitron\", \"LogiCore\", \"Zentek\",\"Neurobyte\", \"Cloudix\", \"Sysnova\", \"Hexabit\", \"AIgorithm\", \"Quantumix\", \"Webtron\", \"Netflux\", \"Cyberflux\", \"Deepcode\", \"Techpulse\", \"Synaptech\", \"Codexis\", \"Nexonix\", \"Algobyte\", \"Infobyte\", \"Datazen\", \"Digiflow\", \"Innovix\", \"Coretron\", \"Zybernet\", \"Neurotech\", \"Nanobyte\", \"Virtunix\", \"Codexel\", \"Optibit\", \"Bitnova\", \"Globotron\", \"Digiware\", \"Skytech\", \"Cybervox\", \"Techspire\", \"Softbit\", \"MetaTech\", \"Synthron\", \"Virtuabyte\", \"Cloudtron\", \"Algonix\", \"Bitzen\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Empresa\", empresa())\r",
									"\r",
									"function tag() {\r",
									"    const tagnames = ['Solutions', 'Tech', 'Digital', 'Systems', 'Software', 'Cloud', 'AI', 'Cyber', 'Data', 'Analytics','Network', 'Security', 'Labs', 'Smart', 'Logic', 'Innovation', 'IT', 'Global', 'Developers', 'Code', 'Techno', 'Automations', 'Cloudware', 'Dynamics', 'Vision', 'Intelligence', 'NextGen', 'Computing', 'Innovators', 'Engineering', 'Performance', 'Softworks', 'Logicware', 'Digitalware', 'Transform', 'Platform', 'Smartware', 'Dataflow', 'Byte', 'Edge', 'Nexus', 'Techworks', 'Bit', 'Virtual', 'SystemsX', 'Infotech', 'Genix', 'Quantum', 'Bitware', 'CloudX'];\r",
									"\r",
									"    const randomTastName = tagnames[Math.floor(Math.random() * tagnames.length)]\r",
									"    return randomTastName\r",
									"}\r",
									"pm.environment.set(\"Tag\", tag())\r",
									"\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"Empresa\") + \" \" + pm.environment.get(\"Tag\"))\r",
									"\r",
									"\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"\r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									"\r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									"\r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									"\r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									"\r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									"\r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"CNPJ\", cnpjGerado);\r",
									"\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function gerarTelefone() {\r",
									"    // Gerando um DDD aleatório entre 11 e 99\r",
									"    const ddd = Math.floor(Math.random() * (99 - 11 + 1)) + 11;\r",
									"\r",
									"    // Gerando o número de telefone com 9 dígitos, começando com 9\r",
									"    const numero = Math.floor(Math.random() * 100000000) + 900000000; // Gera um número aleatório entre 900000000 e 999999999 (começando com '9')\r",
									"\r",
									"    // Concatenando +55, o DDD e o número gerado para formar o telefone\r",
									"    const telefone = `55${ddd}${numero.toString().slice(0, 5)}${numero.toString().slice(5, 9)}`;\r",
									"\r",
									"    return telefone;\r",
									"}\r",
									"\r",
									"// Gerando o número de telefone e armazenando como variável de ambiente\r",
									"const telefoneGerado = gerarTelefone();\r",
									"pm.environment.set(\"telefone\", telefoneGerado);\r",
									"\r",
									"function descricao() {\r",
									"    const names = [\"Testes\", \"Automação\", \"FrontEnd\", \"Backend\",\"Banco de Dados\", \"IA\",\"AWS\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Descricao\", descricao())\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"NomeRua\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"NomeRuas\", lastname())\r",
									"\r",
									"pm.environment.set(\"nomeruaComposto\", \r",
									"    pm.environment.get(\"NomeRua\") + \" \" + pm.environment.get(\"NomeRuas\"))\r",
									"\r",
									"function logradouro() {\r",
									"    const names = [\"Avenida\", \"Rua\", \"Alameda\", \"Travessa\", \"Praça\", \"Rodovia\", \"Estrada\", \"Largo\", \"Viaduto\", \"Marginal\", \"Parque\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Logradouro\", logradouro())\r",
									"\r",
									"pm.environment.set(\"logradouroCompleto\", \r",
									"    pm.environment.get(\"Logradouro\") + \" \" + pm.environment.get(\"nomeruaComposto\"))\r",
									"\r",
									"\r",
									"function gerarNumeroResidencia() {\r",
									"    // Definindo a probabilidade de gerar números com mais de 5 caracteres\r",
									"    const tamanhoNumero = Math.random() < 0.8 ? Math.floor(Math.random() * 5) + 1 : Math.floor(Math.random() * 6) + 5;\r",
									"\r",
									"    // Gerando um número aleatório com o tamanho definido\r",
									"    let numeroResidencia = Math.floor(Math.random() * Math.pow(10, tamanhoNumero)).toString(); // Gera número aleatório com o tamanho desejado\r",
									"\r",
									"    // Se o primeiro caractere for 0, remove-o\r",
									"    if (numeroResidencia[0] === '0') {\r",
									"        numeroResidencia = numeroResidencia.slice(1); // Remove o primeiro caractere\r",
									"    }\r",
									"\r",
									"    // Garantindo que o número tenha no máximo 10 caracteres\r",
									"    if (numeroResidencia.length > 10) {\r",
									"        numeroResidencia = numeroResidencia.slice(0, 10); // Limita a 10 caracteres\r",
									"    }\r",
									"\r",
									"    return numeroResidencia;\r",
									"}\r",
									"\r",
									"// Gerando o número de residência e armazenando como variável de ambiente\r",
									"const numeroResidenciaGerado = gerarNumeroResidencia();\r",
									"pm.environment.set(\"numeroResidencia\", numeroResidenciaGerado);\r",
									"\r",
									"function bairro() {\r",
									"    const names = ['Leblon', 'Ipanema', 'Copacabana', 'Barra da Tijuca', 'Botafogo', 'Lapa', 'Santa Teresa', 'Jardim Botânico', 'Flamengo', 'São Conrado', 'Moema', 'Vila Madalena', 'Pinheiros', 'Jardins', 'Aclimação', 'Brooklin', 'Tatuapé', 'Vila Progredior', 'Vila Nova Conceição', 'Campo Belo','Centro', 'Praia de Belas', 'Moinhos de Vento', 'Petrópolis', 'Tristeza', 'Caminho das Árvores', 'Pituba', 'Stella Maris', 'Parque Atlântico', 'Costa Azul', 'Vila Galvão', 'Santo Amaro', 'Perdizes', 'Aclimação', 'Vila Sônia', 'Cidade Dutra', 'São Bernardo do Campo', 'Vila Mariana', 'Bela Vista', 'Liberdade','Pinheiros', 'Itaim Bibi', 'Santa Cecília', 'Tucuruvi', 'Chácara Santo Antônio', 'Água Fria', 'Vila Olímpia', 'Vila São Francisco', 'Consolação', 'Vila Madalena']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Bairro\", bairro())\r",
									"\r",
									"function cidade() {\r",
									"    const names = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador', 'Curitiba', 'Fortaleza', 'Recife', 'Brasília', 'Manaus', 'Vitória', 'Goiânia', 'Belém', 'Natal', 'São Luís', 'Maceió', 'Campo Grande', 'João Pessoa', 'Aracaju', 'Cuiabá', 'Florianópolis', 'Teresina', 'Palmas', 'Macapá', 'Rio Branco', 'Boa Vista', 'Porto Velho', 'Anápolis', 'Caruaru', 'Londrina','Marabá', 'Araraquara', 'Sorocaba', 'Santos', 'Niterói', 'Mogi das Cruzes', 'Caxias do Sul', 'Barueri', 'Campinas', 'São José', 'Ponta Grossa', 'Jundiaí', 'Uberlândia', 'Diadema', 'Santo André', 'São Bernardo do Campo', 'Itaquaquecetuba', 'Ribeirão Preto', 'Juiz de Fora']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Cidade\", cidade())\r",
									"\r",
									"function abreviacao() {\r",
									"    const names = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"AbreviacaoEstado\", abreviacao())\r",
									"\r",
									"function randomCep() {\r",
									"    let randomCep = '';\r",
									"   \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        randomCep += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCep;\r",
									"}\r",
									"pm.environment.set(\"cep\", randomCep());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Mensagem de erro\",function(){\r",
									"     pm.expect(pm.response.json().error[0]).to.equal(\"O campo Bairro é obrigatório\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomeEmpresa}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"{{fullnameUser}}\",\r\n  \"telephone\": \"{{telefone}}\",\r\n  \"serviceDescription\": \"{{Descricao}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{cep}}\",\r\n      \"city\": \"{{Cidade}}\",\r\n      \"state\": \"{{AbreviacaoEstado}}\",\r\n      \"district\": \"\",\r\n      \"street\": \"{{logradouroCompleto}}\",\r\n      \"number\": \"{{numeroResidencia}}\",\r\n      \"complement\": \"\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTM0MSwiZXhwIjoxNzM5MzE1NzQxfQ.cgJqYe74cprHCRTY9YLF_B-Hfgfp8l8lr6gDrEuqMi4' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"corporateName\": \"Matheus Sousa Testes\",\r\n  \"registerCompany\": \"57126456000155\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com o campo Bairro com letras e numeros",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function empresa() {\r",
									"    const names = [\"TechNova\", \"Bytewave\", \"Cyberion\", \"InovaTech\", \"Nexabyte\", \"Softtron\", \"Codeverse\", \"Dataflux\", \"Infinitron\", \"LogiCore\", \"Zentek\",\"Neurobyte\", \"Cloudix\", \"Sysnova\", \"Hexabit\", \"AIgorithm\", \"Quantumix\", \"Webtron\", \"Netflux\", \"Cyberflux\", \"Deepcode\", \"Techpulse\", \"Synaptech\", \"Codexis\", \"Nexonix\", \"Algobyte\", \"Infobyte\", \"Datazen\", \"Digiflow\", \"Innovix\", \"Coretron\", \"Zybernet\", \"Neurotech\", \"Nanobyte\", \"Virtunix\", \"Codexel\", \"Optibit\", \"Bitnova\", \"Globotron\", \"Digiware\", \"Skytech\", \"Cybervox\", \"Techspire\", \"Softbit\", \"MetaTech\", \"Synthron\", \"Virtuabyte\", \"Cloudtron\", \"Algonix\", \"Bitzen\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Empresa\", empresa())\r",
									"\r",
									"function tag() {\r",
									"    const tagnames = ['Solutions', 'Tech', 'Digital', 'Systems', 'Software', 'Cloud', 'AI', 'Cyber', 'Data', 'Analytics','Network', 'Security', 'Labs', 'Smart', 'Logic', 'Innovation', 'IT', 'Global', 'Developers', 'Code', 'Techno', 'Automations', 'Cloudware', 'Dynamics', 'Vision', 'Intelligence', 'NextGen', 'Computing', 'Innovators', 'Engineering', 'Performance', 'Softworks', 'Logicware', 'Digitalware', 'Transform', 'Platform', 'Smartware', 'Dataflow', 'Byte', 'Edge', 'Nexus', 'Techworks', 'Bit', 'Virtual', 'SystemsX', 'Infotech', 'Genix', 'Quantum', 'Bitware', 'CloudX'];\r",
									"\r",
									"    const randomTastName = tagnames[Math.floor(Math.random() * tagnames.length)]\r",
									"    return randomTastName\r",
									"}\r",
									"pm.environment.set(\"Tag\", tag())\r",
									"\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"Empresa\") + \" \" + pm.environment.get(\"Tag\"))\r",
									"\r",
									"\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"\r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									"\r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									"\r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									"\r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									"\r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									"\r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"CNPJ\", cnpjGerado);\r",
									"\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function gerarTelefone() {\r",
									"    // Gerando um DDD aleatório entre 11 e 99\r",
									"    const ddd = Math.floor(Math.random() * (99 - 11 + 1)) + 11;\r",
									"\r",
									"    // Gerando o número de telefone com 9 dígitos, começando com 9\r",
									"    const numero = Math.floor(Math.random() * 100000000) + 900000000; // Gera um número aleatório entre 900000000 e 999999999 (começando com '9')\r",
									"\r",
									"    // Concatenando +55, o DDD e o número gerado para formar o telefone\r",
									"    const telefone = `55${ddd}${numero.toString().slice(0, 5)}${numero.toString().slice(5, 9)}`;\r",
									"\r",
									"    return telefone;\r",
									"}\r",
									"\r",
									"// Gerando o número de telefone e armazenando como variável de ambiente\r",
									"const telefoneGerado = gerarTelefone();\r",
									"pm.environment.set(\"telefone\", telefoneGerado);\r",
									"\r",
									"function descricao() {\r",
									"    const names = [\"Testes\", \"Automação\", \"FrontEnd\", \"Backend\",\"Banco de Dados\", \"IA\",\"AWS\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Descricao\", descricao())\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"NomeRua\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"NomeRuas\", lastname())\r",
									"\r",
									"pm.environment.set(\"nomeruaComposto\", \r",
									"    pm.environment.get(\"NomeRua\") + \" \" + pm.environment.get(\"NomeRuas\"))\r",
									"\r",
									"function logradouro() {\r",
									"    const names = [\"Avenida\", \"Rua\", \"Alameda\", \"Travessa\", \"Praça\", \"Rodovia\", \"Estrada\", \"Largo\", \"Viaduto\", \"Marginal\", \"Parque\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Logradouro\", logradouro())\r",
									"\r",
									"pm.environment.set(\"logradouroCompleto\", \r",
									"    pm.environment.get(\"Logradouro\") + \" \" + pm.environment.get(\"nomeruaComposto\"))\r",
									"\r",
									"\r",
									"function gerarNumeroResidencia() {\r",
									"    // Definindo a probabilidade de gerar números com mais de 5 caracteres\r",
									"    const tamanhoNumero = Math.random() < 0.8 ? Math.floor(Math.random() * 5) + 1 : Math.floor(Math.random() * 6) + 5;\r",
									"\r",
									"    // Gerando um número aleatório com o tamanho definido\r",
									"    let numeroResidencia = Math.floor(Math.random() * Math.pow(10, tamanhoNumero)).toString(); // Gera número aleatório com o tamanho desejado\r",
									"\r",
									"    // Se o primeiro caractere for 0, remove-o\r",
									"    if (numeroResidencia[0] === '0') {\r",
									"        numeroResidencia = numeroResidencia.slice(1); // Remove o primeiro caractere\r",
									"    }\r",
									"\r",
									"    // Garantindo que o número tenha no máximo 10 caracteres\r",
									"    if (numeroResidencia.length > 10) {\r",
									"        numeroResidencia = numeroResidencia.slice(0, 10); // Limita a 10 caracteres\r",
									"    }\r",
									"\r",
									"    return numeroResidencia;\r",
									"}\r",
									"\r",
									"// Gerando o número de residência e armazenando como variável de ambiente\r",
									"const numeroResidenciaGerado = gerarNumeroResidencia();\r",
									"pm.environment.set(\"numeroResidencia\", numeroResidenciaGerado);\r",
									"\r",
									"function bairro() {\r",
									"    const names = ['Leblon', 'Ipanema', 'Copacabana', 'Barra da Tijuca', 'Botafogo', 'Lapa', 'Santa Teresa', 'Jardim Botânico', 'Flamengo', 'São Conrado', 'Moema', 'Vila Madalena', 'Pinheiros', 'Jardins', 'Aclimação', 'Brooklin', 'Tatuapé', 'Vila Progredior', 'Vila Nova Conceição', 'Campo Belo','Centro', 'Praia de Belas', 'Moinhos de Vento', 'Petrópolis', 'Tristeza', 'Caminho das Árvores', 'Pituba', 'Stella Maris', 'Parque Atlântico', 'Costa Azul', 'Vila Galvão', 'Santo Amaro', 'Perdizes', 'Aclimação', 'Vila Sônia', 'Cidade Dutra', 'São Bernardo do Campo', 'Vila Mariana', 'Bela Vista', 'Liberdade','Pinheiros', 'Itaim Bibi', 'Santa Cecília', 'Tucuruvi', 'Chácara Santo Antônio', 'Água Fria', 'Vila Olímpia', 'Vila São Francisco', 'Consolação', 'Vila Madalena']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Bairro\", bairro())\r",
									"\r",
									"function cidade() {\r",
									"    const names = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador', 'Curitiba', 'Fortaleza', 'Recife', 'Brasília', 'Manaus', 'Vitória', 'Goiânia', 'Belém', 'Natal', 'São Luís', 'Maceió', 'Campo Grande', 'João Pessoa', 'Aracaju', 'Cuiabá', 'Florianópolis', 'Teresina', 'Palmas', 'Macapá', 'Rio Branco', 'Boa Vista', 'Porto Velho', 'Anápolis', 'Caruaru', 'Londrina','Marabá', 'Araraquara', 'Sorocaba', 'Santos', 'Niterói', 'Mogi das Cruzes', 'Caxias do Sul', 'Barueri', 'Campinas', 'São José', 'Ponta Grossa', 'Jundiaí', 'Uberlândia', 'Diadema', 'Santo André', 'São Bernardo do Campo', 'Itaquaquecetuba', 'Ribeirão Preto', 'Juiz de Fora']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Cidade\", cidade())\r",
									"\r",
									"function abreviacao() {\r",
									"    const names = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"AbreviacaoEstado\", abreviacao())\r",
									"\r",
									"function randomCep() {\r",
									"    let randomCep = '';\r",
									"   \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        randomCep += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCep;\r",
									"}\r",
									"pm.environment.set(\"cep\", randomCep());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 201\", function(){\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Mensagem de sucesso\",function(){\r",
									"    pm.expect(pm.response.json().msg).to.equal(\"Registro realizado com sucesso\")\r",
									"})\r",
									"\r",
									"pm.test(\"Status é True\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.status).to.be.true;\r",
									"})\r",
									"\r",
									"pm.test(\"Nome da Empresa é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.corporateName).to.equal(pm.environment.get(\"nomeEmpresa\"))\r",
									"})\r",
									"\r",
									"pm.test(\"CNPJ é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.registerCompany).to.equal(pm.environment.get(\"CNPJ\"))\r",
									"})\r",
									"\r",
									"\r",
									"// Função para validar CNPJ com base nos dígitos verificadores\r",
									"function validarCNPJ(cnpj) {\r",
									"    // Remover qualquer caractere que não seja número\r",
									"    cnpj = cnpj.replace(/\\D/g, '');\r",
									"\r",
									"    // Verifica se o CNPJ tem 14 dígitos\r",
									"    if (cnpj.length !== 14) {\r",
									"        return false;\r",
									"    }\r",
									"\r",
									"    // Cálculo do primeiro dígito verificador\r",
									"    let soma = 0;\r",
									"    let multiplicadoresPrimeiro = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    \r",
									"    for (let i = 0; i < 12; i++) {\r",
									"        soma += parseInt(cnpj[i]) * multiplicadoresPrimeiro[i];\r",
									"    }\r",
									"\r",
									"    let resto = soma % 11;\r",
									"    let primeiroDV = resto < 2 ? 0 : 11 - resto;\r",
									"\r",
									"    // Cálculo do segundo dígito verificador\r",
									"    soma = 0;\r",
									"    let multiplicadoresSegundo = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    \r",
									"    for (let i = 0; i < 13; i++) {\r",
									"        soma += parseInt(cnpj[i]) * multiplicadoresSegundo[i];\r",
									"    }\r",
									"\r",
									"    resto = soma % 11;\r",
									"    let segundoDV = resto < 2 ? 0 : 11 - resto;\r",
									"\r",
									"    // Comparar com os dígitos do CNPJ enviado\r",
									"    return cnpj[12] == primeiroDV && cnpj[13] == segundoDV;\r",
									"}\r",
									"\r",
									"// Obter o CNPJ da resposta da API (supondo que está no campo \"cnpj\")\r",
									"let cnpjRecebido = pm.response.json().newCompany.registerCompany; \r",
									"\r",
									"// Executar a validação\r",
									"if (!validarCNPJ(cnpjRecebido)) {\r",
									"    pm.test(\"O CNPJ retornado é inválido!\", function () {\r",
									"        pm.expect(false).to.be.true;\r",
									"    });\r",
									"} else {\r",
									"    pm.test(\"O CNPJ retornado é válido!\", function () {\r",
									"        pm.expect(true).to.be.true;\r",
									"    });\r",
									"}\r",
									"\r",
									"pm.test(\"Bairro é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.address[0].district).to.equal(\"Parada 15\")\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomeEmpresa}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"{{fullnameUser}}\",\r\n  \"telephone\": \"{{telefone}}\",\r\n  \"serviceDescription\": \"{{Descricao}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{cep}}\",\r\n      \"city\": \"{{Cidade}}\",\r\n      \"state\": \"{{AbreviacaoEstado}}\",\r\n      \"district\": \"Parada 15\",\r\n      \"street\": \"{{logradouroCompleto}}\",\r\n      \"number\": \"{{numeroResidencia}}\",\r\n      \"complement\": \"\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTM0MSwiZXhwIjoxNzM5MzE1NzQxfQ.cgJqYe74cprHCRTY9YLF_B-Hfgfp8l8lr6gDrEuqMi4' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"corporateName\": \"Matheus Sousa Testes\",\r\n  \"registerCompany\": \"57126456000155\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com o campo Bairro somente com numeros",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function empresa() {\r",
									"    const names = [\"TechNova\", \"Bytewave\", \"Cyberion\", \"InovaTech\", \"Nexabyte\", \"Softtron\", \"Codeverse\", \"Dataflux\", \"Infinitron\", \"LogiCore\", \"Zentek\",\"Neurobyte\", \"Cloudix\", \"Sysnova\", \"Hexabit\", \"AIgorithm\", \"Quantumix\", \"Webtron\", \"Netflux\", \"Cyberflux\", \"Deepcode\", \"Techpulse\", \"Synaptech\", \"Codexis\", \"Nexonix\", \"Algobyte\", \"Infobyte\", \"Datazen\", \"Digiflow\", \"Innovix\", \"Coretron\", \"Zybernet\", \"Neurotech\", \"Nanobyte\", \"Virtunix\", \"Codexel\", \"Optibit\", \"Bitnova\", \"Globotron\", \"Digiware\", \"Skytech\", \"Cybervox\", \"Techspire\", \"Softbit\", \"MetaTech\", \"Synthron\", \"Virtuabyte\", \"Cloudtron\", \"Algonix\", \"Bitzen\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Empresa\", empresa())\r",
									"\r",
									"function tag() {\r",
									"    const tagnames = ['Solutions', 'Tech', 'Digital', 'Systems', 'Software', 'Cloud', 'AI', 'Cyber', 'Data', 'Analytics','Network', 'Security', 'Labs', 'Smart', 'Logic', 'Innovation', 'IT', 'Global', 'Developers', 'Code', 'Techno', 'Automations', 'Cloudware', 'Dynamics', 'Vision', 'Intelligence', 'NextGen', 'Computing', 'Innovators', 'Engineering', 'Performance', 'Softworks', 'Logicware', 'Digitalware', 'Transform', 'Platform', 'Smartware', 'Dataflow', 'Byte', 'Edge', 'Nexus', 'Techworks', 'Bit', 'Virtual', 'SystemsX', 'Infotech', 'Genix', 'Quantum', 'Bitware', 'CloudX'];\r",
									"\r",
									"    const randomTastName = tagnames[Math.floor(Math.random() * tagnames.length)]\r",
									"    return randomTastName\r",
									"}\r",
									"pm.environment.set(\"Tag\", tag())\r",
									"\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"Empresa\") + \" \" + pm.environment.get(\"Tag\"))\r",
									"\r",
									"\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"\r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									"\r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									"\r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									"\r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									"\r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									"\r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"CNPJ\", cnpjGerado);\r",
									"\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function gerarTelefone() {\r",
									"    // Gerando um DDD aleatório entre 11 e 99\r",
									"    const ddd = Math.floor(Math.random() * (99 - 11 + 1)) + 11;\r",
									"\r",
									"    // Gerando o número de telefone com 9 dígitos, começando com 9\r",
									"    const numero = Math.floor(Math.random() * 100000000) + 900000000; // Gera um número aleatório entre 900000000 e 999999999 (começando com '9')\r",
									"\r",
									"    // Concatenando +55, o DDD e o número gerado para formar o telefone\r",
									"    const telefone = `55${ddd}${numero.toString().slice(0, 5)}${numero.toString().slice(5, 9)}`;\r",
									"\r",
									"    return telefone;\r",
									"}\r",
									"\r",
									"// Gerando o número de telefone e armazenando como variável de ambiente\r",
									"const telefoneGerado = gerarTelefone();\r",
									"pm.environment.set(\"telefone\", telefoneGerado);\r",
									"\r",
									"function descricao() {\r",
									"    const names = [\"Testes\", \"Automação\", \"FrontEnd\", \"Backend\",\"Banco de Dados\", \"IA\",\"AWS\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Descricao\", descricao())\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"NomeRua\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"NomeRuas\", lastname())\r",
									"\r",
									"pm.environment.set(\"nomeruaComposto\", \r",
									"    pm.environment.get(\"NomeRua\") + \" \" + pm.environment.get(\"NomeRuas\"))\r",
									"\r",
									"function logradouro() {\r",
									"    const names = [\"Avenida\", \"Rua\", \"Alameda\", \"Travessa\", \"Praça\", \"Rodovia\", \"Estrada\", \"Largo\", \"Viaduto\", \"Marginal\", \"Parque\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Logradouro\", logradouro())\r",
									"\r",
									"pm.environment.set(\"logradouroCompleto\", \r",
									"    pm.environment.get(\"Logradouro\") + \" \" + pm.environment.get(\"nomeruaComposto\"))\r",
									"\r",
									"\r",
									"function gerarNumeroResidencia() {\r",
									"    // Definindo a probabilidade de gerar números com mais de 5 caracteres\r",
									"    const tamanhoNumero = Math.random() < 0.8 ? Math.floor(Math.random() * 5) + 1 : Math.floor(Math.random() * 6) + 5;\r",
									"\r",
									"    // Gerando um número aleatório com o tamanho definido\r",
									"    let numeroResidencia = Math.floor(Math.random() * Math.pow(10, tamanhoNumero)).toString(); // Gera número aleatório com o tamanho desejado\r",
									"\r",
									"    // Se o primeiro caractere for 0, remove-o\r",
									"    if (numeroResidencia[0] === '0') {\r",
									"        numeroResidencia = numeroResidencia.slice(1); // Remove o primeiro caractere\r",
									"    }\r",
									"\r",
									"    // Garantindo que o número tenha no máximo 10 caracteres\r",
									"    if (numeroResidencia.length > 10) {\r",
									"        numeroResidencia = numeroResidencia.slice(0, 10); // Limita a 10 caracteres\r",
									"    }\r",
									"\r",
									"    return numeroResidencia;\r",
									"}\r",
									"\r",
									"// Gerando o número de residência e armazenando como variável de ambiente\r",
									"const numeroResidenciaGerado = gerarNumeroResidencia();\r",
									"pm.environment.set(\"numeroResidencia\", numeroResidenciaGerado);\r",
									"\r",
									"function bairro() {\r",
									"    const names = ['Leblon', 'Ipanema', 'Copacabana', 'Barra da Tijuca', 'Botafogo', 'Lapa', 'Santa Teresa', 'Jardim Botânico', 'Flamengo', 'São Conrado', 'Moema', 'Vila Madalena', 'Pinheiros', 'Jardins', 'Aclimação', 'Brooklin', 'Tatuapé', 'Vila Progredior', 'Vila Nova Conceição', 'Campo Belo','Centro', 'Praia de Belas', 'Moinhos de Vento', 'Petrópolis', 'Tristeza', 'Caminho das Árvores', 'Pituba', 'Stella Maris', 'Parque Atlântico', 'Costa Azul', 'Vila Galvão', 'Santo Amaro', 'Perdizes', 'Aclimação', 'Vila Sônia', 'Cidade Dutra', 'São Bernardo do Campo', 'Vila Mariana', 'Bela Vista', 'Liberdade','Pinheiros', 'Itaim Bibi', 'Santa Cecília', 'Tucuruvi', 'Chácara Santo Antônio', 'Água Fria', 'Vila Olímpia', 'Vila São Francisco', 'Consolação', 'Vila Madalena']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Bairro\", bairro())\r",
									"\r",
									"function cidade() {\r",
									"    const names = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador', 'Curitiba', 'Fortaleza', 'Recife', 'Brasília', 'Manaus', 'Vitória', 'Goiânia', 'Belém', 'Natal', 'São Luís', 'Maceió', 'Campo Grande', 'João Pessoa', 'Aracaju', 'Cuiabá', 'Florianópolis', 'Teresina', 'Palmas', 'Macapá', 'Rio Branco', 'Boa Vista', 'Porto Velho', 'Anápolis', 'Caruaru', 'Londrina','Marabá', 'Araraquara', 'Sorocaba', 'Santos', 'Niterói', 'Mogi das Cruzes', 'Caxias do Sul', 'Barueri', 'Campinas', 'São José', 'Ponta Grossa', 'Jundiaí', 'Uberlândia', 'Diadema', 'Santo André', 'São Bernardo do Campo', 'Itaquaquecetuba', 'Ribeirão Preto', 'Juiz de Fora']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Cidade\", cidade())\r",
									"\r",
									"function abreviacao() {\r",
									"    const names = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"AbreviacaoEstado\", abreviacao())\r",
									"\r",
									"function randomCep() {\r",
									"    let randomCep = '';\r",
									"   \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        randomCep += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCep;\r",
									"}\r",
									"pm.environment.set(\"cep\", randomCep());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 201\", function(){\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Mensagem de sucesso\",function(){\r",
									"    pm.expect(pm.response.json().msg).to.equal(\"Registro realizado com sucesso\")\r",
									"})\r",
									"\r",
									"pm.test(\"Status é True\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.status).to.be.true;\r",
									"})\r",
									"\r",
									"pm.test(\"Nome da Empresa é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.corporateName).to.equal(pm.environment.get(\"nomeEmpresa\"))\r",
									"})\r",
									"\r",
									"pm.test(\"CNPJ é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.registerCompany).to.equal(pm.environment.get(\"CNPJ\"))\r",
									"})\r",
									"\r",
									"\r",
									"// Função para validar CNPJ com base nos dígitos verificadores\r",
									"function validarCNPJ(cnpj) {\r",
									"    // Remover qualquer caractere que não seja número\r",
									"    cnpj = cnpj.replace(/\\D/g, '');\r",
									"\r",
									"    // Verifica se o CNPJ tem 14 dígitos\r",
									"    if (cnpj.length !== 14) {\r",
									"        return false;\r",
									"    }\r",
									"\r",
									"    // Cálculo do primeiro dígito verificador\r",
									"    let soma = 0;\r",
									"    let multiplicadoresPrimeiro = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    \r",
									"    for (let i = 0; i < 12; i++) {\r",
									"        soma += parseInt(cnpj[i]) * multiplicadoresPrimeiro[i];\r",
									"    }\r",
									"\r",
									"    let resto = soma % 11;\r",
									"    let primeiroDV = resto < 2 ? 0 : 11 - resto;\r",
									"\r",
									"    // Cálculo do segundo dígito verificador\r",
									"    soma = 0;\r",
									"    let multiplicadoresSegundo = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    \r",
									"    for (let i = 0; i < 13; i++) {\r",
									"        soma += parseInt(cnpj[i]) * multiplicadoresSegundo[i];\r",
									"    }\r",
									"\r",
									"    resto = soma % 11;\r",
									"    let segundoDV = resto < 2 ? 0 : 11 - resto;\r",
									"\r",
									"    // Comparar com os dígitos do CNPJ enviado\r",
									"    return cnpj[12] == primeiroDV && cnpj[13] == segundoDV;\r",
									"}\r",
									"\r",
									"// Obter o CNPJ da resposta da API (supondo que está no campo \"cnpj\")\r",
									"let cnpjRecebido = pm.response.json().newCompany.registerCompany; \r",
									"\r",
									"// Executar a validação\r",
									"if (!validarCNPJ(cnpjRecebido)) {\r",
									"    pm.test(\"O CNPJ retornado é inválido!\", function () {\r",
									"        pm.expect(false).to.be.true;\r",
									"    });\r",
									"} else {\r",
									"    pm.test(\"O CNPJ retornado é válido!\", function () {\r",
									"        pm.expect(true).to.be.true;\r",
									"    });\r",
									"}\r",
									"\r",
									"pm.test(\"Bairro é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.address[0].district).to.equal(\"2025\")\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomeEmpresa}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"{{fullnameUser}}\",\r\n  \"telephone\": \"{{telefone}}\",\r\n  \"serviceDescription\": \"{{Descricao}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{cep}}\",\r\n      \"city\": \"{{Cidade}}\",\r\n      \"state\": \"{{AbreviacaoEstado}}\",\r\n      \"district\": \"2025\",\r\n      \"street\": \"{{logradouroCompleto}}\",\r\n      \"number\": \"{{numeroResidencia}}\",\r\n      \"complement\": \"\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTM0MSwiZXhwIjoxNzM5MzE1NzQxfQ.cgJqYe74cprHCRTY9YLF_B-Hfgfp8l8lr6gDrEuqMi4' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"corporateName\": \"Matheus Sousa Testes\",\r\n  \"registerCompany\": \"57126456000155\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com o campo Bairro com caracteres especial 'º'",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function empresa() {\r",
									"    const names = [\"TechNova\", \"Bytewave\", \"Cyberion\", \"InovaTech\", \"Nexabyte\", \"Softtron\", \"Codeverse\", \"Dataflux\", \"Infinitron\", \"LogiCore\", \"Zentek\",\"Neurobyte\", \"Cloudix\", \"Sysnova\", \"Hexabit\", \"AIgorithm\", \"Quantumix\", \"Webtron\", \"Netflux\", \"Cyberflux\", \"Deepcode\", \"Techpulse\", \"Synaptech\", \"Codexis\", \"Nexonix\", \"Algobyte\", \"Infobyte\", \"Datazen\", \"Digiflow\", \"Innovix\", \"Coretron\", \"Zybernet\", \"Neurotech\", \"Nanobyte\", \"Virtunix\", \"Codexel\", \"Optibit\", \"Bitnova\", \"Globotron\", \"Digiware\", \"Skytech\", \"Cybervox\", \"Techspire\", \"Softbit\", \"MetaTech\", \"Synthron\", \"Virtuabyte\", \"Cloudtron\", \"Algonix\", \"Bitzen\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Empresa\", empresa())\r",
									"\r",
									"function tag() {\r",
									"    const tagnames = ['Solutions', 'Tech', 'Digital', 'Systems', 'Software', 'Cloud', 'AI', 'Cyber', 'Data', 'Analytics','Network', 'Security', 'Labs', 'Smart', 'Logic', 'Innovation', 'IT', 'Global', 'Developers', 'Code', 'Techno', 'Automations', 'Cloudware', 'Dynamics', 'Vision', 'Intelligence', 'NextGen', 'Computing', 'Innovators', 'Engineering', 'Performance', 'Softworks', 'Logicware', 'Digitalware', 'Transform', 'Platform', 'Smartware', 'Dataflow', 'Byte', 'Edge', 'Nexus', 'Techworks', 'Bit', 'Virtual', 'SystemsX', 'Infotech', 'Genix', 'Quantum', 'Bitware', 'CloudX'];\r",
									"\r",
									"    const randomTastName = tagnames[Math.floor(Math.random() * tagnames.length)]\r",
									"    return randomTastName\r",
									"}\r",
									"pm.environment.set(\"Tag\", tag())\r",
									"\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"Empresa\") + \" \" + pm.environment.get(\"Tag\"))\r",
									"\r",
									"\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"\r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									"\r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									"\r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									"\r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									"\r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									"\r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"CNPJ\", cnpjGerado);\r",
									"\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function gerarTelefone() {\r",
									"    // Gerando um DDD aleatório entre 11 e 99\r",
									"    const ddd = Math.floor(Math.random() * (99 - 11 + 1)) + 11;\r",
									"\r",
									"    // Gerando o número de telefone com 9 dígitos, começando com 9\r",
									"    const numero = Math.floor(Math.random() * 100000000) + 900000000; // Gera um número aleatório entre 900000000 e 999999999 (começando com '9')\r",
									"\r",
									"    // Concatenando +55, o DDD e o número gerado para formar o telefone\r",
									"    const telefone = `55${ddd}${numero.toString().slice(0, 5)}${numero.toString().slice(5, 9)}`;\r",
									"\r",
									"    return telefone;\r",
									"}\r",
									"\r",
									"// Gerando o número de telefone e armazenando como variável de ambiente\r",
									"const telefoneGerado = gerarTelefone();\r",
									"pm.environment.set(\"telefone\", telefoneGerado);\r",
									"\r",
									"function descricao() {\r",
									"    const names = [\"Testes\", \"Automação\", \"FrontEnd\", \"Backend\",\"Banco de Dados\", \"IA\",\"AWS\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Descricao\", descricao())\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"NomeRua\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"NomeRuas\", lastname())\r",
									"\r",
									"pm.environment.set(\"nomeruaComposto\", \r",
									"    pm.environment.get(\"NomeRua\") + \" \" + pm.environment.get(\"NomeRuas\"))\r",
									"\r",
									"function logradouro() {\r",
									"    const names = [\"Avenida\", \"Rua\", \"Alameda\", \"Travessa\", \"Praça\", \"Rodovia\", \"Estrada\", \"Largo\", \"Viaduto\", \"Marginal\", \"Parque\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Logradouro\", logradouro())\r",
									"\r",
									"pm.environment.set(\"logradouroCompleto\", \r",
									"    pm.environment.get(\"Logradouro\") + \" \" + pm.environment.get(\"nomeruaComposto\"))\r",
									"\r",
									"\r",
									"function gerarNumeroResidencia() {\r",
									"    // Definindo a probabilidade de gerar números com mais de 5 caracteres\r",
									"    const tamanhoNumero = Math.random() < 0.8 ? Math.floor(Math.random() * 5) + 1 : Math.floor(Math.random() * 6) + 5;\r",
									"\r",
									"    // Gerando um número aleatório com o tamanho definido\r",
									"    let numeroResidencia = Math.floor(Math.random() * Math.pow(10, tamanhoNumero)).toString(); // Gera número aleatório com o tamanho desejado\r",
									"\r",
									"    // Se o primeiro caractere for 0, remove-o\r",
									"    if (numeroResidencia[0] === '0') {\r",
									"        numeroResidencia = numeroResidencia.slice(1); // Remove o primeiro caractere\r",
									"    }\r",
									"\r",
									"    // Garantindo que o número tenha no máximo 10 caracteres\r",
									"    if (numeroResidencia.length > 10) {\r",
									"        numeroResidencia = numeroResidencia.slice(0, 10); // Limita a 10 caracteres\r",
									"    }\r",
									"\r",
									"    return numeroResidencia;\r",
									"}\r",
									"\r",
									"// Gerando o número de residência e armazenando como variável de ambiente\r",
									"const numeroResidenciaGerado = gerarNumeroResidencia();\r",
									"pm.environment.set(\"numeroResidencia\", numeroResidenciaGerado);\r",
									"\r",
									"function bairro() {\r",
									"    const names = ['Leblon', 'Ipanema', 'Copacabana', 'Barra da Tijuca', 'Botafogo', 'Lapa', 'Santa Teresa', 'Jardim Botânico', 'Flamengo', 'São Conrado', 'Moema', 'Vila Madalena', 'Pinheiros', 'Jardins', 'Aclimação', 'Brooklin', 'Tatuapé', 'Vila Progredior', 'Vila Nova Conceição', 'Campo Belo','Centro', 'Praia de Belas', 'Moinhos de Vento', 'Petrópolis', 'Tristeza', 'Caminho das Árvores', 'Pituba', 'Stella Maris', 'Parque Atlântico', 'Costa Azul', 'Vila Galvão', 'Santo Amaro', 'Perdizes', 'Aclimação', 'Vila Sônia', 'Cidade Dutra', 'São Bernardo do Campo', 'Vila Mariana', 'Bela Vista', 'Liberdade','Pinheiros', 'Itaim Bibi', 'Santa Cecília', 'Tucuruvi', 'Chácara Santo Antônio', 'Água Fria', 'Vila Olímpia', 'Vila São Francisco', 'Consolação', 'Vila Madalena']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Bairro\", bairro())\r",
									"\r",
									"function cidade() {\r",
									"    const names = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador', 'Curitiba', 'Fortaleza', 'Recife', 'Brasília', 'Manaus', 'Vitória', 'Goiânia', 'Belém', 'Natal', 'São Luís', 'Maceió', 'Campo Grande', 'João Pessoa', 'Aracaju', 'Cuiabá', 'Florianópolis', 'Teresina', 'Palmas', 'Macapá', 'Rio Branco', 'Boa Vista', 'Porto Velho', 'Anápolis', 'Caruaru', 'Londrina','Marabá', 'Araraquara', 'Sorocaba', 'Santos', 'Niterói', 'Mogi das Cruzes', 'Caxias do Sul', 'Barueri', 'Campinas', 'São José', 'Ponta Grossa', 'Jundiaí', 'Uberlândia', 'Diadema', 'Santo André', 'São Bernardo do Campo', 'Itaquaquecetuba', 'Ribeirão Preto', 'Juiz de Fora']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Cidade\", cidade())\r",
									"\r",
									"function abreviacao() {\r",
									"    const names = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"AbreviacaoEstado\", abreviacao())\r",
									"\r",
									"function randomCep() {\r",
									"    let randomCep = '';\r",
									"   \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        randomCep += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCep;\r",
									"}\r",
									"pm.environment.set(\"cep\", randomCep());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 201\", function(){\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Mensagem de sucesso\",function(){\r",
									"    pm.expect(pm.response.json().msg).to.equal(\"Registro realizado com sucesso\")\r",
									"})\r",
									"\r",
									"pm.test(\"Status é True\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.status).to.be.true;\r",
									"})\r",
									"\r",
									"pm.test(\"Nome da Empresa é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.corporateName).to.equal(pm.environment.get(\"nomeEmpresa\"))\r",
									"})\r",
									"\r",
									"pm.test(\"CNPJ é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.registerCompany).to.equal(pm.environment.get(\"CNPJ\"))\r",
									"})\r",
									"\r",
									"\r",
									"// Função para validar CNPJ com base nos dígitos verificadores\r",
									"function validarCNPJ(cnpj) {\r",
									"    // Remover qualquer caractere que não seja número\r",
									"    cnpj = cnpj.replace(/\\D/g, '');\r",
									"\r",
									"    // Verifica se o CNPJ tem 14 dígitos\r",
									"    if (cnpj.length !== 14) {\r",
									"        return false;\r",
									"    }\r",
									"\r",
									"    // Cálculo do primeiro dígito verificador\r",
									"    let soma = 0;\r",
									"    let multiplicadoresPrimeiro = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    \r",
									"    for (let i = 0; i < 12; i++) {\r",
									"        soma += parseInt(cnpj[i]) * multiplicadoresPrimeiro[i];\r",
									"    }\r",
									"\r",
									"    let resto = soma % 11;\r",
									"    let primeiroDV = resto < 2 ? 0 : 11 - resto;\r",
									"\r",
									"    // Cálculo do segundo dígito verificador\r",
									"    soma = 0;\r",
									"    let multiplicadoresSegundo = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    \r",
									"    for (let i = 0; i < 13; i++) {\r",
									"        soma += parseInt(cnpj[i]) * multiplicadoresSegundo[i];\r",
									"    }\r",
									"\r",
									"    resto = soma % 11;\r",
									"    let segundoDV = resto < 2 ? 0 : 11 - resto;\r",
									"\r",
									"    // Comparar com os dígitos do CNPJ enviado\r",
									"    return cnpj[12] == primeiroDV && cnpj[13] == segundoDV;\r",
									"}\r",
									"\r",
									"// Obter o CNPJ da resposta da API (supondo que está no campo \"cnpj\")\r",
									"let cnpjRecebido = pm.response.json().newCompany.registerCompany; \r",
									"\r",
									"// Executar a validação\r",
									"if (!validarCNPJ(cnpjRecebido)) {\r",
									"    pm.test(\"O CNPJ retornado é inválido!\", function () {\r",
									"        pm.expect(false).to.be.true;\r",
									"    });\r",
									"} else {\r",
									"    pm.test(\"O CNPJ retornado é válido!\", function () {\r",
									"        pm.expect(true).to.be.true;\r",
									"    });\r",
									"}\r",
									"\r",
									"pm.test(\"Bairro é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.address[0].district).to.equal(\"1º Campo do Treze\")\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomeEmpresa}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"{{fullnameUser}}\",\r\n  \"telephone\": \"{{telefone}}\",\r\n  \"serviceDescription\": \"{{Descricao}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{cep}}\",\r\n      \"city\": \"{{Cidade}}\",\r\n      \"state\": \"{{AbreviacaoEstado}}\",\r\n      \"district\": \"1º Campo do Treze\",\r\n      \"street\": \"{{logradouroCompleto}}\",\r\n      \"number\": \"{{numeroResidencia}}\",\r\n      \"complement\": \"\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTM0MSwiZXhwIjoxNzM5MzE1NzQxfQ.cgJqYe74cprHCRTY9YLF_B-Hfgfp8l8lr6gDrEuqMi4' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"corporateName\": \"Matheus Sousa Testes\",\r\n  \"registerCompany\": \"57126456000155\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com o campo Bairro com caracteres especial 'ª'",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function empresa() {\r",
									"    const names = [\"TechNova\", \"Bytewave\", \"Cyberion\", \"InovaTech\", \"Nexabyte\", \"Softtron\", \"Codeverse\", \"Dataflux\", \"Infinitron\", \"LogiCore\", \"Zentek\",\"Neurobyte\", \"Cloudix\", \"Sysnova\", \"Hexabit\", \"AIgorithm\", \"Quantumix\", \"Webtron\", \"Netflux\", \"Cyberflux\", \"Deepcode\", \"Techpulse\", \"Synaptech\", \"Codexis\", \"Nexonix\", \"Algobyte\", \"Infobyte\", \"Datazen\", \"Digiflow\", \"Innovix\", \"Coretron\", \"Zybernet\", \"Neurotech\", \"Nanobyte\", \"Virtunix\", \"Codexel\", \"Optibit\", \"Bitnova\", \"Globotron\", \"Digiware\", \"Skytech\", \"Cybervox\", \"Techspire\", \"Softbit\", \"MetaTech\", \"Synthron\", \"Virtuabyte\", \"Cloudtron\", \"Algonix\", \"Bitzen\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Empresa\", empresa())\r",
									"\r",
									"function tag() {\r",
									"    const tagnames = ['Solutions', 'Tech', 'Digital', 'Systems', 'Software', 'Cloud', 'AI', 'Cyber', 'Data', 'Analytics','Network', 'Security', 'Labs', 'Smart', 'Logic', 'Innovation', 'IT', 'Global', 'Developers', 'Code', 'Techno', 'Automations', 'Cloudware', 'Dynamics', 'Vision', 'Intelligence', 'NextGen', 'Computing', 'Innovators', 'Engineering', 'Performance', 'Softworks', 'Logicware', 'Digitalware', 'Transform', 'Platform', 'Smartware', 'Dataflow', 'Byte', 'Edge', 'Nexus', 'Techworks', 'Bit', 'Virtual', 'SystemsX', 'Infotech', 'Genix', 'Quantum', 'Bitware', 'CloudX'];\r",
									"\r",
									"    const randomTastName = tagnames[Math.floor(Math.random() * tagnames.length)]\r",
									"    return randomTastName\r",
									"}\r",
									"pm.environment.set(\"Tag\", tag())\r",
									"\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"Empresa\") + \" \" + pm.environment.get(\"Tag\"))\r",
									"\r",
									"\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"\r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									"\r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									"\r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									"\r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									"\r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									"\r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"CNPJ\", cnpjGerado);\r",
									"\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function gerarTelefone() {\r",
									"    // Gerando um DDD aleatório entre 11 e 99\r",
									"    const ddd = Math.floor(Math.random() * (99 - 11 + 1)) + 11;\r",
									"\r",
									"    // Gerando o número de telefone com 9 dígitos, começando com 9\r",
									"    const numero = Math.floor(Math.random() * 100000000) + 900000000; // Gera um número aleatório entre 900000000 e 999999999 (começando com '9')\r",
									"\r",
									"    // Concatenando +55, o DDD e o número gerado para formar o telefone\r",
									"    const telefone = `55${ddd}${numero.toString().slice(0, 5)}${numero.toString().slice(5, 9)}`;\r",
									"\r",
									"    return telefone;\r",
									"}\r",
									"\r",
									"// Gerando o número de telefone e armazenando como variável de ambiente\r",
									"const telefoneGerado = gerarTelefone();\r",
									"pm.environment.set(\"telefone\", telefoneGerado);\r",
									"\r",
									"function descricao() {\r",
									"    const names = [\"Testes\", \"Automação\", \"FrontEnd\", \"Backend\",\"Banco de Dados\", \"IA\",\"AWS\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Descricao\", descricao())\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"NomeRua\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"NomeRuas\", lastname())\r",
									"\r",
									"pm.environment.set(\"nomeruaComposto\", \r",
									"    pm.environment.get(\"NomeRua\") + \" \" + pm.environment.get(\"NomeRuas\"))\r",
									"\r",
									"function logradouro() {\r",
									"    const names = [\"Avenida\", \"Rua\", \"Alameda\", \"Travessa\", \"Praça\", \"Rodovia\", \"Estrada\", \"Largo\", \"Viaduto\", \"Marginal\", \"Parque\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Logradouro\", logradouro())\r",
									"\r",
									"pm.environment.set(\"logradouroCompleto\", \r",
									"    pm.environment.get(\"Logradouro\") + \" \" + pm.environment.get(\"nomeruaComposto\"))\r",
									"\r",
									"\r",
									"function gerarNumeroResidencia() {\r",
									"    // Definindo a probabilidade de gerar números com mais de 5 caracteres\r",
									"    const tamanhoNumero = Math.random() < 0.8 ? Math.floor(Math.random() * 5) + 1 : Math.floor(Math.random() * 6) + 5;\r",
									"\r",
									"    // Gerando um número aleatório com o tamanho definido\r",
									"    let numeroResidencia = Math.floor(Math.random() * Math.pow(10, tamanhoNumero)).toString(); // Gera número aleatório com o tamanho desejado\r",
									"\r",
									"    // Se o primeiro caractere for 0, remove-o\r",
									"    if (numeroResidencia[0] === '0') {\r",
									"        numeroResidencia = numeroResidencia.slice(1); // Remove o primeiro caractere\r",
									"    }\r",
									"\r",
									"    // Garantindo que o número tenha no máximo 10 caracteres\r",
									"    if (numeroResidencia.length > 10) {\r",
									"        numeroResidencia = numeroResidencia.slice(0, 10); // Limita a 10 caracteres\r",
									"    }\r",
									"\r",
									"    return numeroResidencia;\r",
									"}\r",
									"\r",
									"// Gerando o número de residência e armazenando como variável de ambiente\r",
									"const numeroResidenciaGerado = gerarNumeroResidencia();\r",
									"pm.environment.set(\"numeroResidencia\", numeroResidenciaGerado);\r",
									"\r",
									"function bairro() {\r",
									"    const names = ['Leblon', 'Ipanema', 'Copacabana', 'Barra da Tijuca', 'Botafogo', 'Lapa', 'Santa Teresa', 'Jardim Botânico', 'Flamengo', 'São Conrado', 'Moema', 'Vila Madalena', 'Pinheiros', 'Jardins', 'Aclimação', 'Brooklin', 'Tatuapé', 'Vila Progredior', 'Vila Nova Conceição', 'Campo Belo','Centro', 'Praia de Belas', 'Moinhos de Vento', 'Petrópolis', 'Tristeza', 'Caminho das Árvores', 'Pituba', 'Stella Maris', 'Parque Atlântico', 'Costa Azul', 'Vila Galvão', 'Santo Amaro', 'Perdizes', 'Aclimação', 'Vila Sônia', 'Cidade Dutra', 'São Bernardo do Campo', 'Vila Mariana', 'Bela Vista', 'Liberdade','Pinheiros', 'Itaim Bibi', 'Santa Cecília', 'Tucuruvi', 'Chácara Santo Antônio', 'Água Fria', 'Vila Olímpia', 'Vila São Francisco', 'Consolação', 'Vila Madalena']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Bairro\", bairro())\r",
									"\r",
									"function cidade() {\r",
									"    const names = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador', 'Curitiba', 'Fortaleza', 'Recife', 'Brasília', 'Manaus', 'Vitória', 'Goiânia', 'Belém', 'Natal', 'São Luís', 'Maceió', 'Campo Grande', 'João Pessoa', 'Aracaju', 'Cuiabá', 'Florianópolis', 'Teresina', 'Palmas', 'Macapá', 'Rio Branco', 'Boa Vista', 'Porto Velho', 'Anápolis', 'Caruaru', 'Londrina','Marabá', 'Araraquara', 'Sorocaba', 'Santos', 'Niterói', 'Mogi das Cruzes', 'Caxias do Sul', 'Barueri', 'Campinas', 'São José', 'Ponta Grossa', 'Jundiaí', 'Uberlândia', 'Diadema', 'Santo André', 'São Bernardo do Campo', 'Itaquaquecetuba', 'Ribeirão Preto', 'Juiz de Fora']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Cidade\", cidade())\r",
									"\r",
									"function abreviacao() {\r",
									"    const names = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"AbreviacaoEstado\", abreviacao())\r",
									"\r",
									"function randomCep() {\r",
									"    let randomCep = '';\r",
									"   \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        randomCep += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCep;\r",
									"}\r",
									"pm.environment.set(\"cep\", randomCep());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 201\", function(){\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Mensagem de sucesso\",function(){\r",
									"    pm.expect(pm.response.json().msg).to.equal(\"Registro realizado com sucesso\")\r",
									"})\r",
									"\r",
									"pm.test(\"Status é True\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.status).to.be.true;\r",
									"})\r",
									"\r",
									"pm.test(\"Nome da Empresa é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.corporateName).to.equal(pm.environment.get(\"nomeEmpresa\"))\r",
									"})\r",
									"\r",
									"pm.test(\"CNPJ é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.registerCompany).to.equal(pm.environment.get(\"CNPJ\"))\r",
									"})\r",
									"\r",
									"\r",
									"// Função para validar CNPJ com base nos dígitos verificadores\r",
									"function validarCNPJ(cnpj) {\r",
									"    // Remover qualquer caractere que não seja número\r",
									"    cnpj = cnpj.replace(/\\D/g, '');\r",
									"\r",
									"    // Verifica se o CNPJ tem 14 dígitos\r",
									"    if (cnpj.length !== 14) {\r",
									"        return false;\r",
									"    }\r",
									"\r",
									"    // Cálculo do primeiro dígito verificador\r",
									"    let soma = 0;\r",
									"    let multiplicadoresPrimeiro = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    \r",
									"    for (let i = 0; i < 12; i++) {\r",
									"        soma += parseInt(cnpj[i]) * multiplicadoresPrimeiro[i];\r",
									"    }\r",
									"\r",
									"    let resto = soma % 11;\r",
									"    let primeiroDV = resto < 2 ? 0 : 11 - resto;\r",
									"\r",
									"    // Cálculo do segundo dígito verificador\r",
									"    soma = 0;\r",
									"    let multiplicadoresSegundo = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    \r",
									"    for (let i = 0; i < 13; i++) {\r",
									"        soma += parseInt(cnpj[i]) * multiplicadoresSegundo[i];\r",
									"    }\r",
									"\r",
									"    resto = soma % 11;\r",
									"    let segundoDV = resto < 2 ? 0 : 11 - resto;\r",
									"\r",
									"    // Comparar com os dígitos do CNPJ enviado\r",
									"    return cnpj[12] == primeiroDV && cnpj[13] == segundoDV;\r",
									"}\r",
									"\r",
									"// Obter o CNPJ da resposta da API (supondo que está no campo \"cnpj\")\r",
									"let cnpjRecebido = pm.response.json().newCompany.registerCompany; \r",
									"\r",
									"// Executar a validação\r",
									"if (!validarCNPJ(cnpjRecebido)) {\r",
									"    pm.test(\"O CNPJ retornado é inválido!\", function () {\r",
									"        pm.expect(false).to.be.true;\r",
									"    });\r",
									"} else {\r",
									"    pm.test(\"O CNPJ retornado é válido!\", function () {\r",
									"        pm.expect(true).to.be.true;\r",
									"    });\r",
									"}\r",
									"\r",
									"pm.test(\"Bairro é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.address[0].district).to.equal(\"1ª Parada do Quinze\")\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomeEmpresa}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"{{fullnameUser}}\",\r\n  \"telephone\": \"{{telefone}}\",\r\n  \"serviceDescription\": \"{{Descricao}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{cep}}\",\r\n      \"city\": \"{{Cidade}}\",\r\n      \"state\": \"{{AbreviacaoEstado}}\",\r\n      \"district\": \"1ª Parada do Quinze\",\r\n      \"street\": \"{{logradouroCompleto}}\",\r\n      \"number\": \"{{numeroResidencia}}\",\r\n      \"complement\": \"\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTM0MSwiZXhwIjoxNzM5MzE1NzQxfQ.cgJqYe74cprHCRTY9YLF_B-Hfgfp8l8lr6gDrEuqMi4' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"corporateName\": \"Matheus Sousa Testes\",\r\n  \"registerCompany\": \"57126456000155\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com o campo Bairro com caracteres especial '‘'",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function empresa() {\r",
									"    const names = [\"TechNova\", \"Bytewave\", \"Cyberion\", \"InovaTech\", \"Nexabyte\", \"Softtron\", \"Codeverse\", \"Dataflux\", \"Infinitron\", \"LogiCore\", \"Zentek\",\"Neurobyte\", \"Cloudix\", \"Sysnova\", \"Hexabit\", \"AIgorithm\", \"Quantumix\", \"Webtron\", \"Netflux\", \"Cyberflux\", \"Deepcode\", \"Techpulse\", \"Synaptech\", \"Codexis\", \"Nexonix\", \"Algobyte\", \"Infobyte\", \"Datazen\", \"Digiflow\", \"Innovix\", \"Coretron\", \"Zybernet\", \"Neurotech\", \"Nanobyte\", \"Virtunix\", \"Codexel\", \"Optibit\", \"Bitnova\", \"Globotron\", \"Digiware\", \"Skytech\", \"Cybervox\", \"Techspire\", \"Softbit\", \"MetaTech\", \"Synthron\", \"Virtuabyte\", \"Cloudtron\", \"Algonix\", \"Bitzen\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Empresa\", empresa())\r",
									"\r",
									"function tag() {\r",
									"    const tagnames = ['Solutions', 'Tech', 'Digital', 'Systems', 'Software', 'Cloud', 'AI', 'Cyber', 'Data', 'Analytics','Network', 'Security', 'Labs', 'Smart', 'Logic', 'Innovation', 'IT', 'Global', 'Developers', 'Code', 'Techno', 'Automations', 'Cloudware', 'Dynamics', 'Vision', 'Intelligence', 'NextGen', 'Computing', 'Innovators', 'Engineering', 'Performance', 'Softworks', 'Logicware', 'Digitalware', 'Transform', 'Platform', 'Smartware', 'Dataflow', 'Byte', 'Edge', 'Nexus', 'Techworks', 'Bit', 'Virtual', 'SystemsX', 'Infotech', 'Genix', 'Quantum', 'Bitware', 'CloudX'];\r",
									"\r",
									"    const randomTastName = tagnames[Math.floor(Math.random() * tagnames.length)]\r",
									"    return randomTastName\r",
									"}\r",
									"pm.environment.set(\"Tag\", tag())\r",
									"\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"Empresa\") + \" \" + pm.environment.get(\"Tag\"))\r",
									"\r",
									"\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"\r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									"\r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									"\r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									"\r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									"\r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									"\r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"CNPJ\", cnpjGerado);\r",
									"\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function gerarTelefone() {\r",
									"    // Gerando um DDD aleatório entre 11 e 99\r",
									"    const ddd = Math.floor(Math.random() * (99 - 11 + 1)) + 11;\r",
									"\r",
									"    // Gerando o número de telefone com 9 dígitos, começando com 9\r",
									"    const numero = Math.floor(Math.random() * 100000000) + 900000000; // Gera um número aleatório entre 900000000 e 999999999 (começando com '9')\r",
									"\r",
									"    // Concatenando +55, o DDD e o número gerado para formar o telefone\r",
									"    const telefone = `55${ddd}${numero.toString().slice(0, 5)}${numero.toString().slice(5, 9)}`;\r",
									"\r",
									"    return telefone;\r",
									"}\r",
									"\r",
									"// Gerando o número de telefone e armazenando como variável de ambiente\r",
									"const telefoneGerado = gerarTelefone();\r",
									"pm.environment.set(\"telefone\", telefoneGerado);\r",
									"\r",
									"function descricao() {\r",
									"    const names = [\"Testes\", \"Automação\", \"FrontEnd\", \"Backend\",\"Banco de Dados\", \"IA\",\"AWS\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Descricao\", descricao())\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"NomeRua\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"NomeRuas\", lastname())\r",
									"\r",
									"pm.environment.set(\"nomeruaComposto\", \r",
									"    pm.environment.get(\"NomeRua\") + \" \" + pm.environment.get(\"NomeRuas\"))\r",
									"\r",
									"function logradouro() {\r",
									"    const names = [\"Avenida\", \"Rua\", \"Alameda\", \"Travessa\", \"Praça\", \"Rodovia\", \"Estrada\", \"Largo\", \"Viaduto\", \"Marginal\", \"Parque\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Logradouro\", logradouro())\r",
									"\r",
									"pm.environment.set(\"logradouroCompleto\", \r",
									"    pm.environment.get(\"Logradouro\") + \" \" + pm.environment.get(\"nomeruaComposto\"))\r",
									"\r",
									"\r",
									"function gerarNumeroResidencia() {\r",
									"    // Definindo a probabilidade de gerar números com mais de 5 caracteres\r",
									"    const tamanhoNumero = Math.random() < 0.8 ? Math.floor(Math.random() * 5) + 1 : Math.floor(Math.random() * 6) + 5;\r",
									"\r",
									"    // Gerando um número aleatório com o tamanho definido\r",
									"    let numeroResidencia = Math.floor(Math.random() * Math.pow(10, tamanhoNumero)).toString(); // Gera número aleatório com o tamanho desejado\r",
									"\r",
									"    // Se o primeiro caractere for 0, remove-o\r",
									"    if (numeroResidencia[0] === '0') {\r",
									"        numeroResidencia = numeroResidencia.slice(1); // Remove o primeiro caractere\r",
									"    }\r",
									"\r",
									"    // Garantindo que o número tenha no máximo 10 caracteres\r",
									"    if (numeroResidencia.length > 10) {\r",
									"        numeroResidencia = numeroResidencia.slice(0, 10); // Limita a 10 caracteres\r",
									"    }\r",
									"\r",
									"    return numeroResidencia;\r",
									"}\r",
									"\r",
									"// Gerando o número de residência e armazenando como variável de ambiente\r",
									"const numeroResidenciaGerado = gerarNumeroResidencia();\r",
									"pm.environment.set(\"numeroResidencia\", numeroResidenciaGerado);\r",
									"\r",
									"function bairro() {\r",
									"    const names = ['Leblon', 'Ipanema', 'Copacabana', 'Barra da Tijuca', 'Botafogo', 'Lapa', 'Santa Teresa', 'Jardim Botânico', 'Flamengo', 'São Conrado', 'Moema', 'Vila Madalena', 'Pinheiros', 'Jardins', 'Aclimação', 'Brooklin', 'Tatuapé', 'Vila Progredior', 'Vila Nova Conceição', 'Campo Belo','Centro', 'Praia de Belas', 'Moinhos de Vento', 'Petrópolis', 'Tristeza', 'Caminho das Árvores', 'Pituba', 'Stella Maris', 'Parque Atlântico', 'Costa Azul', 'Vila Galvão', 'Santo Amaro', 'Perdizes', 'Aclimação', 'Vila Sônia', 'Cidade Dutra', 'São Bernardo do Campo', 'Vila Mariana', 'Bela Vista', 'Liberdade','Pinheiros', 'Itaim Bibi', 'Santa Cecília', 'Tucuruvi', 'Chácara Santo Antônio', 'Água Fria', 'Vila Olímpia', 'Vila São Francisco', 'Consolação', 'Vila Madalena']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Bairro\", bairro())\r",
									"\r",
									"function cidade() {\r",
									"    const names = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador', 'Curitiba', 'Fortaleza', 'Recife', 'Brasília', 'Manaus', 'Vitória', 'Goiânia', 'Belém', 'Natal', 'São Luís', 'Maceió', 'Campo Grande', 'João Pessoa', 'Aracaju', 'Cuiabá', 'Florianópolis', 'Teresina', 'Palmas', 'Macapá', 'Rio Branco', 'Boa Vista', 'Porto Velho', 'Anápolis', 'Caruaru', 'Londrina','Marabá', 'Araraquara', 'Sorocaba', 'Santos', 'Niterói', 'Mogi das Cruzes', 'Caxias do Sul', 'Barueri', 'Campinas', 'São José', 'Ponta Grossa', 'Jundiaí', 'Uberlândia', 'Diadema', 'Santo André', 'São Bernardo do Campo', 'Itaquaquecetuba', 'Ribeirão Preto', 'Juiz de Fora']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Cidade\", cidade())\r",
									"\r",
									"function abreviacao() {\r",
									"    const names = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"AbreviacaoEstado\", abreviacao())\r",
									"\r",
									"function randomCep() {\r",
									"    let randomCep = '';\r",
									"   \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        randomCep += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCep;\r",
									"}\r",
									"pm.environment.set(\"cep\", randomCep());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 201\", function(){\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Mensagem de sucesso\",function(){\r",
									"    pm.expect(pm.response.json().msg).to.equal(\"Registro realizado com sucesso\")\r",
									"})\r",
									"\r",
									"pm.test(\"Status é True\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.status).to.be.true;\r",
									"})\r",
									"\r",
									"pm.test(\"Nome da Empresa é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.corporateName).to.equal(pm.environment.get(\"nomeEmpresa\"))\r",
									"})\r",
									"\r",
									"pm.test(\"CNPJ é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.registerCompany).to.equal(pm.environment.get(\"CNPJ\"))\r",
									"})\r",
									"\r",
									"\r",
									"// Função para validar CNPJ com base nos dígitos verificadores\r",
									"function validarCNPJ(cnpj) {\r",
									"    // Remover qualquer caractere que não seja número\r",
									"    cnpj = cnpj.replace(/\\D/g, '');\r",
									"\r",
									"    // Verifica se o CNPJ tem 14 dígitos\r",
									"    if (cnpj.length !== 14) {\r",
									"        return false;\r",
									"    }\r",
									"\r",
									"    // Cálculo do primeiro dígito verificador\r",
									"    let soma = 0;\r",
									"    let multiplicadoresPrimeiro = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    \r",
									"    for (let i = 0; i < 12; i++) {\r",
									"        soma += parseInt(cnpj[i]) * multiplicadoresPrimeiro[i];\r",
									"    }\r",
									"\r",
									"    let resto = soma % 11;\r",
									"    let primeiroDV = resto < 2 ? 0 : 11 - resto;\r",
									"\r",
									"    // Cálculo do segundo dígito verificador\r",
									"    soma = 0;\r",
									"    let multiplicadoresSegundo = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    \r",
									"    for (let i = 0; i < 13; i++) {\r",
									"        soma += parseInt(cnpj[i]) * multiplicadoresSegundo[i];\r",
									"    }\r",
									"\r",
									"    resto = soma % 11;\r",
									"    let segundoDV = resto < 2 ? 0 : 11 - resto;\r",
									"\r",
									"    // Comparar com os dígitos do CNPJ enviado\r",
									"    return cnpj[12] == primeiroDV && cnpj[13] == segundoDV;\r",
									"}\r",
									"\r",
									"// Obter o CNPJ da resposta da API (supondo que está no campo \"cnpj\")\r",
									"let cnpjRecebido = pm.response.json().newCompany.registerCompany; \r",
									"\r",
									"// Executar a validação\r",
									"if (!validarCNPJ(cnpjRecebido)) {\r",
									"    pm.test(\"O CNPJ retornado é inválido!\", function () {\r",
									"        pm.expect(false).to.be.true;\r",
									"    });\r",
									"} else {\r",
									"    pm.test(\"O CNPJ retornado é válido!\", function () {\r",
									"        pm.expect(true).to.be.true;\r",
									"    });\r",
									"}\r",
									"\r",
									"pm.test(\"Bairro é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.address[0].district).to.equal(\"Pop'Esfira\")\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomeEmpresa}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"{{fullnameUser}}\",\r\n  \"telephone\": \"{{telefone}}\",\r\n  \"serviceDescription\": \"{{Descricao}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{cep}}\",\r\n      \"city\": \"{{Cidade}}\",\r\n      \"state\": \"{{AbreviacaoEstado}}\",\r\n      \"district\": \"Pop'Esfira\",\r\n      \"street\": \"{{logradouroCompleto}}\",\r\n      \"number\": \"{{numeroResidencia}}\",\r\n      \"complement\": \"\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTM0MSwiZXhwIjoxNzM5MzE1NzQxfQ.cgJqYe74cprHCRTY9YLF_B-Hfgfp8l8lr6gDrEuqMi4' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"corporateName\": \"Matheus Sousa Testes\",\r\n  \"registerCompany\": \"57126456000155\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com o campo Bairro com caracteres especial '-'",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function empresa() {\r",
									"    const names = [\"TechNova\", \"Bytewave\", \"Cyberion\", \"InovaTech\", \"Nexabyte\", \"Softtron\", \"Codeverse\", \"Dataflux\", \"Infinitron\", \"LogiCore\", \"Zentek\",\"Neurobyte\", \"Cloudix\", \"Sysnova\", \"Hexabit\", \"AIgorithm\", \"Quantumix\", \"Webtron\", \"Netflux\", \"Cyberflux\", \"Deepcode\", \"Techpulse\", \"Synaptech\", \"Codexis\", \"Nexonix\", \"Algobyte\", \"Infobyte\", \"Datazen\", \"Digiflow\", \"Innovix\", \"Coretron\", \"Zybernet\", \"Neurotech\", \"Nanobyte\", \"Virtunix\", \"Codexel\", \"Optibit\", \"Bitnova\", \"Globotron\", \"Digiware\", \"Skytech\", \"Cybervox\", \"Techspire\", \"Softbit\", \"MetaTech\", \"Synthron\", \"Virtuabyte\", \"Cloudtron\", \"Algonix\", \"Bitzen\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Empresa\", empresa())\r",
									"\r",
									"function tag() {\r",
									"    const tagnames = ['Solutions', 'Tech', 'Digital', 'Systems', 'Software', 'Cloud', 'AI', 'Cyber', 'Data', 'Analytics','Network', 'Security', 'Labs', 'Smart', 'Logic', 'Innovation', 'IT', 'Global', 'Developers', 'Code', 'Techno', 'Automations', 'Cloudware', 'Dynamics', 'Vision', 'Intelligence', 'NextGen', 'Computing', 'Innovators', 'Engineering', 'Performance', 'Softworks', 'Logicware', 'Digitalware', 'Transform', 'Platform', 'Smartware', 'Dataflow', 'Byte', 'Edge', 'Nexus', 'Techworks', 'Bit', 'Virtual', 'SystemsX', 'Infotech', 'Genix', 'Quantum', 'Bitware', 'CloudX'];\r",
									"\r",
									"    const randomTastName = tagnames[Math.floor(Math.random() * tagnames.length)]\r",
									"    return randomTastName\r",
									"}\r",
									"pm.environment.set(\"Tag\", tag())\r",
									"\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"Empresa\") + \" \" + pm.environment.get(\"Tag\"))\r",
									"\r",
									"\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"\r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									"\r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									"\r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									"\r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									"\r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									"\r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"CNPJ\", cnpjGerado);\r",
									"\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function gerarTelefone() {\r",
									"    // Gerando um DDD aleatório entre 11 e 99\r",
									"    const ddd = Math.floor(Math.random() * (99 - 11 + 1)) + 11;\r",
									"\r",
									"    // Gerando o número de telefone com 9 dígitos, começando com 9\r",
									"    const numero = Math.floor(Math.random() * 100000000) + 900000000; // Gera um número aleatório entre 900000000 e 999999999 (começando com '9')\r",
									"\r",
									"    // Concatenando +55, o DDD e o número gerado para formar o telefone\r",
									"    const telefone = `55${ddd}${numero.toString().slice(0, 5)}${numero.toString().slice(5, 9)}`;\r",
									"\r",
									"    return telefone;\r",
									"}\r",
									"\r",
									"// Gerando o número de telefone e armazenando como variável de ambiente\r",
									"const telefoneGerado = gerarTelefone();\r",
									"pm.environment.set(\"telefone\", telefoneGerado);\r",
									"\r",
									"function descricao() {\r",
									"    const names = [\"Testes\", \"Automação\", \"FrontEnd\", \"Backend\",\"Banco de Dados\", \"IA\",\"AWS\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Descricao\", descricao())\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"NomeRua\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"NomeRuas\", lastname())\r",
									"\r",
									"pm.environment.set(\"nomeruaComposto\", \r",
									"    pm.environment.get(\"NomeRua\") + \" \" + pm.environment.get(\"NomeRuas\"))\r",
									"\r",
									"function logradouro() {\r",
									"    const names = [\"Avenida\", \"Rua\", \"Alameda\", \"Travessa\", \"Praça\", \"Rodovia\", \"Estrada\", \"Largo\", \"Viaduto\", \"Marginal\", \"Parque\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Logradouro\", logradouro())\r",
									"\r",
									"pm.environment.set(\"logradouroCompleto\", \r",
									"    pm.environment.get(\"Logradouro\") + \" \" + pm.environment.get(\"nomeruaComposto\"))\r",
									"\r",
									"\r",
									"function gerarNumeroResidencia() {\r",
									"    // Definindo a probabilidade de gerar números com mais de 5 caracteres\r",
									"    const tamanhoNumero = Math.random() < 0.8 ? Math.floor(Math.random() * 5) + 1 : Math.floor(Math.random() * 6) + 5;\r",
									"\r",
									"    // Gerando um número aleatório com o tamanho definido\r",
									"    let numeroResidencia = Math.floor(Math.random() * Math.pow(10, tamanhoNumero)).toString(); // Gera número aleatório com o tamanho desejado\r",
									"\r",
									"    // Se o primeiro caractere for 0, remove-o\r",
									"    if (numeroResidencia[0] === '0') {\r",
									"        numeroResidencia = numeroResidencia.slice(1); // Remove o primeiro caractere\r",
									"    }\r",
									"\r",
									"    // Garantindo que o número tenha no máximo 10 caracteres\r",
									"    if (numeroResidencia.length > 10) {\r",
									"        numeroResidencia = numeroResidencia.slice(0, 10); // Limita a 10 caracteres\r",
									"    }\r",
									"\r",
									"    return numeroResidencia;\r",
									"}\r",
									"\r",
									"// Gerando o número de residência e armazenando como variável de ambiente\r",
									"const numeroResidenciaGerado = gerarNumeroResidencia();\r",
									"pm.environment.set(\"numeroResidencia\", numeroResidenciaGerado);\r",
									"\r",
									"function bairro() {\r",
									"    const names = ['Leblon', 'Ipanema', 'Copacabana', 'Barra da Tijuca', 'Botafogo', 'Lapa', 'Santa Teresa', 'Jardim Botânico', 'Flamengo', 'São Conrado', 'Moema', 'Vila Madalena', 'Pinheiros', 'Jardins', 'Aclimação', 'Brooklin', 'Tatuapé', 'Vila Progredior', 'Vila Nova Conceição', 'Campo Belo','Centro', 'Praia de Belas', 'Moinhos de Vento', 'Petrópolis', 'Tristeza', 'Caminho das Árvores', 'Pituba', 'Stella Maris', 'Parque Atlântico', 'Costa Azul', 'Vila Galvão', 'Santo Amaro', 'Perdizes', 'Aclimação', 'Vila Sônia', 'Cidade Dutra', 'São Bernardo do Campo', 'Vila Mariana', 'Bela Vista', 'Liberdade','Pinheiros', 'Itaim Bibi', 'Santa Cecília', 'Tucuruvi', 'Chácara Santo Antônio', 'Água Fria', 'Vila Olímpia', 'Vila São Francisco', 'Consolação', 'Vila Madalena']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Bairro\", bairro())\r",
									"\r",
									"function cidade() {\r",
									"    const names = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador', 'Curitiba', 'Fortaleza', 'Recife', 'Brasília', 'Manaus', 'Vitória', 'Goiânia', 'Belém', 'Natal', 'São Luís', 'Maceió', 'Campo Grande', 'João Pessoa', 'Aracaju', 'Cuiabá', 'Florianópolis', 'Teresina', 'Palmas', 'Macapá', 'Rio Branco', 'Boa Vista', 'Porto Velho', 'Anápolis', 'Caruaru', 'Londrina','Marabá', 'Araraquara', 'Sorocaba', 'Santos', 'Niterói', 'Mogi das Cruzes', 'Caxias do Sul', 'Barueri', 'Campinas', 'São José', 'Ponta Grossa', 'Jundiaí', 'Uberlândia', 'Diadema', 'Santo André', 'São Bernardo do Campo', 'Itaquaquecetuba', 'Ribeirão Preto', 'Juiz de Fora']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Cidade\", cidade())\r",
									"\r",
									"function abreviacao() {\r",
									"    const names = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"AbreviacaoEstado\", abreviacao())\r",
									"\r",
									"function randomCep() {\r",
									"    let randomCep = '';\r",
									"   \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        randomCep += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCep;\r",
									"}\r",
									"pm.environment.set(\"cep\", randomCep());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 201\", function(){\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Mensagem de sucesso\",function(){\r",
									"    pm.expect(pm.response.json().msg).to.equal(\"Registro realizado com sucesso\")\r",
									"})\r",
									"\r",
									"pm.test(\"Status é True\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.status).to.be.true;\r",
									"})\r",
									"\r",
									"pm.test(\"Nome da Empresa é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.corporateName).to.equal(pm.environment.get(\"nomeEmpresa\"))\r",
									"})\r",
									"\r",
									"pm.test(\"CNPJ é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.registerCompany).to.equal(pm.environment.get(\"CNPJ\"))\r",
									"})\r",
									"\r",
									"\r",
									"// Função para validar CNPJ com base nos dígitos verificadores\r",
									"function validarCNPJ(cnpj) {\r",
									"    // Remover qualquer caractere que não seja número\r",
									"    cnpj = cnpj.replace(/\\D/g, '');\r",
									"\r",
									"    // Verifica se o CNPJ tem 14 dígitos\r",
									"    if (cnpj.length !== 14) {\r",
									"        return false;\r",
									"    }\r",
									"\r",
									"    // Cálculo do primeiro dígito verificador\r",
									"    let soma = 0;\r",
									"    let multiplicadoresPrimeiro = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    \r",
									"    for (let i = 0; i < 12; i++) {\r",
									"        soma += parseInt(cnpj[i]) * multiplicadoresPrimeiro[i];\r",
									"    }\r",
									"\r",
									"    let resto = soma % 11;\r",
									"    let primeiroDV = resto < 2 ? 0 : 11 - resto;\r",
									"\r",
									"    // Cálculo do segundo dígito verificador\r",
									"    soma = 0;\r",
									"    let multiplicadoresSegundo = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    \r",
									"    for (let i = 0; i < 13; i++) {\r",
									"        soma += parseInt(cnpj[i]) * multiplicadoresSegundo[i];\r",
									"    }\r",
									"\r",
									"    resto = soma % 11;\r",
									"    let segundoDV = resto < 2 ? 0 : 11 - resto;\r",
									"\r",
									"    // Comparar com os dígitos do CNPJ enviado\r",
									"    return cnpj[12] == primeiroDV && cnpj[13] == segundoDV;\r",
									"}\r",
									"\r",
									"// Obter o CNPJ da resposta da API (supondo que está no campo \"cnpj\")\r",
									"let cnpjRecebido = pm.response.json().newCompany.registerCompany; \r",
									"\r",
									"// Executar a validação\r",
									"if (!validarCNPJ(cnpjRecebido)) {\r",
									"    pm.test(\"O CNPJ retornado é inválido!\", function () {\r",
									"        pm.expect(false).to.be.true;\r",
									"    });\r",
									"} else {\r",
									"    pm.test(\"O CNPJ retornado é válido!\", function () {\r",
									"        pm.expect(true).to.be.true;\r",
									"    });\r",
									"}\r",
									"\r",
									"pm.test(\"Bairro é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.address[0].district).to.equal(\"Corinthians-Itaquera\")\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomeEmpresa}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"{{fullnameUser}}\",\r\n  \"telephone\": \"{{telefone}}\",\r\n  \"serviceDescription\": \"{{Descricao}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{cep}}\",\r\n      \"city\": \"{{Cidade}}\",\r\n      \"state\": \"{{AbreviacaoEstado}}\",\r\n      \"district\": \"Corinthians-Itaquera\",\r\n      \"street\": \"{{logradouroCompleto}}\",\r\n      \"number\": \"{{numeroResidencia}}\",\r\n      \"complement\": \"\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTM0MSwiZXhwIjoxNzM5MzE1NzQxfQ.cgJqYe74cprHCRTY9YLF_B-Hfgfp8l8lr6gDrEuqMi4' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"corporateName\": \"Matheus Sousa Testes\",\r\n  \"registerCompany\": \"57126456000155\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com o campo Bairro com caracteres especial invalido",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function empresa() {\r",
									"    const names = [\"TechNova\", \"Bytewave\", \"Cyberion\", \"InovaTech\", \"Nexabyte\", \"Softtron\", \"Codeverse\", \"Dataflux\", \"Infinitron\", \"LogiCore\", \"Zentek\",\"Neurobyte\", \"Cloudix\", \"Sysnova\", \"Hexabit\", \"AIgorithm\", \"Quantumix\", \"Webtron\", \"Netflux\", \"Cyberflux\", \"Deepcode\", \"Techpulse\", \"Synaptech\", \"Codexis\", \"Nexonix\", \"Algobyte\", \"Infobyte\", \"Datazen\", \"Digiflow\", \"Innovix\", \"Coretron\", \"Zybernet\", \"Neurotech\", \"Nanobyte\", \"Virtunix\", \"Codexel\", \"Optibit\", \"Bitnova\", \"Globotron\", \"Digiware\", \"Skytech\", \"Cybervox\", \"Techspire\", \"Softbit\", \"MetaTech\", \"Synthron\", \"Virtuabyte\", \"Cloudtron\", \"Algonix\", \"Bitzen\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Empresa\", empresa())\r",
									"\r",
									"function tag() {\r",
									"    const tagnames = ['Solutions', 'Tech', 'Digital', 'Systems', 'Software', 'Cloud', 'AI', 'Cyber', 'Data', 'Analytics','Network', 'Security', 'Labs', 'Smart', 'Logic', 'Innovation', 'IT', 'Global', 'Developers', 'Code', 'Techno', 'Automations', 'Cloudware', 'Dynamics', 'Vision', 'Intelligence', 'NextGen', 'Computing', 'Innovators', 'Engineering', 'Performance', 'Softworks', 'Logicware', 'Digitalware', 'Transform', 'Platform', 'Smartware', 'Dataflow', 'Byte', 'Edge', 'Nexus', 'Techworks', 'Bit', 'Virtual', 'SystemsX', 'Infotech', 'Genix', 'Quantum', 'Bitware', 'CloudX'];\r",
									"\r",
									"    const randomTastName = tagnames[Math.floor(Math.random() * tagnames.length)]\r",
									"    return randomTastName\r",
									"}\r",
									"pm.environment.set(\"Tag\", tag())\r",
									"\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"Empresa\") + \" \" + pm.environment.get(\"Tag\"))\r",
									"\r",
									"\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"\r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									"\r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									"\r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									"\r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									"\r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									"\r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"CNPJ\", cnpjGerado);\r",
									"\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function gerarTelefone() {\r",
									"    // Gerando um DDD aleatório entre 11 e 99\r",
									"    const ddd = Math.floor(Math.random() * (99 - 11 + 1)) + 11;\r",
									"\r",
									"    // Gerando o número de telefone com 9 dígitos, começando com 9\r",
									"    const numero = Math.floor(Math.random() * 100000000) + 900000000; // Gera um número aleatório entre 900000000 e 999999999 (começando com '9')\r",
									"\r",
									"    // Concatenando +55, o DDD e o número gerado para formar o telefone\r",
									"    const telefone = `55${ddd}${numero.toString().slice(0, 5)}${numero.toString().slice(5, 9)}`;\r",
									"\r",
									"    return telefone;\r",
									"}\r",
									"\r",
									"// Gerando o número de telefone e armazenando como variável de ambiente\r",
									"const telefoneGerado = gerarTelefone();\r",
									"pm.environment.set(\"telefone\", telefoneGerado);\r",
									"\r",
									"function descricao() {\r",
									"    const names = [\"Testes\", \"Automação\", \"FrontEnd\", \"Backend\",\"Banco de Dados\", \"IA\",\"AWS\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Descricao\", descricao())\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"NomeRua\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"NomeRuas\", lastname())\r",
									"\r",
									"pm.environment.set(\"nomeruaComposto\", \r",
									"    pm.environment.get(\"NomeRua\") + \" \" + pm.environment.get(\"NomeRuas\"))\r",
									"\r",
									"function logradouro() {\r",
									"    const names = [\"Avenida\", \"Rua\", \"Alameda\", \"Travessa\", \"Praça\", \"Rodovia\", \"Estrada\", \"Largo\", \"Viaduto\", \"Marginal\", \"Parque\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Logradouro\", logradouro())\r",
									"\r",
									"pm.environment.set(\"logradouroCompleto\", \r",
									"    pm.environment.get(\"Logradouro\") + \" \" + pm.environment.get(\"nomeruaComposto\"))\r",
									"\r",
									"\r",
									"function gerarNumeroResidencia() {\r",
									"    // Definindo a probabilidade de gerar números com mais de 5 caracteres\r",
									"    const tamanhoNumero = Math.random() < 0.8 ? Math.floor(Math.random() * 5) + 1 : Math.floor(Math.random() * 6) + 5;\r",
									"\r",
									"    // Gerando um número aleatório com o tamanho definido\r",
									"    let numeroResidencia = Math.floor(Math.random() * Math.pow(10, tamanhoNumero)).toString(); // Gera número aleatório com o tamanho desejado\r",
									"\r",
									"    // Se o primeiro caractere for 0, remove-o\r",
									"    if (numeroResidencia[0] === '0') {\r",
									"        numeroResidencia = numeroResidencia.slice(1); // Remove o primeiro caractere\r",
									"    }\r",
									"\r",
									"    // Garantindo que o número tenha no máximo 10 caracteres\r",
									"    if (numeroResidencia.length > 10) {\r",
									"        numeroResidencia = numeroResidencia.slice(0, 10); // Limita a 10 caracteres\r",
									"    }\r",
									"\r",
									"    return numeroResidencia;\r",
									"}\r",
									"\r",
									"// Gerando o número de residência e armazenando como variável de ambiente\r",
									"const numeroResidenciaGerado = gerarNumeroResidencia();\r",
									"pm.environment.set(\"numeroResidencia\", numeroResidenciaGerado);\r",
									"\r",
									"function bairro() {\r",
									"    const names = ['Leblon', 'Ipanema', 'Copacabana', 'Barra da Tijuca', 'Botafogo', 'Lapa', 'Santa Teresa', 'Jardim Botânico', 'Flamengo', 'São Conrado', 'Moema', 'Vila Madalena', 'Pinheiros', 'Jardins', 'Aclimação', 'Brooklin', 'Tatuapé', 'Vila Progredior', 'Vila Nova Conceição', 'Campo Belo','Centro', 'Praia de Belas', 'Moinhos de Vento', 'Petrópolis', 'Tristeza', 'Caminho das Árvores', 'Pituba', 'Stella Maris', 'Parque Atlântico', 'Costa Azul', 'Vila Galvão', 'Santo Amaro', 'Perdizes', 'Aclimação', 'Vila Sônia', 'Cidade Dutra', 'São Bernardo do Campo', 'Vila Mariana', 'Bela Vista', 'Liberdade','Pinheiros', 'Itaim Bibi', 'Santa Cecília', 'Tucuruvi', 'Chácara Santo Antônio', 'Água Fria', 'Vila Olímpia', 'Vila São Francisco', 'Consolação', 'Vila Madalena']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Bairro\", bairro())\r",
									"\r",
									"function cidade() {\r",
									"    const names = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador', 'Curitiba', 'Fortaleza', 'Recife', 'Brasília', 'Manaus', 'Vitória', 'Goiânia', 'Belém', 'Natal', 'São Luís', 'Maceió', 'Campo Grande', 'João Pessoa', 'Aracaju', 'Cuiabá', 'Florianópolis', 'Teresina', 'Palmas', 'Macapá', 'Rio Branco', 'Boa Vista', 'Porto Velho', 'Anápolis', 'Caruaru', 'Londrina','Marabá', 'Araraquara', 'Sorocaba', 'Santos', 'Niterói', 'Mogi das Cruzes', 'Caxias do Sul', 'Barueri', 'Campinas', 'São José', 'Ponta Grossa', 'Jundiaí', 'Uberlândia', 'Diadema', 'Santo André', 'São Bernardo do Campo', 'Itaquaquecetuba', 'Ribeirão Preto', 'Juiz de Fora']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Cidade\", cidade())\r",
									"\r",
									"function abreviacao() {\r",
									"    const names = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"AbreviacaoEstado\", abreviacao())\r",
									"\r",
									"function randomCep() {\r",
									"    let randomCep = '';\r",
									"   \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        randomCep += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCep;\r",
									"}\r",
									"pm.environment.set(\"cep\", randomCep());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomeEmpresa}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"{{fullnameUser}}\",\r\n  \"telephone\": \"{{telefone}}\",\r\n  \"serviceDescription\": \"{{Descricao}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{cep}}\",\r\n      \"city\": \"{{Cidade}}\",\r\n      \"state\": \"{{AbreviacaoEstado}}\",\r\n      \"district\": \"Pizza > Sushi\",\r\n      \"street\": \"{{logradouroCompleto}}\",\r\n      \"number\": \"{{numeroResidencia}}\",\r\n      \"complement\": \"\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTM0MSwiZXhwIjoxNzM5MzE1NzQxfQ.cgJqYe74cprHCRTY9YLF_B-Hfgfp8l8lr6gDrEuqMi4' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"corporateName\": \"Matheus Sousa Testes\",\r\n  \"registerCompany\": \"57126456000155\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com o campo Bairro com mais de 50 caracteres",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function empresa() {\r",
									"    const names = [\"TechNova\", \"Bytewave\", \"Cyberion\", \"InovaTech\", \"Nexabyte\", \"Softtron\", \"Codeverse\", \"Dataflux\", \"Infinitron\", \"LogiCore\", \"Zentek\",\"Neurobyte\", \"Cloudix\", \"Sysnova\", \"Hexabit\", \"AIgorithm\", \"Quantumix\", \"Webtron\", \"Netflux\", \"Cyberflux\", \"Deepcode\", \"Techpulse\", \"Synaptech\", \"Codexis\", \"Nexonix\", \"Algobyte\", \"Infobyte\", \"Datazen\", \"Digiflow\", \"Innovix\", \"Coretron\", \"Zybernet\", \"Neurotech\", \"Nanobyte\", \"Virtunix\", \"Codexel\", \"Optibit\", \"Bitnova\", \"Globotron\", \"Digiware\", \"Skytech\", \"Cybervox\", \"Techspire\", \"Softbit\", \"MetaTech\", \"Synthron\", \"Virtuabyte\", \"Cloudtron\", \"Algonix\", \"Bitzen\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Empresa\", empresa())\r",
									"\r",
									"function tag() {\r",
									"    const tagnames = ['Solutions', 'Tech', 'Digital', 'Systems', 'Software', 'Cloud', 'AI', 'Cyber', 'Data', 'Analytics','Network', 'Security', 'Labs', 'Smart', 'Logic', 'Innovation', 'IT', 'Global', 'Developers', 'Code', 'Techno', 'Automations', 'Cloudware', 'Dynamics', 'Vision', 'Intelligence', 'NextGen', 'Computing', 'Innovators', 'Engineering', 'Performance', 'Softworks', 'Logicware', 'Digitalware', 'Transform', 'Platform', 'Smartware', 'Dataflow', 'Byte', 'Edge', 'Nexus', 'Techworks', 'Bit', 'Virtual', 'SystemsX', 'Infotech', 'Genix', 'Quantum', 'Bitware', 'CloudX'];\r",
									"\r",
									"    const randomTastName = tagnames[Math.floor(Math.random() * tagnames.length)]\r",
									"    return randomTastName\r",
									"}\r",
									"pm.environment.set(\"Tag\", tag())\r",
									"\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"Empresa\") + \" \" + pm.environment.get(\"Tag\"))\r",
									"\r",
									"\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"\r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									"\r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									"\r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									"\r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									"\r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									"\r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"CNPJ\", cnpjGerado);\r",
									"\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function gerarTelefone() {\r",
									"    // Gerando um DDD aleatório entre 11 e 99\r",
									"    const ddd = Math.floor(Math.random() * (99 - 11 + 1)) + 11;\r",
									"\r",
									"    // Gerando o número de telefone com 9 dígitos, começando com 9\r",
									"    const numero = Math.floor(Math.random() * 100000000) + 900000000; // Gera um número aleatório entre 900000000 e 999999999 (começando com '9')\r",
									"\r",
									"    // Concatenando +55, o DDD e o número gerado para formar o telefone\r",
									"    const telefone = `55${ddd}${numero.toString().slice(0, 5)}${numero.toString().slice(5, 9)}`;\r",
									"\r",
									"    return telefone;\r",
									"}\r",
									"\r",
									"// Gerando o número de telefone e armazenando como variável de ambiente\r",
									"const telefoneGerado = gerarTelefone();\r",
									"pm.environment.set(\"telefone\", telefoneGerado);\r",
									"\r",
									"function descricao() {\r",
									"    const names = [\"Testes\", \"Automação\", \"FrontEnd\", \"Backend\",\"Banco de Dados\", \"IA\",\"AWS\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Descricao\", descricao())\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"NomeRua\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"NomeRuas\", lastname())\r",
									"\r",
									"pm.environment.set(\"nomeruaComposto\", \r",
									"    pm.environment.get(\"NomeRua\") + \" \" + pm.environment.get(\"NomeRuas\"))\r",
									"\r",
									"function logradouro() {\r",
									"    const names = [\"Avenida\", \"Rua\", \"Alameda\", \"Travessa\", \"Praça\", \"Rodovia\", \"Estrada\", \"Largo\", \"Viaduto\", \"Marginal\", \"Parque\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Logradouro\", logradouro())\r",
									"\r",
									"pm.environment.set(\"logradouroCompleto\", \r",
									"    pm.environment.get(\"Logradouro\") + \" \" + pm.environment.get(\"nomeruaComposto\"))\r",
									"\r",
									"\r",
									"function gerarNumeroResidencia() {\r",
									"    // Definindo a probabilidade de gerar números com mais de 5 caracteres\r",
									"    const tamanhoNumero = Math.random() < 0.8 ? Math.floor(Math.random() * 5) + 1 : Math.floor(Math.random() * 6) + 5;\r",
									"\r",
									"    // Gerando um número aleatório com o tamanho definido\r",
									"    let numeroResidencia = Math.floor(Math.random() * Math.pow(10, tamanhoNumero)).toString(); // Gera número aleatório com o tamanho desejado\r",
									"\r",
									"    // Se o primeiro caractere for 0, remove-o\r",
									"    if (numeroResidencia[0] === '0') {\r",
									"        numeroResidencia = numeroResidencia.slice(1); // Remove o primeiro caractere\r",
									"    }\r",
									"\r",
									"    // Garantindo que o número tenha no máximo 10 caracteres\r",
									"    if (numeroResidencia.length > 10) {\r",
									"        numeroResidencia = numeroResidencia.slice(0, 10); // Limita a 10 caracteres\r",
									"    }\r",
									"\r",
									"    return numeroResidencia;\r",
									"}\r",
									"\r",
									"// Gerando o número de residência e armazenando como variável de ambiente\r",
									"const numeroResidenciaGerado = gerarNumeroResidencia();\r",
									"pm.environment.set(\"numeroResidencia\", numeroResidenciaGerado);\r",
									"\r",
									"function bairro() {\r",
									"    const names = ['Leblon', 'Ipanema', 'Copacabana', 'Barra da Tijuca', 'Botafogo', 'Lapa', 'Santa Teresa', 'Jardim Botânico', 'Flamengo', 'São Conrado', 'Moema', 'Vila Madalena', 'Pinheiros', 'Jardins', 'Aclimação', 'Brooklin', 'Tatuapé', 'Vila Progredior', 'Vila Nova Conceição', 'Campo Belo','Centro', 'Praia de Belas', 'Moinhos de Vento', 'Petrópolis', 'Tristeza', 'Caminho das Árvores', 'Pituba', 'Stella Maris', 'Parque Atlântico', 'Costa Azul', 'Vila Galvão', 'Santo Amaro', 'Perdizes', 'Aclimação', 'Vila Sônia', 'Cidade Dutra', 'São Bernardo do Campo', 'Vila Mariana', 'Bela Vista', 'Liberdade','Pinheiros', 'Itaim Bibi', 'Santa Cecília', 'Tucuruvi', 'Chácara Santo Antônio', 'Água Fria', 'Vila Olímpia', 'Vila São Francisco', 'Consolação', 'Vila Madalena']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Bairro\", bairro())\r",
									"\r",
									"function cidade() {\r",
									"    const names = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador', 'Curitiba', 'Fortaleza', 'Recife', 'Brasília', 'Manaus', 'Vitória', 'Goiânia', 'Belém', 'Natal', 'São Luís', 'Maceió', 'Campo Grande', 'João Pessoa', 'Aracaju', 'Cuiabá', 'Florianópolis', 'Teresina', 'Palmas', 'Macapá', 'Rio Branco', 'Boa Vista', 'Porto Velho', 'Anápolis', 'Caruaru', 'Londrina','Marabá', 'Araraquara', 'Sorocaba', 'Santos', 'Niterói', 'Mogi das Cruzes', 'Caxias do Sul', 'Barueri', 'Campinas', 'São José', 'Ponta Grossa', 'Jundiaí', 'Uberlândia', 'Diadema', 'Santo André', 'São Bernardo do Campo', 'Itaquaquecetuba', 'Ribeirão Preto', 'Juiz de Fora']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Cidade\", cidade())\r",
									"\r",
									"function abreviacao() {\r",
									"    const names = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"AbreviacaoEstado\", abreviacao())\r",
									"\r",
									"function randomCep() {\r",
									"    let randomCep = '';\r",
									"   \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        randomCep += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCep;\r",
									"}\r",
									"pm.environment.set(\"cep\", randomCep());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomeEmpresa}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"{{fullnameUser}}\",\r\n  \"telephone\": \"{{telefone}}\",\r\n  \"serviceDescription\": \"{{Descricao}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{cep}}\",\r\n      \"city\": \"{{Cidade}}\",\r\n      \"state\": \"{{AbreviacaoEstado}}\",\r\n      \"district\": \"Extremo Leste BEM Proximo de onde Judas perdeu as botas mas é perto\",\r\n      \"street\": \"{{logradouroCompleto}}\",\r\n      \"number\": \"{{numeroResidencia}}\",\r\n      \"complement\": \"\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTM0MSwiZXhwIjoxNzM5MzE1NzQxfQ.cgJqYe74cprHCRTY9YLF_B-Hfgfp8l8lr6gDrEuqMi4' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"corporateName\": \"Matheus Sousa Testes\",\r\n  \"registerCompany\": \"57126456000155\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com o campo Cidade em branco",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function empresa() {\r",
									"    const names = [\"TechNova\", \"Bytewave\", \"Cyberion\", \"InovaTech\", \"Nexabyte\", \"Softtron\", \"Codeverse\", \"Dataflux\", \"Infinitron\", \"LogiCore\", \"Zentek\",\"Neurobyte\", \"Cloudix\", \"Sysnova\", \"Hexabit\", \"AIgorithm\", \"Quantumix\", \"Webtron\", \"Netflux\", \"Cyberflux\", \"Deepcode\", \"Techpulse\", \"Synaptech\", \"Codexis\", \"Nexonix\", \"Algobyte\", \"Infobyte\", \"Datazen\", \"Digiflow\", \"Innovix\", \"Coretron\", \"Zybernet\", \"Neurotech\", \"Nanobyte\", \"Virtunix\", \"Codexel\", \"Optibit\", \"Bitnova\", \"Globotron\", \"Digiware\", \"Skytech\", \"Cybervox\", \"Techspire\", \"Softbit\", \"MetaTech\", \"Synthron\", \"Virtuabyte\", \"Cloudtron\", \"Algonix\", \"Bitzen\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Empresa\", empresa())\r",
									"\r",
									"function tag() {\r",
									"    const tagnames = ['Solutions', 'Tech', 'Digital', 'Systems', 'Software', 'Cloud', 'AI', 'Cyber', 'Data', 'Analytics','Network', 'Security', 'Labs', 'Smart', 'Logic', 'Innovation', 'IT', 'Global', 'Developers', 'Code', 'Techno', 'Automations', 'Cloudware', 'Dynamics', 'Vision', 'Intelligence', 'NextGen', 'Computing', 'Innovators', 'Engineering', 'Performance', 'Softworks', 'Logicware', 'Digitalware', 'Transform', 'Platform', 'Smartware', 'Dataflow', 'Byte', 'Edge', 'Nexus', 'Techworks', 'Bit', 'Virtual', 'SystemsX', 'Infotech', 'Genix', 'Quantum', 'Bitware', 'CloudX'];\r",
									"\r",
									"    const randomTastName = tagnames[Math.floor(Math.random() * tagnames.length)]\r",
									"    return randomTastName\r",
									"}\r",
									"pm.environment.set(\"Tag\", tag())\r",
									"\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"Empresa\") + \" \" + pm.environment.get(\"Tag\"))\r",
									"\r",
									"\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"\r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									"\r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									"\r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									"\r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									"\r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									"\r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"CNPJ\", cnpjGerado);\r",
									"\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function gerarTelefone() {\r",
									"    // Gerando um DDD aleatório entre 11 e 99\r",
									"    const ddd = Math.floor(Math.random() * (99 - 11 + 1)) + 11;\r",
									"\r",
									"    // Gerando o número de telefone com 9 dígitos, começando com 9\r",
									"    const numero = Math.floor(Math.random() * 100000000) + 900000000; // Gera um número aleatório entre 900000000 e 999999999 (começando com '9')\r",
									"\r",
									"    // Concatenando +55, o DDD e o número gerado para formar o telefone\r",
									"    const telefone = `55${ddd}${numero.toString().slice(0, 5)}${numero.toString().slice(5, 9)}`;\r",
									"\r",
									"    return telefone;\r",
									"}\r",
									"\r",
									"// Gerando o número de telefone e armazenando como variável de ambiente\r",
									"const telefoneGerado = gerarTelefone();\r",
									"pm.environment.set(\"telefone\", telefoneGerado);\r",
									"\r",
									"function descricao() {\r",
									"    const names = [\"Testes\", \"Automação\", \"FrontEnd\", \"Backend\",\"Banco de Dados\", \"IA\",\"AWS\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Descricao\", descricao())\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"NomeRua\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"NomeRuas\", lastname())\r",
									"\r",
									"pm.environment.set(\"nomeruaComposto\", \r",
									"    pm.environment.get(\"NomeRua\") + \" \" + pm.environment.get(\"NomeRuas\"))\r",
									"\r",
									"function logradouro() {\r",
									"    const names = [\"Avenida\", \"Rua\", \"Alameda\", \"Travessa\", \"Praça\", \"Rodovia\", \"Estrada\", \"Largo\", \"Viaduto\", \"Marginal\", \"Parque\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Logradouro\", logradouro())\r",
									"\r",
									"pm.environment.set(\"logradouroCompleto\", \r",
									"    pm.environment.get(\"Logradouro\") + \" \" + pm.environment.get(\"nomeruaComposto\"))\r",
									"\r",
									"\r",
									"function gerarNumeroResidencia() {\r",
									"    // Definindo a probabilidade de gerar números com mais de 5 caracteres\r",
									"    const tamanhoNumero = Math.random() < 0.8 ? Math.floor(Math.random() * 5) + 1 : Math.floor(Math.random() * 6) + 5;\r",
									"\r",
									"    // Gerando um número aleatório com o tamanho definido\r",
									"    let numeroResidencia = Math.floor(Math.random() * Math.pow(10, tamanhoNumero)).toString(); // Gera número aleatório com o tamanho desejado\r",
									"\r",
									"    // Se o primeiro caractere for 0, remove-o\r",
									"    if (numeroResidencia[0] === '0') {\r",
									"        numeroResidencia = numeroResidencia.slice(1); // Remove o primeiro caractere\r",
									"    }\r",
									"\r",
									"    // Garantindo que o número tenha no máximo 10 caracteres\r",
									"    if (numeroResidencia.length > 10) {\r",
									"        numeroResidencia = numeroResidencia.slice(0, 10); // Limita a 10 caracteres\r",
									"    }\r",
									"\r",
									"    return numeroResidencia;\r",
									"}\r",
									"\r",
									"// Gerando o número de residência e armazenando como variável de ambiente\r",
									"const numeroResidenciaGerado = gerarNumeroResidencia();\r",
									"pm.environment.set(\"numeroResidencia\", numeroResidenciaGerado);\r",
									"\r",
									"function bairro() {\r",
									"    const names = ['Leblon', 'Ipanema', 'Copacabana', 'Barra da Tijuca', 'Botafogo', 'Lapa', 'Santa Teresa', 'Jardim Botânico', 'Flamengo', 'São Conrado', 'Moema', 'Vila Madalena', 'Pinheiros', 'Jardins', 'Aclimação', 'Brooklin', 'Tatuapé', 'Vila Progredior', 'Vila Nova Conceição', 'Campo Belo','Centro', 'Praia de Belas', 'Moinhos de Vento', 'Petrópolis', 'Tristeza', 'Caminho das Árvores', 'Pituba', 'Stella Maris', 'Parque Atlântico', 'Costa Azul', 'Vila Galvão', 'Santo Amaro', 'Perdizes', 'Aclimação', 'Vila Sônia', 'Cidade Dutra', 'São Bernardo do Campo', 'Vila Mariana', 'Bela Vista', 'Liberdade','Pinheiros', 'Itaim Bibi', 'Santa Cecília', 'Tucuruvi', 'Chácara Santo Antônio', 'Água Fria', 'Vila Olímpia', 'Vila São Francisco', 'Consolação', 'Vila Madalena']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Bairro\", bairro())\r",
									"\r",
									"function cidade() {\r",
									"    const names = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador', 'Curitiba', 'Fortaleza', 'Recife', 'Brasília', 'Manaus', 'Vitória', 'Goiânia', 'Belém', 'Natal', 'São Luís', 'Maceió', 'Campo Grande', 'João Pessoa', 'Aracaju', 'Cuiabá', 'Florianópolis', 'Teresina', 'Palmas', 'Macapá', 'Rio Branco', 'Boa Vista', 'Porto Velho', 'Anápolis', 'Caruaru', 'Londrina','Marabá', 'Araraquara', 'Sorocaba', 'Santos', 'Niterói', 'Mogi das Cruzes', 'Caxias do Sul', 'Barueri', 'Campinas', 'São José', 'Ponta Grossa', 'Jundiaí', 'Uberlândia', 'Diadema', 'Santo André', 'São Bernardo do Campo', 'Itaquaquecetuba', 'Ribeirão Preto', 'Juiz de Fora']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Cidade\", cidade())\r",
									"\r",
									"function abreviacao() {\r",
									"    const names = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"AbreviacaoEstado\", abreviacao())\r",
									"\r",
									"function randomCep() {\r",
									"    let randomCep = '';\r",
									"   \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        randomCep += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCep;\r",
									"}\r",
									"pm.environment.set(\"cep\", randomCep());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Mensagem de erro\",function(){\r",
									"     pm.expect(pm.response.json().error[0]).to.equal(\"O campo Cidade é obrigatório\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomeEmpresa}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"{{fullnameUser}}\",\r\n  \"telephone\": \"{{telefone}}\",\r\n  \"serviceDescription\": \"{{Descricao}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{cep}}\",\r\n      \"city\": \"\",\r\n      \"state\": \"{{AbreviacaoEstado}}\",\r\n      \"district\": \"{{Bairro}}\",\r\n      \"street\": \"{{logradouroCompleto}}\",\r\n      \"number\": \"{{numeroResidencia}}\",\r\n      \"complement\": \"\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTM0MSwiZXhwIjoxNzM5MzE1NzQxfQ.cgJqYe74cprHCRTY9YLF_B-Hfgfp8l8lr6gDrEuqMi4' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"corporateName\": \"Matheus Sousa Testes\",\r\n  \"registerCompany\": \"57126456000155\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com o campo Cidade com caracteres especial 'º'",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function empresa() {\r",
									"    const names = [\"TechNova\", \"Bytewave\", \"Cyberion\", \"InovaTech\", \"Nexabyte\", \"Softtron\", \"Codeverse\", \"Dataflux\", \"Infinitron\", \"LogiCore\", \"Zentek\",\"Neurobyte\", \"Cloudix\", \"Sysnova\", \"Hexabit\", \"AIgorithm\", \"Quantumix\", \"Webtron\", \"Netflux\", \"Cyberflux\", \"Deepcode\", \"Techpulse\", \"Synaptech\", \"Codexis\", \"Nexonix\", \"Algobyte\", \"Infobyte\", \"Datazen\", \"Digiflow\", \"Innovix\", \"Coretron\", \"Zybernet\", \"Neurotech\", \"Nanobyte\", \"Virtunix\", \"Codexel\", \"Optibit\", \"Bitnova\", \"Globotron\", \"Digiware\", \"Skytech\", \"Cybervox\", \"Techspire\", \"Softbit\", \"MetaTech\", \"Synthron\", \"Virtuabyte\", \"Cloudtron\", \"Algonix\", \"Bitzen\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Empresa\", empresa())\r",
									"\r",
									"function tag() {\r",
									"    const tagnames = ['Solutions', 'Tech', 'Digital', 'Systems', 'Software', 'Cloud', 'AI', 'Cyber', 'Data', 'Analytics','Network', 'Security', 'Labs', 'Smart', 'Logic', 'Innovation', 'IT', 'Global', 'Developers', 'Code', 'Techno', 'Automations', 'Cloudware', 'Dynamics', 'Vision', 'Intelligence', 'NextGen', 'Computing', 'Innovators', 'Engineering', 'Performance', 'Softworks', 'Logicware', 'Digitalware', 'Transform', 'Platform', 'Smartware', 'Dataflow', 'Byte', 'Edge', 'Nexus', 'Techworks', 'Bit', 'Virtual', 'SystemsX', 'Infotech', 'Genix', 'Quantum', 'Bitware', 'CloudX'];\r",
									"\r",
									"    const randomTastName = tagnames[Math.floor(Math.random() * tagnames.length)]\r",
									"    return randomTastName\r",
									"}\r",
									"pm.environment.set(\"Tag\", tag())\r",
									"\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"Empresa\") + \" \" + pm.environment.get(\"Tag\"))\r",
									"\r",
									"\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"\r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									"\r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									"\r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									"\r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									"\r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									"\r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"CNPJ\", cnpjGerado);\r",
									"\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function gerarTelefone() {\r",
									"    // Gerando um DDD aleatório entre 11 e 99\r",
									"    const ddd = Math.floor(Math.random() * (99 - 11 + 1)) + 11;\r",
									"\r",
									"    // Gerando o número de telefone com 9 dígitos, começando com 9\r",
									"    const numero = Math.floor(Math.random() * 100000000) + 900000000; // Gera um número aleatório entre 900000000 e 999999999 (começando com '9')\r",
									"\r",
									"    // Concatenando +55, o DDD e o número gerado para formar o telefone\r",
									"    const telefone = `55${ddd}${numero.toString().slice(0, 5)}${numero.toString().slice(5, 9)}`;\r",
									"\r",
									"    return telefone;\r",
									"}\r",
									"\r",
									"// Gerando o número de telefone e armazenando como variável de ambiente\r",
									"const telefoneGerado = gerarTelefone();\r",
									"pm.environment.set(\"telefone\", telefoneGerado);\r",
									"\r",
									"function descricao() {\r",
									"    const names = [\"Testes\", \"Automação\", \"FrontEnd\", \"Backend\",\"Banco de Dados\", \"IA\",\"AWS\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Descricao\", descricao())\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"NomeRua\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"NomeRuas\", lastname())\r",
									"\r",
									"pm.environment.set(\"nomeruaComposto\", \r",
									"    pm.environment.get(\"NomeRua\") + \" \" + pm.environment.get(\"NomeRuas\"))\r",
									"\r",
									"function logradouro() {\r",
									"    const names = [\"Avenida\", \"Rua\", \"Alameda\", \"Travessa\", \"Praça\", \"Rodovia\", \"Estrada\", \"Largo\", \"Viaduto\", \"Marginal\", \"Parque\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Logradouro\", logradouro())\r",
									"\r",
									"pm.environment.set(\"logradouroCompleto\", \r",
									"    pm.environment.get(\"Logradouro\") + \" \" + pm.environment.get(\"nomeruaComposto\"))\r",
									"\r",
									"\r",
									"function gerarNumeroResidencia() {\r",
									"    // Definindo a probabilidade de gerar números com mais de 5 caracteres\r",
									"    const tamanhoNumero = Math.random() < 0.8 ? Math.floor(Math.random() * 5) + 1 : Math.floor(Math.random() * 6) + 5;\r",
									"\r",
									"    // Gerando um número aleatório com o tamanho definido\r",
									"    let numeroResidencia = Math.floor(Math.random() * Math.pow(10, tamanhoNumero)).toString(); // Gera número aleatório com o tamanho desejado\r",
									"\r",
									"    // Se o primeiro caractere for 0, remove-o\r",
									"    if (numeroResidencia[0] === '0') {\r",
									"        numeroResidencia = numeroResidencia.slice(1); // Remove o primeiro caractere\r",
									"    }\r",
									"\r",
									"    // Garantindo que o número tenha no máximo 10 caracteres\r",
									"    if (numeroResidencia.length > 10) {\r",
									"        numeroResidencia = numeroResidencia.slice(0, 10); // Limita a 10 caracteres\r",
									"    }\r",
									"\r",
									"    return numeroResidencia;\r",
									"}\r",
									"\r",
									"// Gerando o número de residência e armazenando como variável de ambiente\r",
									"const numeroResidenciaGerado = gerarNumeroResidencia();\r",
									"pm.environment.set(\"numeroResidencia\", numeroResidenciaGerado);\r",
									"\r",
									"function bairro() {\r",
									"    const names = ['Leblon', 'Ipanema', 'Copacabana', 'Barra da Tijuca', 'Botafogo', 'Lapa', 'Santa Teresa', 'Jardim Botânico', 'Flamengo', 'São Conrado', 'Moema', 'Vila Madalena', 'Pinheiros', 'Jardins', 'Aclimação', 'Brooklin', 'Tatuapé', 'Vila Progredior', 'Vila Nova Conceição', 'Campo Belo','Centro', 'Praia de Belas', 'Moinhos de Vento', 'Petrópolis', 'Tristeza', 'Caminho das Árvores', 'Pituba', 'Stella Maris', 'Parque Atlântico', 'Costa Azul', 'Vila Galvão', 'Santo Amaro', 'Perdizes', 'Aclimação', 'Vila Sônia', 'Cidade Dutra', 'São Bernardo do Campo', 'Vila Mariana', 'Bela Vista', 'Liberdade','Pinheiros', 'Itaim Bibi', 'Santa Cecília', 'Tucuruvi', 'Chácara Santo Antônio', 'Água Fria', 'Vila Olímpia', 'Vila São Francisco', 'Consolação', 'Vila Madalena']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Bairro\", bairro())\r",
									"\r",
									"function cidade() {\r",
									"    const names = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador', 'Curitiba', 'Fortaleza', 'Recife', 'Brasília', 'Manaus', 'Vitória', 'Goiânia', 'Belém', 'Natal', 'São Luís', 'Maceió', 'Campo Grande', 'João Pessoa', 'Aracaju', 'Cuiabá', 'Florianópolis', 'Teresina', 'Palmas', 'Macapá', 'Rio Branco', 'Boa Vista', 'Porto Velho', 'Anápolis', 'Caruaru', 'Londrina','Marabá', 'Araraquara', 'Sorocaba', 'Santos', 'Niterói', 'Mogi das Cruzes', 'Caxias do Sul', 'Barueri', 'Campinas', 'São José', 'Ponta Grossa', 'Jundiaí', 'Uberlândia', 'Diadema', 'Santo André', 'São Bernardo do Campo', 'Itaquaquecetuba', 'Ribeirão Preto', 'Juiz de Fora']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Cidade\", cidade())\r",
									"\r",
									"function abreviacao() {\r",
									"    const names = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"AbreviacaoEstado\", abreviacao())\r",
									"\r",
									"function randomCep() {\r",
									"    let randomCep = '';\r",
									"   \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        randomCep += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCep;\r",
									"}\r",
									"pm.environment.set(\"cep\", randomCep());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 201\", function(){\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Mensagem de sucesso\",function(){\r",
									"    pm.expect(pm.response.json().msg).to.equal(\"Registro realizado com sucesso\")\r",
									"})\r",
									"\r",
									"pm.test(\"Status é True\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.status).to.be.true;\r",
									"})\r",
									"\r",
									"pm.test(\"Nome da Empresa é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.corporateName).to.equal(pm.environment.get(\"nomeEmpresa\"))\r",
									"})\r",
									"\r",
									"pm.test(\"CNPJ é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.registerCompany).to.equal(pm.environment.get(\"CNPJ\"))\r",
									"})\r",
									"\r",
									"\r",
									"// Função para validar CNPJ com base nos dígitos verificadores\r",
									"function validarCNPJ(cnpj) {\r",
									"    // Remover qualquer caractere que não seja número\r",
									"    cnpj = cnpj.replace(/\\D/g, '');\r",
									"\r",
									"    // Verifica se o CNPJ tem 14 dígitos\r",
									"    if (cnpj.length !== 14) {\r",
									"        return false;\r",
									"    }\r",
									"\r",
									"    // Cálculo do primeiro dígito verificador\r",
									"    let soma = 0;\r",
									"    let multiplicadoresPrimeiro = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    \r",
									"    for (let i = 0; i < 12; i++) {\r",
									"        soma += parseInt(cnpj[i]) * multiplicadoresPrimeiro[i];\r",
									"    }\r",
									"\r",
									"    let resto = soma % 11;\r",
									"    let primeiroDV = resto < 2 ? 0 : 11 - resto;\r",
									"\r",
									"    // Cálculo do segundo dígito verificador\r",
									"    soma = 0;\r",
									"    let multiplicadoresSegundo = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    \r",
									"    for (let i = 0; i < 13; i++) {\r",
									"        soma += parseInt(cnpj[i]) * multiplicadoresSegundo[i];\r",
									"    }\r",
									"\r",
									"    resto = soma % 11;\r",
									"    let segundoDV = resto < 2 ? 0 : 11 - resto;\r",
									"\r",
									"    // Comparar com os dígitos do CNPJ enviado\r",
									"    return cnpj[12] == primeiroDV && cnpj[13] == segundoDV;\r",
									"}\r",
									"\r",
									"// Obter o CNPJ da resposta da API (supondo que está no campo \"cnpj\")\r",
									"let cnpjRecebido = pm.response.json().newCompany.registerCompany; \r",
									"\r",
									"// Executar a validação\r",
									"if (!validarCNPJ(cnpjRecebido)) {\r",
									"    pm.test(\"O CNPJ retornado é inválido!\", function () {\r",
									"        pm.expect(false).to.be.true;\r",
									"    });\r",
									"} else {\r",
									"    pm.test(\"O CNPJ retornado é válido!\", function () {\r",
									"        pm.expect(true).to.be.true;\r",
									"    });\r",
									"}\r",
									"\r",
									"pm.test(\"Cidade é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.address[0].city).to.equal(\"Itaquaquecetudaº\")\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomeEmpresa}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"{{fullnameUser}}\",\r\n  \"telephone\": \"{{telefone}}\",\r\n  \"serviceDescription\": \"{{Descricao}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{cep}}\",\r\n      \"city\": \"Itaquaquecetudaº\",\r\n      \"state\": \"{{AbreviacaoEstado}}\",\r\n      \"district\": \"{{Bairro}}\",\r\n      \"street\": \"{{logradouroCompleto}}\",\r\n      \"number\": \"{{numeroResidencia}}\",\r\n      \"complement\": \"\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTM0MSwiZXhwIjoxNzM5MzE1NzQxfQ.cgJqYe74cprHCRTY9YLF_B-Hfgfp8l8lr6gDrEuqMi4' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"corporateName\": \"Matheus Sousa Testes\",\r\n  \"registerCompany\": \"57126456000155\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com o campo Cidade com caracteres especial 'ª'",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function empresa() {\r",
									"    const names = [\"TechNova\", \"Bytewave\", \"Cyberion\", \"InovaTech\", \"Nexabyte\", \"Softtron\", \"Codeverse\", \"Dataflux\", \"Infinitron\", \"LogiCore\", \"Zentek\",\"Neurobyte\", \"Cloudix\", \"Sysnova\", \"Hexabit\", \"AIgorithm\", \"Quantumix\", \"Webtron\", \"Netflux\", \"Cyberflux\", \"Deepcode\", \"Techpulse\", \"Synaptech\", \"Codexis\", \"Nexonix\", \"Algobyte\", \"Infobyte\", \"Datazen\", \"Digiflow\", \"Innovix\", \"Coretron\", \"Zybernet\", \"Neurotech\", \"Nanobyte\", \"Virtunix\", \"Codexel\", \"Optibit\", \"Bitnova\", \"Globotron\", \"Digiware\", \"Skytech\", \"Cybervox\", \"Techspire\", \"Softbit\", \"MetaTech\", \"Synthron\", \"Virtuabyte\", \"Cloudtron\", \"Algonix\", \"Bitzen\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Empresa\", empresa())\r",
									"\r",
									"function tag() {\r",
									"    const tagnames = ['Solutions', 'Tech', 'Digital', 'Systems', 'Software', 'Cloud', 'AI', 'Cyber', 'Data', 'Analytics','Network', 'Security', 'Labs', 'Smart', 'Logic', 'Innovation', 'IT', 'Global', 'Developers', 'Code', 'Techno', 'Automations', 'Cloudware', 'Dynamics', 'Vision', 'Intelligence', 'NextGen', 'Computing', 'Innovators', 'Engineering', 'Performance', 'Softworks', 'Logicware', 'Digitalware', 'Transform', 'Platform', 'Smartware', 'Dataflow', 'Byte', 'Edge', 'Nexus', 'Techworks', 'Bit', 'Virtual', 'SystemsX', 'Infotech', 'Genix', 'Quantum', 'Bitware', 'CloudX'];\r",
									"\r",
									"    const randomTastName = tagnames[Math.floor(Math.random() * tagnames.length)]\r",
									"    return randomTastName\r",
									"}\r",
									"pm.environment.set(\"Tag\", tag())\r",
									"\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"Empresa\") + \" \" + pm.environment.get(\"Tag\"))\r",
									"\r",
									"\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"\r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									"\r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									"\r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									"\r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									"\r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									"\r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"CNPJ\", cnpjGerado);\r",
									"\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function gerarTelefone() {\r",
									"    // Gerando um DDD aleatório entre 11 e 99\r",
									"    const ddd = Math.floor(Math.random() * (99 - 11 + 1)) + 11;\r",
									"\r",
									"    // Gerando o número de telefone com 9 dígitos, começando com 9\r",
									"    const numero = Math.floor(Math.random() * 100000000) + 900000000; // Gera um número aleatório entre 900000000 e 999999999 (começando com '9')\r",
									"\r",
									"    // Concatenando +55, o DDD e o número gerado para formar o telefone\r",
									"    const telefone = `55${ddd}${numero.toString().slice(0, 5)}${numero.toString().slice(5, 9)}`;\r",
									"\r",
									"    return telefone;\r",
									"}\r",
									"\r",
									"// Gerando o número de telefone e armazenando como variável de ambiente\r",
									"const telefoneGerado = gerarTelefone();\r",
									"pm.environment.set(\"telefone\", telefoneGerado);\r",
									"\r",
									"function descricao() {\r",
									"    const names = [\"Testes\", \"Automação\", \"FrontEnd\", \"Backend\",\"Banco de Dados\", \"IA\",\"AWS\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Descricao\", descricao())\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"NomeRua\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"NomeRuas\", lastname())\r",
									"\r",
									"pm.environment.set(\"nomeruaComposto\", \r",
									"    pm.environment.get(\"NomeRua\") + \" \" + pm.environment.get(\"NomeRuas\"))\r",
									"\r",
									"function logradouro() {\r",
									"    const names = [\"Avenida\", \"Rua\", \"Alameda\", \"Travessa\", \"Praça\", \"Rodovia\", \"Estrada\", \"Largo\", \"Viaduto\", \"Marginal\", \"Parque\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Logradouro\", logradouro())\r",
									"\r",
									"pm.environment.set(\"logradouroCompleto\", \r",
									"    pm.environment.get(\"Logradouro\") + \" \" + pm.environment.get(\"nomeruaComposto\"))\r",
									"\r",
									"\r",
									"function gerarNumeroResidencia() {\r",
									"    // Definindo a probabilidade de gerar números com mais de 5 caracteres\r",
									"    const tamanhoNumero = Math.random() < 0.8 ? Math.floor(Math.random() * 5) + 1 : Math.floor(Math.random() * 6) + 5;\r",
									"\r",
									"    // Gerando um número aleatório com o tamanho definido\r",
									"    let numeroResidencia = Math.floor(Math.random() * Math.pow(10, tamanhoNumero)).toString(); // Gera número aleatório com o tamanho desejado\r",
									"\r",
									"    // Se o primeiro caractere for 0, remove-o\r",
									"    if (numeroResidencia[0] === '0') {\r",
									"        numeroResidencia = numeroResidencia.slice(1); // Remove o primeiro caractere\r",
									"    }\r",
									"\r",
									"    // Garantindo que o número tenha no máximo 10 caracteres\r",
									"    if (numeroResidencia.length > 10) {\r",
									"        numeroResidencia = numeroResidencia.slice(0, 10); // Limita a 10 caracteres\r",
									"    }\r",
									"\r",
									"    return numeroResidencia;\r",
									"}\r",
									"\r",
									"// Gerando o número de residência e armazenando como variável de ambiente\r",
									"const numeroResidenciaGerado = gerarNumeroResidencia();\r",
									"pm.environment.set(\"numeroResidencia\", numeroResidenciaGerado);\r",
									"\r",
									"function bairro() {\r",
									"    const names = ['Leblon', 'Ipanema', 'Copacabana', 'Barra da Tijuca', 'Botafogo', 'Lapa', 'Santa Teresa', 'Jardim Botânico', 'Flamengo', 'São Conrado', 'Moema', 'Vila Madalena', 'Pinheiros', 'Jardins', 'Aclimação', 'Brooklin', 'Tatuapé', 'Vila Progredior', 'Vila Nova Conceição', 'Campo Belo','Centro', 'Praia de Belas', 'Moinhos de Vento', 'Petrópolis', 'Tristeza', 'Caminho das Árvores', 'Pituba', 'Stella Maris', 'Parque Atlântico', 'Costa Azul', 'Vila Galvão', 'Santo Amaro', 'Perdizes', 'Aclimação', 'Vila Sônia', 'Cidade Dutra', 'São Bernardo do Campo', 'Vila Mariana', 'Bela Vista', 'Liberdade','Pinheiros', 'Itaim Bibi', 'Santa Cecília', 'Tucuruvi', 'Chácara Santo Antônio', 'Água Fria', 'Vila Olímpia', 'Vila São Francisco', 'Consolação', 'Vila Madalena']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Bairro\", bairro())\r",
									"\r",
									"function cidade() {\r",
									"    const names = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador', 'Curitiba', 'Fortaleza', 'Recife', 'Brasília', 'Manaus', 'Vitória', 'Goiânia', 'Belém', 'Natal', 'São Luís', 'Maceió', 'Campo Grande', 'João Pessoa', 'Aracaju', 'Cuiabá', 'Florianópolis', 'Teresina', 'Palmas', 'Macapá', 'Rio Branco', 'Boa Vista', 'Porto Velho', 'Anápolis', 'Caruaru', 'Londrina','Marabá', 'Araraquara', 'Sorocaba', 'Santos', 'Niterói', 'Mogi das Cruzes', 'Caxias do Sul', 'Barueri', 'Campinas', 'São José', 'Ponta Grossa', 'Jundiaí', 'Uberlândia', 'Diadema', 'Santo André', 'São Bernardo do Campo', 'Itaquaquecetuba', 'Ribeirão Preto', 'Juiz de Fora']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Cidade\", cidade())\r",
									"\r",
									"function abreviacao() {\r",
									"    const names = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"AbreviacaoEstado\", abreviacao())\r",
									"\r",
									"function randomCep() {\r",
									"    let randomCep = '';\r",
									"   \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        randomCep += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCep;\r",
									"}\r",
									"pm.environment.set(\"cep\", randomCep());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 201\", function(){\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Mensagem de sucesso\",function(){\r",
									"    pm.expect(pm.response.json().msg).to.equal(\"Registro realizado com sucesso\")\r",
									"})\r",
									"\r",
									"pm.test(\"Status é True\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.status).to.be.true;\r",
									"})\r",
									"\r",
									"pm.test(\"Nome da Empresa é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.corporateName).to.equal(pm.environment.get(\"nomeEmpresa\"))\r",
									"})\r",
									"\r",
									"pm.test(\"CNPJ é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.registerCompany).to.equal(pm.environment.get(\"CNPJ\"))\r",
									"})\r",
									"\r",
									"\r",
									"// Função para validar CNPJ com base nos dígitos verificadores\r",
									"function validarCNPJ(cnpj) {\r",
									"    // Remover qualquer caractere que não seja número\r",
									"    cnpj = cnpj.replace(/\\D/g, '');\r",
									"\r",
									"    // Verifica se o CNPJ tem 14 dígitos\r",
									"    if (cnpj.length !== 14) {\r",
									"        return false;\r",
									"    }\r",
									"\r",
									"    // Cálculo do primeiro dígito verificador\r",
									"    let soma = 0;\r",
									"    let multiplicadoresPrimeiro = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    \r",
									"    for (let i = 0; i < 12; i++) {\r",
									"        soma += parseInt(cnpj[i]) * multiplicadoresPrimeiro[i];\r",
									"    }\r",
									"\r",
									"    let resto = soma % 11;\r",
									"    let primeiroDV = resto < 2 ? 0 : 11 - resto;\r",
									"\r",
									"    // Cálculo do segundo dígito verificador\r",
									"    soma = 0;\r",
									"    let multiplicadoresSegundo = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    \r",
									"    for (let i = 0; i < 13; i++) {\r",
									"        soma += parseInt(cnpj[i]) * multiplicadoresSegundo[i];\r",
									"    }\r",
									"\r",
									"    resto = soma % 11;\r",
									"    let segundoDV = resto < 2 ? 0 : 11 - resto;\r",
									"\r",
									"    // Comparar com os dígitos do CNPJ enviado\r",
									"    return cnpj[12] == primeiroDV && cnpj[13] == segundoDV;\r",
									"}\r",
									"\r",
									"// Obter o CNPJ da resposta da API (supondo que está no campo \"cnpj\")\r",
									"let cnpjRecebido = pm.response.json().newCompany.registerCompany; \r",
									"\r",
									"// Executar a validação\r",
									"if (!validarCNPJ(cnpjRecebido)) {\r",
									"    pm.test(\"O CNPJ retornado é inválido!\", function () {\r",
									"        pm.expect(false).to.be.true;\r",
									"    });\r",
									"} else {\r",
									"    pm.test(\"O CNPJ retornado é válido!\", function () {\r",
									"        pm.expect(true).to.be.true;\r",
									"    });\r",
									"}\r",
									"\r",
									"pm.test(\"Cidade é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.address[0].city).to.equal(\"Guarulhosª\")\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomeEmpresa}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"{{fullnameUser}}\",\r\n  \"telephone\": \"{{telefone}}\",\r\n  \"serviceDescription\": \"{{Descricao}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{cep}}\",\r\n      \"city\": \"Guarulhosª\",\r\n      \"state\": \"{{AbreviacaoEstado}}\",\r\n      \"district\": \"{{Bairro}}\",\r\n      \"street\": \"{{logradouroCompleto}}\",\r\n      \"number\": \"{{numeroResidencia}}\",\r\n      \"complement\": \"\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTM0MSwiZXhwIjoxNzM5MzE1NzQxfQ.cgJqYe74cprHCRTY9YLF_B-Hfgfp8l8lr6gDrEuqMi4' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"corporateName\": \"Matheus Sousa Testes\",\r\n  \"registerCompany\": \"57126456000155\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com o campo Cidade com caracteres especial '‘'",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function empresa() {\r",
									"    const names = [\"TechNova\", \"Bytewave\", \"Cyberion\", \"InovaTech\", \"Nexabyte\", \"Softtron\", \"Codeverse\", \"Dataflux\", \"Infinitron\", \"LogiCore\", \"Zentek\",\"Neurobyte\", \"Cloudix\", \"Sysnova\", \"Hexabit\", \"AIgorithm\", \"Quantumix\", \"Webtron\", \"Netflux\", \"Cyberflux\", \"Deepcode\", \"Techpulse\", \"Synaptech\", \"Codexis\", \"Nexonix\", \"Algobyte\", \"Infobyte\", \"Datazen\", \"Digiflow\", \"Innovix\", \"Coretron\", \"Zybernet\", \"Neurotech\", \"Nanobyte\", \"Virtunix\", \"Codexel\", \"Optibit\", \"Bitnova\", \"Globotron\", \"Digiware\", \"Skytech\", \"Cybervox\", \"Techspire\", \"Softbit\", \"MetaTech\", \"Synthron\", \"Virtuabyte\", \"Cloudtron\", \"Algonix\", \"Bitzen\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Empresa\", empresa())\r",
									"\r",
									"function tag() {\r",
									"    const tagnames = ['Solutions', 'Tech', 'Digital', 'Systems', 'Software', 'Cloud', 'AI', 'Cyber', 'Data', 'Analytics','Network', 'Security', 'Labs', 'Smart', 'Logic', 'Innovation', 'IT', 'Global', 'Developers', 'Code', 'Techno', 'Automations', 'Cloudware', 'Dynamics', 'Vision', 'Intelligence', 'NextGen', 'Computing', 'Innovators', 'Engineering', 'Performance', 'Softworks', 'Logicware', 'Digitalware', 'Transform', 'Platform', 'Smartware', 'Dataflow', 'Byte', 'Edge', 'Nexus', 'Techworks', 'Bit', 'Virtual', 'SystemsX', 'Infotech', 'Genix', 'Quantum', 'Bitware', 'CloudX'];\r",
									"\r",
									"    const randomTastName = tagnames[Math.floor(Math.random() * tagnames.length)]\r",
									"    return randomTastName\r",
									"}\r",
									"pm.environment.set(\"Tag\", tag())\r",
									"\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"Empresa\") + \" \" + pm.environment.get(\"Tag\"))\r",
									"\r",
									"\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"\r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									"\r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									"\r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									"\r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									"\r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									"\r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"CNPJ\", cnpjGerado);\r",
									"\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function gerarTelefone() {\r",
									"    // Gerando um DDD aleatório entre 11 e 99\r",
									"    const ddd = Math.floor(Math.random() * (99 - 11 + 1)) + 11;\r",
									"\r",
									"    // Gerando o número de telefone com 9 dígitos, começando com 9\r",
									"    const numero = Math.floor(Math.random() * 100000000) + 900000000; // Gera um número aleatório entre 900000000 e 999999999 (começando com '9')\r",
									"\r",
									"    // Concatenando +55, o DDD e o número gerado para formar o telefone\r",
									"    const telefone = `55${ddd}${numero.toString().slice(0, 5)}${numero.toString().slice(5, 9)}`;\r",
									"\r",
									"    return telefone;\r",
									"}\r",
									"\r",
									"// Gerando o número de telefone e armazenando como variável de ambiente\r",
									"const telefoneGerado = gerarTelefone();\r",
									"pm.environment.set(\"telefone\", telefoneGerado);\r",
									"\r",
									"function descricao() {\r",
									"    const names = [\"Testes\", \"Automação\", \"FrontEnd\", \"Backend\",\"Banco de Dados\", \"IA\",\"AWS\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Descricao\", descricao())\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"NomeRua\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"NomeRuas\", lastname())\r",
									"\r",
									"pm.environment.set(\"nomeruaComposto\", \r",
									"    pm.environment.get(\"NomeRua\") + \" \" + pm.environment.get(\"NomeRuas\"))\r",
									"\r",
									"function logradouro() {\r",
									"    const names = [\"Avenida\", \"Rua\", \"Alameda\", \"Travessa\", \"Praça\", \"Rodovia\", \"Estrada\", \"Largo\", \"Viaduto\", \"Marginal\", \"Parque\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Logradouro\", logradouro())\r",
									"\r",
									"pm.environment.set(\"logradouroCompleto\", \r",
									"    pm.environment.get(\"Logradouro\") + \" \" + pm.environment.get(\"nomeruaComposto\"))\r",
									"\r",
									"\r",
									"function gerarNumeroResidencia() {\r",
									"    // Definindo a probabilidade de gerar números com mais de 5 caracteres\r",
									"    const tamanhoNumero = Math.random() < 0.8 ? Math.floor(Math.random() * 5) + 1 : Math.floor(Math.random() * 6) + 5;\r",
									"\r",
									"    // Gerando um número aleatório com o tamanho definido\r",
									"    let numeroResidencia = Math.floor(Math.random() * Math.pow(10, tamanhoNumero)).toString(); // Gera número aleatório com o tamanho desejado\r",
									"\r",
									"    // Se o primeiro caractere for 0, remove-o\r",
									"    if (numeroResidencia[0] === '0') {\r",
									"        numeroResidencia = numeroResidencia.slice(1); // Remove o primeiro caractere\r",
									"    }\r",
									"\r",
									"    // Garantindo que o número tenha no máximo 10 caracteres\r",
									"    if (numeroResidencia.length > 10) {\r",
									"        numeroResidencia = numeroResidencia.slice(0, 10); // Limita a 10 caracteres\r",
									"    }\r",
									"\r",
									"    return numeroResidencia;\r",
									"}\r",
									"\r",
									"// Gerando o número de residência e armazenando como variável de ambiente\r",
									"const numeroResidenciaGerado = gerarNumeroResidencia();\r",
									"pm.environment.set(\"numeroResidencia\", numeroResidenciaGerado);\r",
									"\r",
									"function bairro() {\r",
									"    const names = ['Leblon', 'Ipanema', 'Copacabana', 'Barra da Tijuca', 'Botafogo', 'Lapa', 'Santa Teresa', 'Jardim Botânico', 'Flamengo', 'São Conrado', 'Moema', 'Vila Madalena', 'Pinheiros', 'Jardins', 'Aclimação', 'Brooklin', 'Tatuapé', 'Vila Progredior', 'Vila Nova Conceição', 'Campo Belo','Centro', 'Praia de Belas', 'Moinhos de Vento', 'Petrópolis', 'Tristeza', 'Caminho das Árvores', 'Pituba', 'Stella Maris', 'Parque Atlântico', 'Costa Azul', 'Vila Galvão', 'Santo Amaro', 'Perdizes', 'Aclimação', 'Vila Sônia', 'Cidade Dutra', 'São Bernardo do Campo', 'Vila Mariana', 'Bela Vista', 'Liberdade','Pinheiros', 'Itaim Bibi', 'Santa Cecília', 'Tucuruvi', 'Chácara Santo Antônio', 'Água Fria', 'Vila Olímpia', 'Vila São Francisco', 'Consolação', 'Vila Madalena']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Bairro\", bairro())\r",
									"\r",
									"function cidade() {\r",
									"    const names = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador', 'Curitiba', 'Fortaleza', 'Recife', 'Brasília', 'Manaus', 'Vitória', 'Goiânia', 'Belém', 'Natal', 'São Luís', 'Maceió', 'Campo Grande', 'João Pessoa', 'Aracaju', 'Cuiabá', 'Florianópolis', 'Teresina', 'Palmas', 'Macapá', 'Rio Branco', 'Boa Vista', 'Porto Velho', 'Anápolis', 'Caruaru', 'Londrina','Marabá', 'Araraquara', 'Sorocaba', 'Santos', 'Niterói', 'Mogi das Cruzes', 'Caxias do Sul', 'Barueri', 'Campinas', 'São José', 'Ponta Grossa', 'Jundiaí', 'Uberlândia', 'Diadema', 'Santo André', 'São Bernardo do Campo', 'Itaquaquecetuba', 'Ribeirão Preto', 'Juiz de Fora']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Cidade\", cidade())\r",
									"\r",
									"function abreviacao() {\r",
									"    const names = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"AbreviacaoEstado\", abreviacao())\r",
									"\r",
									"function randomCep() {\r",
									"    let randomCep = '';\r",
									"   \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        randomCep += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCep;\r",
									"}\r",
									"pm.environment.set(\"cep\", randomCep());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 201\", function(){\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Mensagem de sucesso\",function(){\r",
									"    pm.expect(pm.response.json().msg).to.equal(\"Registro realizado com sucesso\")\r",
									"})\r",
									"\r",
									"pm.test(\"Status é True\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.status).to.be.true;\r",
									"})\r",
									"\r",
									"pm.test(\"Nome da Empresa é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.corporateName).to.equal(pm.environment.get(\"nomeEmpresa\"))\r",
									"})\r",
									"\r",
									"pm.test(\"CNPJ é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.registerCompany).to.equal(pm.environment.get(\"CNPJ\"))\r",
									"})\r",
									"\r",
									"\r",
									"// Função para validar CNPJ com base nos dígitos verificadores\r",
									"function validarCNPJ(cnpj) {\r",
									"    // Remover qualquer caractere que não seja número\r",
									"    cnpj = cnpj.replace(/\\D/g, '');\r",
									"\r",
									"    // Verifica se o CNPJ tem 14 dígitos\r",
									"    if (cnpj.length !== 14) {\r",
									"        return false;\r",
									"    }\r",
									"\r",
									"    // Cálculo do primeiro dígito verificador\r",
									"    let soma = 0;\r",
									"    let multiplicadoresPrimeiro = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    \r",
									"    for (let i = 0; i < 12; i++) {\r",
									"        soma += parseInt(cnpj[i]) * multiplicadoresPrimeiro[i];\r",
									"    }\r",
									"\r",
									"    let resto = soma % 11;\r",
									"    let primeiroDV = resto < 2 ? 0 : 11 - resto;\r",
									"\r",
									"    // Cálculo do segundo dígito verificador\r",
									"    soma = 0;\r",
									"    let multiplicadoresSegundo = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    \r",
									"    for (let i = 0; i < 13; i++) {\r",
									"        soma += parseInt(cnpj[i]) * multiplicadoresSegundo[i];\r",
									"    }\r",
									"\r",
									"    resto = soma % 11;\r",
									"    let segundoDV = resto < 2 ? 0 : 11 - resto;\r",
									"\r",
									"    // Comparar com os dígitos do CNPJ enviado\r",
									"    return cnpj[12] == primeiroDV && cnpj[13] == segundoDV;\r",
									"}\r",
									"\r",
									"// Obter o CNPJ da resposta da API (supondo que está no campo \"cnpj\")\r",
									"let cnpjRecebido = pm.response.json().newCompany.registerCompany; \r",
									"\r",
									"// Executar a validação\r",
									"if (!validarCNPJ(cnpjRecebido)) {\r",
									"    pm.test(\"O CNPJ retornado é inválido!\", function () {\r",
									"        pm.expect(false).to.be.true;\r",
									"    });\r",
									"} else {\r",
									"    pm.test(\"O CNPJ retornado é válido!\", function () {\r",
									"        pm.expect(true).to.be.true;\r",
									"    });\r",
									"}\r",
									"\r",
									"pm.test(\"Cidade é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.address[0].city).to.equal(\"Campinas'\")\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomeEmpresa}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"{{fullnameUser}}\",\r\n  \"telephone\": \"{{telefone}}\",\r\n  \"serviceDescription\": \"{{Descricao}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{cep}}\",\r\n      \"city\": \"Campinas'\",\r\n      \"state\": \"{{AbreviacaoEstado}}\",\r\n      \"district\": \"{{Bairro}}\",\r\n      \"street\": \"{{logradouroCompleto}}\",\r\n      \"number\": \"{{numeroResidencia}}\",\r\n      \"complement\": \"\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTM0MSwiZXhwIjoxNzM5MzE1NzQxfQ.cgJqYe74cprHCRTY9YLF_B-Hfgfp8l8lr6gDrEuqMi4' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"corporateName\": \"Matheus Sousa Testes\",\r\n  \"registerCompany\": \"57126456000155\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com o campo Cidade com caracteres especial '-'",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function empresa() {\r",
									"    const names = [\"TechNova\", \"Bytewave\", \"Cyberion\", \"InovaTech\", \"Nexabyte\", \"Softtron\", \"Codeverse\", \"Dataflux\", \"Infinitron\", \"LogiCore\", \"Zentek\",\"Neurobyte\", \"Cloudix\", \"Sysnova\", \"Hexabit\", \"AIgorithm\", \"Quantumix\", \"Webtron\", \"Netflux\", \"Cyberflux\", \"Deepcode\", \"Techpulse\", \"Synaptech\", \"Codexis\", \"Nexonix\", \"Algobyte\", \"Infobyte\", \"Datazen\", \"Digiflow\", \"Innovix\", \"Coretron\", \"Zybernet\", \"Neurotech\", \"Nanobyte\", \"Virtunix\", \"Codexel\", \"Optibit\", \"Bitnova\", \"Globotron\", \"Digiware\", \"Skytech\", \"Cybervox\", \"Techspire\", \"Softbit\", \"MetaTech\", \"Synthron\", \"Virtuabyte\", \"Cloudtron\", \"Algonix\", \"Bitzen\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Empresa\", empresa())\r",
									"\r",
									"function tag() {\r",
									"    const tagnames = ['Solutions', 'Tech', 'Digital', 'Systems', 'Software', 'Cloud', 'AI', 'Cyber', 'Data', 'Analytics','Network', 'Security', 'Labs', 'Smart', 'Logic', 'Innovation', 'IT', 'Global', 'Developers', 'Code', 'Techno', 'Automations', 'Cloudware', 'Dynamics', 'Vision', 'Intelligence', 'NextGen', 'Computing', 'Innovators', 'Engineering', 'Performance', 'Softworks', 'Logicware', 'Digitalware', 'Transform', 'Platform', 'Smartware', 'Dataflow', 'Byte', 'Edge', 'Nexus', 'Techworks', 'Bit', 'Virtual', 'SystemsX', 'Infotech', 'Genix', 'Quantum', 'Bitware', 'CloudX'];\r",
									"\r",
									"    const randomTastName = tagnames[Math.floor(Math.random() * tagnames.length)]\r",
									"    return randomTastName\r",
									"}\r",
									"pm.environment.set(\"Tag\", tag())\r",
									"\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"Empresa\") + \" \" + pm.environment.get(\"Tag\"))\r",
									"\r",
									"\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"\r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									"\r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									"\r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									"\r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									"\r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									"\r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"CNPJ\", cnpjGerado);\r",
									"\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function gerarTelefone() {\r",
									"    // Gerando um DDD aleatório entre 11 e 99\r",
									"    const ddd = Math.floor(Math.random() * (99 - 11 + 1)) + 11;\r",
									"\r",
									"    // Gerando o número de telefone com 9 dígitos, começando com 9\r",
									"    const numero = Math.floor(Math.random() * 100000000) + 900000000; // Gera um número aleatório entre 900000000 e 999999999 (começando com '9')\r",
									"\r",
									"    // Concatenando +55, o DDD e o número gerado para formar o telefone\r",
									"    const telefone = `55${ddd}${numero.toString().slice(0, 5)}${numero.toString().slice(5, 9)}`;\r",
									"\r",
									"    return telefone;\r",
									"}\r",
									"\r",
									"// Gerando o número de telefone e armazenando como variável de ambiente\r",
									"const telefoneGerado = gerarTelefone();\r",
									"pm.environment.set(\"telefone\", telefoneGerado);\r",
									"\r",
									"function descricao() {\r",
									"    const names = [\"Testes\", \"Automação\", \"FrontEnd\", \"Backend\",\"Banco de Dados\", \"IA\",\"AWS\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Descricao\", descricao())\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"NomeRua\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"NomeRuas\", lastname())\r",
									"\r",
									"pm.environment.set(\"nomeruaComposto\", \r",
									"    pm.environment.get(\"NomeRua\") + \" \" + pm.environment.get(\"NomeRuas\"))\r",
									"\r",
									"function logradouro() {\r",
									"    const names = [\"Avenida\", \"Rua\", \"Alameda\", \"Travessa\", \"Praça\", \"Rodovia\", \"Estrada\", \"Largo\", \"Viaduto\", \"Marginal\", \"Parque\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Logradouro\", logradouro())\r",
									"\r",
									"pm.environment.set(\"logradouroCompleto\", \r",
									"    pm.environment.get(\"Logradouro\") + \" \" + pm.environment.get(\"nomeruaComposto\"))\r",
									"\r",
									"\r",
									"function gerarNumeroResidencia() {\r",
									"    // Definindo a probabilidade de gerar números com mais de 5 caracteres\r",
									"    const tamanhoNumero = Math.random() < 0.8 ? Math.floor(Math.random() * 5) + 1 : Math.floor(Math.random() * 6) + 5;\r",
									"\r",
									"    // Gerando um número aleatório com o tamanho definido\r",
									"    let numeroResidencia = Math.floor(Math.random() * Math.pow(10, tamanhoNumero)).toString(); // Gera número aleatório com o tamanho desejado\r",
									"\r",
									"    // Se o primeiro caractere for 0, remove-o\r",
									"    if (numeroResidencia[0] === '0') {\r",
									"        numeroResidencia = numeroResidencia.slice(1); // Remove o primeiro caractere\r",
									"    }\r",
									"\r",
									"    // Garantindo que o número tenha no máximo 10 caracteres\r",
									"    if (numeroResidencia.length > 10) {\r",
									"        numeroResidencia = numeroResidencia.slice(0, 10); // Limita a 10 caracteres\r",
									"    }\r",
									"\r",
									"    return numeroResidencia;\r",
									"}\r",
									"\r",
									"// Gerando o número de residência e armazenando como variável de ambiente\r",
									"const numeroResidenciaGerado = gerarNumeroResidencia();\r",
									"pm.environment.set(\"numeroResidencia\", numeroResidenciaGerado);\r",
									"\r",
									"function bairro() {\r",
									"    const names = ['Leblon', 'Ipanema', 'Copacabana', 'Barra da Tijuca', 'Botafogo', 'Lapa', 'Santa Teresa', 'Jardim Botânico', 'Flamengo', 'São Conrado', 'Moema', 'Vila Madalena', 'Pinheiros', 'Jardins', 'Aclimação', 'Brooklin', 'Tatuapé', 'Vila Progredior', 'Vila Nova Conceição', 'Campo Belo','Centro', 'Praia de Belas', 'Moinhos de Vento', 'Petrópolis', 'Tristeza', 'Caminho das Árvores', 'Pituba', 'Stella Maris', 'Parque Atlântico', 'Costa Azul', 'Vila Galvão', 'Santo Amaro', 'Perdizes', 'Aclimação', 'Vila Sônia', 'Cidade Dutra', 'São Bernardo do Campo', 'Vila Mariana', 'Bela Vista', 'Liberdade','Pinheiros', 'Itaim Bibi', 'Santa Cecília', 'Tucuruvi', 'Chácara Santo Antônio', 'Água Fria', 'Vila Olímpia', 'Vila São Francisco', 'Consolação', 'Vila Madalena']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Bairro\", bairro())\r",
									"\r",
									"function cidade() {\r",
									"    const names = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador', 'Curitiba', 'Fortaleza', 'Recife', 'Brasília', 'Manaus', 'Vitória', 'Goiânia', 'Belém', 'Natal', 'São Luís', 'Maceió', 'Campo Grande', 'João Pessoa', 'Aracaju', 'Cuiabá', 'Florianópolis', 'Teresina', 'Palmas', 'Macapá', 'Rio Branco', 'Boa Vista', 'Porto Velho', 'Anápolis', 'Caruaru', 'Londrina','Marabá', 'Araraquara', 'Sorocaba', 'Santos', 'Niterói', 'Mogi das Cruzes', 'Caxias do Sul', 'Barueri', 'Campinas', 'São José', 'Ponta Grossa', 'Jundiaí', 'Uberlândia', 'Diadema', 'Santo André', 'São Bernardo do Campo', 'Itaquaquecetuba', 'Ribeirão Preto', 'Juiz de Fora']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Cidade\", cidade())\r",
									"\r",
									"function abreviacao() {\r",
									"    const names = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"AbreviacaoEstado\", abreviacao())\r",
									"\r",
									"function randomCep() {\r",
									"    let randomCep = '';\r",
									"   \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        randomCep += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCep;\r",
									"}\r",
									"pm.environment.set(\"cep\", randomCep());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 201\", function(){\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Mensagem de sucesso\",function(){\r",
									"    pm.expect(pm.response.json().msg).to.equal(\"Registro realizado com sucesso\")\r",
									"})\r",
									"\r",
									"pm.test(\"Status é True\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.status).to.be.true;\r",
									"})\r",
									"\r",
									"pm.test(\"Nome da Empresa é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.corporateName).to.equal(pm.environment.get(\"nomeEmpresa\"))\r",
									"})\r",
									"\r",
									"pm.test(\"CNPJ é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.registerCompany).to.equal(pm.environment.get(\"CNPJ\"))\r",
									"})\r",
									"\r",
									"\r",
									"// Função para validar CNPJ com base nos dígitos verificadores\r",
									"function validarCNPJ(cnpj) {\r",
									"    // Remover qualquer caractere que não seja número\r",
									"    cnpj = cnpj.replace(/\\D/g, '');\r",
									"\r",
									"    // Verifica se o CNPJ tem 14 dígitos\r",
									"    if (cnpj.length !== 14) {\r",
									"        return false;\r",
									"    }\r",
									"\r",
									"    // Cálculo do primeiro dígito verificador\r",
									"    let soma = 0;\r",
									"    let multiplicadoresPrimeiro = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    \r",
									"    for (let i = 0; i < 12; i++) {\r",
									"        soma += parseInt(cnpj[i]) * multiplicadoresPrimeiro[i];\r",
									"    }\r",
									"\r",
									"    let resto = soma % 11;\r",
									"    let primeiroDV = resto < 2 ? 0 : 11 - resto;\r",
									"\r",
									"    // Cálculo do segundo dígito verificador\r",
									"    soma = 0;\r",
									"    let multiplicadoresSegundo = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    \r",
									"    for (let i = 0; i < 13; i++) {\r",
									"        soma += parseInt(cnpj[i]) * multiplicadoresSegundo[i];\r",
									"    }\r",
									"\r",
									"    resto = soma % 11;\r",
									"    let segundoDV = resto < 2 ? 0 : 11 - resto;\r",
									"\r",
									"    // Comparar com os dígitos do CNPJ enviado\r",
									"    return cnpj[12] == primeiroDV && cnpj[13] == segundoDV;\r",
									"}\r",
									"\r",
									"// Obter o CNPJ da resposta da API (supondo que está no campo \"cnpj\")\r",
									"let cnpjRecebido = pm.response.json().newCompany.registerCompany; \r",
									"\r",
									"// Executar a validação\r",
									"if (!validarCNPJ(cnpjRecebido)) {\r",
									"    pm.test(\"O CNPJ retornado é inválido!\", function () {\r",
									"        pm.expect(false).to.be.true;\r",
									"    });\r",
									"} else {\r",
									"    pm.test(\"O CNPJ retornado é válido!\", function () {\r",
									"        pm.expect(true).to.be.true;\r",
									"    });\r",
									"}\r",
									"\r",
									"pm.test(\"Cidade é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.address[0].city).to.equa(\"Para-Bens\")\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomeEmpresa}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"{{fullnameUser}}\",\r\n  \"telephone\": \"{{telefone}}\",\r\n  \"serviceDescription\": \"{{Descricao}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{cep}}\",\r\n      \"city\": \"Para-Bens\",\r\n      \"state\": \"{{AbreviacaoEstado}}\",\r\n      \"district\": \"{{Bairro}}\",\r\n      \"street\": \"{{logradouroCompleto}}\",\r\n      \"number\": \"{{numeroResidencia}}\",\r\n      \"complement\": \"\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTM0MSwiZXhwIjoxNzM5MzE1NzQxfQ.cgJqYe74cprHCRTY9YLF_B-Hfgfp8l8lr6gDrEuqMi4' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"corporateName\": \"Matheus Sousa Testes\",\r\n  \"registerCompany\": \"57126456000155\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com o campo Cidade com caractere especial invalido",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function empresa() {\r",
									"    const names = [\"TechNova\", \"Bytewave\", \"Cyberion\", \"InovaTech\", \"Nexabyte\", \"Softtron\", \"Codeverse\", \"Dataflux\", \"Infinitron\", \"LogiCore\", \"Zentek\",\"Neurobyte\", \"Cloudix\", \"Sysnova\", \"Hexabit\", \"AIgorithm\", \"Quantumix\", \"Webtron\", \"Netflux\", \"Cyberflux\", \"Deepcode\", \"Techpulse\", \"Synaptech\", \"Codexis\", \"Nexonix\", \"Algobyte\", \"Infobyte\", \"Datazen\", \"Digiflow\", \"Innovix\", \"Coretron\", \"Zybernet\", \"Neurotech\", \"Nanobyte\", \"Virtunix\", \"Codexel\", \"Optibit\", \"Bitnova\", \"Globotron\", \"Digiware\", \"Skytech\", \"Cybervox\", \"Techspire\", \"Softbit\", \"MetaTech\", \"Synthron\", \"Virtuabyte\", \"Cloudtron\", \"Algonix\", \"Bitzen\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Empresa\", empresa())\r",
									"\r",
									"function tag() {\r",
									"    const tagnames = ['Solutions', 'Tech', 'Digital', 'Systems', 'Software', 'Cloud', 'AI', 'Cyber', 'Data', 'Analytics','Network', 'Security', 'Labs', 'Smart', 'Logic', 'Innovation', 'IT', 'Global', 'Developers', 'Code', 'Techno', 'Automations', 'Cloudware', 'Dynamics', 'Vision', 'Intelligence', 'NextGen', 'Computing', 'Innovators', 'Engineering', 'Performance', 'Softworks', 'Logicware', 'Digitalware', 'Transform', 'Platform', 'Smartware', 'Dataflow', 'Byte', 'Edge', 'Nexus', 'Techworks', 'Bit', 'Virtual', 'SystemsX', 'Infotech', 'Genix', 'Quantum', 'Bitware', 'CloudX'];\r",
									"\r",
									"    const randomTastName = tagnames[Math.floor(Math.random() * tagnames.length)]\r",
									"    return randomTastName\r",
									"}\r",
									"pm.environment.set(\"Tag\", tag())\r",
									"\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"Empresa\") + \" \" + pm.environment.get(\"Tag\"))\r",
									"\r",
									"\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"\r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									"\r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									"\r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									"\r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									"\r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									"\r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"CNPJ\", cnpjGerado);\r",
									"\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function gerarTelefone() {\r",
									"    // Gerando um DDD aleatório entre 11 e 99\r",
									"    const ddd = Math.floor(Math.random() * (99 - 11 + 1)) + 11;\r",
									"\r",
									"    // Gerando o número de telefone com 9 dígitos, começando com 9\r",
									"    const numero = Math.floor(Math.random() * 100000000) + 900000000; // Gera um número aleatório entre 900000000 e 999999999 (começando com '9')\r",
									"\r",
									"    // Concatenando +55, o DDD e o número gerado para formar o telefone\r",
									"    const telefone = `55${ddd}${numero.toString().slice(0, 5)}${numero.toString().slice(5, 9)}`;\r",
									"\r",
									"    return telefone;\r",
									"}\r",
									"\r",
									"// Gerando o número de telefone e armazenando como variável de ambiente\r",
									"const telefoneGerado = gerarTelefone();\r",
									"pm.environment.set(\"telefone\", telefoneGerado);\r",
									"\r",
									"function descricao() {\r",
									"    const names = [\"Testes\", \"Automação\", \"FrontEnd\", \"Backend\",\"Banco de Dados\", \"IA\",\"AWS\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Descricao\", descricao())\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"NomeRua\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"NomeRuas\", lastname())\r",
									"\r",
									"pm.environment.set(\"nomeruaComposto\", \r",
									"    pm.environment.get(\"NomeRua\") + \" \" + pm.environment.get(\"NomeRuas\"))\r",
									"\r",
									"function logradouro() {\r",
									"    const names = [\"Avenida\", \"Rua\", \"Alameda\", \"Travessa\", \"Praça\", \"Rodovia\", \"Estrada\", \"Largo\", \"Viaduto\", \"Marginal\", \"Parque\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Logradouro\", logradouro())\r",
									"\r",
									"pm.environment.set(\"logradouroCompleto\", \r",
									"    pm.environment.get(\"Logradouro\") + \" \" + pm.environment.get(\"nomeruaComposto\"))\r",
									"\r",
									"\r",
									"function gerarNumeroResidencia() {\r",
									"    // Definindo a probabilidade de gerar números com mais de 5 caracteres\r",
									"    const tamanhoNumero = Math.random() < 0.8 ? Math.floor(Math.random() * 5) + 1 : Math.floor(Math.random() * 6) + 5;\r",
									"\r",
									"    // Gerando um número aleatório com o tamanho definido\r",
									"    let numeroResidencia = Math.floor(Math.random() * Math.pow(10, tamanhoNumero)).toString(); // Gera número aleatório com o tamanho desejado\r",
									"\r",
									"    // Se o primeiro caractere for 0, remove-o\r",
									"    if (numeroResidencia[0] === '0') {\r",
									"        numeroResidencia = numeroResidencia.slice(1); // Remove o primeiro caractere\r",
									"    }\r",
									"\r",
									"    // Garantindo que o número tenha no máximo 10 caracteres\r",
									"    if (numeroResidencia.length > 10) {\r",
									"        numeroResidencia = numeroResidencia.slice(0, 10); // Limita a 10 caracteres\r",
									"    }\r",
									"\r",
									"    return numeroResidencia;\r",
									"}\r",
									"\r",
									"// Gerando o número de residência e armazenando como variável de ambiente\r",
									"const numeroResidenciaGerado = gerarNumeroResidencia();\r",
									"pm.environment.set(\"numeroResidencia\", numeroResidenciaGerado);\r",
									"\r",
									"function bairro() {\r",
									"    const names = ['Leblon', 'Ipanema', 'Copacabana', 'Barra da Tijuca', 'Botafogo', 'Lapa', 'Santa Teresa', 'Jardim Botânico', 'Flamengo', 'São Conrado', 'Moema', 'Vila Madalena', 'Pinheiros', 'Jardins', 'Aclimação', 'Brooklin', 'Tatuapé', 'Vila Progredior', 'Vila Nova Conceição', 'Campo Belo','Centro', 'Praia de Belas', 'Moinhos de Vento', 'Petrópolis', 'Tristeza', 'Caminho das Árvores', 'Pituba', 'Stella Maris', 'Parque Atlântico', 'Costa Azul', 'Vila Galvão', 'Santo Amaro', 'Perdizes', 'Aclimação', 'Vila Sônia', 'Cidade Dutra', 'São Bernardo do Campo', 'Vila Mariana', 'Bela Vista', 'Liberdade','Pinheiros', 'Itaim Bibi', 'Santa Cecília', 'Tucuruvi', 'Chácara Santo Antônio', 'Água Fria', 'Vila Olímpia', 'Vila São Francisco', 'Consolação', 'Vila Madalena']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Bairro\", bairro())\r",
									"\r",
									"function cidade() {\r",
									"    const names = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador', 'Curitiba', 'Fortaleza', 'Recife', 'Brasília', 'Manaus', 'Vitória', 'Goiânia', 'Belém', 'Natal', 'São Luís', 'Maceió', 'Campo Grande', 'João Pessoa', 'Aracaju', 'Cuiabá', 'Florianópolis', 'Teresina', 'Palmas', 'Macapá', 'Rio Branco', 'Boa Vista', 'Porto Velho', 'Anápolis', 'Caruaru', 'Londrina','Marabá', 'Araraquara', 'Sorocaba', 'Santos', 'Niterói', 'Mogi das Cruzes', 'Caxias do Sul', 'Barueri', 'Campinas', 'São José', 'Ponta Grossa', 'Jundiaí', 'Uberlândia', 'Diadema', 'Santo André', 'São Bernardo do Campo', 'Itaquaquecetuba', 'Ribeirão Preto', 'Juiz de Fora']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Cidade\", cidade())\r",
									"\r",
									"function abreviacao() {\r",
									"    const names = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"AbreviacaoEstado\", abreviacao())\r",
									"\r",
									"function randomCep() {\r",
									"    let randomCep = '';\r",
									"   \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        randomCep += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCep;\r",
									"}\r",
									"pm.environment.set(\"cep\", randomCep());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomeEmpresa}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"{{fullnameUser}}\",\r\n  \"telephone\": \"{{telefone}}\",\r\n  \"serviceDescription\": \"{{Descricao}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{cep}}\",\r\n      \"city\": \"Coxinha > Sushi\",\r\n      \"state\": \"{{AbreviacaoEstado}}\",\r\n      \"district\": \"{{Bairro}}\",\r\n      \"street\": \"{{logradouroCompleto}}\",\r\n      \"number\": \"{{numeroResidencia}}\",\r\n      \"complement\": \"\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTM0MSwiZXhwIjoxNzM5MzE1NzQxfQ.cgJqYe74cprHCRTY9YLF_B-Hfgfp8l8lr6gDrEuqMi4' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"corporateName\": \"Matheus Sousa Testes\",\r\n  \"registerCompany\": \"57126456000155\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com o campo Cidade com numeros",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function empresa() {\r",
									"    const names = [\"TechNova\", \"Bytewave\", \"Cyberion\", \"InovaTech\", \"Nexabyte\", \"Softtron\", \"Codeverse\", \"Dataflux\", \"Infinitron\", \"LogiCore\", \"Zentek\",\"Neurobyte\", \"Cloudix\", \"Sysnova\", \"Hexabit\", \"AIgorithm\", \"Quantumix\", \"Webtron\", \"Netflux\", \"Cyberflux\", \"Deepcode\", \"Techpulse\", \"Synaptech\", \"Codexis\", \"Nexonix\", \"Algobyte\", \"Infobyte\", \"Datazen\", \"Digiflow\", \"Innovix\", \"Coretron\", \"Zybernet\", \"Neurotech\", \"Nanobyte\", \"Virtunix\", \"Codexel\", \"Optibit\", \"Bitnova\", \"Globotron\", \"Digiware\", \"Skytech\", \"Cybervox\", \"Techspire\", \"Softbit\", \"MetaTech\", \"Synthron\", \"Virtuabyte\", \"Cloudtron\", \"Algonix\", \"Bitzen\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Empresa\", empresa())\r",
									"\r",
									"function tag() {\r",
									"    const tagnames = ['Solutions', 'Tech', 'Digital', 'Systems', 'Software', 'Cloud', 'AI', 'Cyber', 'Data', 'Analytics','Network', 'Security', 'Labs', 'Smart', 'Logic', 'Innovation', 'IT', 'Global', 'Developers', 'Code', 'Techno', 'Automations', 'Cloudware', 'Dynamics', 'Vision', 'Intelligence', 'NextGen', 'Computing', 'Innovators', 'Engineering', 'Performance', 'Softworks', 'Logicware', 'Digitalware', 'Transform', 'Platform', 'Smartware', 'Dataflow', 'Byte', 'Edge', 'Nexus', 'Techworks', 'Bit', 'Virtual', 'SystemsX', 'Infotech', 'Genix', 'Quantum', 'Bitware', 'CloudX'];\r",
									"\r",
									"    const randomTastName = tagnames[Math.floor(Math.random() * tagnames.length)]\r",
									"    return randomTastName\r",
									"}\r",
									"pm.environment.set(\"Tag\", tag())\r",
									"\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"Empresa\") + \" \" + pm.environment.get(\"Tag\"))\r",
									"\r",
									"\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"\r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									"\r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									"\r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									"\r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									"\r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									"\r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"CNPJ\", cnpjGerado);\r",
									"\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function gerarTelefone() {\r",
									"    // Gerando um DDD aleatório entre 11 e 99\r",
									"    const ddd = Math.floor(Math.random() * (99 - 11 + 1)) + 11;\r",
									"\r",
									"    // Gerando o número de telefone com 9 dígitos, começando com 9\r",
									"    const numero = Math.floor(Math.random() * 100000000) + 900000000; // Gera um número aleatório entre 900000000 e 999999999 (começando com '9')\r",
									"\r",
									"    // Concatenando +55, o DDD e o número gerado para formar o telefone\r",
									"    const telefone = `55${ddd}${numero.toString().slice(0, 5)}${numero.toString().slice(5, 9)}`;\r",
									"\r",
									"    return telefone;\r",
									"}\r",
									"\r",
									"// Gerando o número de telefone e armazenando como variável de ambiente\r",
									"const telefoneGerado = gerarTelefone();\r",
									"pm.environment.set(\"telefone\", telefoneGerado);\r",
									"\r",
									"function descricao() {\r",
									"    const names = [\"Testes\", \"Automação\", \"FrontEnd\", \"Backend\",\"Banco de Dados\", \"IA\",\"AWS\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Descricao\", descricao())\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"NomeRua\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"NomeRuas\", lastname())\r",
									"\r",
									"pm.environment.set(\"nomeruaComposto\", \r",
									"    pm.environment.get(\"NomeRua\") + \" \" + pm.environment.get(\"NomeRuas\"))\r",
									"\r",
									"function logradouro() {\r",
									"    const names = [\"Avenida\", \"Rua\", \"Alameda\", \"Travessa\", \"Praça\", \"Rodovia\", \"Estrada\", \"Largo\", \"Viaduto\", \"Marginal\", \"Parque\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Logradouro\", logradouro())\r",
									"\r",
									"pm.environment.set(\"logradouroCompleto\", \r",
									"    pm.environment.get(\"Logradouro\") + \" \" + pm.environment.get(\"nomeruaComposto\"))\r",
									"\r",
									"\r",
									"function gerarNumeroResidencia() {\r",
									"    // Definindo a probabilidade de gerar números com mais de 5 caracteres\r",
									"    const tamanhoNumero = Math.random() < 0.8 ? Math.floor(Math.random() * 5) + 1 : Math.floor(Math.random() * 6) + 5;\r",
									"\r",
									"    // Gerando um número aleatório com o tamanho definido\r",
									"    let numeroResidencia = Math.floor(Math.random() * Math.pow(10, tamanhoNumero)).toString(); // Gera número aleatório com o tamanho desejado\r",
									"\r",
									"    // Se o primeiro caractere for 0, remove-o\r",
									"    if (numeroResidencia[0] === '0') {\r",
									"        numeroResidencia = numeroResidencia.slice(1); // Remove o primeiro caractere\r",
									"    }\r",
									"\r",
									"    // Garantindo que o número tenha no máximo 10 caracteres\r",
									"    if (numeroResidencia.length > 10) {\r",
									"        numeroResidencia = numeroResidencia.slice(0, 10); // Limita a 10 caracteres\r",
									"    }\r",
									"\r",
									"    return numeroResidencia;\r",
									"}\r",
									"\r",
									"// Gerando o número de residência e armazenando como variável de ambiente\r",
									"const numeroResidenciaGerado = gerarNumeroResidencia();\r",
									"pm.environment.set(\"numeroResidencia\", numeroResidenciaGerado);\r",
									"\r",
									"function bairro() {\r",
									"    const names = ['Leblon', 'Ipanema', 'Copacabana', 'Barra da Tijuca', 'Botafogo', 'Lapa', 'Santa Teresa', 'Jardim Botânico', 'Flamengo', 'São Conrado', 'Moema', 'Vila Madalena', 'Pinheiros', 'Jardins', 'Aclimação', 'Brooklin', 'Tatuapé', 'Vila Progredior', 'Vila Nova Conceição', 'Campo Belo','Centro', 'Praia de Belas', 'Moinhos de Vento', 'Petrópolis', 'Tristeza', 'Caminho das Árvores', 'Pituba', 'Stella Maris', 'Parque Atlântico', 'Costa Azul', 'Vila Galvão', 'Santo Amaro', 'Perdizes', 'Aclimação', 'Vila Sônia', 'Cidade Dutra', 'São Bernardo do Campo', 'Vila Mariana', 'Bela Vista', 'Liberdade','Pinheiros', 'Itaim Bibi', 'Santa Cecília', 'Tucuruvi', 'Chácara Santo Antônio', 'Água Fria', 'Vila Olímpia', 'Vila São Francisco', 'Consolação', 'Vila Madalena']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Bairro\", bairro())\r",
									"\r",
									"function cidade() {\r",
									"    const names = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador', 'Curitiba', 'Fortaleza', 'Recife', 'Brasília', 'Manaus', 'Vitória', 'Goiânia', 'Belém', 'Natal', 'São Luís', 'Maceió', 'Campo Grande', 'João Pessoa', 'Aracaju', 'Cuiabá', 'Florianópolis', 'Teresina', 'Palmas', 'Macapá', 'Rio Branco', 'Boa Vista', 'Porto Velho', 'Anápolis', 'Caruaru', 'Londrina','Marabá', 'Araraquara', 'Sorocaba', 'Santos', 'Niterói', 'Mogi das Cruzes', 'Caxias do Sul', 'Barueri', 'Campinas', 'São José', 'Ponta Grossa', 'Jundiaí', 'Uberlândia', 'Diadema', 'Santo André', 'São Bernardo do Campo', 'Itaquaquecetuba', 'Ribeirão Preto', 'Juiz de Fora']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Cidade\", cidade())\r",
									"\r",
									"function abreviacao() {\r",
									"    const names = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"AbreviacaoEstado\", abreviacao())\r",
									"\r",
									"function randomCep() {\r",
									"    let randomCep = '';\r",
									"   \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        randomCep += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCep;\r",
									"}\r",
									"pm.environment.set(\"cep\", randomCep());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomeEmpresa}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"{{fullnameUser}}\",\r\n  \"telephone\": \"{{telefone}}\",\r\n  \"serviceDescription\": \"{{Descricao}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{cep}}\",\r\n      \"city\": \"Tatuape 10\",\r\n      \"state\": \"{{AbreviacaoEstado}}\",\r\n      \"district\": \"{{Bairro}}\",\r\n      \"street\": \"{{logradouroCompleto}}\",\r\n      \"number\": \"{{numeroResidencia}}\",\r\n      \"complement\": \"\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTM0MSwiZXhwIjoxNzM5MzE1NzQxfQ.cgJqYe74cprHCRTY9YLF_B-Hfgfp8l8lr6gDrEuqMi4' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"corporateName\": \"Matheus Sousa Testes\",\r\n  \"registerCompany\": \"57126456000155\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com o campo Cidade com mais de 50 caracteres",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function empresa() {\r",
									"    const names = [\"TechNova\", \"Bytewave\", \"Cyberion\", \"InovaTech\", \"Nexabyte\", \"Softtron\", \"Codeverse\", \"Dataflux\", \"Infinitron\", \"LogiCore\", \"Zentek\",\"Neurobyte\", \"Cloudix\", \"Sysnova\", \"Hexabit\", \"AIgorithm\", \"Quantumix\", \"Webtron\", \"Netflux\", \"Cyberflux\", \"Deepcode\", \"Techpulse\", \"Synaptech\", \"Codexis\", \"Nexonix\", \"Algobyte\", \"Infobyte\", \"Datazen\", \"Digiflow\", \"Innovix\", \"Coretron\", \"Zybernet\", \"Neurotech\", \"Nanobyte\", \"Virtunix\", \"Codexel\", \"Optibit\", \"Bitnova\", \"Globotron\", \"Digiware\", \"Skytech\", \"Cybervox\", \"Techspire\", \"Softbit\", \"MetaTech\", \"Synthron\", \"Virtuabyte\", \"Cloudtron\", \"Algonix\", \"Bitzen\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Empresa\", empresa())\r",
									"\r",
									"function tag() {\r",
									"    const tagnames = ['Solutions', 'Tech', 'Digital', 'Systems', 'Software', 'Cloud', 'AI', 'Cyber', 'Data', 'Analytics','Network', 'Security', 'Labs', 'Smart', 'Logic', 'Innovation', 'IT', 'Global', 'Developers', 'Code', 'Techno', 'Automations', 'Cloudware', 'Dynamics', 'Vision', 'Intelligence', 'NextGen', 'Computing', 'Innovators', 'Engineering', 'Performance', 'Softworks', 'Logicware', 'Digitalware', 'Transform', 'Platform', 'Smartware', 'Dataflow', 'Byte', 'Edge', 'Nexus', 'Techworks', 'Bit', 'Virtual', 'SystemsX', 'Infotech', 'Genix', 'Quantum', 'Bitware', 'CloudX'];\r",
									"\r",
									"    const randomTastName = tagnames[Math.floor(Math.random() * tagnames.length)]\r",
									"    return randomTastName\r",
									"}\r",
									"pm.environment.set(\"Tag\", tag())\r",
									"\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"Empresa\") + \" \" + pm.environment.get(\"Tag\"))\r",
									"\r",
									"\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"\r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									"\r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									"\r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									"\r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									"\r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									"\r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"CNPJ\", cnpjGerado);\r",
									"\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function gerarTelefone() {\r",
									"    // Gerando um DDD aleatório entre 11 e 99\r",
									"    const ddd = Math.floor(Math.random() * (99 - 11 + 1)) + 11;\r",
									"\r",
									"    // Gerando o número de telefone com 9 dígitos, começando com 9\r",
									"    const numero = Math.floor(Math.random() * 100000000) + 900000000; // Gera um número aleatório entre 900000000 e 999999999 (começando com '9')\r",
									"\r",
									"    // Concatenando +55, o DDD e o número gerado para formar o telefone\r",
									"    const telefone = `55${ddd}${numero.toString().slice(0, 5)}${numero.toString().slice(5, 9)}`;\r",
									"\r",
									"    return telefone;\r",
									"}\r",
									"\r",
									"// Gerando o número de telefone e armazenando como variável de ambiente\r",
									"const telefoneGerado = gerarTelefone();\r",
									"pm.environment.set(\"telefone\", telefoneGerado);\r",
									"\r",
									"function descricao() {\r",
									"    const names = [\"Testes\", \"Automação\", \"FrontEnd\", \"Backend\",\"Banco de Dados\", \"IA\",\"AWS\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Descricao\", descricao())\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"NomeRua\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"NomeRuas\", lastname())\r",
									"\r",
									"pm.environment.set(\"nomeruaComposto\", \r",
									"    pm.environment.get(\"NomeRua\") + \" \" + pm.environment.get(\"NomeRuas\"))\r",
									"\r",
									"function logradouro() {\r",
									"    const names = [\"Avenida\", \"Rua\", \"Alameda\", \"Travessa\", \"Praça\", \"Rodovia\", \"Estrada\", \"Largo\", \"Viaduto\", \"Marginal\", \"Parque\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Logradouro\", logradouro())\r",
									"\r",
									"pm.environment.set(\"logradouroCompleto\", \r",
									"    pm.environment.get(\"Logradouro\") + \" \" + pm.environment.get(\"nomeruaComposto\"))\r",
									"\r",
									"\r",
									"function gerarNumeroResidencia() {\r",
									"    // Definindo a probabilidade de gerar números com mais de 5 caracteres\r",
									"    const tamanhoNumero = Math.random() < 0.8 ? Math.floor(Math.random() * 5) + 1 : Math.floor(Math.random() * 6) + 5;\r",
									"\r",
									"    // Gerando um número aleatório com o tamanho definido\r",
									"    let numeroResidencia = Math.floor(Math.random() * Math.pow(10, tamanhoNumero)).toString(); // Gera número aleatório com o tamanho desejado\r",
									"\r",
									"    // Se o primeiro caractere for 0, remove-o\r",
									"    if (numeroResidencia[0] === '0') {\r",
									"        numeroResidencia = numeroResidencia.slice(1); // Remove o primeiro caractere\r",
									"    }\r",
									"\r",
									"    // Garantindo que o número tenha no máximo 10 caracteres\r",
									"    if (numeroResidencia.length > 10) {\r",
									"        numeroResidencia = numeroResidencia.slice(0, 10); // Limita a 10 caracteres\r",
									"    }\r",
									"\r",
									"    return numeroResidencia;\r",
									"}\r",
									"\r",
									"// Gerando o número de residência e armazenando como variável de ambiente\r",
									"const numeroResidenciaGerado = gerarNumeroResidencia();\r",
									"pm.environment.set(\"numeroResidencia\", numeroResidenciaGerado);\r",
									"\r",
									"function bairro() {\r",
									"    const names = ['Leblon', 'Ipanema', 'Copacabana', 'Barra da Tijuca', 'Botafogo', 'Lapa', 'Santa Teresa', 'Jardim Botânico', 'Flamengo', 'São Conrado', 'Moema', 'Vila Madalena', 'Pinheiros', 'Jardins', 'Aclimação', 'Brooklin', 'Tatuapé', 'Vila Progredior', 'Vila Nova Conceição', 'Campo Belo','Centro', 'Praia de Belas', 'Moinhos de Vento', 'Petrópolis', 'Tristeza', 'Caminho das Árvores', 'Pituba', 'Stella Maris', 'Parque Atlântico', 'Costa Azul', 'Vila Galvão', 'Santo Amaro', 'Perdizes', 'Aclimação', 'Vila Sônia', 'Cidade Dutra', 'São Bernardo do Campo', 'Vila Mariana', 'Bela Vista', 'Liberdade','Pinheiros', 'Itaim Bibi', 'Santa Cecília', 'Tucuruvi', 'Chácara Santo Antônio', 'Água Fria', 'Vila Olímpia', 'Vila São Francisco', 'Consolação', 'Vila Madalena']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Bairro\", bairro())\r",
									"\r",
									"function cidade() {\r",
									"    const names = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador', 'Curitiba', 'Fortaleza', 'Recife', 'Brasília', 'Manaus', 'Vitória', 'Goiânia', 'Belém', 'Natal', 'São Luís', 'Maceió', 'Campo Grande', 'João Pessoa', 'Aracaju', 'Cuiabá', 'Florianópolis', 'Teresina', 'Palmas', 'Macapá', 'Rio Branco', 'Boa Vista', 'Porto Velho', 'Anápolis', 'Caruaru', 'Londrina','Marabá', 'Araraquara', 'Sorocaba', 'Santos', 'Niterói', 'Mogi das Cruzes', 'Caxias do Sul', 'Barueri', 'Campinas', 'São José', 'Ponta Grossa', 'Jundiaí', 'Uberlândia', 'Diadema', 'Santo André', 'São Bernardo do Campo', 'Itaquaquecetuba', 'Ribeirão Preto', 'Juiz de Fora']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Cidade\", cidade())\r",
									"\r",
									"function abreviacao() {\r",
									"    const names = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"AbreviacaoEstado\", abreviacao())\r",
									"\r",
									"function randomCep() {\r",
									"    let randomCep = '';\r",
									"   \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        randomCep += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCep;\r",
									"}\r",
									"pm.environment.set(\"cep\", randomCep());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomeEmpresa}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"{{fullnameUser}}\",\r\n  \"telephone\": \"{{telefone}}\",\r\n  \"serviceDescription\": \"{{Descricao}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{cep}}\",\r\n      \"city\": \"São Jose dos Campos São Jose do Rio Petro São Paulo Curitiba Porto Alegre Fortaleza Manaus Distrito Federal Goiana\",\r\n      \"state\": \"{{AbreviacaoEstado}}\",\r\n      \"district\": \"{{Bairro}}\",\r\n      \"street\": \"{{logradouroCompleto}}\",\r\n      \"number\": \"{{numeroResidencia}}\",\r\n      \"complement\": \"\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTM0MSwiZXhwIjoxNzM5MzE1NzQxfQ.cgJqYe74cprHCRTY9YLF_B-Hfgfp8l8lr6gDrEuqMi4' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"corporateName\": \"Matheus Sousa Testes\",\r\n  \"registerCompany\": \"57126456000155\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com o campo Estado em branco",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function empresa() {\r",
									"    const names = [\"TechNova\", \"Bytewave\", \"Cyberion\", \"InovaTech\", \"Nexabyte\", \"Softtron\", \"Codeverse\", \"Dataflux\", \"Infinitron\", \"LogiCore\", \"Zentek\",\"Neurobyte\", \"Cloudix\", \"Sysnova\", \"Hexabit\", \"AIgorithm\", \"Quantumix\", \"Webtron\", \"Netflux\", \"Cyberflux\", \"Deepcode\", \"Techpulse\", \"Synaptech\", \"Codexis\", \"Nexonix\", \"Algobyte\", \"Infobyte\", \"Datazen\", \"Digiflow\", \"Innovix\", \"Coretron\", \"Zybernet\", \"Neurotech\", \"Nanobyte\", \"Virtunix\", \"Codexel\", \"Optibit\", \"Bitnova\", \"Globotron\", \"Digiware\", \"Skytech\", \"Cybervox\", \"Techspire\", \"Softbit\", \"MetaTech\", \"Synthron\", \"Virtuabyte\", \"Cloudtron\", \"Algonix\", \"Bitzen\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Empresa\", empresa())\r",
									"\r",
									"function tag() {\r",
									"    const tagnames = ['Solutions', 'Tech', 'Digital', 'Systems', 'Software', 'Cloud', 'AI', 'Cyber', 'Data', 'Analytics','Network', 'Security', 'Labs', 'Smart', 'Logic', 'Innovation', 'IT', 'Global', 'Developers', 'Code', 'Techno', 'Automations', 'Cloudware', 'Dynamics', 'Vision', 'Intelligence', 'NextGen', 'Computing', 'Innovators', 'Engineering', 'Performance', 'Softworks', 'Logicware', 'Digitalware', 'Transform', 'Platform', 'Smartware', 'Dataflow', 'Byte', 'Edge', 'Nexus', 'Techworks', 'Bit', 'Virtual', 'SystemsX', 'Infotech', 'Genix', 'Quantum', 'Bitware', 'CloudX'];\r",
									"\r",
									"    const randomTastName = tagnames[Math.floor(Math.random() * tagnames.length)]\r",
									"    return randomTastName\r",
									"}\r",
									"pm.environment.set(\"Tag\", tag())\r",
									"\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"Empresa\") + \" \" + pm.environment.get(\"Tag\"))\r",
									"\r",
									"\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"\r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									"\r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									"\r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									"\r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									"\r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									"\r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"CNPJ\", cnpjGerado);\r",
									"\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function gerarTelefone() {\r",
									"    // Gerando um DDD aleatório entre 11 e 99\r",
									"    const ddd = Math.floor(Math.random() * (99 - 11 + 1)) + 11;\r",
									"\r",
									"    // Gerando o número de telefone com 9 dígitos, começando com 9\r",
									"    const numero = Math.floor(Math.random() * 100000000) + 900000000; // Gera um número aleatório entre 900000000 e 999999999 (começando com '9')\r",
									"\r",
									"    // Concatenando +55, o DDD e o número gerado para formar o telefone\r",
									"    const telefone = `55${ddd}${numero.toString().slice(0, 5)}${numero.toString().slice(5, 9)}`;\r",
									"\r",
									"    return telefone;\r",
									"}\r",
									"\r",
									"// Gerando o número de telefone e armazenando como variável de ambiente\r",
									"const telefoneGerado = gerarTelefone();\r",
									"pm.environment.set(\"telefone\", telefoneGerado);\r",
									"\r",
									"function descricao() {\r",
									"    const names = [\"Testes\", \"Automação\", \"FrontEnd\", \"Backend\",\"Banco de Dados\", \"IA\",\"AWS\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Descricao\", descricao())\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"NomeRua\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"NomeRuas\", lastname())\r",
									"\r",
									"pm.environment.set(\"nomeruaComposto\", \r",
									"    pm.environment.get(\"NomeRua\") + \" \" + pm.environment.get(\"NomeRuas\"))\r",
									"\r",
									"function logradouro() {\r",
									"    const names = [\"Avenida\", \"Rua\", \"Alameda\", \"Travessa\", \"Praça\", \"Rodovia\", \"Estrada\", \"Largo\", \"Viaduto\", \"Marginal\", \"Parque\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Logradouro\", logradouro())\r",
									"\r",
									"pm.environment.set(\"logradouroCompleto\", \r",
									"    pm.environment.get(\"Logradouro\") + \" \" + pm.environment.get(\"nomeruaComposto\"))\r",
									"\r",
									"\r",
									"function gerarNumeroResidencia() {\r",
									"    // Definindo a probabilidade de gerar números com mais de 5 caracteres\r",
									"    const tamanhoNumero = Math.random() < 0.8 ? Math.floor(Math.random() * 5) + 1 : Math.floor(Math.random() * 6) + 5;\r",
									"\r",
									"    // Gerando um número aleatório com o tamanho definido\r",
									"    let numeroResidencia = Math.floor(Math.random() * Math.pow(10, tamanhoNumero)).toString(); // Gera número aleatório com o tamanho desejado\r",
									"\r",
									"    // Se o primeiro caractere for 0, remove-o\r",
									"    if (numeroResidencia[0] === '0') {\r",
									"        numeroResidencia = numeroResidencia.slice(1); // Remove o primeiro caractere\r",
									"    }\r",
									"\r",
									"    // Garantindo que o número tenha no máximo 10 caracteres\r",
									"    if (numeroResidencia.length > 10) {\r",
									"        numeroResidencia = numeroResidencia.slice(0, 10); // Limita a 10 caracteres\r",
									"    }\r",
									"\r",
									"    return numeroResidencia;\r",
									"}\r",
									"\r",
									"// Gerando o número de residência e armazenando como variável de ambiente\r",
									"const numeroResidenciaGerado = gerarNumeroResidencia();\r",
									"pm.environment.set(\"numeroResidencia\", numeroResidenciaGerado);\r",
									"\r",
									"function bairro() {\r",
									"    const names = ['Leblon', 'Ipanema', 'Copacabana', 'Barra da Tijuca', 'Botafogo', 'Lapa', 'Santa Teresa', 'Jardim Botânico', 'Flamengo', 'São Conrado', 'Moema', 'Vila Madalena', 'Pinheiros', 'Jardins', 'Aclimação', 'Brooklin', 'Tatuapé', 'Vila Progredior', 'Vila Nova Conceição', 'Campo Belo','Centro', 'Praia de Belas', 'Moinhos de Vento', 'Petrópolis', 'Tristeza', 'Caminho das Árvores', 'Pituba', 'Stella Maris', 'Parque Atlântico', 'Costa Azul', 'Vila Galvão', 'Santo Amaro', 'Perdizes', 'Aclimação', 'Vila Sônia', 'Cidade Dutra', 'São Bernardo do Campo', 'Vila Mariana', 'Bela Vista', 'Liberdade','Pinheiros', 'Itaim Bibi', 'Santa Cecília', 'Tucuruvi', 'Chácara Santo Antônio', 'Água Fria', 'Vila Olímpia', 'Vila São Francisco', 'Consolação', 'Vila Madalena']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Bairro\", bairro())\r",
									"\r",
									"function cidade() {\r",
									"    const names = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador', 'Curitiba', 'Fortaleza', 'Recife', 'Brasília', 'Manaus', 'Vitória', 'Goiânia', 'Belém', 'Natal', 'São Luís', 'Maceió', 'Campo Grande', 'João Pessoa', 'Aracaju', 'Cuiabá', 'Florianópolis', 'Teresina', 'Palmas', 'Macapá', 'Rio Branco', 'Boa Vista', 'Porto Velho', 'Anápolis', 'Caruaru', 'Londrina','Marabá', 'Araraquara', 'Sorocaba', 'Santos', 'Niterói', 'Mogi das Cruzes', 'Caxias do Sul', 'Barueri', 'Campinas', 'São José', 'Ponta Grossa', 'Jundiaí', 'Uberlândia', 'Diadema', 'Santo André', 'São Bernardo do Campo', 'Itaquaquecetuba', 'Ribeirão Preto', 'Juiz de Fora']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Cidade\", cidade())\r",
									"\r",
									"function abreviacao() {\r",
									"    const names = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"AbreviacaoEstado\", abreviacao())\r",
									"\r",
									"function randomCep() {\r",
									"    let randomCep = '';\r",
									"   \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        randomCep += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCep;\r",
									"}\r",
									"pm.environment.set(\"cep\", randomCep());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Mensagem de erro\",function(){\r",
									"     pm.expect(pm.response.json().error[0]).to.equal(\"O campo Estado é obrigatório\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomeEmpresa}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"{{fullnameUser}}\",\r\n  \"telephone\": \"{{telefone}}\",\r\n  \"serviceDescription\": \"{{Descricao}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{cep}}\",\r\n      \"city\": \"{{Cidade}}\",\r\n      \"state\": \"\",\r\n      \"district\": \"{{Bairro}}\",\r\n      \"street\": \"{{logradouroCompleto}}\",\r\n      \"number\": \"{{numeroResidencia}}\",\r\n      \"complement\": \"\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTM0MSwiZXhwIjoxNzM5MzE1NzQxfQ.cgJqYe74cprHCRTY9YLF_B-Hfgfp8l8lr6gDrEuqMi4' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"corporateName\": \"Matheus Sousa Testes\",\r\n  \"registerCompany\": \"57126456000155\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com o campo Estado com numero",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function empresa() {\r",
									"    const names = [\"TechNova\", \"Bytewave\", \"Cyberion\", \"InovaTech\", \"Nexabyte\", \"Softtron\", \"Codeverse\", \"Dataflux\", \"Infinitron\", \"LogiCore\", \"Zentek\",\"Neurobyte\", \"Cloudix\", \"Sysnova\", \"Hexabit\", \"AIgorithm\", \"Quantumix\", \"Webtron\", \"Netflux\", \"Cyberflux\", \"Deepcode\", \"Techpulse\", \"Synaptech\", \"Codexis\", \"Nexonix\", \"Algobyte\", \"Infobyte\", \"Datazen\", \"Digiflow\", \"Innovix\", \"Coretron\", \"Zybernet\", \"Neurotech\", \"Nanobyte\", \"Virtunix\", \"Codexel\", \"Optibit\", \"Bitnova\", \"Globotron\", \"Digiware\", \"Skytech\", \"Cybervox\", \"Techspire\", \"Softbit\", \"MetaTech\", \"Synthron\", \"Virtuabyte\", \"Cloudtron\", \"Algonix\", \"Bitzen\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Empresa\", empresa())\r",
									"\r",
									"function tag() {\r",
									"    const tagnames = ['Solutions', 'Tech', 'Digital', 'Systems', 'Software', 'Cloud', 'AI', 'Cyber', 'Data', 'Analytics','Network', 'Security', 'Labs', 'Smart', 'Logic', 'Innovation', 'IT', 'Global', 'Developers', 'Code', 'Techno', 'Automations', 'Cloudware', 'Dynamics', 'Vision', 'Intelligence', 'NextGen', 'Computing', 'Innovators', 'Engineering', 'Performance', 'Softworks', 'Logicware', 'Digitalware', 'Transform', 'Platform', 'Smartware', 'Dataflow', 'Byte', 'Edge', 'Nexus', 'Techworks', 'Bit', 'Virtual', 'SystemsX', 'Infotech', 'Genix', 'Quantum', 'Bitware', 'CloudX'];\r",
									"\r",
									"    const randomTastName = tagnames[Math.floor(Math.random() * tagnames.length)]\r",
									"    return randomTastName\r",
									"}\r",
									"pm.environment.set(\"Tag\", tag())\r",
									"\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"Empresa\") + \" \" + pm.environment.get(\"Tag\"))\r",
									"\r",
									"\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"\r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									"\r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									"\r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									"\r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									"\r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									"\r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"CNPJ\", cnpjGerado);\r",
									"\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function gerarTelefone() {\r",
									"    // Gerando um DDD aleatório entre 11 e 99\r",
									"    const ddd = Math.floor(Math.random() * (99 - 11 + 1)) + 11;\r",
									"\r",
									"    // Gerando o número de telefone com 9 dígitos, começando com 9\r",
									"    const numero = Math.floor(Math.random() * 100000000) + 900000000; // Gera um número aleatório entre 900000000 e 999999999 (começando com '9')\r",
									"\r",
									"    // Concatenando +55, o DDD e o número gerado para formar o telefone\r",
									"    const telefone = `55${ddd}${numero.toString().slice(0, 5)}${numero.toString().slice(5, 9)}`;\r",
									"\r",
									"    return telefone;\r",
									"}\r",
									"\r",
									"// Gerando o número de telefone e armazenando como variável de ambiente\r",
									"const telefoneGerado = gerarTelefone();\r",
									"pm.environment.set(\"telefone\", telefoneGerado);\r",
									"\r",
									"function descricao() {\r",
									"    const names = [\"Testes\", \"Automação\", \"FrontEnd\", \"Backend\",\"Banco de Dados\", \"IA\",\"AWS\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Descricao\", descricao())\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"NomeRua\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"NomeRuas\", lastname())\r",
									"\r",
									"pm.environment.set(\"nomeruaComposto\", \r",
									"    pm.environment.get(\"NomeRua\") + \" \" + pm.environment.get(\"NomeRuas\"))\r",
									"\r",
									"function logradouro() {\r",
									"    const names = [\"Avenida\", \"Rua\", \"Alameda\", \"Travessa\", \"Praça\", \"Rodovia\", \"Estrada\", \"Largo\", \"Viaduto\", \"Marginal\", \"Parque\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Logradouro\", logradouro())\r",
									"\r",
									"pm.environment.set(\"logradouroCompleto\", \r",
									"    pm.environment.get(\"Logradouro\") + \" \" + pm.environment.get(\"nomeruaComposto\"))\r",
									"\r",
									"\r",
									"function gerarNumeroResidencia() {\r",
									"    // Definindo a probabilidade de gerar números com mais de 5 caracteres\r",
									"    const tamanhoNumero = Math.random() < 0.8 ? Math.floor(Math.random() * 5) + 1 : Math.floor(Math.random() * 6) + 5;\r",
									"\r",
									"    // Gerando um número aleatório com o tamanho definido\r",
									"    let numeroResidencia = Math.floor(Math.random() * Math.pow(10, tamanhoNumero)).toString(); // Gera número aleatório com o tamanho desejado\r",
									"\r",
									"    // Se o primeiro caractere for 0, remove-o\r",
									"    if (numeroResidencia[0] === '0') {\r",
									"        numeroResidencia = numeroResidencia.slice(1); // Remove o primeiro caractere\r",
									"    }\r",
									"\r",
									"    // Garantindo que o número tenha no máximo 10 caracteres\r",
									"    if (numeroResidencia.length > 10) {\r",
									"        numeroResidencia = numeroResidencia.slice(0, 10); // Limita a 10 caracteres\r",
									"    }\r",
									"\r",
									"    return numeroResidencia;\r",
									"}\r",
									"\r",
									"// Gerando o número de residência e armazenando como variável de ambiente\r",
									"const numeroResidenciaGerado = gerarNumeroResidencia();\r",
									"pm.environment.set(\"numeroResidencia\", numeroResidenciaGerado);\r",
									"\r",
									"function bairro() {\r",
									"    const names = ['Leblon', 'Ipanema', 'Copacabana', 'Barra da Tijuca', 'Botafogo', 'Lapa', 'Santa Teresa', 'Jardim Botânico', 'Flamengo', 'São Conrado', 'Moema', 'Vila Madalena', 'Pinheiros', 'Jardins', 'Aclimação', 'Brooklin', 'Tatuapé', 'Vila Progredior', 'Vila Nova Conceição', 'Campo Belo','Centro', 'Praia de Belas', 'Moinhos de Vento', 'Petrópolis', 'Tristeza', 'Caminho das Árvores', 'Pituba', 'Stella Maris', 'Parque Atlântico', 'Costa Azul', 'Vila Galvão', 'Santo Amaro', 'Perdizes', 'Aclimação', 'Vila Sônia', 'Cidade Dutra', 'São Bernardo do Campo', 'Vila Mariana', 'Bela Vista', 'Liberdade','Pinheiros', 'Itaim Bibi', 'Santa Cecília', 'Tucuruvi', 'Chácara Santo Antônio', 'Água Fria', 'Vila Olímpia', 'Vila São Francisco', 'Consolação', 'Vila Madalena']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Bairro\", bairro())\r",
									"\r",
									"function cidade() {\r",
									"    const names = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador', 'Curitiba', 'Fortaleza', 'Recife', 'Brasília', 'Manaus', 'Vitória', 'Goiânia', 'Belém', 'Natal', 'São Luís', 'Maceió', 'Campo Grande', 'João Pessoa', 'Aracaju', 'Cuiabá', 'Florianópolis', 'Teresina', 'Palmas', 'Macapá', 'Rio Branco', 'Boa Vista', 'Porto Velho', 'Anápolis', 'Caruaru', 'Londrina','Marabá', 'Araraquara', 'Sorocaba', 'Santos', 'Niterói', 'Mogi das Cruzes', 'Caxias do Sul', 'Barueri', 'Campinas', 'São José', 'Ponta Grossa', 'Jundiaí', 'Uberlândia', 'Diadema', 'Santo André', 'São Bernardo do Campo', 'Itaquaquecetuba', 'Ribeirão Preto', 'Juiz de Fora']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Cidade\", cidade())\r",
									"\r",
									"function abreviacao() {\r",
									"    const names = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"AbreviacaoEstado\", abreviacao())\r",
									"\r",
									"function randomCep() {\r",
									"    let randomCep = '';\r",
									"   \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        randomCep += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCep;\r",
									"}\r",
									"pm.environment.set(\"cep\", randomCep());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomeEmpresa}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"{{fullnameUser}}\",\r\n  \"telephone\": \"{{telefone}}\",\r\n  \"serviceDescription\": \"{{Descricao}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{cep}}\",\r\n      \"city\": \"{{Cidade}}\",\r\n      \"state\": \"11\",\r\n      \"district\": \"{{Bairro}}\",\r\n      \"street\": \"{{logradouroCompleto}}\",\r\n      \"number\": \"{{numeroResidencia}}\",\r\n      \"complement\": \"\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTM0MSwiZXhwIjoxNzM5MzE1NzQxfQ.cgJqYe74cprHCRTY9YLF_B-Hfgfp8l8lr6gDrEuqMi4' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"corporateName\": \"Matheus Sousa Testes\",\r\n  \"registerCompany\": \"57126456000155\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com o campo Estado com caractere especial",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function empresa() {\r",
									"    const names = [\"TechNova\", \"Bytewave\", \"Cyberion\", \"InovaTech\", \"Nexabyte\", \"Softtron\", \"Codeverse\", \"Dataflux\", \"Infinitron\", \"LogiCore\", \"Zentek\",\"Neurobyte\", \"Cloudix\", \"Sysnova\", \"Hexabit\", \"AIgorithm\", \"Quantumix\", \"Webtron\", \"Netflux\", \"Cyberflux\", \"Deepcode\", \"Techpulse\", \"Synaptech\", \"Codexis\", \"Nexonix\", \"Algobyte\", \"Infobyte\", \"Datazen\", \"Digiflow\", \"Innovix\", \"Coretron\", \"Zybernet\", \"Neurotech\", \"Nanobyte\", \"Virtunix\", \"Codexel\", \"Optibit\", \"Bitnova\", \"Globotron\", \"Digiware\", \"Skytech\", \"Cybervox\", \"Techspire\", \"Softbit\", \"MetaTech\", \"Synthron\", \"Virtuabyte\", \"Cloudtron\", \"Algonix\", \"Bitzen\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Empresa\", empresa())\r",
									"\r",
									"function tag() {\r",
									"    const tagnames = ['Solutions', 'Tech', 'Digital', 'Systems', 'Software', 'Cloud', 'AI', 'Cyber', 'Data', 'Analytics','Network', 'Security', 'Labs', 'Smart', 'Logic', 'Innovation', 'IT', 'Global', 'Developers', 'Code', 'Techno', 'Automations', 'Cloudware', 'Dynamics', 'Vision', 'Intelligence', 'NextGen', 'Computing', 'Innovators', 'Engineering', 'Performance', 'Softworks', 'Logicware', 'Digitalware', 'Transform', 'Platform', 'Smartware', 'Dataflow', 'Byte', 'Edge', 'Nexus', 'Techworks', 'Bit', 'Virtual', 'SystemsX', 'Infotech', 'Genix', 'Quantum', 'Bitware', 'CloudX'];\r",
									"\r",
									"    const randomTastName = tagnames[Math.floor(Math.random() * tagnames.length)]\r",
									"    return randomTastName\r",
									"}\r",
									"pm.environment.set(\"Tag\", tag())\r",
									"\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"Empresa\") + \" \" + pm.environment.get(\"Tag\"))\r",
									"\r",
									"\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"\r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									"\r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									"\r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									"\r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									"\r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									"\r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"CNPJ\", cnpjGerado);\r",
									"\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function gerarTelefone() {\r",
									"    // Gerando um DDD aleatório entre 11 e 99\r",
									"    const ddd = Math.floor(Math.random() * (99 - 11 + 1)) + 11;\r",
									"\r",
									"    // Gerando o número de telefone com 9 dígitos, começando com 9\r",
									"    const numero = Math.floor(Math.random() * 100000000) + 900000000; // Gera um número aleatório entre 900000000 e 999999999 (começando com '9')\r",
									"\r",
									"    // Concatenando +55, o DDD e o número gerado para formar o telefone\r",
									"    const telefone = `55${ddd}${numero.toString().slice(0, 5)}${numero.toString().slice(5, 9)}`;\r",
									"\r",
									"    return telefone;\r",
									"}\r",
									"\r",
									"// Gerando o número de telefone e armazenando como variável de ambiente\r",
									"const telefoneGerado = gerarTelefone();\r",
									"pm.environment.set(\"telefone\", telefoneGerado);\r",
									"\r",
									"function descricao() {\r",
									"    const names = [\"Testes\", \"Automação\", \"FrontEnd\", \"Backend\",\"Banco de Dados\", \"IA\",\"AWS\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Descricao\", descricao())\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"NomeRua\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"NomeRuas\", lastname())\r",
									"\r",
									"pm.environment.set(\"nomeruaComposto\", \r",
									"    pm.environment.get(\"NomeRua\") + \" \" + pm.environment.get(\"NomeRuas\"))\r",
									"\r",
									"function logradouro() {\r",
									"    const names = [\"Avenida\", \"Rua\", \"Alameda\", \"Travessa\", \"Praça\", \"Rodovia\", \"Estrada\", \"Largo\", \"Viaduto\", \"Marginal\", \"Parque\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Logradouro\", logradouro())\r",
									"\r",
									"pm.environment.set(\"logradouroCompleto\", \r",
									"    pm.environment.get(\"Logradouro\") + \" \" + pm.environment.get(\"nomeruaComposto\"))\r",
									"\r",
									"\r",
									"function gerarNumeroResidencia() {\r",
									"    // Definindo a probabilidade de gerar números com mais de 5 caracteres\r",
									"    const tamanhoNumero = Math.random() < 0.8 ? Math.floor(Math.random() * 5) + 1 : Math.floor(Math.random() * 6) + 5;\r",
									"\r",
									"    // Gerando um número aleatório com o tamanho definido\r",
									"    let numeroResidencia = Math.floor(Math.random() * Math.pow(10, tamanhoNumero)).toString(); // Gera número aleatório com o tamanho desejado\r",
									"\r",
									"    // Se o primeiro caractere for 0, remove-o\r",
									"    if (numeroResidencia[0] === '0') {\r",
									"        numeroResidencia = numeroResidencia.slice(1); // Remove o primeiro caractere\r",
									"    }\r",
									"\r",
									"    // Garantindo que o número tenha no máximo 10 caracteres\r",
									"    if (numeroResidencia.length > 10) {\r",
									"        numeroResidencia = numeroResidencia.slice(0, 10); // Limita a 10 caracteres\r",
									"    }\r",
									"\r",
									"    return numeroResidencia;\r",
									"}\r",
									"\r",
									"// Gerando o número de residência e armazenando como variável de ambiente\r",
									"const numeroResidenciaGerado = gerarNumeroResidencia();\r",
									"pm.environment.set(\"numeroResidencia\", numeroResidenciaGerado);\r",
									"\r",
									"function bairro() {\r",
									"    const names = ['Leblon', 'Ipanema', 'Copacabana', 'Barra da Tijuca', 'Botafogo', 'Lapa', 'Santa Teresa', 'Jardim Botânico', 'Flamengo', 'São Conrado', 'Moema', 'Vila Madalena', 'Pinheiros', 'Jardins', 'Aclimação', 'Brooklin', 'Tatuapé', 'Vila Progredior', 'Vila Nova Conceição', 'Campo Belo','Centro', 'Praia de Belas', 'Moinhos de Vento', 'Petrópolis', 'Tristeza', 'Caminho das Árvores', 'Pituba', 'Stella Maris', 'Parque Atlântico', 'Costa Azul', 'Vila Galvão', 'Santo Amaro', 'Perdizes', 'Aclimação', 'Vila Sônia', 'Cidade Dutra', 'São Bernardo do Campo', 'Vila Mariana', 'Bela Vista', 'Liberdade','Pinheiros', 'Itaim Bibi', 'Santa Cecília', 'Tucuruvi', 'Chácara Santo Antônio', 'Água Fria', 'Vila Olímpia', 'Vila São Francisco', 'Consolação', 'Vila Madalena']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Bairro\", bairro())\r",
									"\r",
									"function cidade() {\r",
									"    const names = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador', 'Curitiba', 'Fortaleza', 'Recife', 'Brasília', 'Manaus', 'Vitória', 'Goiânia', 'Belém', 'Natal', 'São Luís', 'Maceió', 'Campo Grande', 'João Pessoa', 'Aracaju', 'Cuiabá', 'Florianópolis', 'Teresina', 'Palmas', 'Macapá', 'Rio Branco', 'Boa Vista', 'Porto Velho', 'Anápolis', 'Caruaru', 'Londrina','Marabá', 'Araraquara', 'Sorocaba', 'Santos', 'Niterói', 'Mogi das Cruzes', 'Caxias do Sul', 'Barueri', 'Campinas', 'São José', 'Ponta Grossa', 'Jundiaí', 'Uberlândia', 'Diadema', 'Santo André', 'São Bernardo do Campo', 'Itaquaquecetuba', 'Ribeirão Preto', 'Juiz de Fora']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Cidade\", cidade())\r",
									"\r",
									"function abreviacao() {\r",
									"    const names = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"AbreviacaoEstado\", abreviacao())\r",
									"\r",
									"function randomCep() {\r",
									"    let randomCep = '';\r",
									"   \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        randomCep += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCep;\r",
									"}\r",
									"pm.environment.set(\"cep\", randomCep());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomeEmpresa}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"{{fullnameUser}}\",\r\n  \"telephone\": \"{{telefone}}\",\r\n  \"serviceDescription\": \"{{Descricao}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{cep}}\",\r\n      \"city\": \"{{Cidade}}\",\r\n      \"state\": \"@M\",\r\n      \"district\": \"{{Bairro}}\",\r\n      \"street\": \"{{logradouroCompleto}}\",\r\n      \"number\": \"{{numeroResidencia}}\",\r\n      \"complement\": \"\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTM0MSwiZXhwIjoxNzM5MzE1NzQxfQ.cgJqYe74cprHCRTY9YLF_B-Hfgfp8l8lr6gDrEuqMi4' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"corporateName\": \"Matheus Sousa Testes\",\r\n  \"registerCompany\": \"57126456000155\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com o campo Estado com letra minuscula",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function empresa() {\r",
									"    const names = [\"TechNova\", \"Bytewave\", \"Cyberion\", \"InovaTech\", \"Nexabyte\", \"Softtron\", \"Codeverse\", \"Dataflux\", \"Infinitron\", \"LogiCore\", \"Zentek\",\"Neurobyte\", \"Cloudix\", \"Sysnova\", \"Hexabit\", \"AIgorithm\", \"Quantumix\", \"Webtron\", \"Netflux\", \"Cyberflux\", \"Deepcode\", \"Techpulse\", \"Synaptech\", \"Codexis\", \"Nexonix\", \"Algobyte\", \"Infobyte\", \"Datazen\", \"Digiflow\", \"Innovix\", \"Coretron\", \"Zybernet\", \"Neurotech\", \"Nanobyte\", \"Virtunix\", \"Codexel\", \"Optibit\", \"Bitnova\", \"Globotron\", \"Digiware\", \"Skytech\", \"Cybervox\", \"Techspire\", \"Softbit\", \"MetaTech\", \"Synthron\", \"Virtuabyte\", \"Cloudtron\", \"Algonix\", \"Bitzen\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Empresa\", empresa())\r",
									"\r",
									"function tag() {\r",
									"    const tagnames = ['Solutions', 'Tech', 'Digital', 'Systems', 'Software', 'Cloud', 'AI', 'Cyber', 'Data', 'Analytics','Network', 'Security', 'Labs', 'Smart', 'Logic', 'Innovation', 'IT', 'Global', 'Developers', 'Code', 'Techno', 'Automations', 'Cloudware', 'Dynamics', 'Vision', 'Intelligence', 'NextGen', 'Computing', 'Innovators', 'Engineering', 'Performance', 'Softworks', 'Logicware', 'Digitalware', 'Transform', 'Platform', 'Smartware', 'Dataflow', 'Byte', 'Edge', 'Nexus', 'Techworks', 'Bit', 'Virtual', 'SystemsX', 'Infotech', 'Genix', 'Quantum', 'Bitware', 'CloudX'];\r",
									"\r",
									"    const randomTastName = tagnames[Math.floor(Math.random() * tagnames.length)]\r",
									"    return randomTastName\r",
									"}\r",
									"pm.environment.set(\"Tag\", tag())\r",
									"\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"Empresa\") + \" \" + pm.environment.get(\"Tag\"))\r",
									"\r",
									"\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"\r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									"\r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									"\r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									"\r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									"\r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									"\r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"CNPJ\", cnpjGerado);\r",
									"\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function gerarTelefone() {\r",
									"    // Gerando um DDD aleatório entre 11 e 99\r",
									"    const ddd = Math.floor(Math.random() * (99 - 11 + 1)) + 11;\r",
									"\r",
									"    // Gerando o número de telefone com 9 dígitos, começando com 9\r",
									"    const numero = Math.floor(Math.random() * 100000000) + 900000000; // Gera um número aleatório entre 900000000 e 999999999 (começando com '9')\r",
									"\r",
									"    // Concatenando +55, o DDD e o número gerado para formar o telefone\r",
									"    const telefone = `55${ddd}${numero.toString().slice(0, 5)}${numero.toString().slice(5, 9)}`;\r",
									"\r",
									"    return telefone;\r",
									"}\r",
									"\r",
									"// Gerando o número de telefone e armazenando como variável de ambiente\r",
									"const telefoneGerado = gerarTelefone();\r",
									"pm.environment.set(\"telefone\", telefoneGerado);\r",
									"\r",
									"function descricao() {\r",
									"    const names = [\"Testes\", \"Automação\", \"FrontEnd\", \"Backend\",\"Banco de Dados\", \"IA\",\"AWS\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Descricao\", descricao())\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"NomeRua\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"NomeRuas\", lastname())\r",
									"\r",
									"pm.environment.set(\"nomeruaComposto\", \r",
									"    pm.environment.get(\"NomeRua\") + \" \" + pm.environment.get(\"NomeRuas\"))\r",
									"\r",
									"function logradouro() {\r",
									"    const names = [\"Avenida\", \"Rua\", \"Alameda\", \"Travessa\", \"Praça\", \"Rodovia\", \"Estrada\", \"Largo\", \"Viaduto\", \"Marginal\", \"Parque\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Logradouro\", logradouro())\r",
									"\r",
									"pm.environment.set(\"logradouroCompleto\", \r",
									"    pm.environment.get(\"Logradouro\") + \" \" + pm.environment.get(\"nomeruaComposto\"))\r",
									"\r",
									"\r",
									"function gerarNumeroResidencia() {\r",
									"    // Definindo a probabilidade de gerar números com mais de 5 caracteres\r",
									"    const tamanhoNumero = Math.random() < 0.8 ? Math.floor(Math.random() * 5) + 1 : Math.floor(Math.random() * 6) + 5;\r",
									"\r",
									"    // Gerando um número aleatório com o tamanho definido\r",
									"    let numeroResidencia = Math.floor(Math.random() * Math.pow(10, tamanhoNumero)).toString(); // Gera número aleatório com o tamanho desejado\r",
									"\r",
									"    // Se o primeiro caractere for 0, remove-o\r",
									"    if (numeroResidencia[0] === '0') {\r",
									"        numeroResidencia = numeroResidencia.slice(1); // Remove o primeiro caractere\r",
									"    }\r",
									"\r",
									"    // Garantindo que o número tenha no máximo 10 caracteres\r",
									"    if (numeroResidencia.length > 10) {\r",
									"        numeroResidencia = numeroResidencia.slice(0, 10); // Limita a 10 caracteres\r",
									"    }\r",
									"\r",
									"    return numeroResidencia;\r",
									"}\r",
									"\r",
									"// Gerando o número de residência e armazenando como variável de ambiente\r",
									"const numeroResidenciaGerado = gerarNumeroResidencia();\r",
									"pm.environment.set(\"numeroResidencia\", numeroResidenciaGerado);\r",
									"\r",
									"function bairro() {\r",
									"    const names = ['Leblon', 'Ipanema', 'Copacabana', 'Barra da Tijuca', 'Botafogo', 'Lapa', 'Santa Teresa', 'Jardim Botânico', 'Flamengo', 'São Conrado', 'Moema', 'Vila Madalena', 'Pinheiros', 'Jardins', 'Aclimação', 'Brooklin', 'Tatuapé', 'Vila Progredior', 'Vila Nova Conceição', 'Campo Belo','Centro', 'Praia de Belas', 'Moinhos de Vento', 'Petrópolis', 'Tristeza', 'Caminho das Árvores', 'Pituba', 'Stella Maris', 'Parque Atlântico', 'Costa Azul', 'Vila Galvão', 'Santo Amaro', 'Perdizes', 'Aclimação', 'Vila Sônia', 'Cidade Dutra', 'São Bernardo do Campo', 'Vila Mariana', 'Bela Vista', 'Liberdade','Pinheiros', 'Itaim Bibi', 'Santa Cecília', 'Tucuruvi', 'Chácara Santo Antônio', 'Água Fria', 'Vila Olímpia', 'Vila São Francisco', 'Consolação', 'Vila Madalena']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Bairro\", bairro())\r",
									"\r",
									"function cidade() {\r",
									"    const names = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador', 'Curitiba', 'Fortaleza', 'Recife', 'Brasília', 'Manaus', 'Vitória', 'Goiânia', 'Belém', 'Natal', 'São Luís', 'Maceió', 'Campo Grande', 'João Pessoa', 'Aracaju', 'Cuiabá', 'Florianópolis', 'Teresina', 'Palmas', 'Macapá', 'Rio Branco', 'Boa Vista', 'Porto Velho', 'Anápolis', 'Caruaru', 'Londrina','Marabá', 'Araraquara', 'Sorocaba', 'Santos', 'Niterói', 'Mogi das Cruzes', 'Caxias do Sul', 'Barueri', 'Campinas', 'São José', 'Ponta Grossa', 'Jundiaí', 'Uberlândia', 'Diadema', 'Santo André', 'São Bernardo do Campo', 'Itaquaquecetuba', 'Ribeirão Preto', 'Juiz de Fora']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Cidade\", cidade())\r",
									"\r",
									"function abreviacao() {\r",
									"    const names = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"AbreviacaoEstado\", abreviacao())\r",
									"\r",
									"function randomCep() {\r",
									"    let randomCep = '';\r",
									"   \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        randomCep += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCep;\r",
									"}\r",
									"pm.environment.set(\"cep\", randomCep());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Mensagem de erro\",function(){\r",
									"     pm.expect(pm.response.json().error[0]).to.equal(\"O campo Estado é obrigatório\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomeEmpresa}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"{{fullnameUser}}\",\r\n  \"telephone\": \"{{telefone}}\",\r\n  \"serviceDescription\": \"{{Descricao}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{cep}}\",\r\n      \"city\": \"{{Cidade}}\",\r\n      \"state\": \"Sp\",\r\n      \"district\": \"{{Bairro}}\",\r\n      \"street\": \"{{logradouroCompleto}}\",\r\n      \"number\": \"{{numeroResidencia}}\",\r\n      \"complement\": \"\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTM0MSwiZXhwIjoxNzM5MzE1NzQxfQ.cgJqYe74cprHCRTY9YLF_B-Hfgfp8l8lr6gDrEuqMi4' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"corporateName\": \"Matheus Sousa Testes\",\r\n  \"registerCompany\": \"57126456000155\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com o campo Estado com menos de 2 letras",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function empresa() {\r",
									"    const names = [\"TechNova\", \"Bytewave\", \"Cyberion\", \"InovaTech\", \"Nexabyte\", \"Softtron\", \"Codeverse\", \"Dataflux\", \"Infinitron\", \"LogiCore\", \"Zentek\",\"Neurobyte\", \"Cloudix\", \"Sysnova\", \"Hexabit\", \"AIgorithm\", \"Quantumix\", \"Webtron\", \"Netflux\", \"Cyberflux\", \"Deepcode\", \"Techpulse\", \"Synaptech\", \"Codexis\", \"Nexonix\", \"Algobyte\", \"Infobyte\", \"Datazen\", \"Digiflow\", \"Innovix\", \"Coretron\", \"Zybernet\", \"Neurotech\", \"Nanobyte\", \"Virtunix\", \"Codexel\", \"Optibit\", \"Bitnova\", \"Globotron\", \"Digiware\", \"Skytech\", \"Cybervox\", \"Techspire\", \"Softbit\", \"MetaTech\", \"Synthron\", \"Virtuabyte\", \"Cloudtron\", \"Algonix\", \"Bitzen\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Empresa\", empresa())\r",
									"\r",
									"function tag() {\r",
									"    const tagnames = ['Solutions', 'Tech', 'Digital', 'Systems', 'Software', 'Cloud', 'AI', 'Cyber', 'Data', 'Analytics','Network', 'Security', 'Labs', 'Smart', 'Logic', 'Innovation', 'IT', 'Global', 'Developers', 'Code', 'Techno', 'Automations', 'Cloudware', 'Dynamics', 'Vision', 'Intelligence', 'NextGen', 'Computing', 'Innovators', 'Engineering', 'Performance', 'Softworks', 'Logicware', 'Digitalware', 'Transform', 'Platform', 'Smartware', 'Dataflow', 'Byte', 'Edge', 'Nexus', 'Techworks', 'Bit', 'Virtual', 'SystemsX', 'Infotech', 'Genix', 'Quantum', 'Bitware', 'CloudX'];\r",
									"\r",
									"    const randomTastName = tagnames[Math.floor(Math.random() * tagnames.length)]\r",
									"    return randomTastName\r",
									"}\r",
									"pm.environment.set(\"Tag\", tag())\r",
									"\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"Empresa\") + \" \" + pm.environment.get(\"Tag\"))\r",
									"\r",
									"\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"\r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									"\r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									"\r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									"\r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									"\r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									"\r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"CNPJ\", cnpjGerado);\r",
									"\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function gerarTelefone() {\r",
									"    // Gerando um DDD aleatório entre 11 e 99\r",
									"    const ddd = Math.floor(Math.random() * (99 - 11 + 1)) + 11;\r",
									"\r",
									"    // Gerando o número de telefone com 9 dígitos, começando com 9\r",
									"    const numero = Math.floor(Math.random() * 100000000) + 900000000; // Gera um número aleatório entre 900000000 e 999999999 (começando com '9')\r",
									"\r",
									"    // Concatenando +55, o DDD e o número gerado para formar o telefone\r",
									"    const telefone = `55${ddd}${numero.toString().slice(0, 5)}${numero.toString().slice(5, 9)}`;\r",
									"\r",
									"    return telefone;\r",
									"}\r",
									"\r",
									"// Gerando o número de telefone e armazenando como variável de ambiente\r",
									"const telefoneGerado = gerarTelefone();\r",
									"pm.environment.set(\"telefone\", telefoneGerado);\r",
									"\r",
									"function descricao() {\r",
									"    const names = [\"Testes\", \"Automação\", \"FrontEnd\", \"Backend\",\"Banco de Dados\", \"IA\",\"AWS\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Descricao\", descricao())\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"NomeRua\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"NomeRuas\", lastname())\r",
									"\r",
									"pm.environment.set(\"nomeruaComposto\", \r",
									"    pm.environment.get(\"NomeRua\") + \" \" + pm.environment.get(\"NomeRuas\"))\r",
									"\r",
									"function logradouro() {\r",
									"    const names = [\"Avenida\", \"Rua\", \"Alameda\", \"Travessa\", \"Praça\", \"Rodovia\", \"Estrada\", \"Largo\", \"Viaduto\", \"Marginal\", \"Parque\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Logradouro\", logradouro())\r",
									"\r",
									"pm.environment.set(\"logradouroCompleto\", \r",
									"    pm.environment.get(\"Logradouro\") + \" \" + pm.environment.get(\"nomeruaComposto\"))\r",
									"\r",
									"\r",
									"function gerarNumeroResidencia() {\r",
									"    // Definindo a probabilidade de gerar números com mais de 5 caracteres\r",
									"    const tamanhoNumero = Math.random() < 0.8 ? Math.floor(Math.random() * 5) + 1 : Math.floor(Math.random() * 6) + 5;\r",
									"\r",
									"    // Gerando um número aleatório com o tamanho definido\r",
									"    let numeroResidencia = Math.floor(Math.random() * Math.pow(10, tamanhoNumero)).toString(); // Gera número aleatório com o tamanho desejado\r",
									"\r",
									"    // Se o primeiro caractere for 0, remove-o\r",
									"    if (numeroResidencia[0] === '0') {\r",
									"        numeroResidencia = numeroResidencia.slice(1); // Remove o primeiro caractere\r",
									"    }\r",
									"\r",
									"    // Garantindo que o número tenha no máximo 10 caracteres\r",
									"    if (numeroResidencia.length > 10) {\r",
									"        numeroResidencia = numeroResidencia.slice(0, 10); // Limita a 10 caracteres\r",
									"    }\r",
									"\r",
									"    return numeroResidencia;\r",
									"}\r",
									"\r",
									"// Gerando o número de residência e armazenando como variável de ambiente\r",
									"const numeroResidenciaGerado = gerarNumeroResidencia();\r",
									"pm.environment.set(\"numeroResidencia\", numeroResidenciaGerado);\r",
									"\r",
									"function bairro() {\r",
									"    const names = ['Leblon', 'Ipanema', 'Copacabana', 'Barra da Tijuca', 'Botafogo', 'Lapa', 'Santa Teresa', 'Jardim Botânico', 'Flamengo', 'São Conrado', 'Moema', 'Vila Madalena', 'Pinheiros', 'Jardins', 'Aclimação', 'Brooklin', 'Tatuapé', 'Vila Progredior', 'Vila Nova Conceição', 'Campo Belo','Centro', 'Praia de Belas', 'Moinhos de Vento', 'Petrópolis', 'Tristeza', 'Caminho das Árvores', 'Pituba', 'Stella Maris', 'Parque Atlântico', 'Costa Azul', 'Vila Galvão', 'Santo Amaro', 'Perdizes', 'Aclimação', 'Vila Sônia', 'Cidade Dutra', 'São Bernardo do Campo', 'Vila Mariana', 'Bela Vista', 'Liberdade','Pinheiros', 'Itaim Bibi', 'Santa Cecília', 'Tucuruvi', 'Chácara Santo Antônio', 'Água Fria', 'Vila Olímpia', 'Vila São Francisco', 'Consolação', 'Vila Madalena']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Bairro\", bairro())\r",
									"\r",
									"function cidade() {\r",
									"    const names = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador', 'Curitiba', 'Fortaleza', 'Recife', 'Brasília', 'Manaus', 'Vitória', 'Goiânia', 'Belém', 'Natal', 'São Luís', 'Maceió', 'Campo Grande', 'João Pessoa', 'Aracaju', 'Cuiabá', 'Florianópolis', 'Teresina', 'Palmas', 'Macapá', 'Rio Branco', 'Boa Vista', 'Porto Velho', 'Anápolis', 'Caruaru', 'Londrina','Marabá', 'Araraquara', 'Sorocaba', 'Santos', 'Niterói', 'Mogi das Cruzes', 'Caxias do Sul', 'Barueri', 'Campinas', 'São José', 'Ponta Grossa', 'Jundiaí', 'Uberlândia', 'Diadema', 'Santo André', 'São Bernardo do Campo', 'Itaquaquecetuba', 'Ribeirão Preto', 'Juiz de Fora']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Cidade\", cidade())\r",
									"\r",
									"function abreviacao() {\r",
									"    const names = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"AbreviacaoEstado\", abreviacao())\r",
									"\r",
									"function randomCep() {\r",
									"    let randomCep = '';\r",
									"   \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        randomCep += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCep;\r",
									"}\r",
									"pm.environment.set(\"cep\", randomCep());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomeEmpresa}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"{{fullnameUser}}\",\r\n  \"telephone\": \"{{telefone}}\",\r\n  \"serviceDescription\": \"{{Descricao}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{cep}}\",\r\n      \"city\": \"{{Cidade}}\",\r\n      \"state\": \"S\",\r\n      \"district\": \"{{Bairro}}\",\r\n      \"street\": \"{{logradouroCompleto}}\",\r\n      \"number\": \"{{numeroResidencia}}\",\r\n      \"complement\": \"\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTM0MSwiZXhwIjoxNzM5MzE1NzQxfQ.cgJqYe74cprHCRTY9YLF_B-Hfgfp8l8lr6gDrEuqMi4' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"corporateName\": \"Matheus Sousa Testes\",\r\n  \"registerCompany\": \"57126456000155\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com o campo Estado com mais de 2 letras",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function empresa() {\r",
									"    const names = [\"TechNova\", \"Bytewave\", \"Cyberion\", \"InovaTech\", \"Nexabyte\", \"Softtron\", \"Codeverse\", \"Dataflux\", \"Infinitron\", \"LogiCore\", \"Zentek\",\"Neurobyte\", \"Cloudix\", \"Sysnova\", \"Hexabit\", \"AIgorithm\", \"Quantumix\", \"Webtron\", \"Netflux\", \"Cyberflux\", \"Deepcode\", \"Techpulse\", \"Synaptech\", \"Codexis\", \"Nexonix\", \"Algobyte\", \"Infobyte\", \"Datazen\", \"Digiflow\", \"Innovix\", \"Coretron\", \"Zybernet\", \"Neurotech\", \"Nanobyte\", \"Virtunix\", \"Codexel\", \"Optibit\", \"Bitnova\", \"Globotron\", \"Digiware\", \"Skytech\", \"Cybervox\", \"Techspire\", \"Softbit\", \"MetaTech\", \"Synthron\", \"Virtuabyte\", \"Cloudtron\", \"Algonix\", \"Bitzen\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Empresa\", empresa())\r",
									"\r",
									"function tag() {\r",
									"    const tagnames = ['Solutions', 'Tech', 'Digital', 'Systems', 'Software', 'Cloud', 'AI', 'Cyber', 'Data', 'Analytics','Network', 'Security', 'Labs', 'Smart', 'Logic', 'Innovation', 'IT', 'Global', 'Developers', 'Code', 'Techno', 'Automations', 'Cloudware', 'Dynamics', 'Vision', 'Intelligence', 'NextGen', 'Computing', 'Innovators', 'Engineering', 'Performance', 'Softworks', 'Logicware', 'Digitalware', 'Transform', 'Platform', 'Smartware', 'Dataflow', 'Byte', 'Edge', 'Nexus', 'Techworks', 'Bit', 'Virtual', 'SystemsX', 'Infotech', 'Genix', 'Quantum', 'Bitware', 'CloudX'];\r",
									"\r",
									"    const randomTastName = tagnames[Math.floor(Math.random() * tagnames.length)]\r",
									"    return randomTastName\r",
									"}\r",
									"pm.environment.set(\"Tag\", tag())\r",
									"\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"Empresa\") + \" \" + pm.environment.get(\"Tag\"))\r",
									"\r",
									"\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"\r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									"\r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									"\r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									"\r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									"\r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									"\r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"CNPJ\", cnpjGerado);\r",
									"\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function gerarTelefone() {\r",
									"    // Gerando um DDD aleatório entre 11 e 99\r",
									"    const ddd = Math.floor(Math.random() * (99 - 11 + 1)) + 11;\r",
									"\r",
									"    // Gerando o número de telefone com 9 dígitos, começando com 9\r",
									"    const numero = Math.floor(Math.random() * 100000000) + 900000000; // Gera um número aleatório entre 900000000 e 999999999 (começando com '9')\r",
									"\r",
									"    // Concatenando +55, o DDD e o número gerado para formar o telefone\r",
									"    const telefone = `55${ddd}${numero.toString().slice(0, 5)}${numero.toString().slice(5, 9)}`;\r",
									"\r",
									"    return telefone;\r",
									"}\r",
									"\r",
									"// Gerando o número de telefone e armazenando como variável de ambiente\r",
									"const telefoneGerado = gerarTelefone();\r",
									"pm.environment.set(\"telefone\", telefoneGerado);\r",
									"\r",
									"function descricao() {\r",
									"    const names = [\"Testes\", \"Automação\", \"FrontEnd\", \"Backend\",\"Banco de Dados\", \"IA\",\"AWS\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Descricao\", descricao())\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"NomeRua\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"NomeRuas\", lastname())\r",
									"\r",
									"pm.environment.set(\"nomeruaComposto\", \r",
									"    pm.environment.get(\"NomeRua\") + \" \" + pm.environment.get(\"NomeRuas\"))\r",
									"\r",
									"function logradouro() {\r",
									"    const names = [\"Avenida\", \"Rua\", \"Alameda\", \"Travessa\", \"Praça\", \"Rodovia\", \"Estrada\", \"Largo\", \"Viaduto\", \"Marginal\", \"Parque\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Logradouro\", logradouro())\r",
									"\r",
									"pm.environment.set(\"logradouroCompleto\", \r",
									"    pm.environment.get(\"Logradouro\") + \" \" + pm.environment.get(\"nomeruaComposto\"))\r",
									"\r",
									"\r",
									"function gerarNumeroResidencia() {\r",
									"    // Definindo a probabilidade de gerar números com mais de 5 caracteres\r",
									"    const tamanhoNumero = Math.random() < 0.8 ? Math.floor(Math.random() * 5) + 1 : Math.floor(Math.random() * 6) + 5;\r",
									"\r",
									"    // Gerando um número aleatório com o tamanho definido\r",
									"    let numeroResidencia = Math.floor(Math.random() * Math.pow(10, tamanhoNumero)).toString(); // Gera número aleatório com o tamanho desejado\r",
									"\r",
									"    // Se o primeiro caractere for 0, remove-o\r",
									"    if (numeroResidencia[0] === '0') {\r",
									"        numeroResidencia = numeroResidencia.slice(1); // Remove o primeiro caractere\r",
									"    }\r",
									"\r",
									"    // Garantindo que o número tenha no máximo 10 caracteres\r",
									"    if (numeroResidencia.length > 10) {\r",
									"        numeroResidencia = numeroResidencia.slice(0, 10); // Limita a 10 caracteres\r",
									"    }\r",
									"\r",
									"    return numeroResidencia;\r",
									"}\r",
									"\r",
									"// Gerando o número de residência e armazenando como variável de ambiente\r",
									"const numeroResidenciaGerado = gerarNumeroResidencia();\r",
									"pm.environment.set(\"numeroResidencia\", numeroResidenciaGerado);\r",
									"\r",
									"function bairro() {\r",
									"    const names = ['Leblon', 'Ipanema', 'Copacabana', 'Barra da Tijuca', 'Botafogo', 'Lapa', 'Santa Teresa', 'Jardim Botânico', 'Flamengo', 'São Conrado', 'Moema', 'Vila Madalena', 'Pinheiros', 'Jardins', 'Aclimação', 'Brooklin', 'Tatuapé', 'Vila Progredior', 'Vila Nova Conceição', 'Campo Belo','Centro', 'Praia de Belas', 'Moinhos de Vento', 'Petrópolis', 'Tristeza', 'Caminho das Árvores', 'Pituba', 'Stella Maris', 'Parque Atlântico', 'Costa Azul', 'Vila Galvão', 'Santo Amaro', 'Perdizes', 'Aclimação', 'Vila Sônia', 'Cidade Dutra', 'São Bernardo do Campo', 'Vila Mariana', 'Bela Vista', 'Liberdade','Pinheiros', 'Itaim Bibi', 'Santa Cecília', 'Tucuruvi', 'Chácara Santo Antônio', 'Água Fria', 'Vila Olímpia', 'Vila São Francisco', 'Consolação', 'Vila Madalena']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Bairro\", bairro())\r",
									"\r",
									"function cidade() {\r",
									"    const names = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador', 'Curitiba', 'Fortaleza', 'Recife', 'Brasília', 'Manaus', 'Vitória', 'Goiânia', 'Belém', 'Natal', 'São Luís', 'Maceió', 'Campo Grande', 'João Pessoa', 'Aracaju', 'Cuiabá', 'Florianópolis', 'Teresina', 'Palmas', 'Macapá', 'Rio Branco', 'Boa Vista', 'Porto Velho', 'Anápolis', 'Caruaru', 'Londrina','Marabá', 'Araraquara', 'Sorocaba', 'Santos', 'Niterói', 'Mogi das Cruzes', 'Caxias do Sul', 'Barueri', 'Campinas', 'São José', 'Ponta Grossa', 'Jundiaí', 'Uberlândia', 'Diadema', 'Santo André', 'São Bernardo do Campo', 'Itaquaquecetuba', 'Ribeirão Preto', 'Juiz de Fora']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Cidade\", cidade())\r",
									"\r",
									"function abreviacao() {\r",
									"    const names = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"AbreviacaoEstado\", abreviacao())\r",
									"\r",
									"function randomCep() {\r",
									"    let randomCep = '';\r",
									"   \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        randomCep += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCep;\r",
									"}\r",
									"pm.environment.set(\"cep\", randomCep());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomeEmpresa}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"{{fullnameUser}}\",\r\n  \"telephone\": \"{{telefone}}\",\r\n  \"serviceDescription\": \"{{Descricao}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{cep}}\",\r\n      \"city\": \"{{Cidade}}\",\r\n      \"state\": \"SPP\",\r\n      \"district\": \"{{Bairro}}\",\r\n      \"street\": \"{{logradouroCompleto}}\",\r\n      \"number\": \"{{numeroResidencia}}\",\r\n      \"complement\": \"\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTM0MSwiZXhwIjoxNzM5MzE1NzQxfQ.cgJqYe74cprHCRTY9YLF_B-Hfgfp8l8lr6gDrEuqMi4' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"corporateName\": \"Matheus Sousa Testes\",\r\n  \"registerCompany\": \"57126456000155\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com o campo País em branco",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function empresa() {\r",
									"    const names = [\"TechNova\", \"Bytewave\", \"Cyberion\", \"InovaTech\", \"Nexabyte\", \"Softtron\", \"Codeverse\", \"Dataflux\", \"Infinitron\", \"LogiCore\", \"Zentek\",\"Neurobyte\", \"Cloudix\", \"Sysnova\", \"Hexabit\", \"AIgorithm\", \"Quantumix\", \"Webtron\", \"Netflux\", \"Cyberflux\", \"Deepcode\", \"Techpulse\", \"Synaptech\", \"Codexis\", \"Nexonix\", \"Algobyte\", \"Infobyte\", \"Datazen\", \"Digiflow\", \"Innovix\", \"Coretron\", \"Zybernet\", \"Neurotech\", \"Nanobyte\", \"Virtunix\", \"Codexel\", \"Optibit\", \"Bitnova\", \"Globotron\", \"Digiware\", \"Skytech\", \"Cybervox\", \"Techspire\", \"Softbit\", \"MetaTech\", \"Synthron\", \"Virtuabyte\", \"Cloudtron\", \"Algonix\", \"Bitzen\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Empresa\", empresa())\r",
									"\r",
									"function tag() {\r",
									"    const tagnames = ['Solutions', 'Tech', 'Digital', 'Systems', 'Software', 'Cloud', 'AI', 'Cyber', 'Data', 'Analytics','Network', 'Security', 'Labs', 'Smart', 'Logic', 'Innovation', 'IT', 'Global', 'Developers', 'Code', 'Techno', 'Automations', 'Cloudware', 'Dynamics', 'Vision', 'Intelligence', 'NextGen', 'Computing', 'Innovators', 'Engineering', 'Performance', 'Softworks', 'Logicware', 'Digitalware', 'Transform', 'Platform', 'Smartware', 'Dataflow', 'Byte', 'Edge', 'Nexus', 'Techworks', 'Bit', 'Virtual', 'SystemsX', 'Infotech', 'Genix', 'Quantum', 'Bitware', 'CloudX'];\r",
									"\r",
									"    const randomTastName = tagnames[Math.floor(Math.random() * tagnames.length)]\r",
									"    return randomTastName\r",
									"}\r",
									"pm.environment.set(\"Tag\", tag())\r",
									"\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"Empresa\") + \" \" + pm.environment.get(\"Tag\"))\r",
									"\r",
									"\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"\r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									"\r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									"\r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									"\r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									"\r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									"\r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"CNPJ\", cnpjGerado);\r",
									"\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function gerarTelefone() {\r",
									"    // Gerando um DDD aleatório entre 11 e 99\r",
									"    const ddd = Math.floor(Math.random() * (99 - 11 + 1)) + 11;\r",
									"\r",
									"    // Gerando o número de telefone com 9 dígitos, começando com 9\r",
									"    const numero = Math.floor(Math.random() * 100000000) + 900000000; // Gera um número aleatório entre 900000000 e 999999999 (começando com '9')\r",
									"\r",
									"    // Concatenando +55, o DDD e o número gerado para formar o telefone\r",
									"    const telefone = `55${ddd}${numero.toString().slice(0, 5)}${numero.toString().slice(5, 9)}`;\r",
									"\r",
									"    return telefone;\r",
									"}\r",
									"\r",
									"// Gerando o número de telefone e armazenando como variável de ambiente\r",
									"const telefoneGerado = gerarTelefone();\r",
									"pm.environment.set(\"telefone\", telefoneGerado);\r",
									"\r",
									"function descricao() {\r",
									"    const names = [\"Testes\", \"Automação\", \"FrontEnd\", \"Backend\",\"Banco de Dados\", \"IA\",\"AWS\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Descricao\", descricao())\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"NomeRua\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"NomeRuas\", lastname())\r",
									"\r",
									"pm.environment.set(\"nomeruaComposto\", \r",
									"    pm.environment.get(\"NomeRua\") + \" \" + pm.environment.get(\"NomeRuas\"))\r",
									"\r",
									"function logradouro() {\r",
									"    const names = [\"Avenida\", \"Rua\", \"Alameda\", \"Travessa\", \"Praça\", \"Rodovia\", \"Estrada\", \"Largo\", \"Viaduto\", \"Marginal\", \"Parque\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Logradouro\", logradouro())\r",
									"\r",
									"pm.environment.set(\"logradouroCompleto\", \r",
									"    pm.environment.get(\"Logradouro\") + \" \" + pm.environment.get(\"nomeruaComposto\"))\r",
									"\r",
									"\r",
									"function gerarNumeroResidencia() {\r",
									"    // Definindo a probabilidade de gerar números com mais de 5 caracteres\r",
									"    const tamanhoNumero = Math.random() < 0.8 ? Math.floor(Math.random() * 5) + 1 : Math.floor(Math.random() * 6) + 5;\r",
									"\r",
									"    // Gerando um número aleatório com o tamanho definido\r",
									"    let numeroResidencia = Math.floor(Math.random() * Math.pow(10, tamanhoNumero)).toString(); // Gera número aleatório com o tamanho desejado\r",
									"\r",
									"    // Se o primeiro caractere for 0, remove-o\r",
									"    if (numeroResidencia[0] === '0') {\r",
									"        numeroResidencia = numeroResidencia.slice(1); // Remove o primeiro caractere\r",
									"    }\r",
									"\r",
									"    // Garantindo que o número tenha no máximo 10 caracteres\r",
									"    if (numeroResidencia.length > 10) {\r",
									"        numeroResidencia = numeroResidencia.slice(0, 10); // Limita a 10 caracteres\r",
									"    }\r",
									"\r",
									"    return numeroResidencia;\r",
									"}\r",
									"\r",
									"// Gerando o número de residência e armazenando como variável de ambiente\r",
									"const numeroResidenciaGerado = gerarNumeroResidencia();\r",
									"pm.environment.set(\"numeroResidencia\", numeroResidenciaGerado);\r",
									"\r",
									"function bairro() {\r",
									"    const names = ['Leblon', 'Ipanema', 'Copacabana', 'Barra da Tijuca', 'Botafogo', 'Lapa', 'Santa Teresa', 'Jardim Botânico', 'Flamengo', 'São Conrado', 'Moema', 'Vila Madalena', 'Pinheiros', 'Jardins', 'Aclimação', 'Brooklin', 'Tatuapé', 'Vila Progredior', 'Vila Nova Conceição', 'Campo Belo','Centro', 'Praia de Belas', 'Moinhos de Vento', 'Petrópolis', 'Tristeza', 'Caminho das Árvores', 'Pituba', 'Stella Maris', 'Parque Atlântico', 'Costa Azul', 'Vila Galvão', 'Santo Amaro', 'Perdizes', 'Aclimação', 'Vila Sônia', 'Cidade Dutra', 'São Bernardo do Campo', 'Vila Mariana', 'Bela Vista', 'Liberdade','Pinheiros', 'Itaim Bibi', 'Santa Cecília', 'Tucuruvi', 'Chácara Santo Antônio', 'Água Fria', 'Vila Olímpia', 'Vila São Francisco', 'Consolação', 'Vila Madalena']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Bairro\", bairro())\r",
									"\r",
									"function cidade() {\r",
									"    const names = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador', 'Curitiba', 'Fortaleza', 'Recife', 'Brasília', 'Manaus', 'Vitória', 'Goiânia', 'Belém', 'Natal', 'São Luís', 'Maceió', 'Campo Grande', 'João Pessoa', 'Aracaju', 'Cuiabá', 'Florianópolis', 'Teresina', 'Palmas', 'Macapá', 'Rio Branco', 'Boa Vista', 'Porto Velho', 'Anápolis', 'Caruaru', 'Londrina','Marabá', 'Araraquara', 'Sorocaba', 'Santos', 'Niterói', 'Mogi das Cruzes', 'Caxias do Sul', 'Barueri', 'Campinas', 'São José', 'Ponta Grossa', 'Jundiaí', 'Uberlândia', 'Diadema', 'Santo André', 'São Bernardo do Campo', 'Itaquaquecetuba', 'Ribeirão Preto', 'Juiz de Fora']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Cidade\", cidade())\r",
									"\r",
									"function abreviacao() {\r",
									"    const names = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"AbreviacaoEstado\", abreviacao())\r",
									"\r",
									"function randomCep() {\r",
									"    let randomCep = '';\r",
									"   \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        randomCep += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCep;\r",
									"}\r",
									"pm.environment.set(\"cep\", randomCep());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Mensagem de erro\",function(){\r",
									"     pm.expect(pm.response.json().error[0]).to.equal(\"O campo País é obrigatório\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomeEmpresa}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"{{fullnameUser}}\",\r\n  \"telephone\": \"{{telefone}}\",\r\n  \"serviceDescription\": \"{{Descricao}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{cep}}\",\r\n      \"city\": \"{{Cidade}}\",\r\n      \"state\": \"{{AbreviacaoEstado}}\",\r\n      \"district\": \"{{Bairro}}\",\r\n      \"street\": \"{{logradouroCompleto}}\",\r\n      \"number\": \"{{numeroResidencia}}\",\r\n      \"complement\": \"\",\r\n      \"country\": \"\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTM0MSwiZXhwIjoxNzM5MzE1NzQxfQ.cgJqYe74cprHCRTY9YLF_B-Hfgfp8l8lr6gDrEuqMi4' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"corporateName\": \"Matheus Sousa Testes\",\r\n  \"registerCompany\": \"57126456000155\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com o campo País com numero",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function empresa() {\r",
									"    const names = [\"TechNova\", \"Bytewave\", \"Cyberion\", \"InovaTech\", \"Nexabyte\", \"Softtron\", \"Codeverse\", \"Dataflux\", \"Infinitron\", \"LogiCore\", \"Zentek\",\"Neurobyte\", \"Cloudix\", \"Sysnova\", \"Hexabit\", \"AIgorithm\", \"Quantumix\", \"Webtron\", \"Netflux\", \"Cyberflux\", \"Deepcode\", \"Techpulse\", \"Synaptech\", \"Codexis\", \"Nexonix\", \"Algobyte\", \"Infobyte\", \"Datazen\", \"Digiflow\", \"Innovix\", \"Coretron\", \"Zybernet\", \"Neurotech\", \"Nanobyte\", \"Virtunix\", \"Codexel\", \"Optibit\", \"Bitnova\", \"Globotron\", \"Digiware\", \"Skytech\", \"Cybervox\", \"Techspire\", \"Softbit\", \"MetaTech\", \"Synthron\", \"Virtuabyte\", \"Cloudtron\", \"Algonix\", \"Bitzen\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Empresa\", empresa())\r",
									"\r",
									"function tag() {\r",
									"    const tagnames = ['Solutions', 'Tech', 'Digital', 'Systems', 'Software', 'Cloud', 'AI', 'Cyber', 'Data', 'Analytics','Network', 'Security', 'Labs', 'Smart', 'Logic', 'Innovation', 'IT', 'Global', 'Developers', 'Code', 'Techno', 'Automations', 'Cloudware', 'Dynamics', 'Vision', 'Intelligence', 'NextGen', 'Computing', 'Innovators', 'Engineering', 'Performance', 'Softworks', 'Logicware', 'Digitalware', 'Transform', 'Platform', 'Smartware', 'Dataflow', 'Byte', 'Edge', 'Nexus', 'Techworks', 'Bit', 'Virtual', 'SystemsX', 'Infotech', 'Genix', 'Quantum', 'Bitware', 'CloudX'];\r",
									"\r",
									"    const randomTastName = tagnames[Math.floor(Math.random() * tagnames.length)]\r",
									"    return randomTastName\r",
									"}\r",
									"pm.environment.set(\"Tag\", tag())\r",
									"\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"Empresa\") + \" \" + pm.environment.get(\"Tag\"))\r",
									"\r",
									"\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"\r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									"\r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									"\r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									"\r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									"\r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									"\r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"CNPJ\", cnpjGerado);\r",
									"\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function gerarTelefone() {\r",
									"    // Gerando um DDD aleatório entre 11 e 99\r",
									"    const ddd = Math.floor(Math.random() * (99 - 11 + 1)) + 11;\r",
									"\r",
									"    // Gerando o número de telefone com 9 dígitos, começando com 9\r",
									"    const numero = Math.floor(Math.random() * 100000000) + 900000000; // Gera um número aleatório entre 900000000 e 999999999 (começando com '9')\r",
									"\r",
									"    // Concatenando +55, o DDD e o número gerado para formar o telefone\r",
									"    const telefone = `55${ddd}${numero.toString().slice(0, 5)}${numero.toString().slice(5, 9)}`;\r",
									"\r",
									"    return telefone;\r",
									"}\r",
									"\r",
									"// Gerando o número de telefone e armazenando como variável de ambiente\r",
									"const telefoneGerado = gerarTelefone();\r",
									"pm.environment.set(\"telefone\", telefoneGerado);\r",
									"\r",
									"function descricao() {\r",
									"    const names = [\"Testes\", \"Automação\", \"FrontEnd\", \"Backend\",\"Banco de Dados\", \"IA\",\"AWS\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Descricao\", descricao())\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"NomeRua\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"NomeRuas\", lastname())\r",
									"\r",
									"pm.environment.set(\"nomeruaComposto\", \r",
									"    pm.environment.get(\"NomeRua\") + \" \" + pm.environment.get(\"NomeRuas\"))\r",
									"\r",
									"function logradouro() {\r",
									"    const names = [\"Avenida\", \"Rua\", \"Alameda\", \"Travessa\", \"Praça\", \"Rodovia\", \"Estrada\", \"Largo\", \"Viaduto\", \"Marginal\", \"Parque\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Logradouro\", logradouro())\r",
									"\r",
									"pm.environment.set(\"logradouroCompleto\", \r",
									"    pm.environment.get(\"Logradouro\") + \" \" + pm.environment.get(\"nomeruaComposto\"))\r",
									"\r",
									"\r",
									"function gerarNumeroResidencia() {\r",
									"    // Definindo a probabilidade de gerar números com mais de 5 caracteres\r",
									"    const tamanhoNumero = Math.random() < 0.8 ? Math.floor(Math.random() * 5) + 1 : Math.floor(Math.random() * 6) + 5;\r",
									"\r",
									"    // Gerando um número aleatório com o tamanho definido\r",
									"    let numeroResidencia = Math.floor(Math.random() * Math.pow(10, tamanhoNumero)).toString(); // Gera número aleatório com o tamanho desejado\r",
									"\r",
									"    // Se o primeiro caractere for 0, remove-o\r",
									"    if (numeroResidencia[0] === '0') {\r",
									"        numeroResidencia = numeroResidencia.slice(1); // Remove o primeiro caractere\r",
									"    }\r",
									"\r",
									"    // Garantindo que o número tenha no máximo 10 caracteres\r",
									"    if (numeroResidencia.length > 10) {\r",
									"        numeroResidencia = numeroResidencia.slice(0, 10); // Limita a 10 caracteres\r",
									"    }\r",
									"\r",
									"    return numeroResidencia;\r",
									"}\r",
									"\r",
									"// Gerando o número de residência e armazenando como variável de ambiente\r",
									"const numeroResidenciaGerado = gerarNumeroResidencia();\r",
									"pm.environment.set(\"numeroResidencia\", numeroResidenciaGerado);\r",
									"\r",
									"function bairro() {\r",
									"    const names = ['Leblon', 'Ipanema', 'Copacabana', 'Barra da Tijuca', 'Botafogo', 'Lapa', 'Santa Teresa', 'Jardim Botânico', 'Flamengo', 'São Conrado', 'Moema', 'Vila Madalena', 'Pinheiros', 'Jardins', 'Aclimação', 'Brooklin', 'Tatuapé', 'Vila Progredior', 'Vila Nova Conceição', 'Campo Belo','Centro', 'Praia de Belas', 'Moinhos de Vento', 'Petrópolis', 'Tristeza', 'Caminho das Árvores', 'Pituba', 'Stella Maris', 'Parque Atlântico', 'Costa Azul', 'Vila Galvão', 'Santo Amaro', 'Perdizes', 'Aclimação', 'Vila Sônia', 'Cidade Dutra', 'São Bernardo do Campo', 'Vila Mariana', 'Bela Vista', 'Liberdade','Pinheiros', 'Itaim Bibi', 'Santa Cecília', 'Tucuruvi', 'Chácara Santo Antônio', 'Água Fria', 'Vila Olímpia', 'Vila São Francisco', 'Consolação', 'Vila Madalena']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Bairro\", bairro())\r",
									"\r",
									"function cidade() {\r",
									"    const names = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador', 'Curitiba', 'Fortaleza', 'Recife', 'Brasília', 'Manaus', 'Vitória', 'Goiânia', 'Belém', 'Natal', 'São Luís', 'Maceió', 'Campo Grande', 'João Pessoa', 'Aracaju', 'Cuiabá', 'Florianópolis', 'Teresina', 'Palmas', 'Macapá', 'Rio Branco', 'Boa Vista', 'Porto Velho', 'Anápolis', 'Caruaru', 'Londrina','Marabá', 'Araraquara', 'Sorocaba', 'Santos', 'Niterói', 'Mogi das Cruzes', 'Caxias do Sul', 'Barueri', 'Campinas', 'São José', 'Ponta Grossa', 'Jundiaí', 'Uberlândia', 'Diadema', 'Santo André', 'São Bernardo do Campo', 'Itaquaquecetuba', 'Ribeirão Preto', 'Juiz de Fora']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Cidade\", cidade())\r",
									"\r",
									"function abreviacao() {\r",
									"    const names = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"AbreviacaoEstado\", abreviacao())\r",
									"\r",
									"function randomCep() {\r",
									"    let randomCep = '';\r",
									"   \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        randomCep += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCep;\r",
									"}\r",
									"pm.environment.set(\"cep\", randomCep());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomeEmpresa}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"{{fullnameUser}}\",\r\n  \"telephone\": \"{{telefone}}\",\r\n  \"serviceDescription\": \"{{Descricao}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{cep}}\",\r\n      \"city\": \"{{Cidade}}\",\r\n      \"state\": \"{{AbreviacaoEstado}}\",\r\n      \"district\": \"{{Bairro}}\",\r\n      \"street\": \"{{logradouroCompleto}}\",\r\n      \"number\": \"{{numeroResidencia}}\",\r\n      \"complement\": \"\",\r\n      \"country\": \"Brasi1\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTM0MSwiZXhwIjoxNzM5MzE1NzQxfQ.cgJqYe74cprHCRTY9YLF_B-Hfgfp8l8lr6gDrEuqMi4' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"corporateName\": \"Matheus Sousa Testes\",\r\n  \"registerCompany\": \"57126456000155\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com o campo País com caractere especial",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function empresa() {\r",
									"    const names = [\"TechNova\", \"Bytewave\", \"Cyberion\", \"InovaTech\", \"Nexabyte\", \"Softtron\", \"Codeverse\", \"Dataflux\", \"Infinitron\", \"LogiCore\", \"Zentek\",\"Neurobyte\", \"Cloudix\", \"Sysnova\", \"Hexabit\", \"AIgorithm\", \"Quantumix\", \"Webtron\", \"Netflux\", \"Cyberflux\", \"Deepcode\", \"Techpulse\", \"Synaptech\", \"Codexis\", \"Nexonix\", \"Algobyte\", \"Infobyte\", \"Datazen\", \"Digiflow\", \"Innovix\", \"Coretron\", \"Zybernet\", \"Neurotech\", \"Nanobyte\", \"Virtunix\", \"Codexel\", \"Optibit\", \"Bitnova\", \"Globotron\", \"Digiware\", \"Skytech\", \"Cybervox\", \"Techspire\", \"Softbit\", \"MetaTech\", \"Synthron\", \"Virtuabyte\", \"Cloudtron\", \"Algonix\", \"Bitzen\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Empresa\", empresa())\r",
									"\r",
									"function tag() {\r",
									"    const tagnames = ['Solutions', 'Tech', 'Digital', 'Systems', 'Software', 'Cloud', 'AI', 'Cyber', 'Data', 'Analytics','Network', 'Security', 'Labs', 'Smart', 'Logic', 'Innovation', 'IT', 'Global', 'Developers', 'Code', 'Techno', 'Automations', 'Cloudware', 'Dynamics', 'Vision', 'Intelligence', 'NextGen', 'Computing', 'Innovators', 'Engineering', 'Performance', 'Softworks', 'Logicware', 'Digitalware', 'Transform', 'Platform', 'Smartware', 'Dataflow', 'Byte', 'Edge', 'Nexus', 'Techworks', 'Bit', 'Virtual', 'SystemsX', 'Infotech', 'Genix', 'Quantum', 'Bitware', 'CloudX'];\r",
									"\r",
									"    const randomTastName = tagnames[Math.floor(Math.random() * tagnames.length)]\r",
									"    return randomTastName\r",
									"}\r",
									"pm.environment.set(\"Tag\", tag())\r",
									"\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"Empresa\") + \" \" + pm.environment.get(\"Tag\"))\r",
									"\r",
									"\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"\r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									"\r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									"\r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									"\r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									"\r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									"\r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"CNPJ\", cnpjGerado);\r",
									"\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function gerarTelefone() {\r",
									"    // Gerando um DDD aleatório entre 11 e 99\r",
									"    const ddd = Math.floor(Math.random() * (99 - 11 + 1)) + 11;\r",
									"\r",
									"    // Gerando o número de telefone com 9 dígitos, começando com 9\r",
									"    const numero = Math.floor(Math.random() * 100000000) + 900000000; // Gera um número aleatório entre 900000000 e 999999999 (começando com '9')\r",
									"\r",
									"    // Concatenando +55, o DDD e o número gerado para formar o telefone\r",
									"    const telefone = `55${ddd}${numero.toString().slice(0, 5)}${numero.toString().slice(5, 9)}`;\r",
									"\r",
									"    return telefone;\r",
									"}\r",
									"\r",
									"// Gerando o número de telefone e armazenando como variável de ambiente\r",
									"const telefoneGerado = gerarTelefone();\r",
									"pm.environment.set(\"telefone\", telefoneGerado);\r",
									"\r",
									"function descricao() {\r",
									"    const names = [\"Testes\", \"Automação\", \"FrontEnd\", \"Backend\",\"Banco de Dados\", \"IA\",\"AWS\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Descricao\", descricao())\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"NomeRua\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"NomeRuas\", lastname())\r",
									"\r",
									"pm.environment.set(\"nomeruaComposto\", \r",
									"    pm.environment.get(\"NomeRua\") + \" \" + pm.environment.get(\"NomeRuas\"))\r",
									"\r",
									"function logradouro() {\r",
									"    const names = [\"Avenida\", \"Rua\", \"Alameda\", \"Travessa\", \"Praça\", \"Rodovia\", \"Estrada\", \"Largo\", \"Viaduto\", \"Marginal\", \"Parque\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Logradouro\", logradouro())\r",
									"\r",
									"pm.environment.set(\"logradouroCompleto\", \r",
									"    pm.environment.get(\"Logradouro\") + \" \" + pm.environment.get(\"nomeruaComposto\"))\r",
									"\r",
									"\r",
									"function gerarNumeroResidencia() {\r",
									"    // Definindo a probabilidade de gerar números com mais de 5 caracteres\r",
									"    const tamanhoNumero = Math.random() < 0.8 ? Math.floor(Math.random() * 5) + 1 : Math.floor(Math.random() * 6) + 5;\r",
									"\r",
									"    // Gerando um número aleatório com o tamanho definido\r",
									"    let numeroResidencia = Math.floor(Math.random() * Math.pow(10, tamanhoNumero)).toString(); // Gera número aleatório com o tamanho desejado\r",
									"\r",
									"    // Se o primeiro caractere for 0, remove-o\r",
									"    if (numeroResidencia[0] === '0') {\r",
									"        numeroResidencia = numeroResidencia.slice(1); // Remove o primeiro caractere\r",
									"    }\r",
									"\r",
									"    // Garantindo que o número tenha no máximo 10 caracteres\r",
									"    if (numeroResidencia.length > 10) {\r",
									"        numeroResidencia = numeroResidencia.slice(0, 10); // Limita a 10 caracteres\r",
									"    }\r",
									"\r",
									"    return numeroResidencia;\r",
									"}\r",
									"\r",
									"// Gerando o número de residência e armazenando como variável de ambiente\r",
									"const numeroResidenciaGerado = gerarNumeroResidencia();\r",
									"pm.environment.set(\"numeroResidencia\", numeroResidenciaGerado);\r",
									"\r",
									"function bairro() {\r",
									"    const names = ['Leblon', 'Ipanema', 'Copacabana', 'Barra da Tijuca', 'Botafogo', 'Lapa', 'Santa Teresa', 'Jardim Botânico', 'Flamengo', 'São Conrado', 'Moema', 'Vila Madalena', 'Pinheiros', 'Jardins', 'Aclimação', 'Brooklin', 'Tatuapé', 'Vila Progredior', 'Vila Nova Conceição', 'Campo Belo','Centro', 'Praia de Belas', 'Moinhos de Vento', 'Petrópolis', 'Tristeza', 'Caminho das Árvores', 'Pituba', 'Stella Maris', 'Parque Atlântico', 'Costa Azul', 'Vila Galvão', 'Santo Amaro', 'Perdizes', 'Aclimação', 'Vila Sônia', 'Cidade Dutra', 'São Bernardo do Campo', 'Vila Mariana', 'Bela Vista', 'Liberdade','Pinheiros', 'Itaim Bibi', 'Santa Cecília', 'Tucuruvi', 'Chácara Santo Antônio', 'Água Fria', 'Vila Olímpia', 'Vila São Francisco', 'Consolação', 'Vila Madalena']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Bairro\", bairro())\r",
									"\r",
									"function cidade() {\r",
									"    const names = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador', 'Curitiba', 'Fortaleza', 'Recife', 'Brasília', 'Manaus', 'Vitória', 'Goiânia', 'Belém', 'Natal', 'São Luís', 'Maceió', 'Campo Grande', 'João Pessoa', 'Aracaju', 'Cuiabá', 'Florianópolis', 'Teresina', 'Palmas', 'Macapá', 'Rio Branco', 'Boa Vista', 'Porto Velho', 'Anápolis', 'Caruaru', 'Londrina','Marabá', 'Araraquara', 'Sorocaba', 'Santos', 'Niterói', 'Mogi das Cruzes', 'Caxias do Sul', 'Barueri', 'Campinas', 'São José', 'Ponta Grossa', 'Jundiaí', 'Uberlândia', 'Diadema', 'Santo André', 'São Bernardo do Campo', 'Itaquaquecetuba', 'Ribeirão Preto', 'Juiz de Fora']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Cidade\", cidade())\r",
									"\r",
									"function abreviacao() {\r",
									"    const names = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"AbreviacaoEstado\", abreviacao())\r",
									"\r",
									"function randomCep() {\r",
									"    let randomCep = '';\r",
									"   \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        randomCep += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCep;\r",
									"}\r",
									"pm.environment.set(\"cep\", randomCep());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomeEmpresa}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"{{fullnameUser}}\",\r\n  \"telephone\": \"{{telefone}}\",\r\n  \"serviceDescription\": \"{{Descricao}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{cep}}\",\r\n      \"city\": \"{{Cidade}}\",\r\n      \"state\": \"{{AbreviacaoEstado}}\",\r\n      \"district\": \"{{Bairro}}\",\r\n      \"street\": \"{{logradouroCompleto}}\",\r\n      \"number\": \"{{numeroResidencia}}\",\r\n      \"complement\": \"\",\r\n      \"country\": \"Br@sil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTM0MSwiZXhwIjoxNzM5MzE1NzQxfQ.cgJqYe74cprHCRTY9YLF_B-Hfgfp8l8lr6gDrEuqMi4' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"corporateName\": \"Matheus Sousa Testes\",\r\n  \"registerCompany\": \"57126456000155\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com o campo País com mais de 50 caracteres",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function empresa() {\r",
									"    const names = [\"TechNova\", \"Bytewave\", \"Cyberion\", \"InovaTech\", \"Nexabyte\", \"Softtron\", \"Codeverse\", \"Dataflux\", \"Infinitron\", \"LogiCore\", \"Zentek\",\"Neurobyte\", \"Cloudix\", \"Sysnova\", \"Hexabit\", \"AIgorithm\", \"Quantumix\", \"Webtron\", \"Netflux\", \"Cyberflux\", \"Deepcode\", \"Techpulse\", \"Synaptech\", \"Codexis\", \"Nexonix\", \"Algobyte\", \"Infobyte\", \"Datazen\", \"Digiflow\", \"Innovix\", \"Coretron\", \"Zybernet\", \"Neurotech\", \"Nanobyte\", \"Virtunix\", \"Codexel\", \"Optibit\", \"Bitnova\", \"Globotron\", \"Digiware\", \"Skytech\", \"Cybervox\", \"Techspire\", \"Softbit\", \"MetaTech\", \"Synthron\", \"Virtuabyte\", \"Cloudtron\", \"Algonix\", \"Bitzen\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Empresa\", empresa())\r",
									"\r",
									"function tag() {\r",
									"    const tagnames = ['Solutions', 'Tech', 'Digital', 'Systems', 'Software', 'Cloud', 'AI', 'Cyber', 'Data', 'Analytics','Network', 'Security', 'Labs', 'Smart', 'Logic', 'Innovation', 'IT', 'Global', 'Developers', 'Code', 'Techno', 'Automations', 'Cloudware', 'Dynamics', 'Vision', 'Intelligence', 'NextGen', 'Computing', 'Innovators', 'Engineering', 'Performance', 'Softworks', 'Logicware', 'Digitalware', 'Transform', 'Platform', 'Smartware', 'Dataflow', 'Byte', 'Edge', 'Nexus', 'Techworks', 'Bit', 'Virtual', 'SystemsX', 'Infotech', 'Genix', 'Quantum', 'Bitware', 'CloudX'];\r",
									"\r",
									"    const randomTastName = tagnames[Math.floor(Math.random() * tagnames.length)]\r",
									"    return randomTastName\r",
									"}\r",
									"pm.environment.set(\"Tag\", tag())\r",
									"\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"Empresa\") + \" \" + pm.environment.get(\"Tag\"))\r",
									"\r",
									"\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"\r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									"\r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									"\r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									"\r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									"\r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									"\r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"CNPJ\", cnpjGerado);\r",
									"\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function gerarTelefone() {\r",
									"    // Gerando um DDD aleatório entre 11 e 99\r",
									"    const ddd = Math.floor(Math.random() * (99 - 11 + 1)) + 11;\r",
									"\r",
									"    // Gerando o número de telefone com 9 dígitos, começando com 9\r",
									"    const numero = Math.floor(Math.random() * 100000000) + 900000000; // Gera um número aleatório entre 900000000 e 999999999 (começando com '9')\r",
									"\r",
									"    // Concatenando +55, o DDD e o número gerado para formar o telefone\r",
									"    const telefone = `55${ddd}${numero.toString().slice(0, 5)}${numero.toString().slice(5, 9)}`;\r",
									"\r",
									"    return telefone;\r",
									"}\r",
									"\r",
									"// Gerando o número de telefone e armazenando como variável de ambiente\r",
									"const telefoneGerado = gerarTelefone();\r",
									"pm.environment.set(\"telefone\", telefoneGerado);\r",
									"\r",
									"function descricao() {\r",
									"    const names = [\"Testes\", \"Automação\", \"FrontEnd\", \"Backend\",\"Banco de Dados\", \"IA\",\"AWS\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Descricao\", descricao())\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"NomeRua\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"NomeRuas\", lastname())\r",
									"\r",
									"pm.environment.set(\"nomeruaComposto\", \r",
									"    pm.environment.get(\"NomeRua\") + \" \" + pm.environment.get(\"NomeRuas\"))\r",
									"\r",
									"function logradouro() {\r",
									"    const names = [\"Avenida\", \"Rua\", \"Alameda\", \"Travessa\", \"Praça\", \"Rodovia\", \"Estrada\", \"Largo\", \"Viaduto\", \"Marginal\", \"Parque\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Logradouro\", logradouro())\r",
									"\r",
									"pm.environment.set(\"logradouroCompleto\", \r",
									"    pm.environment.get(\"Logradouro\") + \" \" + pm.environment.get(\"nomeruaComposto\"))\r",
									"\r",
									"\r",
									"function gerarNumeroResidencia() {\r",
									"    // Definindo a probabilidade de gerar números com mais de 5 caracteres\r",
									"    const tamanhoNumero = Math.random() < 0.8 ? Math.floor(Math.random() * 5) + 1 : Math.floor(Math.random() * 6) + 5;\r",
									"\r",
									"    // Gerando um número aleatório com o tamanho definido\r",
									"    let numeroResidencia = Math.floor(Math.random() * Math.pow(10, tamanhoNumero)).toString(); // Gera número aleatório com o tamanho desejado\r",
									"\r",
									"    // Se o primeiro caractere for 0, remove-o\r",
									"    if (numeroResidencia[0] === '0') {\r",
									"        numeroResidencia = numeroResidencia.slice(1); // Remove o primeiro caractere\r",
									"    }\r",
									"\r",
									"    // Garantindo que o número tenha no máximo 10 caracteres\r",
									"    if (numeroResidencia.length > 10) {\r",
									"        numeroResidencia = numeroResidencia.slice(0, 10); // Limita a 10 caracteres\r",
									"    }\r",
									"\r",
									"    return numeroResidencia;\r",
									"}\r",
									"\r",
									"// Gerando o número de residência e armazenando como variável de ambiente\r",
									"const numeroResidenciaGerado = gerarNumeroResidencia();\r",
									"pm.environment.set(\"numeroResidencia\", numeroResidenciaGerado);\r",
									"\r",
									"function bairro() {\r",
									"    const names = ['Leblon', 'Ipanema', 'Copacabana', 'Barra da Tijuca', 'Botafogo', 'Lapa', 'Santa Teresa', 'Jardim Botânico', 'Flamengo', 'São Conrado', 'Moema', 'Vila Madalena', 'Pinheiros', 'Jardins', 'Aclimação', 'Brooklin', 'Tatuapé', 'Vila Progredior', 'Vila Nova Conceição', 'Campo Belo','Centro', 'Praia de Belas', 'Moinhos de Vento', 'Petrópolis', 'Tristeza', 'Caminho das Árvores', 'Pituba', 'Stella Maris', 'Parque Atlântico', 'Costa Azul', 'Vila Galvão', 'Santo Amaro', 'Perdizes', 'Aclimação', 'Vila Sônia', 'Cidade Dutra', 'São Bernardo do Campo', 'Vila Mariana', 'Bela Vista', 'Liberdade','Pinheiros', 'Itaim Bibi', 'Santa Cecília', 'Tucuruvi', 'Chácara Santo Antônio', 'Água Fria', 'Vila Olímpia', 'Vila São Francisco', 'Consolação', 'Vila Madalena']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Bairro\", bairro())\r",
									"\r",
									"function cidade() {\r",
									"    const names = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador', 'Curitiba', 'Fortaleza', 'Recife', 'Brasília', 'Manaus', 'Vitória', 'Goiânia', 'Belém', 'Natal', 'São Luís', 'Maceió', 'Campo Grande', 'João Pessoa', 'Aracaju', 'Cuiabá', 'Florianópolis', 'Teresina', 'Palmas', 'Macapá', 'Rio Branco', 'Boa Vista', 'Porto Velho', 'Anápolis', 'Caruaru', 'Londrina','Marabá', 'Araraquara', 'Sorocaba', 'Santos', 'Niterói', 'Mogi das Cruzes', 'Caxias do Sul', 'Barueri', 'Campinas', 'São José', 'Ponta Grossa', 'Jundiaí', 'Uberlândia', 'Diadema', 'Santo André', 'São Bernardo do Campo', 'Itaquaquecetuba', 'Ribeirão Preto', 'Juiz de Fora']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Cidade\", cidade())\r",
									"\r",
									"function abreviacao() {\r",
									"    const names = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"AbreviacaoEstado\", abreviacao())\r",
									"\r",
									"function randomCep() {\r",
									"    let randomCep = '';\r",
									"   \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        randomCep += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCep;\r",
									"}\r",
									"pm.environment.set(\"cep\", randomCep());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomeEmpresa}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"{{fullnameUser}}\",\r\n  \"telephone\": \"{{telefone}}\",\r\n  \"serviceDescription\": \"{{Descricao}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{cep}}\",\r\n      \"city\": \"{{Cidade}}\",\r\n      \"state\": \"{{AbreviacaoEstado}}\",\r\n      \"district\": \"{{Bairro}}\",\r\n      \"street\": \"{{logradouroCompleto}}\",\r\n      \"number\": \"{{numeroResidencia}}\",\r\n      \"complement\": \"\",\r\n      \"country\": \"Brasil Argentina Paraguai Uruguai Alemanha Inglaterra Espanha Italia França \"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTM0MSwiZXhwIjoxNzM5MzE1NzQxfQ.cgJqYe74cprHCRTY9YLF_B-Hfgfp8l8lr6gDrEuqMi4' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"corporateName\": \"Matheus Sousa Testes\",\r\n  \"registerCompany\": \"57126456000155\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com o campo CEP em branco",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function empresa() {\r",
									"    const names = [\"TechNova\", \"Bytewave\", \"Cyberion\", \"InovaTech\", \"Nexabyte\", \"Softtron\", \"Codeverse\", \"Dataflux\", \"Infinitron\", \"LogiCore\", \"Zentek\",\"Neurobyte\", \"Cloudix\", \"Sysnova\", \"Hexabit\", \"AIgorithm\", \"Quantumix\", \"Webtron\", \"Netflux\", \"Cyberflux\", \"Deepcode\", \"Techpulse\", \"Synaptech\", \"Codexis\", \"Nexonix\", \"Algobyte\", \"Infobyte\", \"Datazen\", \"Digiflow\", \"Innovix\", \"Coretron\", \"Zybernet\", \"Neurotech\", \"Nanobyte\", \"Virtunix\", \"Codexel\", \"Optibit\", \"Bitnova\", \"Globotron\", \"Digiware\", \"Skytech\", \"Cybervox\", \"Techspire\", \"Softbit\", \"MetaTech\", \"Synthron\", \"Virtuabyte\", \"Cloudtron\", \"Algonix\", \"Bitzen\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Empresa\", empresa())\r",
									"\r",
									"function tag() {\r",
									"    const tagnames = ['Solutions', 'Tech', 'Digital', 'Systems', 'Software', 'Cloud', 'AI', 'Cyber', 'Data', 'Analytics','Network', 'Security', 'Labs', 'Smart', 'Logic', 'Innovation', 'IT', 'Global', 'Developers', 'Code', 'Techno', 'Automations', 'Cloudware', 'Dynamics', 'Vision', 'Intelligence', 'NextGen', 'Computing', 'Innovators', 'Engineering', 'Performance', 'Softworks', 'Logicware', 'Digitalware', 'Transform', 'Platform', 'Smartware', 'Dataflow', 'Byte', 'Edge', 'Nexus', 'Techworks', 'Bit', 'Virtual', 'SystemsX', 'Infotech', 'Genix', 'Quantum', 'Bitware', 'CloudX'];\r",
									"\r",
									"    const randomTastName = tagnames[Math.floor(Math.random() * tagnames.length)]\r",
									"    return randomTastName\r",
									"}\r",
									"pm.environment.set(\"Tag\", tag())\r",
									"\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"Empresa\") + \" \" + pm.environment.get(\"Tag\"))\r",
									"\r",
									"\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"\r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									"\r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									"\r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									"\r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									"\r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									"\r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"CNPJ\", cnpjGerado);\r",
									"\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function gerarTelefone() {\r",
									"    // Gerando um DDD aleatório entre 11 e 99\r",
									"    const ddd = Math.floor(Math.random() * (99 - 11 + 1)) + 11;\r",
									"\r",
									"    // Gerando o número de telefone com 9 dígitos, começando com 9\r",
									"    const numero = Math.floor(Math.random() * 100000000) + 900000000; // Gera um número aleatório entre 900000000 e 999999999 (começando com '9')\r",
									"\r",
									"    // Concatenando +55, o DDD e o número gerado para formar o telefone\r",
									"    const telefone = `55${ddd}${numero.toString().slice(0, 5)}${numero.toString().slice(5, 9)}`;\r",
									"\r",
									"    return telefone;\r",
									"}\r",
									"\r",
									"// Gerando o número de telefone e armazenando como variável de ambiente\r",
									"const telefoneGerado = gerarTelefone();\r",
									"pm.environment.set(\"telefone\", telefoneGerado);\r",
									"\r",
									"function descricao() {\r",
									"    const names = [\"Testes\", \"Automação\", \"FrontEnd\", \"Backend\",\"Banco de Dados\", \"IA\",\"AWS\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Descricao\", descricao())\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"NomeRua\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"NomeRuas\", lastname())\r",
									"\r",
									"pm.environment.set(\"nomeruaComposto\", \r",
									"    pm.environment.get(\"NomeRua\") + \" \" + pm.environment.get(\"NomeRuas\"))\r",
									"\r",
									"function logradouro() {\r",
									"    const names = [\"Avenida\", \"Rua\", \"Alameda\", \"Travessa\", \"Praça\", \"Rodovia\", \"Estrada\", \"Largo\", \"Viaduto\", \"Marginal\", \"Parque\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Logradouro\", logradouro())\r",
									"\r",
									"pm.environment.set(\"logradouroCompleto\", \r",
									"    pm.environment.get(\"Logradouro\") + \" \" + pm.environment.get(\"nomeruaComposto\"))\r",
									"\r",
									"\r",
									"function gerarNumeroResidencia() {\r",
									"    // Definindo a probabilidade de gerar números com mais de 5 caracteres\r",
									"    const tamanhoNumero = Math.random() < 0.8 ? Math.floor(Math.random() * 5) + 1 : Math.floor(Math.random() * 6) + 5;\r",
									"\r",
									"    // Gerando um número aleatório com o tamanho definido\r",
									"    let numeroResidencia = Math.floor(Math.random() * Math.pow(10, tamanhoNumero)).toString(); // Gera número aleatório com o tamanho desejado\r",
									"\r",
									"    // Se o primeiro caractere for 0, remove-o\r",
									"    if (numeroResidencia[0] === '0') {\r",
									"        numeroResidencia = numeroResidencia.slice(1); // Remove o primeiro caractere\r",
									"    }\r",
									"\r",
									"    // Garantindo que o número tenha no máximo 10 caracteres\r",
									"    if (numeroResidencia.length > 10) {\r",
									"        numeroResidencia = numeroResidencia.slice(0, 10); // Limita a 10 caracteres\r",
									"    }\r",
									"\r",
									"    return numeroResidencia;\r",
									"}\r",
									"\r",
									"// Gerando o número de residência e armazenando como variável de ambiente\r",
									"const numeroResidenciaGerado = gerarNumeroResidencia();\r",
									"pm.environment.set(\"numeroResidencia\", numeroResidenciaGerado);\r",
									"\r",
									"function bairro() {\r",
									"    const names = ['Leblon', 'Ipanema', 'Copacabana', 'Barra da Tijuca', 'Botafogo', 'Lapa', 'Santa Teresa', 'Jardim Botânico', 'Flamengo', 'São Conrado', 'Moema', 'Vila Madalena', 'Pinheiros', 'Jardins', 'Aclimação', 'Brooklin', 'Tatuapé', 'Vila Progredior', 'Vila Nova Conceição', 'Campo Belo','Centro', 'Praia de Belas', 'Moinhos de Vento', 'Petrópolis', 'Tristeza', 'Caminho das Árvores', 'Pituba', 'Stella Maris', 'Parque Atlântico', 'Costa Azul', 'Vila Galvão', 'Santo Amaro', 'Perdizes', 'Aclimação', 'Vila Sônia', 'Cidade Dutra', 'São Bernardo do Campo', 'Vila Mariana', 'Bela Vista', 'Liberdade','Pinheiros', 'Itaim Bibi', 'Santa Cecília', 'Tucuruvi', 'Chácara Santo Antônio', 'Água Fria', 'Vila Olímpia', 'Vila São Francisco', 'Consolação', 'Vila Madalena']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Bairro\", bairro())\r",
									"\r",
									"function cidade() {\r",
									"    const names = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador', 'Curitiba', 'Fortaleza', 'Recife', 'Brasília', 'Manaus', 'Vitória', 'Goiânia', 'Belém', 'Natal', 'São Luís', 'Maceió', 'Campo Grande', 'João Pessoa', 'Aracaju', 'Cuiabá', 'Florianópolis', 'Teresina', 'Palmas', 'Macapá', 'Rio Branco', 'Boa Vista', 'Porto Velho', 'Anápolis', 'Caruaru', 'Londrina','Marabá', 'Araraquara', 'Sorocaba', 'Santos', 'Niterói', 'Mogi das Cruzes', 'Caxias do Sul', 'Barueri', 'Campinas', 'São José', 'Ponta Grossa', 'Jundiaí', 'Uberlândia', 'Diadema', 'Santo André', 'São Bernardo do Campo', 'Itaquaquecetuba', 'Ribeirão Preto', 'Juiz de Fora']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Cidade\", cidade())\r",
									"\r",
									"function abreviacao() {\r",
									"    const names = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"AbreviacaoEstado\", abreviacao())\r",
									"\r",
									"function randomCep() {\r",
									"    let randomCep = '';\r",
									"   \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        randomCep += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCep;\r",
									"}\r",
									"pm.environment.set(\"cep\", randomCep());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Mensagem de erro\",function(){\r",
									"     pm.expect(pm.response.json().error[0]).to.equal(\"O campo CEP é obrigatório\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomeEmpresa}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"{{fullnameUser}}\",\r\n  \"telephone\": \"{{telefone}}\",\r\n  \"serviceDescription\": \"{{Descricao}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"\",\r\n      \"city\": \"{{Cidade}}\",\r\n      \"state\": \"{{AbreviacaoEstado}}\",\r\n      \"district\": \"{{Bairro}}\",\r\n      \"street\": \"{{logradouroCompleto}}\",\r\n      \"number\": \"{{numeroResidencia}}\",\r\n      \"complement\": \"\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTM0MSwiZXhwIjoxNzM5MzE1NzQxfQ.cgJqYe74cprHCRTY9YLF_B-Hfgfp8l8lr6gDrEuqMi4' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"corporateName\": \"Matheus Sousa Testes\",\r\n  \"registerCompany\": \"57126456000155\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com o campo CEP com letras",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function empresa() {\r",
									"    const names = [\"TechNova\", \"Bytewave\", \"Cyberion\", \"InovaTech\", \"Nexabyte\", \"Softtron\", \"Codeverse\", \"Dataflux\", \"Infinitron\", \"LogiCore\", \"Zentek\",\"Neurobyte\", \"Cloudix\", \"Sysnova\", \"Hexabit\", \"AIgorithm\", \"Quantumix\", \"Webtron\", \"Netflux\", \"Cyberflux\", \"Deepcode\", \"Techpulse\", \"Synaptech\", \"Codexis\", \"Nexonix\", \"Algobyte\", \"Infobyte\", \"Datazen\", \"Digiflow\", \"Innovix\", \"Coretron\", \"Zybernet\", \"Neurotech\", \"Nanobyte\", \"Virtunix\", \"Codexel\", \"Optibit\", \"Bitnova\", \"Globotron\", \"Digiware\", \"Skytech\", \"Cybervox\", \"Techspire\", \"Softbit\", \"MetaTech\", \"Synthron\", \"Virtuabyte\", \"Cloudtron\", \"Algonix\", \"Bitzen\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Empresa\", empresa())\r",
									"\r",
									"function tag() {\r",
									"    const tagnames = ['Solutions', 'Tech', 'Digital', 'Systems', 'Software', 'Cloud', 'AI', 'Cyber', 'Data', 'Analytics','Network', 'Security', 'Labs', 'Smart', 'Logic', 'Innovation', 'IT', 'Global', 'Developers', 'Code', 'Techno', 'Automations', 'Cloudware', 'Dynamics', 'Vision', 'Intelligence', 'NextGen', 'Computing', 'Innovators', 'Engineering', 'Performance', 'Softworks', 'Logicware', 'Digitalware', 'Transform', 'Platform', 'Smartware', 'Dataflow', 'Byte', 'Edge', 'Nexus', 'Techworks', 'Bit', 'Virtual', 'SystemsX', 'Infotech', 'Genix', 'Quantum', 'Bitware', 'CloudX'];\r",
									"\r",
									"    const randomTastName = tagnames[Math.floor(Math.random() * tagnames.length)]\r",
									"    return randomTastName\r",
									"}\r",
									"pm.environment.set(\"Tag\", tag())\r",
									"\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"Empresa\") + \" \" + pm.environment.get(\"Tag\"))\r",
									"\r",
									"\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"\r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									"\r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									"\r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									"\r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									"\r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									"\r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"CNPJ\", cnpjGerado);\r",
									"\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function gerarTelefone() {\r",
									"    // Gerando um DDD aleatório entre 11 e 99\r",
									"    const ddd = Math.floor(Math.random() * (99 - 11 + 1)) + 11;\r",
									"\r",
									"    // Gerando o número de telefone com 9 dígitos, começando com 9\r",
									"    const numero = Math.floor(Math.random() * 100000000) + 900000000; // Gera um número aleatório entre 900000000 e 999999999 (começando com '9')\r",
									"\r",
									"    // Concatenando +55, o DDD e o número gerado para formar o telefone\r",
									"    const telefone = `55${ddd}${numero.toString().slice(0, 5)}${numero.toString().slice(5, 9)}`;\r",
									"\r",
									"    return telefone;\r",
									"}\r",
									"\r",
									"// Gerando o número de telefone e armazenando como variável de ambiente\r",
									"const telefoneGerado = gerarTelefone();\r",
									"pm.environment.set(\"telefone\", telefoneGerado);\r",
									"\r",
									"function descricao() {\r",
									"    const names = [\"Testes\", \"Automação\", \"FrontEnd\", \"Backend\",\"Banco de Dados\", \"IA\",\"AWS\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Descricao\", descricao())\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"NomeRua\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"NomeRuas\", lastname())\r",
									"\r",
									"pm.environment.set(\"nomeruaComposto\", \r",
									"    pm.environment.get(\"NomeRua\") + \" \" + pm.environment.get(\"NomeRuas\"))\r",
									"\r",
									"function logradouro() {\r",
									"    const names = [\"Avenida\", \"Rua\", \"Alameda\", \"Travessa\", \"Praça\", \"Rodovia\", \"Estrada\", \"Largo\", \"Viaduto\", \"Marginal\", \"Parque\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Logradouro\", logradouro())\r",
									"\r",
									"pm.environment.set(\"logradouroCompleto\", \r",
									"    pm.environment.get(\"Logradouro\") + \" \" + pm.environment.get(\"nomeruaComposto\"))\r",
									"\r",
									"\r",
									"function gerarNumeroResidencia() {\r",
									"    // Definindo a probabilidade de gerar números com mais de 5 caracteres\r",
									"    const tamanhoNumero = Math.random() < 0.8 ? Math.floor(Math.random() * 5) + 1 : Math.floor(Math.random() * 6) + 5;\r",
									"\r",
									"    // Gerando um número aleatório com o tamanho definido\r",
									"    let numeroResidencia = Math.floor(Math.random() * Math.pow(10, tamanhoNumero)).toString(); // Gera número aleatório com o tamanho desejado\r",
									"\r",
									"    // Se o primeiro caractere for 0, remove-o\r",
									"    if (numeroResidencia[0] === '0') {\r",
									"        numeroResidencia = numeroResidencia.slice(1); // Remove o primeiro caractere\r",
									"    }\r",
									"\r",
									"    // Garantindo que o número tenha no máximo 10 caracteres\r",
									"    if (numeroResidencia.length > 10) {\r",
									"        numeroResidencia = numeroResidencia.slice(0, 10); // Limita a 10 caracteres\r",
									"    }\r",
									"\r",
									"    return numeroResidencia;\r",
									"}\r",
									"\r",
									"// Gerando o número de residência e armazenando como variável de ambiente\r",
									"const numeroResidenciaGerado = gerarNumeroResidencia();\r",
									"pm.environment.set(\"numeroResidencia\", numeroResidenciaGerado);\r",
									"\r",
									"function bairro() {\r",
									"    const names = ['Leblon', 'Ipanema', 'Copacabana', 'Barra da Tijuca', 'Botafogo', 'Lapa', 'Santa Teresa', 'Jardim Botânico', 'Flamengo', 'São Conrado', 'Moema', 'Vila Madalena', 'Pinheiros', 'Jardins', 'Aclimação', 'Brooklin', 'Tatuapé', 'Vila Progredior', 'Vila Nova Conceição', 'Campo Belo','Centro', 'Praia de Belas', 'Moinhos de Vento', 'Petrópolis', 'Tristeza', 'Caminho das Árvores', 'Pituba', 'Stella Maris', 'Parque Atlântico', 'Costa Azul', 'Vila Galvão', 'Santo Amaro', 'Perdizes', 'Aclimação', 'Vila Sônia', 'Cidade Dutra', 'São Bernardo do Campo', 'Vila Mariana', 'Bela Vista', 'Liberdade','Pinheiros', 'Itaim Bibi', 'Santa Cecília', 'Tucuruvi', 'Chácara Santo Antônio', 'Água Fria', 'Vila Olímpia', 'Vila São Francisco', 'Consolação', 'Vila Madalena']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Bairro\", bairro())\r",
									"\r",
									"function cidade() {\r",
									"    const names = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador', 'Curitiba', 'Fortaleza', 'Recife', 'Brasília', 'Manaus', 'Vitória', 'Goiânia', 'Belém', 'Natal', 'São Luís', 'Maceió', 'Campo Grande', 'João Pessoa', 'Aracaju', 'Cuiabá', 'Florianópolis', 'Teresina', 'Palmas', 'Macapá', 'Rio Branco', 'Boa Vista', 'Porto Velho', 'Anápolis', 'Caruaru', 'Londrina','Marabá', 'Araraquara', 'Sorocaba', 'Santos', 'Niterói', 'Mogi das Cruzes', 'Caxias do Sul', 'Barueri', 'Campinas', 'São José', 'Ponta Grossa', 'Jundiaí', 'Uberlândia', 'Diadema', 'Santo André', 'São Bernardo do Campo', 'Itaquaquecetuba', 'Ribeirão Preto', 'Juiz de Fora']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Cidade\", cidade())\r",
									"\r",
									"function abreviacao() {\r",
									"    const names = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"AbreviacaoEstado\", abreviacao())\r",
									"\r",
									"function randomCep() {\r",
									"    let randomCep = '';\r",
									"   \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        randomCep += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCep;\r",
									"}\r",
									"pm.environment.set(\"cep\", randomCep());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomeEmpresa}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"{{fullnameUser}}\",\r\n  \"telephone\": \"{{telefone}}\",\r\n  \"serviceDescription\": \"{{Descricao}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"0803000O\",\r\n      \"city\": \"{{Cidade}}\",\r\n      \"state\": \"{{AbreviacaoEstado}}\",\r\n      \"district\": \"{{Bairro}}\",\r\n      \"street\": \"{{logradouroCompleto}}\",\r\n      \"number\": \"{{numeroResidencia}}\",\r\n      \"complement\": \"\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTM0MSwiZXhwIjoxNzM5MzE1NzQxfQ.cgJqYe74cprHCRTY9YLF_B-Hfgfp8l8lr6gDrEuqMi4' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"corporateName\": \"Matheus Sousa Testes\",\r\n  \"registerCompany\": \"57126456000155\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com o campo CEP com caractere especial",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function empresa() {\r",
									"    const names = [\"TechNova\", \"Bytewave\", \"Cyberion\", \"InovaTech\", \"Nexabyte\", \"Softtron\", \"Codeverse\", \"Dataflux\", \"Infinitron\", \"LogiCore\", \"Zentek\",\"Neurobyte\", \"Cloudix\", \"Sysnova\", \"Hexabit\", \"AIgorithm\", \"Quantumix\", \"Webtron\", \"Netflux\", \"Cyberflux\", \"Deepcode\", \"Techpulse\", \"Synaptech\", \"Codexis\", \"Nexonix\", \"Algobyte\", \"Infobyte\", \"Datazen\", \"Digiflow\", \"Innovix\", \"Coretron\", \"Zybernet\", \"Neurotech\", \"Nanobyte\", \"Virtunix\", \"Codexel\", \"Optibit\", \"Bitnova\", \"Globotron\", \"Digiware\", \"Skytech\", \"Cybervox\", \"Techspire\", \"Softbit\", \"MetaTech\", \"Synthron\", \"Virtuabyte\", \"Cloudtron\", \"Algonix\", \"Bitzen\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Empresa\", empresa())\r",
									"\r",
									"function tag() {\r",
									"    const tagnames = ['Solutions', 'Tech', 'Digital', 'Systems', 'Software', 'Cloud', 'AI', 'Cyber', 'Data', 'Analytics','Network', 'Security', 'Labs', 'Smart', 'Logic', 'Innovation', 'IT', 'Global', 'Developers', 'Code', 'Techno', 'Automations', 'Cloudware', 'Dynamics', 'Vision', 'Intelligence', 'NextGen', 'Computing', 'Innovators', 'Engineering', 'Performance', 'Softworks', 'Logicware', 'Digitalware', 'Transform', 'Platform', 'Smartware', 'Dataflow', 'Byte', 'Edge', 'Nexus', 'Techworks', 'Bit', 'Virtual', 'SystemsX', 'Infotech', 'Genix', 'Quantum', 'Bitware', 'CloudX'];\r",
									"\r",
									"    const randomTastName = tagnames[Math.floor(Math.random() * tagnames.length)]\r",
									"    return randomTastName\r",
									"}\r",
									"pm.environment.set(\"Tag\", tag())\r",
									"\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"Empresa\") + \" \" + pm.environment.get(\"Tag\"))\r",
									"\r",
									"\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"\r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									"\r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									"\r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									"\r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									"\r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									"\r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"CNPJ\", cnpjGerado);\r",
									"\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function gerarTelefone() {\r",
									"    // Gerando um DDD aleatório entre 11 e 99\r",
									"    const ddd = Math.floor(Math.random() * (99 - 11 + 1)) + 11;\r",
									"\r",
									"    // Gerando o número de telefone com 9 dígitos, começando com 9\r",
									"    const numero = Math.floor(Math.random() * 100000000) + 900000000; // Gera um número aleatório entre 900000000 e 999999999 (começando com '9')\r",
									"\r",
									"    // Concatenando +55, o DDD e o número gerado para formar o telefone\r",
									"    const telefone = `55${ddd}${numero.toString().slice(0, 5)}${numero.toString().slice(5, 9)}`;\r",
									"\r",
									"    return telefone;\r",
									"}\r",
									"\r",
									"// Gerando o número de telefone e armazenando como variável de ambiente\r",
									"const telefoneGerado = gerarTelefone();\r",
									"pm.environment.set(\"telefone\", telefoneGerado);\r",
									"\r",
									"function descricao() {\r",
									"    const names = [\"Testes\", \"Automação\", \"FrontEnd\", \"Backend\",\"Banco de Dados\", \"IA\",\"AWS\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Descricao\", descricao())\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"NomeRua\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"NomeRuas\", lastname())\r",
									"\r",
									"pm.environment.set(\"nomeruaComposto\", \r",
									"    pm.environment.get(\"NomeRua\") + \" \" + pm.environment.get(\"NomeRuas\"))\r",
									"\r",
									"function logradouro() {\r",
									"    const names = [\"Avenida\", \"Rua\", \"Alameda\", \"Travessa\", \"Praça\", \"Rodovia\", \"Estrada\", \"Largo\", \"Viaduto\", \"Marginal\", \"Parque\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Logradouro\", logradouro())\r",
									"\r",
									"pm.environment.set(\"logradouroCompleto\", \r",
									"    pm.environment.get(\"Logradouro\") + \" \" + pm.environment.get(\"nomeruaComposto\"))\r",
									"\r",
									"\r",
									"function gerarNumeroResidencia() {\r",
									"    // Definindo a probabilidade de gerar números com mais de 5 caracteres\r",
									"    const tamanhoNumero = Math.random() < 0.8 ? Math.floor(Math.random() * 5) + 1 : Math.floor(Math.random() * 6) + 5;\r",
									"\r",
									"    // Gerando um número aleatório com o tamanho definido\r",
									"    let numeroResidencia = Math.floor(Math.random() * Math.pow(10, tamanhoNumero)).toString(); // Gera número aleatório com o tamanho desejado\r",
									"\r",
									"    // Se o primeiro caractere for 0, remove-o\r",
									"    if (numeroResidencia[0] === '0') {\r",
									"        numeroResidencia = numeroResidencia.slice(1); // Remove o primeiro caractere\r",
									"    }\r",
									"\r",
									"    // Garantindo que o número tenha no máximo 10 caracteres\r",
									"    if (numeroResidencia.length > 10) {\r",
									"        numeroResidencia = numeroResidencia.slice(0, 10); // Limita a 10 caracteres\r",
									"    }\r",
									"\r",
									"    return numeroResidencia;\r",
									"}\r",
									"\r",
									"// Gerando o número de residência e armazenando como variável de ambiente\r",
									"const numeroResidenciaGerado = gerarNumeroResidencia();\r",
									"pm.environment.set(\"numeroResidencia\", numeroResidenciaGerado);\r",
									"\r",
									"function bairro() {\r",
									"    const names = ['Leblon', 'Ipanema', 'Copacabana', 'Barra da Tijuca', 'Botafogo', 'Lapa', 'Santa Teresa', 'Jardim Botânico', 'Flamengo', 'São Conrado', 'Moema', 'Vila Madalena', 'Pinheiros', 'Jardins', 'Aclimação', 'Brooklin', 'Tatuapé', 'Vila Progredior', 'Vila Nova Conceição', 'Campo Belo','Centro', 'Praia de Belas', 'Moinhos de Vento', 'Petrópolis', 'Tristeza', 'Caminho das Árvores', 'Pituba', 'Stella Maris', 'Parque Atlântico', 'Costa Azul', 'Vila Galvão', 'Santo Amaro', 'Perdizes', 'Aclimação', 'Vila Sônia', 'Cidade Dutra', 'São Bernardo do Campo', 'Vila Mariana', 'Bela Vista', 'Liberdade','Pinheiros', 'Itaim Bibi', 'Santa Cecília', 'Tucuruvi', 'Chácara Santo Antônio', 'Água Fria', 'Vila Olímpia', 'Vila São Francisco', 'Consolação', 'Vila Madalena']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Bairro\", bairro())\r",
									"\r",
									"function cidade() {\r",
									"    const names = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador', 'Curitiba', 'Fortaleza', 'Recife', 'Brasília', 'Manaus', 'Vitória', 'Goiânia', 'Belém', 'Natal', 'São Luís', 'Maceió', 'Campo Grande', 'João Pessoa', 'Aracaju', 'Cuiabá', 'Florianópolis', 'Teresina', 'Palmas', 'Macapá', 'Rio Branco', 'Boa Vista', 'Porto Velho', 'Anápolis', 'Caruaru', 'Londrina','Marabá', 'Araraquara', 'Sorocaba', 'Santos', 'Niterói', 'Mogi das Cruzes', 'Caxias do Sul', 'Barueri', 'Campinas', 'São José', 'Ponta Grossa', 'Jundiaí', 'Uberlândia', 'Diadema', 'Santo André', 'São Bernardo do Campo', 'Itaquaquecetuba', 'Ribeirão Preto', 'Juiz de Fora']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Cidade\", cidade())\r",
									"\r",
									"function abreviacao() {\r",
									"    const names = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"AbreviacaoEstado\", abreviacao())\r",
									"\r",
									"function randomCep() {\r",
									"    let randomCep = '';\r",
									"   \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        randomCep += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCep;\r",
									"}\r",
									"pm.environment.set(\"cep\", randomCep());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomeEmpresa}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"{{fullnameUser}}\",\r\n  \"telephone\": \"{{telefone}}\",\r\n  \"serviceDescription\": \"{{Descricao}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"0803@000\",\r\n      \"city\": \"{{Cidade}}\",\r\n      \"state\": \"{{AbreviacaoEstado}}\",\r\n      \"district\": \"{{Bairro}}\",\r\n      \"street\": \"{{logradouroCompleto}}\",\r\n      \"number\": \"{{numeroResidencia}}\",\r\n      \"complement\": \"\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTM0MSwiZXhwIjoxNzM5MzE1NzQxfQ.cgJqYe74cprHCRTY9YLF_B-Hfgfp8l8lr6gDrEuqMi4' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"corporateName\": \"Matheus Sousa Testes\",\r\n  \"registerCompany\": \"57126456000155\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com o campo CEP com mais de 8 numeros",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function empresa() {\r",
									"    const names = [\"TechNova\", \"Bytewave\", \"Cyberion\", \"InovaTech\", \"Nexabyte\", \"Softtron\", \"Codeverse\", \"Dataflux\", \"Infinitron\", \"LogiCore\", \"Zentek\",\"Neurobyte\", \"Cloudix\", \"Sysnova\", \"Hexabit\", \"AIgorithm\", \"Quantumix\", \"Webtron\", \"Netflux\", \"Cyberflux\", \"Deepcode\", \"Techpulse\", \"Synaptech\", \"Codexis\", \"Nexonix\", \"Algobyte\", \"Infobyte\", \"Datazen\", \"Digiflow\", \"Innovix\", \"Coretron\", \"Zybernet\", \"Neurotech\", \"Nanobyte\", \"Virtunix\", \"Codexel\", \"Optibit\", \"Bitnova\", \"Globotron\", \"Digiware\", \"Skytech\", \"Cybervox\", \"Techspire\", \"Softbit\", \"MetaTech\", \"Synthron\", \"Virtuabyte\", \"Cloudtron\", \"Algonix\", \"Bitzen\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Empresa\", empresa())\r",
									"\r",
									"function tag() {\r",
									"    const tagnames = ['Solutions', 'Tech', 'Digital', 'Systems', 'Software', 'Cloud', 'AI', 'Cyber', 'Data', 'Analytics','Network', 'Security', 'Labs', 'Smart', 'Logic', 'Innovation', 'IT', 'Global', 'Developers', 'Code', 'Techno', 'Automations', 'Cloudware', 'Dynamics', 'Vision', 'Intelligence', 'NextGen', 'Computing', 'Innovators', 'Engineering', 'Performance', 'Softworks', 'Logicware', 'Digitalware', 'Transform', 'Platform', 'Smartware', 'Dataflow', 'Byte', 'Edge', 'Nexus', 'Techworks', 'Bit', 'Virtual', 'SystemsX', 'Infotech', 'Genix', 'Quantum', 'Bitware', 'CloudX'];\r",
									"\r",
									"    const randomTastName = tagnames[Math.floor(Math.random() * tagnames.length)]\r",
									"    return randomTastName\r",
									"}\r",
									"pm.environment.set(\"Tag\", tag())\r",
									"\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"Empresa\") + \" \" + pm.environment.get(\"Tag\"))\r",
									"\r",
									"\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"\r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									"\r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									"\r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									"\r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									"\r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									"\r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"CNPJ\", cnpjGerado);\r",
									"\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function gerarTelefone() {\r",
									"    // Gerando um DDD aleatório entre 11 e 99\r",
									"    const ddd = Math.floor(Math.random() * (99 - 11 + 1)) + 11;\r",
									"\r",
									"    // Gerando o número de telefone com 9 dígitos, começando com 9\r",
									"    const numero = Math.floor(Math.random() * 100000000) + 900000000; // Gera um número aleatório entre 900000000 e 999999999 (começando com '9')\r",
									"\r",
									"    // Concatenando +55, o DDD e o número gerado para formar o telefone\r",
									"    const telefone = `55${ddd}${numero.toString().slice(0, 5)}${numero.toString().slice(5, 9)}`;\r",
									"\r",
									"    return telefone;\r",
									"}\r",
									"\r",
									"// Gerando o número de telefone e armazenando como variável de ambiente\r",
									"const telefoneGerado = gerarTelefone();\r",
									"pm.environment.set(\"telefone\", telefoneGerado);\r",
									"\r",
									"function descricao() {\r",
									"    const names = [\"Testes\", \"Automação\", \"FrontEnd\", \"Backend\",\"Banco de Dados\", \"IA\",\"AWS\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Descricao\", descricao())\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"NomeRua\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"NomeRuas\", lastname())\r",
									"\r",
									"pm.environment.set(\"nomeruaComposto\", \r",
									"    pm.environment.get(\"NomeRua\") + \" \" + pm.environment.get(\"NomeRuas\"))\r",
									"\r",
									"function logradouro() {\r",
									"    const names = [\"Avenida\", \"Rua\", \"Alameda\", \"Travessa\", \"Praça\", \"Rodovia\", \"Estrada\", \"Largo\", \"Viaduto\", \"Marginal\", \"Parque\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Logradouro\", logradouro())\r",
									"\r",
									"pm.environment.set(\"logradouroCompleto\", \r",
									"    pm.environment.get(\"Logradouro\") + \" \" + pm.environment.get(\"nomeruaComposto\"))\r",
									"\r",
									"\r",
									"function gerarNumeroResidencia() {\r",
									"    // Definindo a probabilidade de gerar números com mais de 5 caracteres\r",
									"    const tamanhoNumero = Math.random() < 0.8 ? Math.floor(Math.random() * 5) + 1 : Math.floor(Math.random() * 6) + 5;\r",
									"\r",
									"    // Gerando um número aleatório com o tamanho definido\r",
									"    let numeroResidencia = Math.floor(Math.random() * Math.pow(10, tamanhoNumero)).toString(); // Gera número aleatório com o tamanho desejado\r",
									"\r",
									"    // Se o primeiro caractere for 0, remove-o\r",
									"    if (numeroResidencia[0] === '0') {\r",
									"        numeroResidencia = numeroResidencia.slice(1); // Remove o primeiro caractere\r",
									"    }\r",
									"\r",
									"    // Garantindo que o número tenha no máximo 10 caracteres\r",
									"    if (numeroResidencia.length > 10) {\r",
									"        numeroResidencia = numeroResidencia.slice(0, 10); // Limita a 10 caracteres\r",
									"    }\r",
									"\r",
									"    return numeroResidencia;\r",
									"}\r",
									"\r",
									"// Gerando o número de residência e armazenando como variável de ambiente\r",
									"const numeroResidenciaGerado = gerarNumeroResidencia();\r",
									"pm.environment.set(\"numeroResidencia\", numeroResidenciaGerado);\r",
									"\r",
									"function bairro() {\r",
									"    const names = ['Leblon', 'Ipanema', 'Copacabana', 'Barra da Tijuca', 'Botafogo', 'Lapa', 'Santa Teresa', 'Jardim Botânico', 'Flamengo', 'São Conrado', 'Moema', 'Vila Madalena', 'Pinheiros', 'Jardins', 'Aclimação', 'Brooklin', 'Tatuapé', 'Vila Progredior', 'Vila Nova Conceição', 'Campo Belo','Centro', 'Praia de Belas', 'Moinhos de Vento', 'Petrópolis', 'Tristeza', 'Caminho das Árvores', 'Pituba', 'Stella Maris', 'Parque Atlântico', 'Costa Azul', 'Vila Galvão', 'Santo Amaro', 'Perdizes', 'Aclimação', 'Vila Sônia', 'Cidade Dutra', 'São Bernardo do Campo', 'Vila Mariana', 'Bela Vista', 'Liberdade','Pinheiros', 'Itaim Bibi', 'Santa Cecília', 'Tucuruvi', 'Chácara Santo Antônio', 'Água Fria', 'Vila Olímpia', 'Vila São Francisco', 'Consolação', 'Vila Madalena']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Bairro\", bairro())\r",
									"\r",
									"function cidade() {\r",
									"    const names = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador', 'Curitiba', 'Fortaleza', 'Recife', 'Brasília', 'Manaus', 'Vitória', 'Goiânia', 'Belém', 'Natal', 'São Luís', 'Maceió', 'Campo Grande', 'João Pessoa', 'Aracaju', 'Cuiabá', 'Florianópolis', 'Teresina', 'Palmas', 'Macapá', 'Rio Branco', 'Boa Vista', 'Porto Velho', 'Anápolis', 'Caruaru', 'Londrina','Marabá', 'Araraquara', 'Sorocaba', 'Santos', 'Niterói', 'Mogi das Cruzes', 'Caxias do Sul', 'Barueri', 'Campinas', 'São José', 'Ponta Grossa', 'Jundiaí', 'Uberlândia', 'Diadema', 'Santo André', 'São Bernardo do Campo', 'Itaquaquecetuba', 'Ribeirão Preto', 'Juiz de Fora']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Cidade\", cidade())\r",
									"\r",
									"function abreviacao() {\r",
									"    const names = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"AbreviacaoEstado\", abreviacao())\r",
									"\r",
									"function randomCep() {\r",
									"    let randomCep = '';\r",
									"   \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        randomCep += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCep;\r",
									"}\r",
									"pm.environment.set(\"cep\", randomCep());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomeEmpresa}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"{{fullnameUser}}\",\r\n  \"telephone\": \"{{telefone}}\",\r\n  \"serviceDescription\": \"{{Descricao}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"080300000000\",\r\n      \"city\": \"{{Cidade}}\",\r\n      \"state\": \"{{AbreviacaoEstado}}\",\r\n      \"district\": \"{{Bairro}}\",\r\n      \"street\": \"{{logradouroCompleto}}\",\r\n      \"number\": \"{{numeroResidencia}}\",\r\n      \"complement\": \"\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTM0MSwiZXhwIjoxNzM5MzE1NzQxfQ.cgJqYe74cprHCRTY9YLF_B-Hfgfp8l8lr6gDrEuqMi4' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"corporateName\": \"Matheus Sousa Testes\",\r\n  \"registerCompany\": \"57126456000155\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro com o campo CEP com menos de 8 numeros",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function empresa() {\r",
									"    const names = [\"TechNova\", \"Bytewave\", \"Cyberion\", \"InovaTech\", \"Nexabyte\", \"Softtron\", \"Codeverse\", \"Dataflux\", \"Infinitron\", \"LogiCore\", \"Zentek\",\"Neurobyte\", \"Cloudix\", \"Sysnova\", \"Hexabit\", \"AIgorithm\", \"Quantumix\", \"Webtron\", \"Netflux\", \"Cyberflux\", \"Deepcode\", \"Techpulse\", \"Synaptech\", \"Codexis\", \"Nexonix\", \"Algobyte\", \"Infobyte\", \"Datazen\", \"Digiflow\", \"Innovix\", \"Coretron\", \"Zybernet\", \"Neurotech\", \"Nanobyte\", \"Virtunix\", \"Codexel\", \"Optibit\", \"Bitnova\", \"Globotron\", \"Digiware\", \"Skytech\", \"Cybervox\", \"Techspire\", \"Softbit\", \"MetaTech\", \"Synthron\", \"Virtuabyte\", \"Cloudtron\", \"Algonix\", \"Bitzen\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Empresa\", empresa())\r",
									"\r",
									"function tag() {\r",
									"    const tagnames = ['Solutions', 'Tech', 'Digital', 'Systems', 'Software', 'Cloud', 'AI', 'Cyber', 'Data', 'Analytics','Network', 'Security', 'Labs', 'Smart', 'Logic', 'Innovation', 'IT', 'Global', 'Developers', 'Code', 'Techno', 'Automations', 'Cloudware', 'Dynamics', 'Vision', 'Intelligence', 'NextGen', 'Computing', 'Innovators', 'Engineering', 'Performance', 'Softworks', 'Logicware', 'Digitalware', 'Transform', 'Platform', 'Smartware', 'Dataflow', 'Byte', 'Edge', 'Nexus', 'Techworks', 'Bit', 'Virtual', 'SystemsX', 'Infotech', 'Genix', 'Quantum', 'Bitware', 'CloudX'];\r",
									"\r",
									"    const randomTastName = tagnames[Math.floor(Math.random() * tagnames.length)]\r",
									"    return randomTastName\r",
									"}\r",
									"pm.environment.set(\"Tag\", tag())\r",
									"\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"Empresa\") + \" \" + pm.environment.get(\"Tag\"))\r",
									"\r",
									"\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"\r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									"\r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									"\r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									"\r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									"\r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									"\r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									"\r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"CNPJ\", cnpjGerado);\r",
									"\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"fullnameUser\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"pm.environment.set(\"mailUser\", pm.environment.get(\"fullnameUser\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
									"\r",
									"function gerarTelefone() {\r",
									"    // Gerando um DDD aleatório entre 11 e 99\r",
									"    const ddd = Math.floor(Math.random() * (99 - 11 + 1)) + 11;\r",
									"\r",
									"    // Gerando o número de telefone com 9 dígitos, começando com 9\r",
									"    const numero = Math.floor(Math.random() * 100000000) + 900000000; // Gera um número aleatório entre 900000000 e 999999999 (começando com '9')\r",
									"\r",
									"    // Concatenando +55, o DDD e o número gerado para formar o telefone\r",
									"    const telefone = `55${ddd}${numero.toString().slice(0, 5)}${numero.toString().slice(5, 9)}`;\r",
									"\r",
									"    return telefone;\r",
									"}\r",
									"\r",
									"// Gerando o número de telefone e armazenando como variável de ambiente\r",
									"const telefoneGerado = gerarTelefone();\r",
									"pm.environment.set(\"telefone\", telefoneGerado);\r",
									"\r",
									"function descricao() {\r",
									"    const names = [\"Testes\", \"Automação\", \"FrontEnd\", \"Backend\",\"Banco de Dados\", \"IA\",\"AWS\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Descricao\", descricao())\r",
									"\r",
									"function firstname() {\r",
									"    const names = ['Ana', 'Bruno', 'Carlos', 'Daniela', 'Eduardo', 'Fernanda', 'Gabriel', 'Helena', 'Igor', 'Juliana', 'Kleber', 'Larissa', 'Marcos', 'Natália', 'Otávio', 'Patrícia','Quintino', 'Rafael', 'Sabrina', 'Tiago', 'Ursula', 'Victor', 'Wellington', 'Xavier','Yasmin', 'Zilda', 'Alex', 'Beatriz', 'César', 'Débora', 'Elias', 'Fábio', 'Giovana', 'Hugo', 'Isabela', 'João', 'Karen', 'Leandro', 'Melissa', 'Nelson', 'Olívia', 'Paulo', 'Quitéria', 'Renato', 'Samara', 'Tatiane', 'Ulisses', 'Vera', 'William', 'Zuleika'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"NomeRua\", firstname())\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Pereira', 'Costa', 'Rodrigues','Almeida', 'Lima', 'Gomes', 'Martins', 'Ribeiro', 'Fernandes', 'Carvalho', 'Araújo', 'Pinto', 'Moura', 'Vieira', 'Dias', 'Moreira', 'Teixeira', 'Barbosa', 'Correia','Cavalcante', 'Cardoso', 'Figueiredo', 'Campos', 'Nascimento', 'Brito', 'Castro', 'Azevedo', 'Maciel', 'Campos', 'Freitas', 'Rezende', 'Brandão', 'Monteiro', 'Martins','Xavier', 'Sampaio', 'Nunes', 'Lopes', 'Rosa', 'Viana', 'Ferreira', 'Tavares', 'Silveira','Carneiro', 'Leal'];\r",
									"\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"NomeRuas\", lastname())\r",
									"\r",
									"pm.environment.set(\"nomeruaComposto\", \r",
									"    pm.environment.get(\"NomeRua\") + \" \" + pm.environment.get(\"NomeRuas\"))\r",
									"\r",
									"function logradouro() {\r",
									"    const names = [\"Avenida\", \"Rua\", \"Alameda\", \"Travessa\", \"Praça\", \"Rodovia\", \"Estrada\", \"Largo\", \"Viaduto\", \"Marginal\", \"Parque\"];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Logradouro\", logradouro())\r",
									"\r",
									"pm.environment.set(\"logradouroCompleto\", \r",
									"    pm.environment.get(\"Logradouro\") + \" \" + pm.environment.get(\"nomeruaComposto\"))\r",
									"\r",
									"\r",
									"function gerarNumeroResidencia() {\r",
									"    // Definindo a probabilidade de gerar números com mais de 5 caracteres\r",
									"    const tamanhoNumero = Math.random() < 0.8 ? Math.floor(Math.random() * 5) + 1 : Math.floor(Math.random() * 6) + 5;\r",
									"\r",
									"    // Gerando um número aleatório com o tamanho definido\r",
									"    let numeroResidencia = Math.floor(Math.random() * Math.pow(10, tamanhoNumero)).toString(); // Gera número aleatório com o tamanho desejado\r",
									"\r",
									"    // Se o primeiro caractere for 0, remove-o\r",
									"    if (numeroResidencia[0] === '0') {\r",
									"        numeroResidencia = numeroResidencia.slice(1); // Remove o primeiro caractere\r",
									"    }\r",
									"\r",
									"    // Garantindo que o número tenha no máximo 10 caracteres\r",
									"    if (numeroResidencia.length > 10) {\r",
									"        numeroResidencia = numeroResidencia.slice(0, 10); // Limita a 10 caracteres\r",
									"    }\r",
									"\r",
									"    return numeroResidencia;\r",
									"}\r",
									"\r",
									"// Gerando o número de residência e armazenando como variável de ambiente\r",
									"const numeroResidenciaGerado = gerarNumeroResidencia();\r",
									"pm.environment.set(\"numeroResidencia\", numeroResidenciaGerado);\r",
									"\r",
									"function bairro() {\r",
									"    const names = ['Leblon', 'Ipanema', 'Copacabana', 'Barra da Tijuca', 'Botafogo', 'Lapa', 'Santa Teresa', 'Jardim Botânico', 'Flamengo', 'São Conrado', 'Moema', 'Vila Madalena', 'Pinheiros', 'Jardins', 'Aclimação', 'Brooklin', 'Tatuapé', 'Vila Progredior', 'Vila Nova Conceição', 'Campo Belo','Centro', 'Praia de Belas', 'Moinhos de Vento', 'Petrópolis', 'Tristeza', 'Caminho das Árvores', 'Pituba', 'Stella Maris', 'Parque Atlântico', 'Costa Azul', 'Vila Galvão', 'Santo Amaro', 'Perdizes', 'Aclimação', 'Vila Sônia', 'Cidade Dutra', 'São Bernardo do Campo', 'Vila Mariana', 'Bela Vista', 'Liberdade','Pinheiros', 'Itaim Bibi', 'Santa Cecília', 'Tucuruvi', 'Chácara Santo Antônio', 'Água Fria', 'Vila Olímpia', 'Vila São Francisco', 'Consolação', 'Vila Madalena']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Bairro\", bairro())\r",
									"\r",
									"function cidade() {\r",
									"    const names = ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Salvador', 'Curitiba', 'Fortaleza', 'Recife', 'Brasília', 'Manaus', 'Vitória', 'Goiânia', 'Belém', 'Natal', 'São Luís', 'Maceió', 'Campo Grande', 'João Pessoa', 'Aracaju', 'Cuiabá', 'Florianópolis', 'Teresina', 'Palmas', 'Macapá', 'Rio Branco', 'Boa Vista', 'Porto Velho', 'Anápolis', 'Caruaru', 'Londrina','Marabá', 'Araraquara', 'Sorocaba', 'Santos', 'Niterói', 'Mogi das Cruzes', 'Caxias do Sul', 'Barueri', 'Campinas', 'São José', 'Ponta Grossa', 'Jundiaí', 'Uberlândia', 'Diadema', 'Santo André', 'São Bernardo do Campo', 'Itaquaquecetuba', 'Ribeirão Preto', 'Juiz de Fora']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"Cidade\", cidade())\r",
									"\r",
									"function abreviacao() {\r",
									"    const names = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']\r",
									"\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"AbreviacaoEstado\", abreviacao())\r",
									"\r",
									"function randomCep() {\r",
									"    let randomCep = '';\r",
									"   \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        randomCep += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCep;\r",
									"}\r",
									"pm.environment.set(\"cep\", randomCep());\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomeEmpresa}}\",\r\n  \"registerCompany\": \"{{CNPJ}}\",\r\n  \"mail\": \"{{mailUser}}\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"{{fullnameUser}}\",\r\n  \"telephone\": \"{{telefone}}\",\r\n  \"serviceDescription\": \"{{Descricao}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"08030\",\r\n      \"city\": \"{{Cidade}}\",\r\n      \"state\": \"{{AbreviacaoEstado}}\",\r\n      \"district\": \"{{Bairro}}\",\r\n      \"street\": \"{{logradouroCompleto}}\",\r\n      \"number\": \"{{numeroResidencia}}\",\r\n      \"complement\": \"\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCR1NGcwYm81OTlFa1E4RGZSeGw4bHlPTzhiaDZ5QnlyRlVhN2k5cDV0N2pycElFaUx6MzJMLiIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDA2LzA5LzIwMjQsIDE2OjUyOjM2IEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjZkYjVkODQxZGY1NTQxNTBlNmQ2NGJlIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTM0MSwiZXhwIjoxNzM5MzE1NzQxfQ.cgJqYe74cprHCRTY9YLF_B-Hfgfp8l8lr6gDrEuqMi4' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"corporateName\": \"Matheus Sousa Testes\",\r\n  \"registerCompany\": \"57126456000155\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}'"
					},
					"response": []
				}
			]
		},
		{
			"name": "Company - PBI 20524 Lista cadastro empresa",
			"item": [
				{
					"name": "login acesso",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"tokenAcesso\", pm.response.json().token)\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"mail\": \"pegartoken@test.com.br\",\r\n  \"password\": \"1234@Test\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/login/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"login",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Lista todas as empresas",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{new_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/?token={{new_token}}",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							],
							"query": [
								{
									"key": "token",
									"value": "{{new_token}}"
								}
							]
						},
						"description": "Generated from cURL: curl -X 'GET' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NzlmYTRiNTRiMDNlMWViMzJmMmVhZDkiLCJmdWxsTmFtZSI6IlBlZ2FyIFRva2VuIiwibWFpbCI6InBlZ2FydG9rZW5AdGVzdC5jb20uYnIiLCJwYXNzd29yZCI6IiQyYiQxMCRBS3Njb3MzelJLeEw1WE51aGw5Zmllb2R5RGVpb0RwUldJMmxpSW1TUnJ3Z0QvdTVtaWxvZSIsImFjY2Vzc1Byb2ZpbGUiOiJBRE1JTiIsImNwZiI6IjAwMDIyMjMzMzQ0Iiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjY2ZGI1ZDg0MWRmNTU0MTUwZTZkNjRiZCIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoiZG9taW5nbywgMDIvMDIvMjAyNSwgMTQ6MDA6MzcgQlJUIiwicmVnaXN0cmF0aW9uTnVtYmVyIjoiUWFDb2RlcnMtMzUyIiwiX2lkIjoiNjc5ZmE0YjU0YjAzZTFlYjMyZjJlYWRhIn1dLCJfX3YiOjAsImlhdCI6MTczOTM4ODA1NiwiZXhwIjoxNzM5NDc0NDU2fQ.S42s78mAOMvNx-Sis2RWSeRNVGgBA0RnXAodSGK1nlU' \\\r\n  -H 'accept: application/json'"
					},
					"response": []
				},
				{
					"name": "Validacao_Campos_Empresas",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Buscar_Companies_Array contains expected fields\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"\r",
									"    jsonData.forEach(company => {\r",
									"        pm.expect(company).to.have.property(\"corporateName\");  \r",
									"        pm.expect(company).to.have.property(\"registerCompany\");  \r",
									"        pm.expect(company).to.have.property(\"responsibleContact\");  \r",
									"        pm.expect(company).to.have.property(\"mail\");  \r",
									"        pm.expect(company).to.have.property(\"telephone\");  \r",
									"        pm.expect(company.address[0]).to.have.property(\"city\");  \r",
									"        pm.expect(company.address[0]).to.have.property(\"state\");  \r",
									"        pm.expect(company.address[0]).to.have.property(\"country\");  \r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url_base}}/api/company/?token={{new_token}}",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							],
							"query": [
								{
									"key": "token",
									"value": "{{new_token}}"
								}
							]
						},
						"description": "Generated from cURL: curl -X 'GET' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NzlmYTRiNTRiMDNlMWViMzJmMmVhZDkiLCJmdWxsTmFtZSI6IlBlZ2FyIFRva2VuIiwibWFpbCI6InBlZ2FydG9rZW5AdGVzdC5jb20uYnIiLCJwYXNzd29yZCI6IiQyYiQxMCRBS3Njb3MzelJLeEw1WE51aGw5Zmllb2R5RGVpb0RwUldJMmxpSW1TUnJ3Z0QvdTVtaWxvZSIsImFjY2Vzc1Byb2ZpbGUiOiJBRE1JTiIsImNwZiI6IjAwMDIyMjMzMzQ0Iiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjY2ZGI1ZDg0MWRmNTU0MTUwZTZkNjRiZCIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoiZG9taW5nbywgMDIvMDIvMjAyNSwgMTQ6MDA6MzcgQlJUIiwicmVnaXN0cmF0aW9uTnVtYmVyIjoiUWFDb2RlcnMtMzUyIiwiX2lkIjoiNjc5ZmE0YjU0YjAzZTFlYjMyZjJlYWRhIn1dLCJfX3YiOjAsImlhdCI6MTczOTM4ODA1NiwiZXhwIjoxNzM5NDc0NDU2fQ.S42s78mAOMvNx-Sis2RWSeRNVGgBA0RnXAodSGK1nlU' \\\r\n  -H 'accept: application/json'"
					},
					"response": []
				},
				{
					"name": "Buscar_Empresas_Validando_Campos_Especificos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Buscar_Empresas_Array contém os campos esperados\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    jsonData.forEach(empresa => {\r",
									"        pm.expect(empresa).to.have.all.keys(\"nome\", \"cnpj\", \"responsavel\", \"email\", \r",
									"         \"telefone\", \"cidade\", \"estado\", \"pais\");\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url_base}}/api/company/?token={{new_token}}",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							],
							"query": [
								{
									"key": "token",
									"value": "{{new_token}}"
								}
							]
						},
						"description": "Generated from cURL: curl -X 'GET' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NzlmYTRiNTRiMDNlMWViMzJmMmVhZDkiLCJmdWxsTmFtZSI6IlBlZ2FyIFRva2VuIiwibWFpbCI6InBlZ2FydG9rZW5AdGVzdC5jb20uYnIiLCJwYXNzd29yZCI6IiQyYiQxMCRBS3Njb3MzelJLeEw1WE51aGw5Zmllb2R5RGVpb0RwUldJMmxpSW1TUnJ3Z0QvdTVtaWxvZSIsImFjY2Vzc1Byb2ZpbGUiOiJBRE1JTiIsImNwZiI6IjAwMDIyMjMzMzQ0Iiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjY2ZGI1ZDg0MWRmNTU0MTUwZTZkNjRiZCIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoiZG9taW5nbywgMDIvMDIvMjAyNSwgMTQ6MDA6MzcgQlJUIiwicmVnaXN0cmF0aW9uTnVtYmVyIjoiUWFDb2RlcnMtMzUyIiwiX2lkIjoiNjc5ZmE0YjU0YjAzZTFlYjMyZjJlYWRhIn1dLCJfX3YiOjAsImlhdCI6MTczOTM4ODA1NiwiZXhwIjoxNzM5NDc0NDU2fQ.S42s78mAOMvNx-Sis2RWSeRNVGgBA0RnXAodSGK1nlU' \\\r\n  -H 'accept: application/json'"
					},
					"response": []
				},
				{
					"name": "Busca por nome da empresa",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status Code é 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Nome da empresa é CIAzrais\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData[0].corporateName).to.eql(\"CIAzrais\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://ron-bugado.qacoders.dev.br/api/company/?token={{new_token}}&corporateName={{CIAzrais}}",
							"protocol": "https",
							"host": [
								"ron-bugado",
								"qacoders",
								"dev",
								"br"
							],
							"path": [
								"api",
								"company",
								""
							],
							"query": [
								{
									"key": "token",
									"value": "{{new_token}}"
								},
								{
									"key": "corporateName",
									"value": "{{CIAzrais}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Buscar os primeiros 50 IDs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Buscar os primeiros 50 IDs\", function () {\r",
									"    let jsonData = pm.response.json(); \r",
									"    pm.expect(jsonData).to.be.an('array'); \r",
									"\r",
									"    let allIds = jsonData.slice(0, 50).map(item => item._id); \r",
									"\r",
									"    pm.variables.set(\"allIds\", allIds); \r",
									"\r",
									"    pm.expect(allIds).to.have.lengthOf(50); \r",
									"\r",
									"    console.log(\"Primeiros 50 IDs:\", allIds); \r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{new_url}}/api/company/?token={{new_token}}",
							"host": [
								"{{new_url}}"
							],
							"path": [
								"api",
								"company",
								""
							],
							"query": [
								{
									"key": "token",
									"value": "{{new_token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Buscar de empresa com ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{new_url}}/api/company/66fdfa50eed30dc911c01b38?token={{new_token}}",
							"host": [
								"{{new_url}}"
							],
							"path": [
								"api",
								"company",
								"66fdfa50eed30dc911c01b38"
							],
							"query": [
								{
									"key": "token",
									"value": "{{new_token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Retorno dos últimos 30 registros da empresa",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Confirma que são os 30 últimos registros\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    \r",
									"    // Pega os últimos 30 registros\r",
									"    let last30 = jsonData.slice(-30);\r",
									"    \r",
									"    // Log para inspecionar\r",
									"    console.log(\"Primeiro dos últimos 30:\", last30[0]);\r",
									"    console.log(\"Esperado:\", jsonData[jsonData.length - 30]);\r",
									"    console.log(\"Último dos últimos 30:\", last30[last30.length - 1]);\r",
									"    console.log(\"Esperado:\", jsonData[jsonData.length - 1]);\r",
									"    \r",
									"    pm.expect(last30.length).to.eql(30);\r",
									"    pm.expect(last30[0].id).to.eql(jsonData[jsonData.length - 30].id);\r",
									"    pm.expect(last30[last30.length - 1].id).to.eql(jsonData[jsonData.length - 1].id);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{new_url}}/api/company/?token={{new_token}}&limit=30&sort=createdAt:desc",
							"host": [
								"{{new_url}}"
							],
							"path": [
								"api",
								"company",
								""
							],
							"query": [
								{
									"key": "token",
									"value": "{{new_token}}"
								},
								{
									"key": "limit",
									"value": "30"
								},
								{
									"key": "sort",
									"value": "createdAt:desc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validação de Desempenho e performance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (!pm.globals.has(\"totalResponseTime\")) {\r",
									"    pm.globals.set(\"totalResponseTime\", 0);\r",
									"    pm.globals.set(\"requestCount\", 0);\r",
									"}\r",
									"\r",
									"let totalTime = parseInt(pm.globals.get(\"totalResponseTime\"));\r",
									"let count = parseInt(pm.globals.get(\"requestCount\"));\r",
									"\r",
									"totalTime += pm.response.responseTime;\r",
									"count++;\r",
									"\r",
									"pm.globals.set(\"totalResponseTime\", totalTime);\r",
									"pm.globals.set(\"requestCount\", count);\r",
									"\r",
									"console.log(\"Tempo médio de resposta: \" + (totalTime / count) + \" ms\")\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{new_url}}/api/company/?token={{new_token}}",
							"host": [
								"{{new_url}}"
							],
							"path": [
								"api",
								"company",
								""
							],
							"query": [
								{
									"key": "token",
									"value": "{{new_token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Buscar_Empresas_Array",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", () => {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array').that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Each item has '_id' field\", () => {\r",
									"    pm.response.json().forEach(item => {\r",
									"        pm.expect(item).to.be.an('object').and.to.have.property('_id');\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Access-Control-Request-Method",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{new_url}}/api/company/?token={{new_token}}",
							"host": [
								"{{new_url}}"
							],
							"path": [
								"api",
								"company",
								""
							],
							"query": [
								{
									"key": "token",
									"value": "{{new_token}}"
								}
							]
						},
						"description": "Generated from cURL: curl -X 'GET' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/company/?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NzlmYTRiNTRiMDNlMWViMzJmMmVhZDkiLCJmdWxsTmFtZSI6IlBlZ2FyIFRva2VuIiwibWFpbCI6InBlZ2FydG9rZW5AdGVzdC5jb20uYnIiLCJwYXNzd29yZCI6IiQyYiQxMCRBS3Njb3MzelJLeEw1WE51aGw5Zmllb2R5RGVpb0RwUldJMmxpSW1TUnJ3Z0QvdTVtaWxvZSIsImFjY2Vzc1Byb2ZpbGUiOiJBRE1JTiIsImNwZiI6IjAwMDIyMjMzMzQ0Iiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjY2ZGI1ZDg0MWRmNTU0MTUwZTZkNjRiZCIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoiZG9taW5nbywgMDIvMDIvMjAyNSwgMTQ6MDA6MzcgQlJUIiwicmVnaXN0cmF0aW9uTnVtYmVyIjoiUWFDb2RlcnMtMzUyIiwiX2lkIjoiNjc5ZmE0YjU0YjAzZTFlYjMyZjJlYWRhIn1dLCJfX3YiOjAsImlhdCI6MTczOTM4ODA1NiwiZXhwIjoxNzM5NDc0NDU2fQ.S42s78mAOMvNx-Sis2RWSeRNVGgBA0RnXAodSGK1nlU' \\\r\n  -H 'accept: application/json'"
					},
					"response": []
				}
			]
		},
		{
			"name": "Company - PBI 20525 (Excluir)",
			"item": [
				{
					"name": "Login com usuário Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"token_user\", pm.response.json().token);\r",
									"\r",
									"pm.test(\"Verificar Status code é 200\", () => {\r",
									"    pm.response.to.have.status(200)\r",
									"})\r",
									"\r",
									"pm.test(\"Validar mensagem autenticado com sucesso\", () => {\r",
									"    pm.expect(\"Olá Ron Bugado, autenticação autorizada com sucesso!\").to.eql(pm.response.json().msg)\r",
									"})\r",
									"\r",
									"pm.test(\"Verificar se E-mail da requisição é o mesmo da resposta\", () => {\r",
									"    pm.expect(pm.environment.get(\"email\")).to.eql(pm.response.json().user.mail)\r",
									"})\r",
									"\r",
									"pm.test(\"Verificar se token existe na resposta\", function () {\r",
									"    pm.expect(pm.response.json().token).to.exist;\r",
									"});\r",
									"\r",
									"pm.test(\"Verificar user status é true\", () => {\r",
									"    pm.expect(true).to.eql(pm.response.json().user.status)\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"mail\": \"{{email}}\",\r\n  \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/login",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cadastrar nova empresa",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"id_company\", pm.response.json().newCompany._id)\r",
									"\r",
									"\r",
									"pm.test(\"Status code é 201\", function(){\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Verificar se a mensagem é verdadeira\", function () {\r",
									"    pm.expect(\"Olá \" + pm.environment.get(\"nomeCompleto\") + \", cadastro realizado com sucesso.\").to.eql(pm.response.json().msg)\r",
									"})\r",
									"\r",
									"pm.test(\"Nome da empresa é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.corporateName).to.equal(pm.environment.get(\"nomeEmpresa\"))\r",
									"})\r",
									"\r",
									"pm.test(\"Verificar se mail é igual\", function () {\r",
									"    pm.expect(\"test@test.com\").to.eql(pm.response.json().newCompany.mail)\r",
									"});\r",
									"\r",
									"pm.test(\"Status é True\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.status).to.be.true;\r",
									"})\r",
									"\r",
									"pm.test(\"CNPJ é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.registerCompany).to.equal(pm.environment.get(\"cnpjEmpresa\"))\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//primeiro nome MEI\r",
									"function firstname() {\r",
									"    const names = ['Alice', 'Miguel', 'Sophia', 'Arthur', 'Helena', 'Bernardo', 'Valentina', 'Heitor', 'Laura', 'Davi', 'Isabella', 'Lorenzo', 'Manuela', 'Theo', 'Luiza', 'Pedro', 'Giovanna', 'Gabriel', 'Julia'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"//segundo nome MEI\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Rodrigues', 'Almeida', 'Lima', 'Ferreira', 'Pereira', 'Carvalho', 'Goncalves', 'Ribeiro', 'Costa', 'Araujo', 'Martins', 'Fernandes'];\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"//FullName MEI\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"\r",
									"//gerador de CNPJ\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									" \r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									" \r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									" \r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									" \r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									" \r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									" \r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"cnpjEmpresa\", cnpjGerado);\r",
									"\r",
									"\r",
									"/*\r",
									"function sendRequestWithRetry(retries) {\r",
									"    pm.sendRequest({\r",
									"        // Opções da request\r",
									"        url: 'https://www.4devs.com.br/ferramentas_online.php',\r",
									"        method: 'POST',\r",
									"        header: {\r",
									"            'Content-Type': 'application/x-www-form-urlencoded',\r",
									"        },\r",
									"        body: {\r",
									"            mode: 'raw',\r",
									"            raw: 'acao=gerar_empresa&pontuacao=N&estado=SP&idade=5',\r",
									"        }\r",
									"    }, function (err, response) {\r",
									"        if (err) {\r",
									"            console.log('Erro na requisição:', err);\r",
									"            if (retries > 0) {\r",
									"                console.log('Tentando novamente...');\r",
									"                sendRequestWithRetry(retries - 1); // Tenta novamente se falhar\r",
									"            } else {\r",
									"                console.log('Número máximo de tentativas atingido.');\r",
									"            }\r",
									"        } else {\r",
									"            // Acessa o corpo da resposta HTML\r",
									"            var responseBody = response.text();\r",
									" \r",
									"            // Função para extrair o valor de um campo baseado no id do input\r",
									"            function extractData(id) {\r",
									"                var regex = new RegExp('<input[^>]+id=\"' + id + '\"[^>]+value=\"([^\"]+)\"', 'i');\r",
									"                var match = responseBody.match(regex);\r",
									"                return match ? match[1] : null;\r",
									"            }\r",
									" \r",
									"            // Criação do objeto JSON com os dados extraídos\r",
									"            var extractedData = {\r",
									"                nome: extractData('nome'),\r",
									"                cnpj: extractData('cnpj'),\r",
									"                ie: extractData('ie'),\r",
									"                data_abertura: extractData('data_abertura'),\r",
									"                site: extractData('site'),\r",
									"                email: extractData('email'),\r",
									"                cep: extractData('cep'),\r",
									"                endereco: extractData('endereco'),\r",
									"                numero: extractData('numero'),\r",
									"                bairro: extractData('bairro'),\r",
									"                cidade: extractData('cidade'),\r",
									"                estado: extractData('estado'),\r",
									"                telefone_fixo: extractData('telefone_fixo'),\r",
									"                celular: extractData('celular')\r",
									"            };\r",
									" \r",
									" \r",
									"            // Agora, chamamos a função lastName depois de todo o processamento\r",
									"            function lastName() {\r",
									"                var lastName = [\r",
									"                    \"Silva dos Santos\", \"de Albuquerque Figueiroa\", \"Saviola de Lima\", \"Xavier de Menezes\",\r",
									"                    \"Oliveira dos Reis\", \"Carvalho Silva\", \"Pereira do Amaral\", \"Costa Lima\", \"dos Santos Rocha\",\r",
									"                    \"Ferreira de Souza\", \"Costa Ramos\", \"Almeida Martins\", \"Rocha de Oliveira\", \"Souza Lima\",\r",
									"                    \"Silva Pereira\", \"de Andrade Oliveira\", \"Fonseca Lima\", \"Pinto da Silva\", \"Almeida Costa\",\r",
									"                    \"Ferreira dos Santos\", \"Figueiredo de Souza\", \"da Silva Nogueira\", \"de Barros Santos\",\r",
									"                    \"Gomes de Almeida\", \"Lima Pereira\", \"Barbosa da Costa\", \"Rodrigues de Oliveira\", \"da Silva Andrade\",\r",
									"                    \"Monteiro dos Santos\", \"Martins da Silva\", \"Nogueira de Lima\", \"Soares de Almeida\", \"Tavares da Rocha\",\r",
									"                    \"Alves de Souza\", \"Mendes da Silva\", \"Pinto de Souza\", \"Bastos de Lima\", \"Silva de Carvalho\",\r",
									"                    \"Pinto de Almeida\", \"Cardoso da Costa\", \"Torres de Almeida\", \"Oliveira de Figueiredo\", \"de Araújo Lima\",\r",
									"                    \"Cavalcanti da Rocha\", \"Xavier de Souza\", \"Cunha de Almeida\", \"Lemos da Silva\", \"Santos de Carvalho\",\r",
									"                    \"Almeida de Lima\", \"da Silva Pinto\", \"Lima de Oliveira\", \"Barbosa de Souza\", \"Costa de Almeida\",\r",
									"                    \"Figueiredo Lima\", \"Almeida dos Reis\", \"Tavares de Souza\", \"Azevedo de Lima\", \"Ferreira de Almeida\",\r",
									"                    \"Souza da Costa\", \"Pinto de Lima\", \"Gonçalves de Lima\", \"Bastos da Silva\", \"Nascimento de Almeida\",\r",
									"                    \"da Silva Souza\", \"Vieira de Oliveira\", \"Ribeiro dos Santos\", \"Silva de Araújo\", \"Costa de Lima\",\r",
									"                    \"de Castro Nogueira\", \"Cardoso de Almeida\", \"Pereira da Rocha\", \"Silva Tavares\", \"Rocha de Souza\",\r",
									"                    \"de Carvalho Santos\", \"Borges da Silva\", \"Almeida de Araújo\", \"Lima da Costa\", \"Melo de Almeida\",\r",
									"                    \"Faria de Lima\", \"Ferreira da Costa\", \"Ramos de Souza\", \"Moreira de Lima\", \"Barbosa de Almeida\",\r",
									"                    \"Santana de Souza\", \"Rocha de Lima\", \"Duarte de Souza\", \"Lopes de Almeida\", \"Almeida de Rocha\",\r",
									"                    \"Silva da Costa\", \"Figueiredo dos Santos\", \"Cardoso de Souza\", \"Oliveira de Rocha\", \"Costa de Nogueira\",\r",
									"                    \"Pinto de Araújo\", \"Tavares de Costa\", \"Martins de Almeida\", \"Nogueira da Rocha\", \"Souza de Almeida\",\r",
									"                    \"Carvalho da Silva\", \"Pereira de Souza\"\r",
									"                ];\r",
									" \r",
									"                let randomItem = lastName[Math.floor(Math.random() * lastName.length)];\r",
									"                return randomItem;\r",
									"            }\r",
									" \r",
									"            function gerarNomeResumido(nomeCompleto) {\r",
									"            // Divide o nome completo em uma lista de palavras\r",
									"            const partesNome = nomeCompleto.split(' ');\r",
									" \r",
									"            // Verifica se o nome tem 2 ou menos palavras\r",
									"            if (partesNome.length <= 2) {\r",
									"                return partesNome.join(' ');\r",
									"            }\r",
									"            \r",
									"            // Pega o primeiro, penúltimo e último nome\r",
									"            const primeiroNome = partesNome[0];\r",
									"            const penultimoNome = partesNome[partesNome.length - 2];\r",
									"            const ultimoNome = partesNome[partesNome.length - 1];\r",
									"            \r",
									"            // Retorna o novo nome formatado\r",
									"            return `${primeiroNome} ${penultimoNome} ${ultimoNome}`;\r",
									"        }\r",
									" \r",
									"            // // Exemplo de uso\r",
									"            // const nomeCompleto = \"Erick e Emanuelly Telecom ME\";\r",
									"            const novoNome = gerarNomeResumido(extractedData.nome);\r",
									"            console.log(novoNome);\r",
									" \r",
									" \r",
									"            pm.environment.set(\"ResponsibleContact\", extractedData.nome.split(' ')[0] + ' ' + lastName())\r",
									"            pm.environment.set(\"CorporateName\", novoNome)\r",
									"            pm.environment.set(\"CorporateMail\", extractedData.email)\r",
									"            pm.environment.set(\"RegisterCompany\", extractedData.cnpj)\r",
									"            pm.environment.set(\"Telephone\", extractedData.telefone_fixo + 1234)\r",
									"            pm.environment.set(\"ZipCode\", extractedData.cep)\r",
									"            pm.environment.set(\"City\", extractedData.cidade)\r",
									"            pm.environment.set(\"State\", extractedData.estado)\r",
									"            pm.environment.set(\"District\", extractedData.bairro)\r",
									"            pm.environment.set(\"Street\", extractedData.endereco)\r",
									"            pm.environment.set(\"Number\", extractedData.numero)\r",
									"            pm.environment.set(\"Matriz\", extractedData.nome)\r",
									"            \r",
									"        }\r",
									"    });\r",
									"}\r",
									" \r",
									"// Inicia a requisição com até 3 tentativas\r",
									"sendRequestWithRetry(5);\r",
									"*/\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token_user}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomeEmpresa}}\",\r\n  \"registerCompany\": \"{{cnpjEmpresa}}\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio Correia\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company"
							]
						}
					},
					"response": []
				},
				{
					"name": "Buscar ID da nova empresa na lista de empresas",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"O status é 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"ID está na lista de empresas\", function () {\r",
									"/*  let ids=[]\r",
									"    pm.response.json().forEach(function(company){\r",
									"       ids.push(company._id)\r",
									"    })*/\r",
									"    //Outra forma de iterar um array\r",
									"    let ids = pm.response.json().map(company => company._id);\r",
									"    console.log(pm.environment.get(\"id_company\"));\r",
									"    pm.expect(ids).to.include(pm.environment.get(\"id_company\"));\r",
									"     // Verifica se o ID está na lista\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token_user}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Excluir Cadastro de Empresa com sucesso",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"pm.test(\"Verificar se o status é 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Mensagem de sucesso é exibida\", function(){\r",
									"    pm.expect(\"Companhia deletado com sucesso.\").to.eql(pm.response.json().msg)\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token_user}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/{{id_company}}",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								"{{id_company}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verificar que a empresa foi excluída",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"O status é 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"ID não esta na lista de empresas\", function () {\r",
									"    let ids = pm.response.json().map(company => company._id);\r",
									"    pm.expect(ids).to.not.include('id_company');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token_user}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Excluir Cadastro de Empresa com token inválido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"\r",
									"pm.test(\"Verificar se o status é 403\", function(){\r",
									"    pm.response.to.have.status(403);\r",
									"})\r",
									"\r",
									"pm.test(\"Mensagem de falha na autenticação é exibida\", function(){\r",
									"    pm.expect(\"Failed to authenticate token.\").to.eql(pm.response.json().error[0])\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token_invalido}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/{{id_company}}",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								"{{id_company}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Excluir Cadastro de Empresa com id inválido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verificar se o status é 404\", function(){\r",
									"    pm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"pm.test(\"Mensagem de Não Encontrado é exibida\", function(){\r",
									"    pm.expect(\"Essa companhia não existem em nossa base de dados.\").to.eql(pm.response.json().msg)\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token_user}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/{{id_companyInvalido}}",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								"{{id_companyInvalido}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Company - PBI 20526 (Editar dados de Endereço da Empresa)",
			"item": [
				{
					"name": "Pré-Requisito",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"tokenAcesso\",pm.response.json().token)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"mail\": \"pegartoken@test.com.br\",\r\n  \"password\": \"1234@Test\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/login/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"login",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/login/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"mail\": \"sysadmin@qacoders.com\",\r\n  \"password\": \"1234@Test\"\r\n}'"
					},
					"response": []
				},
				{
					"name": "Cadastro empresa",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"Dorado Telecomunicações SA\",\r\n  \"registerCompany\": \"15727657000132\",\r\n  \"mail\": \"comercial@dorado.com.br\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Arthur\",\r\n  \"telephone\": \"97934084375157\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"22290031\",\r\n      \"city\": \"Rio de Janeiro\",\r\n      \"state\": \"RJ\",\r\n      \"district\": \"Botafogo\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"754\",\r\n      \"complement\": \"proximo do fim\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://ron-bugado.qacoders.dev.br/api/login/' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"mail\": \"sysadmin@qacoders.com\",\r\n  \"password\": \"1234@Test\"\r\n}'"
					},
					"response": []
				},
				{
					"name": "Buscar empresa cadastrada",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "//Buscar sem um ID, selecionar o F para buscar pelo Id no resultado da pesquisa",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Editar lograduro com sucesso",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 201\", function(){",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Mensagem de sucesso\",function(){",
									"    pm.expect(pm.response.json().msg).to.equal(\"Endereço da companhia atualizado com sucesso.\")",
									"})",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\n{\n    \"address\":[\n        {\n      \"zipCode\": \"04777003\",\n      \"city\": \"Rio de Janeiro\",\n      \"state\": \"RJ\",\n      \"district\": \"Rua das Flores\",\n      \"street\": \"Avenida Jandira\",\n      \"number\": \"50\",\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\n      \"country\": \"Brasil\"\n        }\n    ]\n  \n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/address/67acec014b03e1eb32fb66fa",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								"address",
								"67acec014b03e1eb32fb66fa"
							]
						}
					},
					"response": []
				},
				{
					"name": "Editar campo logradouro com mais de 50 caracteres",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"",
									"pm.test(\"Validar retorno da mensagem\",function(){",
									"    pm.expect(pm.response.json().error[0]).to.equal(\"O campo 'logradouro' deve possuir no máximo 80 caracteres.\")",
									"})",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"address\":[\n        {\n      \"zipCode\": \"04777003\",\n      \"city\": \"Rio de Janeiro\",\n      \"state\": \"RJ\",\n      \"district\": \"Rua das Flores\",\n      \"street\": \"Avenida Muito Longa Que Ultrapassa O Limite de 50 Caracteres escritos para o limites\",\n      \"number\": \"50\",\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\n      \"country\": \"Brasil\"\n        }\n    ]\n  \n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/address/67acec014b03e1eb32fb66fa",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								"address",
								"67acec014b03e1eb32fb66fa"
							]
						}
					},
					"response": []
				},
				{
					"name": "Editar campo logradouro com alfanumérico",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 201\", function(){",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"Validar retorno da mensagem\",function(){",
									"    pm.expect(pm.response.json().msg).to.equal(\"Endereço da companhia atualizado com sucesso.\")",
									"})",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"address\":[\n        {\n      \"zipCode\": \"04777003\",\n      \"city\": \"Rio de Janeiro\",\n      \"state\": \"RJ\",\n      \"district\": \"Rua das Flores\",\n      \"street\": \"Avenida 10 de julho\",\n      \"number\": \"50\",\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\n      \"country\": \"Brasil\"\n        }\n    ]\n  \n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/address/67acec014b03e1eb32fb66fa",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								"address",
								"67acec014b03e1eb32fb66fa"
							]
						}
					},
					"response": []
				},
				{
					"name": "Editar campo logradouro com caracteres especiais",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 201\", function(){",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Validar retorno da mensagem\",function(){",
									"    pm.expect(pm.response.json().msg).to.equal(\"Endereço da companhia atualizado com sucesso.\")",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"address\":[\n        {\n      \"zipCode\": \"04777003\",\n      \"city\": \"Rio de Janeiro\",\n      \"state\": \"RJ\",\n      \"district\": \"Rua das Flores\",\n      \"street\": \"Aºe-nidª\",\n      \"number\": \"50\",\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\n      \"country\": \"Brasil\"\n        }\n    ]\n  \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/address/67acec014b03e1eb32fb66fa",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								"address",
								"67acec014b03e1eb32fb66fa"
							]
						}
					},
					"response": []
				},
				{
					"name": "Editar campo logradouro com caracteres especiais invalidos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Validar retorno da mensagem\",function(){",
									"    pm.expect(pm.response.json().error[0]).to.equal(\"O campo 'logradouro' só pode conter letras, números e os caracteres especiais 'ª', 'º', '‘' e '-'\")",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"address\":[\n        {\n      \"zipCode\": \"04777003\",\n      \"city\": \"Rio de Janeiro\",\n      \"state\": \"RJ\",\n      \"district\": \"Rua das Flores\",\n      \"street\": \"Avenid@!\",\n      \"number\": \"50\",\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\n      \"country\": \"Brasil\"\n        }\n    ]\n  \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/address/67acec014b03e1eb32fb66fa",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								"address",
								"67acec014b03e1eb32fb66fa"
							]
						}
					},
					"response": []
				},
				{
					"name": "Editar campo logradouro em branco",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Validar retorno da mensagem\",function(){",
									"    pm.expect(pm.response.json().error[0]).to.equal(\"O campo 'logradouro' é obrigatório.\")",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"address\":[\n        {\n      \"zipCode\": \"04777003\",\n      \"city\": \"Rio de Janeiro\",\n      \"state\": \"RJ\",\n      \"district\": \"Rua das Flores\",\n      \"street\": \" \",\n      \"number\": \"50\",\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\n      \"country\": \"Brasil\"\n        }\n    ]\n  \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/address/67acec014b03e1eb32fb66fa",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								"address",
								"67acec014b03e1eb32fb66fa"
							]
						}
					},
					"response": []
				},
				{
					"name": "Editar campo numero com sucesso",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 201\", function(){",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Validar retorno da mensagem\",function(){",
									"    pm.expect(pm.response.json().msg).to.equal(\"Endereço da companhia atualizado com sucesso.\")",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"address\":[\n        {\n      \"zipCode\": \"04777003\",\n      \"city\": \"Rio de Janeiro\",\n      \"state\": \"RJ\",\n      \"district\": \"Rua das Flores\",\n      \"street\": \" rua 10 de Julho \",\n      \"number\": \"101\",\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\n      \"country\": \"Brasil\"\n        }\n    ]\n  \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/address/67acec014b03e1eb32fb66fa",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								"address",
								"67acec014b03e1eb32fb66fa"
							]
						}
					},
					"response": []
				},
				{
					"name": "Editar campo numero com mais de 10 caracteres",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Validar retorno da mensagem\",function(){",
									"    pm.expect(pm.response.json().error[0]).to.equal(\"O campo 'número' deve possuir no máximo 10 caracteres.\")",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"address\":[\n        {\n      \"zipCode\": \"04777003\",\n      \"city\": \"Rio de Janeiro\",\n      \"state\": \"RJ\",\n      \"district\": \"Rua das Flores\",\n      \"street\": \"Avenida 10 de julho\",\n      \"number\": \"12345678901\",\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\n      \"country\": \"Brasil\"\n        }\n    ]\n  \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/address/67acec014b03e1eb32fb66fa",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								"address",
								"67acec014b03e1eb32fb66fa"
							]
						}
					},
					"response": []
				},
				{
					"name": "Editar campo numero em branco",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Validar retorno da mensagem\",function(){",
									"    pm.expect(pm.response.json().error[0]).to.equal(\"O campo 'número' é obrigatório.\")",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"address\":[\n        {\n      \"zipCode\": \"04777003\",\n      \"city\": \"Rio de Janeiro\",\n      \"state\": \"RJ\",\n      \"district\": \"Rua das Flores\",\n      \"street\": \" rua 10 de Julho \",\n      \"number\": \" \",\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\n      \"country\": \"Brasil\"\n        }\n    ]\n  \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/address/67acec014b03e1eb32fb66fa",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								"address",
								"67acec014b03e1eb32fb66fa"
							]
						}
					},
					"response": []
				},
				{
					"name": "Editar campo numero com letras",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Validar retorno da mensagem\",function(){",
									"    pm.expect(pm.response.json().error[0]).to.equal(\"O campo 'número' deve conter apenas numeros.\")",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"address\":[\n        {\n      \"zipCode\": \"04777003\",\n      \"city\": \"Rio de Janeiro\",\n      \"state\": \"RJ\",\n      \"district\": \"Rua das Flores\",\n      \"street\": \" rua 10 de Julho \",\n      \"number\": \"nove\",\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\n      \"country\": \"Brasil\"\n        }\n    ]\n  \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/address/67acec014b03e1eb32fb66fa",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								"address",
								"67acec014b03e1eb32fb66fa"
							]
						}
					},
					"response": []
				},
				{
					"name": "Editar campo numero com alfanumerico",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Validar retorno da mensagem\",function(){",
									"    pm.expect(pm.response.json().msg).to.equal(\"O campo 'número' deve conter apenas números.\")",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"address\":[\n        {\n      \"zipCode\": \"04777003\",\n      \"city\": \"Rio de Janeiro\",\n      \"state\": \"RJ\",\n      \"district\": \"Rua das Flores\",\n      \"street\": \" rua 10 de Julho \",\n      \"number\": \"10A\",\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\n      \"country\": \"Brasil\"\n        }\n    ]\n  \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/address/67acec014b03e1eb32fb66fa",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								"address",
								"67acec014b03e1eb32fb66fa"
							]
						}
					},
					"response": []
				},
				{
					"name": "Editar campo numero com caracteres especiais",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Validar retorno da mensagem\",function(){",
									"    pm.expect(pm.response.json().error[0]).to.equal(\"O campo 'número' só pode conter letras, números e o caractere especial '/'\")",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"address\":[\n        {\n      \"zipCode\": \"04777003\",\n      \"city\": \"Rio de Janeiro\",\n      \"state\": \"RJ\",\n      \"district\": \"Rua das Flores\",\n      \"street\": \" rua 10 de Julho \",\n      \"number\": \"1@!A\",\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\n      \"country\": \"Brasil\"\n        }\n    ]\n  \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/address/67acec014b03e1eb32fb66fa",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								"address",
								"67acec014b03e1eb32fb66fa"
							]
						}
					},
					"response": []
				},
				{
					"name": "Editar campo complemento com sucesso",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 201\", function(){",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Validar retorno da mensagem\",function(){",
									"    pm.expect(pm.response.json().msg).to.equal(\"Endereço da companhia atualizado com sucesso.\")",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"address\":[\n        {\n      \"zipCode\": \"04777003\",\n      \"city\": \"Rio de Janeiro\",\n      \"state\": \"RJ\",\n      \"district\": \"Rua das Flores\",\n      \"street\": \" rua 10 de Julho \",\n      \"number\": \"100\",\n      \"complement\": \"proximo a caixa de agua - lado ímpar\",\n      \"country\": \"Brasil\"\n        }\n    ]\n  \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/address/67acec014b03e1eb32fb66fa",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								"address",
								"67acec014b03e1eb32fb66fa"
							]
						}
					},
					"response": []
				},
				{
					"name": "Editar campo complemento em branco",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 201\", function(){",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Validar retorno da mensagem\",function(){",
									"    pm.expect(pm.response.json().msg).to.equal(\"Endereço da companhia atualizado com sucesso.\")",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"address\":[\n        {\n      \"zipCode\": \"04777003\",\n      \"city\": \"Rio de Janeiro\",\n      \"state\": \"RJ\",\n      \"district\": \"Rua das Flores\",\n      \"street\": \" rua 10 de Julho \",\n      \"number\": \"100\",\n      \"complement\": \"\",\n      \"country\": \"Brasil\"\n        }\n    ]\n  \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/address/67acec014b03e1eb32fb66fa",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								"address",
								"67acec014b03e1eb32fb66fa"
							]
						}
					},
					"response": []
				},
				{
					"name": "Editar campo complemento com mais de 80 caracteres",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Validar retorno da mensagem\",function(){",
									"    pm.expect(pm.response.json().error[0]).to.equal(\"O campo 'complemento' deve possuir no máximo 80 caracteres.\")",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"address\":[\n        {\n      \"zipCode\": \"04777003\",\n      \"city\": \"Rio de Janeiro\",\n      \"state\": \"RJ\",\n      \"district\": \"Rua das Flores\",\n      \"street\": \" rua 10 de Julho \",\n      \"number\": \"100\",\n      \"complement\": \"Bloco Muito Longo Que Ultrapassa o Limite de 80 Caracteres e Deve Ser Cortado mais que este valor não pode ser aceito\",\n      \"country\": \"Brasil\"\n        }\n    ]\n  \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/address/67acec014b03e1eb32fb66fa",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								"address",
								"67acec014b03e1eb32fb66fa"
							]
						}
					},
					"response": []
				},
				{
					"name": "Editar campo complemento com caracteres especiais",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 201\", function(){",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Validar retorno da mensagem\",function(){",
									"    pm.expect(pm.response.json().msg).to.equal(\"Endereço da companhia atualizado com sucesso.\")",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"address\":[\n        {\n      \"zipCode\": \"04777003\",\n      \"city\": \"Rio de Janeiro\",\n      \"state\": \"RJ\",\n      \"district\": \"Rua das Flores\",\n      \"street\": \" rua 10 de Julho \",\n      \"number\": \"100\",\n      \"complement\": \"Blocº-testª\",\n      \"country\": \"Brasil\"\n        }\n    ]\n  \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/address/67acec014b03e1eb32fb66fa",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								"address",
								"67acec014b03e1eb32fb66fa"
							]
						}
					},
					"response": []
				},
				{
					"name": "Editar campo complemento com caracteres especiais invalidos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Validar retorno da mensagem\",function(){",
									"    pm.expect(pm.response.json().error[0]).to.equal(\"O campo 'complemento' só pode conter letras, números e os caracteres especiais 'ª', 'º', '‘' e '-'\")",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"address\":[\n        {\n      \"zipCode\": \"04777003\",\n      \"city\": \"Rio de Janeiro\",\n      \"state\": \"RJ\",\n      \"district\": \"Rua das Flores\",\n      \"street\": \" rua 10 de Julho \",\n      \"number\": \"100\",\n      \"complement\": \"Bloc@ T#st!\",\n      \"country\": \"Brasil\"\n        }\n    ]\n  \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/address/67acec014b03e1eb32fb66fa",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								"address",
								"67acec014b03e1eb32fb66fa"
							]
						}
					},
					"response": []
				},
				{
					"name": "Editar campo complemento com alfanumericos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 201\", function(){",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Validar retorno da mensagem\",function(){",
									"    pm.expect(pm.response.json().msg).to.equal(\"Endereço da companhia atualizado com sucesso.\")",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"address\":[\n        {\n      \"zipCode\": \"04777003\",\n      \"city\": \"Rio de Janeiro\",\n      \"state\": \"RJ\",\n      \"district\": \"Rua das Flores\",\n      \"street\": \" rua 10 de Julho \",\n      \"number\": \"100\",\n      \"complement\": \"Bloco 10\",\n      \"country\": \"Brasil\"\n        }\n    ]\n  \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/address/67acec014b03e1eb32fb66fa",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								"address",
								"67acec014b03e1eb32fb66fa"
							]
						}
					},
					"response": []
				},
				{
					"name": "Editar campo bairro com sucesso",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 201\", function(){",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Validar retorno da mensagem\",function(){",
									"    pm.expect(pm.response.json().msg).to.equal(\"Endereço da companhia atualizado com sucesso.\")",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"address\":[\n        {\n      \"zipCode\": \"04777003\",\n      \"city\": \"Rio de Janeiro\",\n      \"state\": \"RJ\",\n      \"district\": \"Coroado\",\n      \"street\": \" rua 10 de Julho \",\n      \"number\": \"100\",\n      \"complement\": \"Bloco 10\",\n      \"country\": \"Brasil\"\n        }\n    ]\n  \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/address/67acec014b03e1eb32fb66fa",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								"address",
								"67acec014b03e1eb32fb66fa"
							]
						}
					},
					"response": []
				},
				{
					"name": "Editar campo bairro com caracteres especiais",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 201\", function(){",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Validar retorno da mensagem\",function(){",
									"    pm.expect(pm.response.json().msg).to.equal(\"Endereço da companhia atualizado com sucesso.\")",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"address\":[\n        {\n      \"zipCode\": \"04777003\",\n      \"city\": \"Rio de Janeiro\",\n      \"state\": \"RJ\",\n      \"district\": \"Coroªdº-bairro\",\n      \"street\": \" rua 10 de Julho \",\n      \"number\": \"100\",\n      \"complement\": \"Bloco 10\",\n      \"country\": \"Brasil\"\n        }\n    ]\n  \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/address/67acec014b03e1eb32fb66fa",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								"address",
								"67acec014b03e1eb32fb66fa"
							]
						}
					},
					"response": []
				},
				{
					"name": "Editar campo bairro com caracteres especiais invalidos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Validar retorno da mensagem\",function(){",
									"    pm.expect(pm.response.json().error[0]).to.equal(\"O campo 'bairro' só pode conter letras, números e os caracteres especiais 'ª', 'º', '‘' e '-'\")",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"address\":[\n        {\n      \"zipCode\": \"04777003\",\n      \"city\": \"Rio de Janeiro\",\n      \"state\": \"RJ\",\n      \"district\": \"Coroado@@@@\",\n      \"street\": \" rua 10 de Julho \",\n      \"number\": \"100\",\n      \"complement\": \"Bloco 10\",\n      \"country\": \"Brasil\"\n        }\n    ]\n  \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/address/67acec014b03e1eb32fb66fa",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								"address",
								"67acec014b03e1eb32fb66fa"
							]
						}
					},
					"response": []
				},
				{
					"name": "Editar campo bairro em branco",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Validar retorno da mensagem\",function(){",
									"    pm.expect(pm.response.json().error[0]).to.equal(\"O campo 'bairro' é obrigatório.\")",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"address\":[\n        {\n      \"zipCode\": \"04777003\",\n      \"city\": \"Rio de Janeiro\",\n      \"state\": \"RJ\",\n      \"district\": \"\",\n      \"street\": \" rua 10 de Julho \",\n      \"number\": \"100\",\n      \"complement\": \"Bloco 10\",\n      \"country\": \"Brasil\"\n        }\n    ]\n  \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/address/67acec014b03e1eb32fb66fa",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								"address",
								"67acec014b03e1eb32fb66fa"
							]
						}
					},
					"response": []
				},
				{
					"name": "Editar campo bairro com alfanumerico",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 201\", function(){",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Validar retorno da mensagem\",function(){",
									"    pm.expect(pm.response.json().msg).to.equal(\"Endereço da companhia atualizado com sucesso.\")",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"address\":[\n        {\n      \"zipCode\": \"04777003\",\n      \"city\": \"Rio de Janeiro\",\n      \"state\": \"RJ\",\n      \"district\": \"Coro4d0\",\n      \"street\": \" rua 10 de Julho \",\n      \"number\": \"100\",\n      \"complement\": \"Bloco 10\",\n      \"country\": \"Brasil\"\n        }\n    ]\n  \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/address/67acec014b03e1eb32fb66fa",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								"address",
								"67acec014b03e1eb32fb66fa"
							]
						}
					},
					"response": []
				},
				{
					"name": "Editar campo bairro com mais de 50 caracteres",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Validar retorno da mensagem\",function(){",
									"    pm.expect(pm.response.json().error[0]).to.equal(\"O campo 'bairro' deve possuir no máximo 50 caracteres.\")",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"address\":[\n        {\n      \"zipCode\": \"04777003\",\n      \"city\": \"Rio de Janeiro\",\n      \"state\": \"RJ\",\n      \"district\": \"Residencial Parque das Flores e Jardins do Paraíso Rondonopolis\",\n      \"street\": \" rua 10 de Julho \",\n      \"number\": \"100\",\n      \"complement\": \"Bloco 10\",\n      \"country\": \"Brasil\"\n        }\n    ]\n  \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/address/67acec014b03e1eb32fb66fa",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								"address",
								"67acec014b03e1eb32fb66fa"
							]
						}
					},
					"response": []
				},
				{
					"name": "Editar campo cidade com sucesso",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 201\", function(){",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Validar retorno da mensagem\",function(){",
									"    pm.expect(pm.response.json().msg).to.equal(\"Endereço da companhia atualizado com sucesso.\")",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"address\":[\n        {\n      \"zipCode\": \"04777003\",\n      \"city\": \"São Paulo\",\n      \"state\": \"RJ\",\n      \"district\": \"Coroado\",\n      \"street\": \" rua 10 de Julho \",\n      \"number\": \"100\",\n      \"complement\": \"Bloco 10\",\n      \"country\": \"Brasil\"\n        }\n    ]\n  \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/address/67acec014b03e1eb32fb66fa",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								"address",
								"67acec014b03e1eb32fb66fa"
							]
						}
					},
					"response": []
				},
				{
					"name": "Editar campo cidade em branco",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Validar retorno da mensagem\",function(){",
									"    pm.expect(pm.response.json().error[0]).to.equal(\"O campo 'cidade' é obrigatório.\")",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"address\":[\n        {\n      \"zipCode\": \"04777003\",\n      \"city\": \"\",\n      \"state\": \"RJ\",\n      \"district\": \"Coroado\",\n      \"street\": \" rua 10 de Julho \",\n      \"number\": \"100\",\n      \"complement\": \"Bloco 10\",\n      \"country\": \"Brasil\"\n        }\n    ]\n  \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/address/67acec014b03e1eb32fb66fa",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								"address",
								"67acec014b03e1eb32fb66fa"
							]
						}
					},
					"response": []
				},
				{
					"name": "Editar campo cidade com caracteres especiais",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 201\", function(){",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Validar retorno da mensagem\",function(){",
									"    pm.expect(pm.response.json().msg).to.equal(\"Endereço da companhia atualizado com sucesso.\")",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"address\":[\n        {\n      \"zipCode\": \"04777003\",\n      \"city\": \"Sªº-Pªulº\",\n      \"state\": \"RJ\",\n      \"district\": \"Coroado\",\n      \"street\": \" rua 10 de Julho \",\n      \"number\": \"100\",\n      \"complement\": \"Bloco 10\",\n      \"country\": \"Brasil\"\n        }\n    ]\n  \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/address/67acec014b03e1eb32fb66fa",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								"address",
								"67acec014b03e1eb32fb66fa"
							]
						}
					},
					"response": []
				},
				{
					"name": "Editar campo cidade com mais de 50 caracteres",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Validar retorno da mensagem\",function(){",
									"    pm.expect(pm.response.json().error[0]).to.equal(\"O campo 'cidade' deve possuir no máximo 50 caracteres.\")",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"address\":[\n        {\n      \"zipCode\": \"04777003\",\n      \"city\": \"Residencial Parque das Flores e Jardins do Paraíso Rondonopolis\",\n      \"state\": \"RJ\",\n      \"district\": \"Coroado\",\n      \"street\": \" rua 10 de Julho \",\n      \"number\": \"100\",\n      \"complement\": \"Bloco 10\",\n      \"country\": \"Brasil\"\n        }\n    ]\n  \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/address/67acec014b03e1eb32fb66fa",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								"address",
								"67acec014b03e1eb32fb66fa"
							]
						}
					},
					"response": []
				},
				{
					"name": "Editar campo cidade com letras e numeros",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Validar retorno da mensagem\",function(){",
									"    pm.expect(pm.response.json().error[0]).to.equal(\"O campo 'cidade' só pode conter letras e os caracteres especiais 'ª', 'º', '‘' e '-'.\")",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"address\":[\n        {\n      \"zipCode\": \"04777003\",\n      \"city\": \"Cidade123\",\n      \"state\": \"RJ\",\n      \"district\": \"Coroado\",\n      \"street\": \" rua 10 de Julho \",\n      \"number\": \"100\",\n      \"complement\": \"Bloco 10\",\n      \"country\": \"Brasil\"\n        }\n    ]\n  \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/address/67acec014b03e1eb32fb66fa",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								"address",
								"67acec014b03e1eb32fb66fa"
							]
						}
					},
					"response": []
				},
				{
					"name": "Editar campo estado com sucesso",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 201\", function(){",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Validar retorno da mensagem\",function(){",
									"    pm.expect(pm.response.json().msg).to.equal(\"Endereço da companhia atualizado com sucesso.\")",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"address\":[\n        {\n      \"zipCode\": \"04777003\",\n      \"city\": \"São Paulo\",\n      \"state\": \"SP\",\n      \"district\": \"Coroado\",\n      \"street\": \" rua 10 de Julho \",\n      \"number\": \"100\",\n      \"complement\": \"Bloco 10\",\n      \"country\": \"Brasil\"\n        }\n    ]\n  \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/address/67acf7454b03e1eb32fba6e7",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								"address",
								"67acf7454b03e1eb32fba6e7"
							]
						}
					},
					"response": []
				},
				{
					"name": "Editar campo estado em branco",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Validar retorno da mensagem\",function(){",
									"    pm.expect(pm.response.json().error[0]).to.equal(\"O campo 'estado' é obrigatório.\")",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"address\":[\n        {\n      \"zipCode\": \"04777003\",\n      \"city\": \"São Paulo\",\n      \"state\": \"\",\n      \"district\": \"Coroado\",\n      \"street\": \" rua 10 de Julho \",\n      \"number\": \"100\",\n      \"complement\": \"Bloco 10\",\n      \"country\": \"Brasil\"\n        }\n    ]\n  \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/address/67acec014b03e1eb32fb66fa",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								"address",
								"67acec014b03e1eb32fb66fa"
							]
						}
					},
					"response": []
				},
				{
					"name": "Editar campo estado com numeros",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Validar retorno da mensagem\",function(){",
									"    pm.expect(pm.response.json().error[0]).to.equal(\"O campo 'estado' só pode conter letras maiúsculas\")",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"address\":[\n        {\n      \"zipCode\": \"04777003\",\n      \"city\": \"São Paulo\",\n      \"state\": \"12\",\n      \"district\": \"Coroado\",\n      \"street\": \" rua 10 de Julho \",\n      \"number\": \"100\",\n      \"complement\": \"Bloco 10\",\n      \"country\": \"Brasil\"\n        }\n    ]\n  \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/address/67acec014b03e1eb32fb66fa",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								"address",
								"67acec014b03e1eb32fb66fa"
							]
						}
					},
					"response": []
				},
				{
					"name": "Editar campo estado mais de 2 caracteres",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Validar retorno da mensagem\",function(){",
									"    pm.expect(pm.response.json().error[0]).to.equal(\"O campo 'estado' deve possuir 2 caracteres.\")",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"address\":[\n        {\n      \"zipCode\": \"04777003\",\n      \"city\": \"São Paulo\",\n      \"state\": \"SP1\",\n      \"district\": \"Coroado\",\n      \"street\": \" rua 10 de Julho \",\n      \"number\": \"100\",\n      \"complement\": \"Bloco 10\",\n      \"country\": \"Brasil\"\n        }\n    ]\n  \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/address/67acec014b03e1eb32fb66fa",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								"address",
								"67acec014b03e1eb32fb66fa"
							]
						}
					},
					"response": []
				},
				{
					"name": "Editar campo estado com letras minusculas",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Validar retorno da mensagem\",function(){",
									"    pm.expect(pm.response.json().error[0]).to.equal(\"O campo 'estado' só pode conter letras maiúsculas\")",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"address\":[\n        {\n      \"zipCode\": \"04777003\",\n      \"city\": \"São Paulo\",\n      \"state\": \"sp\",\n      \"district\": \"Coroado\",\n      \"street\": \" rua 10 de Julho \",\n      \"number\": \"100\",\n      \"complement\": \"Bloco 10\",\n      \"country\": \"Brasil\"\n        }\n    ]\n  \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/address/67acec014b03e1eb32fb66fa",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								"address",
								"67acec014b03e1eb32fb66fa"
							]
						}
					},
					"response": []
				},
				{
					"name": "Editar campo país com sucesso",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 201\", function(){",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Validar retorno da mensagem\",function(){",
									"    pm.expect(pm.response.json().msg).to.equal(\"Endereço da companhia atualizado com sucesso.\")",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"address\":[\n        {\n      \"zipCode\": \"04777003\",\n      \"city\": \"São Paulo\",\n      \"state\": \"SP\",\n      \"district\": \"Coroado\",\n      \"street\": \" rua 10 de Julho \",\n      \"number\": \"100\",\n      \"complement\": \"Bloco 10\",\n      \"country\": \"Inglaterra\"\n        }\n    ]\n  \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/address/67acec014b03e1eb32fb66fa",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								"address",
								"67acec014b03e1eb32fb66fa"
							]
						}
					},
					"response": []
				},
				{
					"name": "Editar campo país com apenas numeros",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Validar retorno da mensagem\",function(){",
									"    pm.expect(pm.response.json().msg).to.equal(\"O país deve conter apenas letras.\")",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"address\":[\n        {\n      \"zipCode\": \"04777003\",\n      \"city\": \"São Paulo\",\n      \"state\": \"SP\",\n      \"district\": \"Coroado\",\n      \"street\": \" rua 10 de Julho \",\n      \"number\": \"100\",\n      \"complement\": \"Bloco 10\",\n      \"country\": \"123\"\n        }\n    ]\n  \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/address/67acec014b03e1eb32fb66fa",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								"address",
								"67acec014b03e1eb32fb66fa"
							]
						}
					},
					"response": []
				},
				{
					"name": "Editar campo país em branco",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Validar retorno da mensagem\",function(){",
									"    pm.expect(pm.response.json().error[0]).to.equal(\"O campo País é obrigatório.\")",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"address\":[\n        {\n      \"zipCode\": \"04777003\",\n      \"city\": \"São Paulo\",\n      \"state\": \"SP\",\n      \"district\": \"Coroado\",\n      \"street\": \" rua 10 de Julho \",\n      \"number\": \"100\",\n      \"complement\": \"Bloco 10\",\n      \"country\": \"\"\n        }\n    ]\n  \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/address/67acec014b03e1eb32fb66fa",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								"address",
								"67acec014b03e1eb32fb66fa"
							]
						}
					},
					"response": []
				},
				{
					"name": "Editar campo país com alfanumerico",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Validar retorno da mensagem\",function(){",
									"    pm.expect(pm.response.json().msg).to.equal(\"O país deve conter apenas letras.\")",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"address\":[\n        {\n      \"zipCode\": \"04777003\",\n      \"city\": \"São Paulo\",\n      \"state\": \"SP\",\n      \"district\": \"Coroado\",\n      \"street\": \" rua 10 de Julho \",\n      \"number\": \"100\",\n      \"complement\": \"Bloco 10\",\n      \"country\": \"País123\"\n        }\n    ]\n  \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/address/67acec014b03e1eb32fb66fa",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								"address",
								"67acec014b03e1eb32fb66fa"
							]
						}
					},
					"response": []
				},
				{
					"name": "Editar campo país com mais de 50 caracteres",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Validar retorno da mensagem\",function(){",
									"    pm.expect(pm.response.json().error[0]).to.equal(\"O campo País permite até 50 caracteres.\")",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"address\":[\n        {\n      \"zipCode\": \"04777003\",\n      \"city\": \"São Paulo\",\n      \"state\": \"SP\",\n      \"district\": \"Coroado\",\n      \"street\": \" rua 10 de Julho \",\n      \"number\": \"100\",\n      \"complement\": \"Bloco 10\",\n      \"country\": \"Residencial Parque das Flores e Jardins do Paraíso Rondonopolis\"\n        }\n    ]\n  \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/address/67acec014b03e1eb32fb66fa",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								"address",
								"67acec014b03e1eb32fb66fa"
							]
						}
					},
					"response": []
				},
				{
					"name": "Editar campo CEP com sucesso",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 201\", function(){",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Validar retorno da mensagem\",function(){",
									"    pm.expect(pm.response.json().msg).to.equal(\"Endereço da companhia atualizado com sucesso.\")",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"address\":[\n        {\n      \"zipCode\": \"22290031\",\n      \"city\": \"São Paulo\",\n      \"state\": \"SP\",\n      \"district\": \"Coroado\",\n      \"street\": \" rua 10 de Julho \",\n      \"number\": \"100\",\n      \"complement\": \"Bloco 10\",\n      \"country\": \"Brasil\"\n        }\n    ]\n  \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/address/67acec014b03e1eb32fb66fa",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								"address",
								"67acec014b03e1eb32fb66fa"
							]
						}
					},
					"response": []
				},
				{
					"name": "Editar campo CEP em branco",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Validar retorno da mensagem\",function(){",
									"    pm.expect(pm.response.json().error[0]).to.equal(\"O campo 'CEP' é obrigatório.\")",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"address\":[\n        {\n      \"zipCode\": \"\",\n      \"city\": \"São Paulo\",\n      \"state\": \"SP\",\n      \"district\": \"Coroado\",\n      \"street\": \" rua 10 de Julho \",\n      \"number\": \"100\",\n      \"complement\": \"Bloco 10\",\n      \"country\": \"Brasil\"\n        }\n    ]\n  \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/address/67acec014b03e1eb32fb66fa",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								"address",
								"67acec014b03e1eb32fb66fa"
							]
						}
					},
					"response": []
				},
				{
					"name": "Editar campo CEP com letras",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Validar retorno da mensagem\",function(){",
									"    pm.expect(pm.response.json().error[0]).to.equal(\"O campo 'CEP' só pode conter números\")",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"address\":[\n        {\n      \"zipCode\": \"pipocass\",\n      \"city\": \"São Paulo\",\n      \"state\": \"SP\",\n      \"district\": \"Coroado\",\n      \"street\": \" rua 10 de Julho \",\n      \"number\": \"100\",\n      \"complement\": \"Bloco 10\",\n      \"country\": \"Brasil\"\n        }\n    ]\n  \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/address/67acec014b03e1eb32fb66fa",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								"address",
								"67acec014b03e1eb32fb66fa"
							]
						}
					},
					"response": []
				},
				{
					"name": "Editar campo CEP com mais de 8 digitos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Validar retorno da mensagem\",function(){",
									"    pm.expect(pm.response.json().error[0]).to.equal(\"O campo 'CEP' deve conter 8 dígitos\")",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"address\":[\n        {\n      \"zipCode\": \"123456789\",\n      \"city\": \"São Paulo\",\n      \"state\": \"SP\",\n      \"district\": \"Coroado\",\n      \"street\": \" rua 10 de Julho \",\n      \"number\": \"100\",\n      \"complement\": \"Bloco 10\",\n      \"country\": \"Brasil\"\n        }\n    ]\n  \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/address/67acec014b03e1eb32fb66fa",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								"address",
								"67acec014b03e1eb32fb66fa"
							]
						}
					},
					"response": []
				},
				{
					"name": "Editar campo CEP alfanumerico",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Validar retorno da mensagem\",function(){",
									"    pm.expect(pm.response.json().error[0]).to.equal(\"O campo 'CEP' só pode conter números\")",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"address\":[\n        {\n      \"zipCode\": \"Teste123\",\n      \"city\": \"São Paulo\",\n      \"state\": \"SP\",\n      \"district\": \"Coroado\",\n      \"street\": \" rua 10 de Julho \",\n      \"number\": \"100\",\n      \"complement\": \"Bloco 10\",\n      \"country\": \"Brasil\"\n        }\n    ]\n  \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/address/67acec014b03e1eb32fb66fa",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								"address",
								"67acec014b03e1eb32fb66fa"
							]
						}
					},
					"response": []
				},
				{
					"name": "Editar campo CEP com caracteres especiais",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function(){",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Validar retorno da mensagem\",function(){",
									"    pm.expect(pm.response.json().error[0]).to.equal(\"O campo 'CEP' só pode conter números\")",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenAcesso}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"address\":[\n        {\n      \"zipCode\": \"$Te!t@&#\",\n      \"city\": \"São Paulo\",\n      \"state\": \"SP\",\n      \"district\": \"Coroado\",\n      \"street\": \" rua 10 de Julho \",\n      \"number\": \"100\",\n      \"complement\": \"Bloco 10\",\n      \"country\": \"Brasil\"\n        }\n    ]\n  \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company/address/67acec014b03e1eb32fb66fa",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company",
								"address",
								"67acec014b03e1eb32fb66fa"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validar CEP",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "viacep.com.br/ws/{{CEP}}/json/",
							"host": [
								"viacep",
								"com",
								"br"
							],
							"path": [
								"ws",
								"{{CEP}}",
								"json",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Company - PBI 20529 (Consultar)",
			"item": [
				{
					"name": "Login com usuário Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"token_user\", pm.response.json().token);\r",
									"\r",
									"pm.test(\"Verificar Status code é 200\", () => {\r",
									"    pm.response.to.have.status(200)\r",
									"})\r",
									"\r",
									"pm.test(\"Validar mensagem autenticado com sucesso\", () => {\r",
									"    pm.expect(\"Olá Ron Bugado, autenticação autorizada com sucesso!\").to.eql(pm.response.json().msg)\r",
									"})\r",
									"\r",
									"pm.test(\"Verificar se E-mail da requisição é o mesmo da resposta\", () => {\r",
									"    pm.expect(\"ronbugado@qacoders.com\").to.eql(pm.response.json().user.mail)\r",
									"})\r",
									"\r",
									"pm.test(\"Verificar se token existe na resposta\", function () {\r",
									"    pm.expect(pm.response.json().token).to.exist;\r",
									"});\r",
									"\r",
									"pm.test(\"Verificar user status é true\", () => {\r",
									"    pm.expect(true).to.eql(pm.response.json().user.status)\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"mail\": \"{{email}}\",\r\n  \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/login",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cadastrar nova empresa",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"id_company\", pm.response.json().newCompany._id)\r",
									"\r",
									"\r",
									"pm.test(\"Status code é 201\", function(){\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"/*pm.test(\"Verificar se a mensagem é verdadeira\", function () {\r",
									"    pm.expect(\"Olá \" + pm.environment.get(\"nomeCompleto\") + \", cadastro realizado com sucesso.\").to.eql(pm.response.json().msg)\r",
									"})*/\r",
									"\r",
									"pm.test(\"Nome da empresa é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.corporateName).to.equal(pm.environment.get(\"nomeEmpresa\"))\r",
									"})\r",
									"\r",
									"pm.test(\"Verificar se mail é igual\", function () {\r",
									"    pm.expect(\"test@test.com\").to.eql(pm.response.json().newCompany.mail)\r",
									"});\r",
									"\r",
									"pm.test(\"Status é True\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.status).to.be.true;\r",
									"})\r",
									"\r",
									"/*pm.test(\"Mensagem de sucesso\",function(){\r",
									"    pm.expect(pm.response.json().msg).to.equal(\"Registro realizado com sucesso\")\r",
									"})*/\r",
									"\r",
									"pm.test(\"CNPJ é igual\", function(){\r",
									"    pm.expect(pm.response.json().newCompany.registerCompany).to.equal(pm.environment.get(\"cnpjEmpresa\"))\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//primeiro nome mei\r",
									"function firstname() {\r",
									"    const names = ['Alice', 'Miguel', 'Sophia', 'Arthur', 'Helena', 'Bernardo', 'Valentina', 'Heitor', 'Laura', 'Davi', 'Isabella', 'Lorenzo', 'Manuela', 'Theo', 'Luiza', 'Pedro', 'Giovanna', 'Gabriel', 'Julia'];\r",
									"    \r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"    return randomName\r",
									"}\r",
									"pm.environment.set(\"FirstName\", firstname())\r",
									"\r",
									"//segundo nome mei\r",
									"function lastname() {\r",
									"    const lastnames = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Rodrigues', 'Almeida', 'Lima', 'Ferreira', 'Pereira', 'Carvalho', 'Goncalves', 'Ribeiro', 'Costa', 'Araujo', 'Martins', 'Fernandes'];\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"    return randomLastName\r",
									"}\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"//FullName\r",
									"pm.environment.set(\"nomeEmpresa\", \r",
									"    pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"\r",
									"//gerador de CNPJ\r",
									"function calcularDigitoVerificador(cnpjBase) {\r",
									"    const pesos1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									"    const pesos2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\r",
									" \r",
									"    function calcularDigito(cnpjBase, pesos) {\r",
									"        let soma = 0;\r",
									"        for (let i = 0; i < cnpjBase.length; i++) {\r",
									"            soma += parseInt(cnpjBase.charAt(i)) * pesos[i];\r",
									"        }\r",
									"        const resto = soma % 11;\r",
									"        return resto < 2 ? 0 : 11 - resto;\r",
									"    }\r",
									" \r",
									"    const digito1 = calcularDigito(cnpjBase, pesos1);\r",
									"    const digito2 = calcularDigito(cnpjBase + digito1, pesos2);\r",
									"    return `${digito1}${digito2}`;\r",
									"}\r",
									" \r",
									"function gerarCNPJ() {\r",
									"    // Gerando a parte base do CNPJ (8 primeiros números da empresa)\r",
									"    const cnpjBase = Math.floor(Math.random() * 90000000) + 10000000;\r",
									"    const cnpjBaseStr = cnpjBase.toString();\r",
									" \r",
									"    // Adicionando os 4 dígitos fixos da filial (Matriz = 0001)\r",
									"    const cnpjParcial = `${cnpjBaseStr}0001`;\r",
									" \r",
									"    // Calculando os dígitos verificadores corretamente\r",
									"    const digitosVerificadores = calcularDigitoVerificador(cnpjParcial);\r",
									" \r",
									"    // Montando o CNPJ final sem pontos, barra ou traço\r",
									"    const cnpj = `${cnpjParcial}${digitosVerificadores}`;\r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"// Gerando o CNPJ e armazenando no ambiente do Postman\r",
									"const cnpjGerado = gerarCNPJ();\r",
									"pm.environment.set(\"cnpjEmpresa\", cnpjGerado);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"function sendRequestWithRetry(retries) {\r",
									"    pm.sendRequest({\r",
									"        // Opções da request\r",
									"        url: 'https://www.4devs.com.br/ferramentas_online.php',\r",
									"        method: 'POST',\r",
									"        header: {\r",
									"            'Content-Type': 'application/x-www-form-urlencoded',\r",
									"        },\r",
									"        body: {\r",
									"            mode: 'raw',\r",
									"            raw: 'acao=gerar_empresa&pontuacao=N&estado=SP&idade=5',\r",
									"        }\r",
									"    }, function (err, response) {\r",
									"        if (err) {\r",
									"            console.log('Erro na requisição:', err);\r",
									"            if (retries > 0) {\r",
									"                console.log('Tentando novamente...');\r",
									"                sendRequestWithRetry(retries - 1); // Tenta novamente se falhar\r",
									"            } else {\r",
									"                console.log('Número máximo de tentativas atingido.');\r",
									"            }\r",
									"        } else {\r",
									"            // Acessa o corpo da resposta HTML\r",
									"            var responseBody = response.text();\r",
									" \r",
									"            // Função para extrair o valor de um campo baseado no id do input\r",
									"            function extractData(id) {\r",
									"                var regex = new RegExp('<input[^>]+id=\"' + id + '\"[^>]+value=\"([^\"]+)\"', 'i');\r",
									"                var match = responseBody.match(regex);\r",
									"                return match ? match[1] : null;\r",
									"            }\r",
									" \r",
									"            // Criação do objeto JSON com os dados extraídos\r",
									"            var extractedData = {\r",
									"                nome: extractData('nome'),\r",
									"                cnpj: extractData('cnpj'),\r",
									"                ie: extractData('ie'),\r",
									"                data_abertura: extractData('data_abertura'),\r",
									"                site: extractData('site'),\r",
									"                email: extractData('email'),\r",
									"                cep: extractData('cep'),\r",
									"                endereco: extractData('endereco'),\r",
									"                numero: extractData('numero'),\r",
									"                bairro: extractData('bairro'),\r",
									"                cidade: extractData('cidade'),\r",
									"                estado: extractData('estado'),\r",
									"                telefone_fixo: extractData('telefone_fixo'),\r",
									"                celular: extractData('celular')\r",
									"            };\r",
									" \r",
									" \r",
									"            // Agora, chamamos a função lastName depois de todo o processamento\r",
									"            function lastName() {\r",
									"                var lastName = [\r",
									"                    \"Silva dos Santos\", \"de Albuquerque Figueiroa\", \"Saviola de Lima\", \"Xavier de Menezes\",\r",
									"                    \"Oliveira dos Reis\", \"Carvalho Silva\", \"Pereira do Amaral\", \"Costa Lima\", \"dos Santos Rocha\",\r",
									"                    \"Ferreira de Souza\", \"Costa Ramos\", \"Almeida Martins\", \"Rocha de Oliveira\", \"Souza Lima\",\r",
									"                    \"Silva Pereira\", \"de Andrade Oliveira\", \"Fonseca Lima\", \"Pinto da Silva\", \"Almeida Costa\",\r",
									"                    \"Ferreira dos Santos\", \"Figueiredo de Souza\", \"da Silva Nogueira\", \"de Barros Santos\",\r",
									"                    \"Gomes de Almeida\", \"Lima Pereira\", \"Barbosa da Costa\", \"Rodrigues de Oliveira\", \"da Silva Andrade\",\r",
									"                    \"Monteiro dos Santos\", \"Martins da Silva\", \"Nogueira de Lima\", \"Soares de Almeida\", \"Tavares da Rocha\",\r",
									"                    \"Alves de Souza\", \"Mendes da Silva\", \"Pinto de Souza\", \"Bastos de Lima\", \"Silva de Carvalho\",\r",
									"                    \"Pinto de Almeida\", \"Cardoso da Costa\", \"Torres de Almeida\", \"Oliveira de Figueiredo\", \"de Araújo Lima\",\r",
									"                    \"Cavalcanti da Rocha\", \"Xavier de Souza\", \"Cunha de Almeida\", \"Lemos da Silva\", \"Santos de Carvalho\",\r",
									"                    \"Almeida de Lima\", \"da Silva Pinto\", \"Lima de Oliveira\", \"Barbosa de Souza\", \"Costa de Almeida\",\r",
									"                    \"Figueiredo Lima\", \"Almeida dos Reis\", \"Tavares de Souza\", \"Azevedo de Lima\", \"Ferreira de Almeida\",\r",
									"                    \"Souza da Costa\", \"Pinto de Lima\", \"Gonçalves de Lima\", \"Bastos da Silva\", \"Nascimento de Almeida\",\r",
									"                    \"da Silva Souza\", \"Vieira de Oliveira\", \"Ribeiro dos Santos\", \"Silva de Araújo\", \"Costa de Lima\",\r",
									"                    \"de Castro Nogueira\", \"Cardoso de Almeida\", \"Pereira da Rocha\", \"Silva Tavares\", \"Rocha de Souza\",\r",
									"                    \"de Carvalho Santos\", \"Borges da Silva\", \"Almeida de Araújo\", \"Lima da Costa\", \"Melo de Almeida\",\r",
									"                    \"Faria de Lima\", \"Ferreira da Costa\", \"Ramos de Souza\", \"Moreira de Lima\", \"Barbosa de Almeida\",\r",
									"                    \"Santana de Souza\", \"Rocha de Lima\", \"Duarte de Souza\", \"Lopes de Almeida\", \"Almeida de Rocha\",\r",
									"                    \"Silva da Costa\", \"Figueiredo dos Santos\", \"Cardoso de Souza\", \"Oliveira de Rocha\", \"Costa de Nogueira\",\r",
									"                    \"Pinto de Araújo\", \"Tavares de Costa\", \"Martins de Almeida\", \"Nogueira da Rocha\", \"Souza de Almeida\",\r",
									"                    \"Carvalho da Silva\", \"Pereira de Souza\"\r",
									"                ];\r",
									" \r",
									"                let randomItem = lastName[Math.floor(Math.random() * lastName.length)];\r",
									"                return randomItem;\r",
									"            }\r",
									" \r",
									"            function gerarNomeResumido(nomeCompleto) {\r",
									"            // Divide o nome completo em uma lista de palavras\r",
									"            const partesNome = nomeCompleto.split(' ');\r",
									" \r",
									"            // Verifica se o nome tem 2 ou menos palavras\r",
									"            if (partesNome.length <= 2) {\r",
									"                return partesNome.join(' ');\r",
									"            }\r",
									"            \r",
									"            // Pega o primeiro, penúltimo e último nome\r",
									"            const primeiroNome = partesNome[0];\r",
									"            const penultimoNome = partesNome[partesNome.length - 2];\r",
									"            const ultimoNome = partesNome[partesNome.length - 1];\r",
									"            \r",
									"            // Retorna o novo nome formatado\r",
									"            return `${primeiroNome} ${penultimoNome} ${ultimoNome}`;\r",
									"        }\r",
									" \r",
									"            // // Exemplo de uso\r",
									"            // const nomeCompleto = \"Erick e Emanuelly Telecom ME\";\r",
									"            const novoNome = gerarNomeResumido(extractedData.nome);\r",
									"            console.log(novoNome);\r",
									" \r",
									" \r",
									"            pm.environment.set(\"ResponsibleContact\", extractedData.nome.split(' ')[0] + ' ' + lastName())\r",
									"            pm.environment.set(\"CorporateName\", novoNome)\r",
									"            pm.environment.set(\"CorporateMail\", extractedData.email)\r",
									"            pm.environment.set(\"RegisterCompany\", extractedData.cnpj)\r",
									"            pm.environment.set(\"Telephone\", extractedData.telefone_fixo + 1234)\r",
									"            pm.environment.set(\"ZipCode\", extractedData.cep)\r",
									"            pm.environment.set(\"City\", extractedData.cidade)\r",
									"            pm.environment.set(\"State\", extractedData.estado)\r",
									"            pm.environment.set(\"District\", extractedData.bairro)\r",
									"            pm.environment.set(\"Street\", extractedData.endereco)\r",
									"            pm.environment.set(\"Number\", extractedData.numero)\r",
									"            pm.environment.set(\"Matriz\", extractedData.nome)\r",
									"            \r",
									"        }\r",
									"    });\r",
									"}\r",
									" \r",
									"// Inicia a requisição com até 3 tentativas\r",
									"sendRequestWithRetry(5);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token_user}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{nomeEmpresa}}\",\r\n  \"registerCompany\": \"{{cnpjEmpresa}}\",\r\n  \"mail\": \"test@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio\",\r\n  \"telephone\": \"99999999999999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/company",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"company"
							]
						}
					},
					"response": []
				},
				{
					"name": "Buscar empresa por ID com sucesso",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"O status é 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"A resposta contém todos os campos esperados na regra de negócio\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    pm.expect(jsonData).to.have.property(\"corporateName\");\r",
									"    pm.expect(jsonData).to.have.property(\"registerCompany\");\r",
									"    pm.expect(jsonData).to.have.property(\"responsibleContact\");\r",
									"    //pm.expect(jsonData).to.have.property(\"mail\");\r",
									"    //pm.expect(jsonData).to.have.property(\"telephone\");\r",
									"    //pm.expect(jsonData).to.have.property(\"serviceDescription\");\r",
									"    //pm.expect(jsonData).to.have.property(\"matriz\");\r",
									"    pm.expect(jsonData).to.have.property(\"status\");\r",
									"    pm.expect(jsonData).to.have.property(\"address\");\r",
									"    //pm.expect(jsonData).to.have.property(\"audit\");\r",
									"    //pm.expect(jsonData).to.have.property(\"_id\");\r",
									"});\r",
									"\r",
									"pm.test(\"O campo status é booleano\", function () {\r",
									"    pm.expect(pm.response.json().status).to.be.a('boolean');\r",
									"});\r",
									"\r",
									"pm.test(\"O campo de e-mail tem formato válido\", function () {    \r",
									"    pm.expect(pm.response.json().mail).to.match(/^[\\w-]+(\\.[\\w-]+)*@([\\w-]+\\.)+[a-zA-Z]{2,7}$/);\r",
									"});\r",
									"\r",
									"pm.test(\"O campo telefone tem formato válido\", function () {    \r",
									"    pm.expect(pm.response.json().telephone).to.match(/^\\d{14}$/);  // Exemplo para validar 14 dígitos\r",
									"});\r",
									"\r",
									"pm.test(\"O campo matriz é uma string não vazia\", function () {  \r",
									"    pm.expect(pm.response.json().matriz).to.be.a('string').that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"O campo _id não está vazia\", function () {\r",
									"    pm.expect(pm.response.json()._id).to.not.be.empty; // Verifica se o corpo não está vazio\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token_user}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://ron-bugado.qacoders.dev.br/api/company/{{id_company}}",
							"protocol": "https",
							"host": [
								"ron-bugado",
								"qacoders",
								"dev",
								"br"
							],
							"path": [
								"api",
								"company",
								"{{id_company}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Company - PBI 20530 Atualizar Status da Empresa",
			"item": [
				{
					"name": "Atualizar o Status da Empresa",
					"item": [
						{
							"name": "Pré-Requisito Login",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{url_base}}/api/login/",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"login",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Pré-Requisito Buscar Empresa por Id",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url_base}}/api/company/67097c28eed30dc911c512c6",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"company",
										"67097c28eed30dc911c512c6"
									]
								}
							},
							"response": []
						},
						{
							"name": "Atualizar campo status com booleanos true",
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{url_base}}/api/company/status/67097c28eed30dc911c512c6",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"company",
										"status",
										"67097c28eed30dc911c512c6"
									]
								}
							},
							"response": []
						},
						{
							"name": "Atualizar campo status com booleanos false",
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{url_base}}/api/company/status/67097c28eed30dc911c512c6",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"company",
										"status",
										"67097c28eed30dc911c512c6"
									]
								}
							},
							"response": []
						},
						{
							"name": "Pré-Requisito Login Aluno",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{url_base}}/api/login/",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"login",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Aluno Atualizar campo status com booleanos true",
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{url_base}}/api/company/status/67097c28eed30dc911c512c6",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"company",
										"status",
										"67097c28eed30dc911c512c6"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Company - PBI 20527 (Editar Cadastro de Empresa)",
			"item": [
				{
					"name": "Nome da empresa",
					"item": [
						{
							"name": "Login de Sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"tokenAcesso\", pm.response.json().token);",
											"pm.environment.set(\"UserIdAuditCompany\", pm.response.json().user._id);",
											"pm.environment.set(\"UserLoginAuditCompany\", pm.response.json().user.mail);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"mail\": \"{{TestUserEmail}}\",\r\n    \"password\": \"{{TestUserPassword}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/api/login/",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"login",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastro de empresa",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function sendRequestWithRetry(retries) {",
											"    pm.sendRequest({",
											"        // Opções da request",
											"        url: 'https://www.4devs.com.br/ferramentas_online.php',",
											"        method: 'POST',",
											"        header: {",
											"            'Content-Type': 'application/x-www-form-urlencoded',",
											"        },",
											"        body: {",
											"            mode: 'raw',",
											"            raw: 'acao=gerar_empresa&pontuacao=N&estado=SP&idade=5',",
											"        }",
											"    }, function (err, response) {",
											"        if (err) {",
											"            console.log('Erro na requisição:', err);",
											"            if (retries > 0) {",
											"                console.log('Tentando novamente...');",
											"                sendRequestWithRetry(retries - 1); // Tenta novamente se falhar",
											"            } else {",
											"                console.log('Número máximo de tentativas atingido.');",
											"            }",
											"        } else {",
											"            // Acessa o corpo da resposta HTML",
											"            var responseBody = response.text();",
											"",
											"            // Função para extrair o valor de um campo baseado no id do input",
											"            function extractData(id) {",
											"                var regex = new RegExp('<input[^>]+id=\"' + id + '\"[^>]+value=\"([^\"]+)\"', 'i');",
											"                var match = responseBody.match(regex);",
											"                return match ? match[1] : null;",
											"            }",
											"",
											"            // Criação do objeto JSON com os dados extraídos",
											"            var extractedData = {",
											"                nome: extractData('nome'),",
											"                cnpj: extractData('cnpj'),",
											"                ie: extractData('ie'),",
											"                data_abertura: extractData('data_abertura'),",
											"                site: extractData('site'),",
											"                email: extractData('email'),",
											"                cep: extractData('cep'),",
											"                endereco: extractData('endereco'),",
											"                numero: extractData('numero'),",
											"                bairro: extractData('bairro'),",
											"                cidade: extractData('cidade'),",
											"                estado: extractData('estado'),",
											"                telefone_fixo: extractData('telefone_fixo'),",
											"                celular: extractData('celular')",
											"            };",
											"",
											"",
											"            // Agora, chamamos a função lastName depois de todo o processamento",
											"            function lastName() {",
											"                var lastName = [",
											"                    \"Silva dos Santos\", \"de Albuquerque Figueiroa\", \"Saviola de Lima\", \"Xavier de Menezes\",",
											"                    \"Oliveira dos Reis\", \"Carvalho Silva\", \"Pereira do Amaral\", \"Costa Lima\", \"dos Santos Rocha\",",
											"                    \"Ferreira de Souza\", \"Costa Ramos\", \"Almeida Martins\", \"Rocha de Oliveira\", \"Souza Lima\",",
											"                    \"Silva Pereira\", \"de Andrade Oliveira\", \"Fonseca Lima\", \"Pinto da Silva\", \"Almeida Costa\",",
											"                    \"Ferreira dos Santos\", \"Figueiredo de Souza\", \"da Silva Nogueira\", \"de Barros Santos\",",
											"                    \"Gomes de Almeida\", \"Lima Pereira\", \"Barbosa da Costa\", \"Rodrigues de Oliveira\", \"da Silva Andrade\",",
											"                    \"Monteiro dos Santos\", \"Martins da Silva\", \"Nogueira de Lima\", \"Soares de Almeida\", \"Tavares da Rocha\",",
											"                    \"Alves de Souza\", \"Mendes da Silva\", \"Pinto de Souza\", \"Bastos de Lima\", \"Silva de Carvalho\",",
											"                    \"Pinto de Almeida\", \"Cardoso da Costa\", \"Torres de Almeida\", \"Oliveira de Figueiredo\", \"de Araújo Lima\",",
											"                    \"Cavalcanti da Rocha\", \"Xavier de Souza\", \"Cunha de Almeida\", \"Lemos da Silva\", \"Santos de Carvalho\",",
											"                    \"Almeida de Lima\", \"da Silva Pinto\", \"Lima de Oliveira\", \"Barbosa de Souza\", \"Costa de Almeida\",",
											"                    \"Figueiredo Lima\", \"Almeida dos Reis\", \"Tavares de Souza\", \"Azevedo de Lima\", \"Ferreira de Almeida\",",
											"                    \"Souza da Costa\", \"Pinto de Lima\", \"Gonçalves de Lima\", \"Bastos da Silva\", \"Nascimento de Almeida\",",
											"                    \"da Silva Souza\", \"Vieira de Oliveira\", \"Ribeiro dos Santos\", \"Silva de Araújo\", \"Costa de Lima\",",
											"                    \"de Castro Nogueira\", \"Cardoso de Almeida\", \"Pereira da Rocha\", \"Silva Tavares\", \"Rocha de Souza\",",
											"                    \"de Carvalho Santos\", \"Borges da Silva\", \"Almeida de Araújo\", \"Lima da Costa\", \"Melo de Almeida\",",
											"                    \"Faria de Lima\", \"Ferreira da Costa\", \"Ramos de Souza\", \"Moreira de Lima\", \"Barbosa de Almeida\",",
											"                    \"Santana de Souza\", \"Rocha de Lima\", \"Duarte de Souza\", \"Lopes de Almeida\", \"Almeida de Rocha\",",
											"                    \"Silva da Costa\", \"Figueiredo dos Santos\", \"Cardoso de Souza\", \"Oliveira de Rocha\", \"Costa de Nogueira\",",
											"                    \"Pinto de Araújo\", \"Tavares de Costa\", \"Martins de Almeida\", \"Nogueira da Rocha\", \"Souza de Almeida\",",
											"                    \"Carvalho da Silva\", \"Pereira de Souza\"",
											"                ];",
											"",
											"                let randomItem = lastName[Math.floor(Math.random() * lastName.length)];",
											"                return randomItem;",
											"            }",
											"",
											"            function gerarNomeResumido(nomeCompleto) {",
											"            // Divide o nome completo em uma lista de palavras",
											"            const partesNome = nomeCompleto.split(' ');",
											"",
											"            // Verifica se o nome tem 2 ou menos palavras",
											"            if (partesNome.length <= 2) {",
											"                return partesNome.join(' ');",
											"            }",
											"            ",
											"            // Pega o primeiro, penúltimo e último nome",
											"            const primeiroNome = partesNome[0];",
											"            const penultimoNome = partesNome[partesNome.length - 2];",
											"            const ultimoNome = partesNome[partesNome.length - 1];",
											"            ",
											"            // Retorna o novo nome formatado",
											"            return `${primeiroNome} ${penultimoNome} ${ultimoNome}`;",
											"        }",
											"",
											"            // // Exemplo de uso",
											"            // const nomeCompleto = \"Erick e Emanuelly Telecom ME\";",
											"            const novoNome = gerarNomeResumido(extractedData.nome);",
											"            console.log(novoNome);",
											"",
											"",
											"            pm.environment.set(\"ResponsibleContact\", extractedData.nome.split(' ')[0] + ' ' + lastName())",
											"            pm.environment.set(\"CorporateName\", novoNome)",
											"            pm.environment.set(\"CorporateMail\", extractedData.email)",
											"            pm.environment.set(\"RegisterCompany\", extractedData.cnpj)",
											"            pm.environment.set(\"Telephone\", extractedData.telefone_fixo + 1234)",
											"            pm.environment.set(\"ZipCode\", extractedData.cep)",
											"            pm.environment.set(\"City\", extractedData.cidade)",
											"            pm.environment.set(\"State\", extractedData.estado)",
											"            pm.environment.set(\"District\", extractedData.bairro)",
											"            pm.environment.set(\"Street\", extractedData.endereco)",
											"            pm.environment.set(\"Number\", extractedData.numero)",
											"            pm.environment.set(\"CorporateReason\", extractedData.nome)",
											"            ",
											"        }",
											"    });",
											"}",
											"",
											"// Inicia a requisição com até 3 tentativas",
											"sendRequestWithRetry(5);",
											"",
											"",
											"function serviceDecription () {",
											"    const descricaoServicos = [",
											"        \"Consultoria especializada para otimização de processos empresariais e aumento de produtividade.\",",
											"        \"Desenvolvimento de soluções de software personalizadas para atender às necessidades específicas do seu negócio.\",",
											"        \"Serviço de entrega rápida de alimentos frescos, com opções de pratos saudáveis e saborosos.\",",
											"        \"Manutenção preventiva e corretiva de equipamentos industriais, garantindo o melhor desempenho e segurança.\",",
											"        \"Consultoria em estratégias de marketing digital para aumentar a visibilidade e engajamento online.\",",
											"        \"Serviços de tradução e interpretação em diversos idiomas, com foco em negócios internacionais.\",",
											"        \"Assessoria jurídica para empresas, oferecendo soluções para questões contratuais e trabalhistas.\",",
											"        \"Design gráfico e criação de identidade visual para marcas, desde o logotipo até materiais promocionais.\",",
											"        \"Serviços de contabilidade e gestão financeira, com foco em reduzir custos e melhorar a saúde financeira.\",",
											"        \"Planejamento e execução de eventos corporativos e sociais, com toda a logística e produção envolvida.\",",
											"        \"Desenvolvimento de aplicativos móveis, com interfaces intuitivas e funcionalidades customizadas para sua empresa.\",",
											"        \"Serviços de limpeza e conservação para empresas, escritórios e estabelecimentos comerciais.\",",
											"        \"Treinamentos e workshops de capacitação profissional, com conteúdo voltado para o desenvolvimento de habilidades técnicas.\",",
											"        \"Fornecimento e instalação de sistemas de energia solar, promovendo a sustentabilidade e redução de custos de energia.\",",
											"        \"Assessoria em importação e exportação, com expertise em logística e regulamentos internacionais.\",",
											"        \"Serviços de gestão de redes sociais para aumentar a presença digital da sua marca e engajar clientes.\",",
											"        \"Consultoria em recursos humanos, ajudando a melhorar a gestão de talentos e o clima organizacional.\",",
											"        \"Planejamento estratégico para crescimento de negócios, com soluções inovadoras e análises de mercado detalhadas.\",",
											"        \"Criação de sites responsivos e otimizados, com foco em usabilidade e experiência do usuário.\",",
											"        \"Serviços de segurança patrimonial, com monitoramento 24h e sistemas de alarme para proteger seu imóvel.\"",
											"    ];",
											"    let randomItem = descricaoServicos[Math.floor(Math.random() * descricaoServicos.length)];",
											"        return randomItem;",
											"",
											"} ",
											"pm.environment.set(\"ServiceDescription\", serviceDecription())",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verificar se o status code é 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Validar userId do registeredBy é o mesmo id do Admin\", function () {",
											"     pm.expect(pm.response.json().newCompany.audit[0].registeredBy.userId).to.eql(pm.environment.get(\"UserIdAuditCompany\"));",
											"});",
											"",
											"pm.test(\"Validar userLogin do registeredBy é o mesmo e-mail do Admin\", function () {",
											"     pm.expect(pm.response.json().newCompany.audit[0].registeredBy.userLogin).to.eql(pm.environment.get(\"UserLoginAuditCompany\"));",
											"});",
											"",
											"pm.environment.set(\"NewCompanyId\", pm.response.json().newCompany._id)",
											"pm.environment.set(\"NewCompanyAuditRegistrationDate\", pm.response.json().newCompany.audit[0].registrationDate)",
											"pm.environment.set(\"NewCompanyAuditId\", pm.response.json().newCompany.audit[0]._id)",
											"",
											"//Salvando o objeto Address",
											"pm.environment.set(\"NewCompanyAddress\", pm.response.json().newCompany.address[0])"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"corporateName\": \"{{CorporateName}}\",\n  \"registerCompany\": \"{{RegisterCompany}}\",\n  \"mail\": \"{{CorporateMail}}\",\n  \"matriz\": \"{{CorporateReason}}\",\n  \"responsibleContact\": \"{{ResponsibleContact}}\",\n  \"telephone\": \"{{Telephone}}\",\n  \"serviceDescription\": \"{{ServiceDescription}}\",\n  \"address\": [\n    {\n      \"zipCode\": \"{{ZipCode}}\",\n      \"city\": \"{{City}}\",\n      \"state\": \"{{State}}\",\n      \"district\": \"{{District}}\",\n      \"street\": \"{{Street}}\",\n      \"number\": \"{{Number}}\",\n      \"complement\": \"\",\n      \"country\": \"{{Country}}\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/api/company/?token={{tokenAcesso}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"company",
										""
									],
									"query": [
										{
											"key": "token",
											"value": "{{tokenAcesso}}"
										}
									]
								},
								"description": "Generated from cURL: curl -X 'POST' \\\n  'https://ron-bugado.qacoders.dev.br/api/company/?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NzlhMzVmN2ViMzViNTQzYzI3NjliYTkiLCJmdWxsTmFtZSI6IkFuZHLDqSBNaW5hdG8iLCJtYWlsIjoiYW5kcmUubWluYXRvQHRlc3QuY29tLmJyIiwicGFzc3dvcmQiOiIkMmIkMTAkL0d3V0dxTFg5di9MNEVmdk9jbEsuLlouaHhWTWlITkQ3UzExZnhpTW1wSXdPZ2RtbTFYYkciLCJhY2Nlc3NQcm9maWxlIjoiQURNSU4iLCJjcGYiOiIxNzk4NTY5MjM5OCIsInN0YXR1cyI6dHJ1ZSwiYXVkaXQiOlt7InJlZ2lzdGVyZWRCeSI6eyJ1c2VySWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJ1c2VyTG9naW4iOiJzeXNhZG1pbkBxYWNvZGVycy5jb20ifSwicmVnaXN0cmF0aW9uRGF0ZSI6InF1YXJ0YS1mZWlyYSwgMjkvMDEvMjAyNSwgMTE6MDY6NDcgQlJUIiwicmVnaXN0cmF0aW9uTnVtYmVyIjoiUWFDb2RlcnMtMjYwIiwiX2lkIjoiNjc5YTM1ZjdlYjM1YjU0M2MyNzY5YmFhIn1dLCJfX3YiOjAsImlhdCI6MTczOTkwNjUzMiwiZXhwIjoxNzM5OTkyOTMyfQ.WMHrGtPB6sK3lx7_W1jI2XTfFDRaVTWHiUac0zM1NnY' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"corporateName\": \"Teste&QA LTDA\",\n  \"registerCompany\": \"12126456000100\",\n  \"mail\": \"testqa@hotmail.com\",\n  \"matriz\": \"lagoa azul\",\n  \"responsibleContact\": \"Marcio do Teste\",\n  \"telephone\": \"11111111111111\",\n  \"serviceDescription\": \"Testes de software e criação de indicadores para manter a qualidade de software\",\n  \"address\": [\n    {\n      \"zipCode\": \"04777001\",\n      \"city\": \"São Paulo\",\n      \"state\": \"SP\",\n      \"district\": \"Centro\",\n      \"street\": \"Avenida Interlagos\",\n      \"number\": \"50\",\n      \"complement\": \"\",\n      \"country\": \"Brasil\"\n    }\n  ]\n}'"
							},
							"response": []
						},
						{
							"name": "Editar Cadastro de Empresa com sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validar se o status code é 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Validar mensagem de atualizado com sucesso.\", function () {",
											"     pm.expect(pm.response.json().msg).to.eql(\"Companhia atualizada com sucesso.\");",
											"});",
											"",
											"pm.test(\"Validar se o user id e o mesmo id do Admin\", function () {",
											"     pm.expect(pm.response.json().updatedCompany.audit[0].registeredBy.userId).to.eql(pm.environment.get(\"UserIdAuditCompany\"));",
											"});",
											"",
											"pm.test(\"Validar se o user login e o mesmo user login do Admin\", function () {",
											"     pm.expect(pm.response.json().updatedCompany.audit[0].registeredBy.userLogin).to.eql(pm.environment.get(\"UserLoginAuditCompany\"));",
											"});",
											"",
											"pm.test(\"Validar se o id da empresa e o mesmo do cadastro\", function () {",
											"     pm.expect(pm.response.json().updatedCompany._id).to.eql(pm.environment.get(\"NewCompanyId\"));",
											"});",
											"",
											"pm.test(\"Validar se no endereço id continua o mesmo do cadastro\", function () {",
											"     pm.expect(pm.response.json().updatedCompany.address[0]._id).to.eql(pm.environment.get(\"NewCompanyAddress\")._id);",
											"});",
											"",
											"pm.test(\"Validar se no endereço o País continua o mesmo do cadastro\", function () {",
											"     pm.expect(pm.response.json().updatedCompany.address[0].country).to.eql(pm.environment.get(\"NewCompanyAddress\").country);",
											"});",
											"",
											"pm.test(\"Validar se no endereço o CEP continua o mesmo do cadastro\", function () {",
											"     pm.expect(pm.response.json().updatedCompany.address[0].zipCode).to.eql(pm.environment.get(\"NewCompanyAddress\").zipCode);",
											"});",
											"",
											"pm.test(\"Validar se no endereço a cidade continua a mesma do cadastro\", function () {",
											"     pm.expect(pm.response.json().updatedCompany.address[0].city).to.eql(pm.environment.get(\"NewCompanyAddress\").city);",
											"});",
											"",
											"pm.test(\"Validar se no endereço o estado continua a mesma do cadastro\", function () {",
											"     pm.expect(pm.response.json().updatedCompany.address[0].state).to.eql(pm.environment.get(\"NewCompanyAddress\").state);",
											"});",
											"",
											"pm.test(\"Validar se no endereço o bairro continua o mesmo do cadastro\", function () {",
											"     pm.expect(pm.response.json().updatedCompany.address[0].district).to.eql(pm.environment.get(\"NewCompanyAddress\").district);",
											"});",
											"",
											"pm.test(\"Validar se no endereço a rua continua a mesma do cadastro\", function () {",
											"     pm.expect(pm.response.json().updatedCompany.address[0].street).to.eql(pm.environment.get(\"NewCompanyAddress\").street);",
											"});",
											"",
											"pm.test(\"Validar se no endereço o número continua o mesmo do cadastro\", function () {",
											"     pm.expect(pm.response.json().updatedCompany.address[0].number).to.eql(pm.environment.get(\"NewCompanyAddress\").number);",
											"});",
											"",
											"pm.test(\"Validar se no endereço o complemento continua o mesmo do cadastro\", function () {",
											"     pm.expect(pm.response.json().updatedCompany.address[0].complement).to.eql(pm.environment.get(\"NewCompanyAddress\").complement);",
											"});",
											"",
											"pm.test(\"Validar se o userId do updatedBy e o mesmo id do Admin\", function () {",
											"     pm.expect(pm.response.json().updatedCompany.audit[1].updatedBy.userId).to.eql(pm.environment.get(\"UserIdAuditCompany\"));",
											"});",
											"",
											"pm.test(\"Validar se o userLogin do updatedBy e o mesmo id do Admin\", function () {",
											"     pm.expect(pm.response.json().updatedCompany.audit[1].updatedBy.userLogin).to.eql(pm.environment.get(\"UserLoginAuditCompany\"));",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"corporateName\": \"{{CorporateName}} Editar Nome Compania\",\n  \"registerCompany\": \"{{RegisterCompany}}\",\n  \"mail\": \"editar{{CorporateMail}}\",\n  \"matriz\": \"{{CorporateReason}} Editar Razão Social\",\n  \"responsibleContact\": \"{{ResponsibleContact}} Editar Contato\",\n  \"telephone\": \"551188951407589\",\n  \"serviceDescription\": \"{{ServiceDescription}} Editado\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/api/company/{{NewCompanyId}}?token={{tokenAcesso}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"company",
										"{{NewCompanyId}}"
									],
									"query": [
										{
											"key": "token",
											"value": "{{tokenAcesso}}"
										}
									]
								},
								"description": "Generated from cURL: curl -X 'PUT' \\\n  'https://ron-bugado.qacoders.dev.br/api/company/67ab5be34b03e1eb32f4e561?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NzlhMzVmN2ViMzViNTQzYzI3NjliYTkiLCJmdWxsTmFtZSI6IkFuZHLDqSBNaW5hdG8iLCJtYWlsIjoiYW5kcmUubWluYXRvQHRlc3QuY29tLmJyIiwicGFzc3dvcmQiOiIkMmIkMTAkL0d3V0dxTFg5di9MNEVmdk9jbEsuLlouaHhWTWlITkQ3UzExZnhpTW1wSXdPZ2RtbTFYYkciLCJhY2Nlc3NQcm9maWxlIjoiQURNSU4iLCJjcGYiOiIxNzk4NTY5MjM5OCIsInN0YXR1cyI6dHJ1ZSwiYXVkaXQiOlt7InJlZ2lzdGVyZWRCeSI6eyJ1c2VySWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJ1c2VyTG9naW4iOiJzeXNhZG1pbkBxYWNvZGVycy5jb20ifSwicmVnaXN0cmF0aW9uRGF0ZSI6InF1YXJ0YS1mZWlyYSwgMjkvMDEvMjAyNSwgMTE6MDY6NDcgQlJUIiwicmVnaXN0cmF0aW9uTnVtYmVyIjoiUWFDb2RlcnMtMjYwIiwiX2lkIjoiNjc5YTM1ZjdlYjM1YjU0M2MyNzY5YmFhIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTY2NSwiZXhwIjoxNzM5MzE2MDY1fQ.UmE4tUczm31wPdJ_wcCn-ZoGmAsmJJHRUBbxde6iUyw' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"corporateName\": \"Grupo KRO Publicidade & Tecnologia\",\n  \"registerCompany\": \"12126456000155\",\n  \"mail\": \"rh@kro.com.br\",\n  \"matriz\": \"Teste de criação de empresa\",\n  \"responsibleContact\": \"Teste de criação de empresa\",\n  \"telephone\": \"551188951407589\",\n  \"serviceDescription\": \"Realizar o teste no cenário para a criação de uma nova empresa\"\n}\n\n'"
							},
							"response": []
						},
						{
							"name": "Listar - Empresas",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// A resposta da requisição",
											"let responseData = pm.response.json();",
											"",
											"// Inverter a ordem dos registros",
											"let reversedData = responseData.reverse();",
											"",
											"// Salvar os dados invertidos para uso posterior",
											"pm.environment.set(\"reversedData\", JSON.stringify(reversedData));",
											"",
											"// Verificar se a inversão funcionou",
											"console.log(reversedData);",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"packages": {},
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{url_base}}/api/company/?token={{tokenAcesso}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"company",
										""
									],
									"query": [
										{
											"key": "token",
											"value": "{{tokenAcesso}}"
										}
									]
								},
								"description": "Generated from cURL: curl -X 'GET' \\\n  'https://ron-bugado.qacoders.dev.br/api/company/?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NzlhMzVmN2ViMzViNTQzYzI3NjliYTkiLCJmdWxsTmFtZSI6IkFuZHLDqSBNaW5hdG8iLCJtYWlsIjoiYW5kcmUubWluYXRvQHRlc3QuY29tLmJyIiwicGFzc3dvcmQiOiIkMmIkMTAkL0d3V0dxTFg5di9MNEVmdk9jbEsuLlouaHhWTWlITkQ3UzExZnhpTW1wSXdPZ2RtbTFYYkciLCJhY2Nlc3NQcm9maWxlIjoiQURNSU4iLCJjcGYiOiIxNzk4NTY5MjM5OCIsInN0YXR1cyI6dHJ1ZSwiYXVkaXQiOlt7InJlZ2lzdGVyZWRCeSI6eyJ1c2VySWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJ1c2VyTG9naW4iOiJzeXNhZG1pbkBxYWNvZGVycy5jb20ifSwicmVnaXN0cmF0aW9uRGF0ZSI6InF1YXJ0YS1mZWlyYSwgMjkvMDEvMjAyNSwgMTE6MDY6NDcgQlJUIiwicmVnaXN0cmF0aW9uTnVtYmVyIjoiUWFDb2RlcnMtMjYwIiwiX2lkIjoiNjc5YTM1ZjdlYjM1YjU0M2MyNzY5YmFhIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyODM4MCwiZXhwIjoxNzM5MzE0NzgwfQ.TX88kOWjwoM9biXDhB3ivJJR8xlFsKEb1XQ1KLY7V34' \\\n  -H 'accept: application/json'"
							},
							"response": []
						},
						{
							"name": "Editar nome da empresa adicionando um nome alfanumérico",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validar se o status code é 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Validar mensagem de atualizado com sucesso.\", function () {",
											"     pm.expect(pm.response.json().msg).to.eql(\"Companhia atualizada com sucesso.\");",
											"});",
											"",
											"const response = pm.response.json().updatedCompany;",
											"const lastUpdate = response.audit.filter(item => item.updatedBy).pop();",
											"",
											"pm.test(\"Validar userId da última atualização é o mesmo id do Admin\", function () {",
											"    pm.expect(lastUpdate.updatedBy.userId).to.eql(pm.environment.get(\"UserIdAuditCompany\"));",
											"})",
											"",
											"pm.test(\"Validar userLogin da última atualização é o mesmo email do Admin\", function () {",
											"    pm.expect(lastUpdate.updatedBy.userLogin).to.eql(pm.environment.get(\"UserLoginAuditCompany\"));",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"corporateName\": \"{{CorporateName}} 007Editar Nome Compania\",\n  \"registerCompany\": \"{{RegisterCompany}}\",\n  \"mail\": \"editar{{CorporateMail}}\",\n  \"matriz\": \"{{CorporateReason}} Editar Razão Social\",\n  \"responsibleContact\": \"{{ResponsibleContact}} Editar Contato\",\n  \"telephone\": \"551188951407589\",\n  \"serviceDescription\": \"{{ServiceDescription}} Editado\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/api/company/{{NewCompanyId}}?token={{tokenAcesso}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"company",
										"{{NewCompanyId}}"
									],
									"query": [
										{
											"key": "token",
											"value": "{{tokenAcesso}}"
										}
									]
								},
								"description": "Generated from cURL: curl -X 'PUT' \\\n  'https://ron-bugado.qacoders.dev.br/api/company/67ab5be34b03e1eb32f4e561?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NzlhMzVmN2ViMzViNTQzYzI3NjliYTkiLCJmdWxsTmFtZSI6IkFuZHLDqSBNaW5hdG8iLCJtYWlsIjoiYW5kcmUubWluYXRvQHRlc3QuY29tLmJyIiwicGFzc3dvcmQiOiIkMmIkMTAkL0d3V0dxTFg5di9MNEVmdk9jbEsuLlouaHhWTWlITkQ3UzExZnhpTW1wSXdPZ2RtbTFYYkciLCJhY2Nlc3NQcm9maWxlIjoiQURNSU4iLCJjcGYiOiIxNzk4NTY5MjM5OCIsInN0YXR1cyI6dHJ1ZSwiYXVkaXQiOlt7InJlZ2lzdGVyZWRCeSI6eyJ1c2VySWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJ1c2VyTG9naW4iOiJzeXNhZG1pbkBxYWNvZGVycy5jb20ifSwicmVnaXN0cmF0aW9uRGF0ZSI6InF1YXJ0YS1mZWlyYSwgMjkvMDEvMjAyNSwgMTE6MDY6NDcgQlJUIiwicmVnaXN0cmF0aW9uTnVtYmVyIjoiUWFDb2RlcnMtMjYwIiwiX2lkIjoiNjc5YTM1ZjdlYjM1YjU0M2MyNzY5YmFhIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTY2NSwiZXhwIjoxNzM5MzE2MDY1fQ.UmE4tUczm31wPdJ_wcCn-ZoGmAsmJJHRUBbxde6iUyw' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"corporateName\": \"Grupo KRO Publicidade & Tecnologia\",\n  \"registerCompany\": \"12126456000155\",\n  \"mail\": \"rh@kro.com.br\",\n  \"matriz\": \"Teste de criação de empresa\",\n  \"responsibleContact\": \"Teste de criação de empresa\",\n  \"telephone\": \"551188951407589\",\n  \"serviceDescription\": \"Realizar o teste no cenário para a criação de uma nova empresa\"\n}\n\n'"
							},
							"response": []
						},
						{
							"name": "Editar nome da empresa para um nome que contenha apenas números",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validar se o status code é 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Validar mensagem de atualizado com sucesso.\", function () {",
											"     pm.expect(pm.response.json().msg).to.eql(\"Companhia atualizada com sucesso.\");",
											"});",
											"",
											"const response = pm.response.json().updatedCompany;",
											"const lastUpdate = response.audit.filter(item => item.updatedBy).pop();",
											"",
											"pm.test(\"Validar userId da última atualização é o mesmo id do Admin\", function () {",
											"    pm.expect(lastUpdate.updatedBy.userId).to.eql(pm.environment.get(\"UserIdAuditCompany\"));",
											"})",
											"",
											"pm.test(\"Validar userLogin da última atualização é o mesmo email do Admin\", function () {",
											"    pm.expect(lastUpdate.updatedBy.userLogin).to.eql(pm.environment.get(\"UserLoginAuditCompany\"));",
											"});",
											"",
											"console.log(lastUpdate.updateDate)"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"corporateName\": \"20022025\",\n  \"registerCompany\": \"{{RegisterCompany}}\",\n  \"mail\": \"editar{{CorporateMail}}\",\n  \"matriz\": \"{{CorporateReason}} Editar Razão Social\",\n  \"responsibleContact\": \"{{ResponsibleContact}} Editar Contato\",\n  \"telephone\": \"551188951407589\",\n  \"serviceDescription\": \"{{ServiceDescription}} Editado\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/api/company/{{NewCompanyId}}?token={{tokenAcesso}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"company",
										"{{NewCompanyId}}"
									],
									"query": [
										{
											"key": "token",
											"value": "{{tokenAcesso}}"
										}
									]
								},
								"description": "Generated from cURL: curl -X 'PUT' \\\n  'https://ron-bugado.qacoders.dev.br/api/company/67ab5be34b03e1eb32f4e561?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NzlhMzVmN2ViMzViNTQzYzI3NjliYTkiLCJmdWxsTmFtZSI6IkFuZHLDqSBNaW5hdG8iLCJtYWlsIjoiYW5kcmUubWluYXRvQHRlc3QuY29tLmJyIiwicGFzc3dvcmQiOiIkMmIkMTAkL0d3V0dxTFg5di9MNEVmdk9jbEsuLlouaHhWTWlITkQ3UzExZnhpTW1wSXdPZ2RtbTFYYkciLCJhY2Nlc3NQcm9maWxlIjoiQURNSU4iLCJjcGYiOiIxNzk4NTY5MjM5OCIsInN0YXR1cyI6dHJ1ZSwiYXVkaXQiOlt7InJlZ2lzdGVyZWRCeSI6eyJ1c2VySWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJ1c2VyTG9naW4iOiJzeXNhZG1pbkBxYWNvZGVycy5jb20ifSwicmVnaXN0cmF0aW9uRGF0ZSI6InF1YXJ0YS1mZWlyYSwgMjkvMDEvMjAyNSwgMTE6MDY6NDcgQlJUIiwicmVnaXN0cmF0aW9uTnVtYmVyIjoiUWFDb2RlcnMtMjYwIiwiX2lkIjoiNjc5YTM1ZjdlYjM1YjU0M2MyNzY5YmFhIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTY2NSwiZXhwIjoxNzM5MzE2MDY1fQ.UmE4tUczm31wPdJ_wcCn-ZoGmAsmJJHRUBbxde6iUyw' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"corporateName\": \"Grupo KRO Publicidade & Tecnologia\",\n  \"registerCompany\": \"12126456000155\",\n  \"mail\": \"rh@kro.com.br\",\n  \"matriz\": \"Teste de criação de empresa\",\n  \"responsibleContact\": \"Teste de criação de empresa\",\n  \"telephone\": \"551188951407589\",\n  \"serviceDescription\": \"Realizar o teste no cenário para a criação de uma nova empresa\"\n}\n\n'"
							},
							"response": []
						},
						{
							"name": "Editar nome da empresa para um nome já cadastrado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validar se o status code é 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Validar mensagem de atualizado com sucesso.\", function () {",
											"     pm.expect(pm.response.json().msg).to.eql(\"Companhia atualizada com sucesso.\");",
											"});",
											"",
											"const response = pm.response.json().updatedCompany;",
											"const lastUpdate = response.audit.filter(item => item.updatedBy).pop();",
											"",
											"pm.test(\"Validar userId da última atualização é o mesmo id do Admin\", function () {",
											"    pm.expect(lastUpdate.updatedBy.userId).to.eql(pm.environment.get(\"UserIdAuditCompany\"));",
											"})",
											"",
											"pm.test(\"Validar userLogin da última atualização é o mesmo email do Admin\", function () {",
											"    pm.expect(lastUpdate.updatedBy.userLogin).to.eql(pm.environment.get(\"UserLoginAuditCompany\"));",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"corporateName\": \"Pietro Pizzaria ME\",\n  \"registerCompany\": \"{{RegisterCompany}}\",\n  \"mail\": \"editar{{CorporateMail}}\",\n  \"matriz\": \"{{CorporateReason}} Editar Razão Social\",\n  \"responsibleContact\": \"{{ResponsibleContact}} Editar Contato\",\n  \"telephone\": \"551188951407589\",\n  \"serviceDescription\": \"{{ServiceDescription}} Editado\"\n}\n\n\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/api/company/{{NewCompanyId}}?token={{tokenAcesso}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"company",
										"{{NewCompanyId}}"
									],
									"query": [
										{
											"key": "token",
											"value": "{{tokenAcesso}}"
										}
									]
								},
								"description": "Generated from cURL: curl -X 'PUT' \\\n  'https://ron-bugado.qacoders.dev.br/api/company/67ab5be34b03e1eb32f4e561?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NzlhMzVmN2ViMzViNTQzYzI3NjliYTkiLCJmdWxsTmFtZSI6IkFuZHLDqSBNaW5hdG8iLCJtYWlsIjoiYW5kcmUubWluYXRvQHRlc3QuY29tLmJyIiwicGFzc3dvcmQiOiIkMmIkMTAkL0d3V0dxTFg5di9MNEVmdk9jbEsuLlouaHhWTWlITkQ3UzExZnhpTW1wSXdPZ2RtbTFYYkciLCJhY2Nlc3NQcm9maWxlIjoiQURNSU4iLCJjcGYiOiIxNzk4NTY5MjM5OCIsInN0YXR1cyI6dHJ1ZSwiYXVkaXQiOlt7InJlZ2lzdGVyZWRCeSI6eyJ1c2VySWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJ1c2VyTG9naW4iOiJzeXNhZG1pbkBxYWNvZGVycy5jb20ifSwicmVnaXN0cmF0aW9uRGF0ZSI6InF1YXJ0YS1mZWlyYSwgMjkvMDEvMjAyNSwgMTE6MDY6NDcgQlJUIiwicmVnaXN0cmF0aW9uTnVtYmVyIjoiUWFDb2RlcnMtMjYwIiwiX2lkIjoiNjc5YTM1ZjdlYjM1YjU0M2MyNzY5YmFhIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTY2NSwiZXhwIjoxNzM5MzE2MDY1fQ.UmE4tUczm31wPdJ_wcCn-ZoGmAsmJJHRUBbxde6iUyw' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"corporateName\": \"Grupo KRO Publicidade & Tecnologia\",\n  \"registerCompany\": \"12126456000155\",\n  \"mail\": \"rh@kro.com.br\",\n  \"matriz\": \"Teste de criação de empresa\",\n  \"responsibleContact\": \"Teste de criação de empresa\",\n  \"telephone\": \"551188951407589\",\n  \"serviceDescription\": \"Realizar o teste no cenário para a criação de uma nova empresa\"\n}\n\n'"
							},
							"response": []
						},
						{
							"name": "Editar nome da empresa para um nome com 100 caracteres",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validar se o status code é 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Validar mensagem de atualizado com sucesso.\", function () {",
											"     pm.expect(pm.response.json().msg).to.eql(\"Companhia atualizada com sucesso.\");",
											"});",
											"",
											"const response = pm.response.json().updatedCompany;",
											"const lastUpdate = response.audit.filter(item => item.updatedBy).pop();",
											"",
											"pm.test(\"Validar userId da última atualização é o mesmo id do Admin\", function () {",
											"    pm.expect(lastUpdate.updatedBy.userId).to.eql(pm.environment.get(\"UserIdAuditCompany\"));",
											"})",
											"",
											"pm.test(\"Validar userLogin da última atualização é o mesmo email do Admin\", function () {",
											"    pm.expect(lastUpdate.updatedBy.userLogin).to.eql(pm.environment.get(\"UserLoginAuditCompany\"));",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"corporateName\": \"{{NomeEmpresa100Caracteres}}\",\n  \"registerCompany\": \"{{RegisterCompany}}\",\n  \"mail\": \"editar{{CorporateMail}}\",\n  \"matriz\": \"{{CorporateReason}} Editar Razão Social\",\n  \"responsibleContact\": \"{{ResponsibleContact}} Editar Contato\",\n  \"telephone\": \"551188951407589\",\n  \"serviceDescription\": \"{{ServiceDescription}} Editado\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/api/company/{{NewCompanyId}}?token={{tokenAcesso}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"company",
										"{{NewCompanyId}}"
									],
									"query": [
										{
											"key": "token",
											"value": "{{tokenAcesso}}"
										}
									]
								},
								"description": "Generated from cURL: curl -X 'PUT' \\\n  'https://ron-bugado.qacoders.dev.br/api/company/67ab5be34b03e1eb32f4e561?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NzlhMzVmN2ViMzViNTQzYzI3NjliYTkiLCJmdWxsTmFtZSI6IkFuZHLDqSBNaW5hdG8iLCJtYWlsIjoiYW5kcmUubWluYXRvQHRlc3QuY29tLmJyIiwicGFzc3dvcmQiOiIkMmIkMTAkL0d3V0dxTFg5di9MNEVmdk9jbEsuLlouaHhWTWlITkQ3UzExZnhpTW1wSXdPZ2RtbTFYYkciLCJhY2Nlc3NQcm9maWxlIjoiQURNSU4iLCJjcGYiOiIxNzk4NTY5MjM5OCIsInN0YXR1cyI6dHJ1ZSwiYXVkaXQiOlt7InJlZ2lzdGVyZWRCeSI6eyJ1c2VySWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJ1c2VyTG9naW4iOiJzeXNhZG1pbkBxYWNvZGVycy5jb20ifSwicmVnaXN0cmF0aW9uRGF0ZSI6InF1YXJ0YS1mZWlyYSwgMjkvMDEvMjAyNSwgMTE6MDY6NDcgQlJUIiwicmVnaXN0cmF0aW9uTnVtYmVyIjoiUWFDb2RlcnMtMjYwIiwiX2lkIjoiNjc5YTM1ZjdlYjM1YjU0M2MyNzY5YmFhIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTY2NSwiZXhwIjoxNzM5MzE2MDY1fQ.UmE4tUczm31wPdJ_wcCn-ZoGmAsmJJHRUBbxde6iUyw' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"corporateName\": \"Grupo KRO Publicidade & Tecnologia\",\n  \"registerCompany\": \"12126456000155\",\n  \"mail\": \"rh@kro.com.br\",\n  \"matriz\": \"Teste de criação de empresa\",\n  \"responsibleContact\": \"Teste de criação de empresa\",\n  \"telephone\": \"551188951407589\",\n  \"serviceDescription\": \"Realizar o teste no cenário para a criação de uma nova empresa\"\n}\n\n'"
							},
							"response": []
						},
						{
							"name": "Editar nome da empresa para um nome com 101 caracteres",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validar se o status code é 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Validar mensagem de atualizado com sucesso.\", function () {",
											"     pm.expect(pm.response.json().msg).to.eql(\"Companhia atualizada com sucesso.\");",
											"});",
											"",
											"const response = pm.response.json().updatedCompany;",
											"const lastUpdate = response.audit.filter(item => item.updatedBy).pop();",
											"",
											"pm.test(\"Validar userId da última atualização é o mesmo id do Admin\", function () {",
											"    pm.expect(lastUpdate.updatedBy.userId).to.eql(pm.environment.get(\"UserIdAuditCompany\"));",
											"})",
											"",
											"pm.test(\"Validar userLogin da última atualização é o mesmo email do Admin\", function () {",
											"    pm.expect(lastUpdate.updatedBy.userLogin).to.eql(pm.environment.get(\"UserLoginAuditCompany\"));",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"corporateName\": \"{{NomeEmpresa101Caracteres}}\",\n  \"registerCompany\": \"{{RegisterCompany}}\",\n  \"mail\": \"editar{{CorporateMail}}\",\n  \"matriz\": \"{{CorporateReason}} Editar Razão Social\",\n  \"responsibleContact\": \"{{ResponsibleContact}} Editar Contato\",\n  \"telephone\": \"551188951407589\",\n  \"serviceDescription\": \"{{ServiceDescription}} Editado\"\n}\n\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/api/company/{{NewCompanyId}}?token={{tokenAcesso}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"company",
										"{{NewCompanyId}}"
									],
									"query": [
										{
											"key": "token",
											"value": "{{tokenAcesso}}"
										}
									]
								},
								"description": "Generated from cURL: curl -X 'PUT' \\\n  'https://ron-bugado.qacoders.dev.br/api/company/67ab5be34b03e1eb32f4e561?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NzlhMzVmN2ViMzViNTQzYzI3NjliYTkiLCJmdWxsTmFtZSI6IkFuZHLDqSBNaW5hdG8iLCJtYWlsIjoiYW5kcmUubWluYXRvQHRlc3QuY29tLmJyIiwicGFzc3dvcmQiOiIkMmIkMTAkL0d3V0dxTFg5di9MNEVmdk9jbEsuLlouaHhWTWlITkQ3UzExZnhpTW1wSXdPZ2RtbTFYYkciLCJhY2Nlc3NQcm9maWxlIjoiQURNSU4iLCJjcGYiOiIxNzk4NTY5MjM5OCIsInN0YXR1cyI6dHJ1ZSwiYXVkaXQiOlt7InJlZ2lzdGVyZWRCeSI6eyJ1c2VySWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJ1c2VyTG9naW4iOiJzeXNhZG1pbkBxYWNvZGVycy5jb20ifSwicmVnaXN0cmF0aW9uRGF0ZSI6InF1YXJ0YS1mZWlyYSwgMjkvMDEvMjAyNSwgMTE6MDY6NDcgQlJUIiwicmVnaXN0cmF0aW9uTnVtYmVyIjoiUWFDb2RlcnMtMjYwIiwiX2lkIjoiNjc5YTM1ZjdlYjM1YjU0M2MyNzY5YmFhIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTY2NSwiZXhwIjoxNzM5MzE2MDY1fQ.UmE4tUczm31wPdJ_wcCn-ZoGmAsmJJHRUBbxde6iUyw' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"corporateName\": \"Grupo KRO Publicidade & Tecnologia\",\n  \"registerCompany\": \"12126456000155\",\n  \"mail\": \"rh@kro.com.br\",\n  \"matriz\": \"Teste de criação de empresa\",\n  \"responsibleContact\": \"Teste de criação de empresa\",\n  \"telephone\": \"551188951407589\",\n  \"serviceDescription\": \"Realizar o teste no cenário para a criação de uma nova empresa\"\n}\n\n'"
							},
							"response": []
						},
						{
							"name": "Editar nome da empresa enviando valor em branco",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validar se o status code é 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Validar mensagem de atualizado com sucesso.\", function () {",
											"     pm.expect(pm.response.json().msg).to.eql(\"Companhia atualizada com sucesso.\");",
											"});",
											"",
											"const response = pm.response.json().updatedCompany;",
											"const lastUpdate = response.audit.filter(item => item.updatedBy).pop();",
											"",
											"pm.test(\"Validar userId da última atualização é o mesmo id do Admin\", function () {",
											"    pm.expect(lastUpdate.updatedBy.userId).to.eql(pm.environment.get(\"UserIdAuditCompany\"));",
											"})",
											"",
											"pm.test(\"Validar userLogin da última atualização é o mesmo email do Admin\", function () {",
											"    pm.expect(lastUpdate.updatedBy.userLogin).to.eql(pm.environment.get(\"UserLoginAuditCompany\"));",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"corporateName\": \"\",\n  \"registerCompany\": \"{{RegisterCompany}}\",\n  \"mail\": \"editar{{CorporateMail}}\",\n  \"matriz\": \"{{CorporateReason}} Editar Razão Social\",\n  \"responsibleContact\": \"{{ResponsibleContact}} Editar Contato\",\n  \"telephone\": \"551188951407589\",\n  \"serviceDescription\": \"{{ServiceDescription}} Editado\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/api/company/{{NewCompanyId}}?token={{tokenAcesso}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"company",
										"{{NewCompanyId}}"
									],
									"query": [
										{
											"key": "token",
											"value": "{{tokenAcesso}}"
										}
									]
								},
								"description": "Generated from cURL: curl -X 'PUT' \\\n  'https://ron-bugado.qacoders.dev.br/api/company/67ab5be34b03e1eb32f4e561?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NzlhMzVmN2ViMzViNTQzYzI3NjliYTkiLCJmdWxsTmFtZSI6IkFuZHLDqSBNaW5hdG8iLCJtYWlsIjoiYW5kcmUubWluYXRvQHRlc3QuY29tLmJyIiwicGFzc3dvcmQiOiIkMmIkMTAkL0d3V0dxTFg5di9MNEVmdk9jbEsuLlouaHhWTWlITkQ3UzExZnhpTW1wSXdPZ2RtbTFYYkciLCJhY2Nlc3NQcm9maWxlIjoiQURNSU4iLCJjcGYiOiIxNzk4NTY5MjM5OCIsInN0YXR1cyI6dHJ1ZSwiYXVkaXQiOlt7InJlZ2lzdGVyZWRCeSI6eyJ1c2VySWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJ1c2VyTG9naW4iOiJzeXNhZG1pbkBxYWNvZGVycy5jb20ifSwicmVnaXN0cmF0aW9uRGF0ZSI6InF1YXJ0YS1mZWlyYSwgMjkvMDEvMjAyNSwgMTE6MDY6NDcgQlJUIiwicmVnaXN0cmF0aW9uTnVtYmVyIjoiUWFDb2RlcnMtMjYwIiwiX2lkIjoiNjc5YTM1ZjdlYjM1YjU0M2MyNzY5YmFhIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTY2NSwiZXhwIjoxNzM5MzE2MDY1fQ.UmE4tUczm31wPdJ_wcCn-ZoGmAsmJJHRUBbxde6iUyw' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"corporateName\": \"Grupo KRO Publicidade & Tecnologia\",\n  \"registerCompany\": \"12126456000155\",\n  \"mail\": \"rh@kro.com.br\",\n  \"matriz\": \"Teste de criação de empresa\",\n  \"responsibleContact\": \"Teste de criação de empresa\",\n  \"telephone\": \"551188951407589\",\n  \"serviceDescription\": \"Realizar o teste no cenário para a criação de uma nova empresa\"\n}\n\n'"
							},
							"response": []
						}
					]
				},
				{
					"name": "CNPJ",
					"item": [
						{
							"name": "Login de Sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"tokenAcesso\", pm.response.json().token);",
											"pm.environment.set(\"UserIdAuditCompany\", pm.response.json().user._id);",
											"pm.environment.set(\"UserLoginAuditCompany\", pm.response.json().user.mail);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"mail\": \"{{TestUserEmail}}\",\r\n    \"password\": \"{{TestUserPassword}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/api/login/",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"login",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastro de empresa",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function sendRequestWithRetry(retries) {",
											"    pm.sendRequest({",
											"        // Opções da request",
											"        url: 'https://www.4devs.com.br/ferramentas_online.php',",
											"        method: 'POST',",
											"        header: {",
											"            'Content-Type': 'application/x-www-form-urlencoded',",
											"        },",
											"        body: {",
											"            mode: 'raw',",
											"            raw: 'acao=gerar_empresa&pontuacao=N&estado=SP&idade=5',",
											"        }",
											"    }, function (err, response) {",
											"        if (err) {",
											"            console.log('Erro na requisição:', err);",
											"            if (retries > 0) {",
											"                console.log('Tentando novamente...');",
											"                sendRequestWithRetry(retries - 1); // Tenta novamente se falhar",
											"            } else {",
											"                console.log('Número máximo de tentativas atingido.');",
											"            }",
											"        } else {",
											"            // Acessa o corpo da resposta HTML",
											"            var responseBody = response.text();",
											"",
											"            // Função para extrair o valor de um campo baseado no id do input",
											"            function extractData(id) {",
											"                var regex = new RegExp('<input[^>]+id=\"' + id + '\"[^>]+value=\"([^\"]+)\"', 'i');",
											"                var match = responseBody.match(regex);",
											"                return match ? match[1] : null;",
											"            }",
											"",
											"            // Criação do objeto JSON com os dados extraídos",
											"            var extractedData = {",
											"                nome: extractData('nome'),",
											"                cnpj: extractData('cnpj'),",
											"                ie: extractData('ie'),",
											"                data_abertura: extractData('data_abertura'),",
											"                site: extractData('site'),",
											"                email: extractData('email'),",
											"                cep: extractData('cep'),",
											"                endereco: extractData('endereco'),",
											"                numero: extractData('numero'),",
											"                bairro: extractData('bairro'),",
											"                cidade: extractData('cidade'),",
											"                estado: extractData('estado'),",
											"                telefone_fixo: extractData('telefone_fixo'),",
											"                celular: extractData('celular')",
											"            };",
											"",
											"",
											"            // Agora, chamamos a função lastName depois de todo o processamento",
											"            function lastName() {",
											"                var lastName = [",
											"                    \"Silva dos Santos\", \"de Albuquerque Figueiroa\", \"Saviola de Lima\", \"Xavier de Menezes\",",
											"                    \"Oliveira dos Reis\", \"Carvalho Silva\", \"Pereira do Amaral\", \"Costa Lima\", \"dos Santos Rocha\",",
											"                    \"Ferreira de Souza\", \"Costa Ramos\", \"Almeida Martins\", \"Rocha de Oliveira\", \"Souza Lima\",",
											"                    \"Silva Pereira\", \"de Andrade Oliveira\", \"Fonseca Lima\", \"Pinto da Silva\", \"Almeida Costa\",",
											"                    \"Ferreira dos Santos\", \"Figueiredo de Souza\", \"da Silva Nogueira\", \"de Barros Santos\",",
											"                    \"Gomes de Almeida\", \"Lima Pereira\", \"Barbosa da Costa\", \"Rodrigues de Oliveira\", \"da Silva Andrade\",",
											"                    \"Monteiro dos Santos\", \"Martins da Silva\", \"Nogueira de Lima\", \"Soares de Almeida\", \"Tavares da Rocha\",",
											"                    \"Alves de Souza\", \"Mendes da Silva\", \"Pinto de Souza\", \"Bastos de Lima\", \"Silva de Carvalho\",",
											"                    \"Pinto de Almeida\", \"Cardoso da Costa\", \"Torres de Almeida\", \"Oliveira de Figueiredo\", \"de Araújo Lima\",",
											"                    \"Cavalcanti da Rocha\", \"Xavier de Souza\", \"Cunha de Almeida\", \"Lemos da Silva\", \"Santos de Carvalho\",",
											"                    \"Almeida de Lima\", \"da Silva Pinto\", \"Lima de Oliveira\", \"Barbosa de Souza\", \"Costa de Almeida\",",
											"                    \"Figueiredo Lima\", \"Almeida dos Reis\", \"Tavares de Souza\", \"Azevedo de Lima\", \"Ferreira de Almeida\",",
											"                    \"Souza da Costa\", \"Pinto de Lima\", \"Gonçalves de Lima\", \"Bastos da Silva\", \"Nascimento de Almeida\",",
											"                    \"da Silva Souza\", \"Vieira de Oliveira\", \"Ribeiro dos Santos\", \"Silva de Araújo\", \"Costa de Lima\",",
											"                    \"de Castro Nogueira\", \"Cardoso de Almeida\", \"Pereira da Rocha\", \"Silva Tavares\", \"Rocha de Souza\",",
											"                    \"de Carvalho Santos\", \"Borges da Silva\", \"Almeida de Araújo\", \"Lima da Costa\", \"Melo de Almeida\",",
											"                    \"Faria de Lima\", \"Ferreira da Costa\", \"Ramos de Souza\", \"Moreira de Lima\", \"Barbosa de Almeida\",",
											"                    \"Santana de Souza\", \"Rocha de Lima\", \"Duarte de Souza\", \"Lopes de Almeida\", \"Almeida de Rocha\",",
											"                    \"Silva da Costa\", \"Figueiredo dos Santos\", \"Cardoso de Souza\", \"Oliveira de Rocha\", \"Costa de Nogueira\",",
											"                    \"Pinto de Araújo\", \"Tavares de Costa\", \"Martins de Almeida\", \"Nogueira da Rocha\", \"Souza de Almeida\",",
											"                    \"Carvalho da Silva\", \"Pereira de Souza\"",
											"                ];",
											"",
											"                let randomItem = lastName[Math.floor(Math.random() * lastName.length)];",
											"                return randomItem;",
											"            }",
											"",
											"            function gerarNomeResumido(nomeCompleto) {",
											"            // Divide o nome completo em uma lista de palavras",
											"            const partesNome = nomeCompleto.split(' ');",
											"",
											"            // Verifica se o nome tem 2 ou menos palavras",
											"            if (partesNome.length <= 2) {",
											"                return partesNome.join(' ');",
											"            }",
											"            ",
											"            // Pega o primeiro, penúltimo e último nome",
											"            const primeiroNome = partesNome[0];",
											"            const penultimoNome = partesNome[partesNome.length - 2];",
											"            const ultimoNome = partesNome[partesNome.length - 1];",
											"            ",
											"            // Retorna o novo nome formatado",
											"            return `${primeiroNome} ${penultimoNome} ${ultimoNome}`;",
											"        }",
											"",
											"            // // Exemplo de uso",
											"            // const nomeCompleto = \"Erick e Emanuelly Telecom ME\";",
											"            const novoNome = gerarNomeResumido(extractedData.nome);",
											"            console.log(novoNome);",
											"",
											"",
											"            pm.environment.set(\"ResponsibleContact\", extractedData.nome.split(' ')[0] + ' ' + lastName())",
											"            pm.environment.set(\"CorporateName\", novoNome)",
											"            pm.environment.set(\"CorporateMail\", extractedData.email)",
											"            pm.environment.set(\"RegisterCompany\", extractedData.cnpj)",
											"            pm.environment.set(\"Telephone\", extractedData.telefone_fixo + 1234)",
											"            pm.environment.set(\"ZipCode\", extractedData.cep)",
											"            pm.environment.set(\"City\", extractedData.cidade)",
											"            pm.environment.set(\"State\", extractedData.estado)",
											"            pm.environment.set(\"District\", extractedData.bairro)",
											"            pm.environment.set(\"Street\", extractedData.endereco)",
											"            pm.environment.set(\"Number\", extractedData.numero)",
											"            pm.environment.set(\"CorporateReason\", extractedData.nome)",
											"            ",
											"        }",
											"    });",
											"}",
											"",
											"// Inicia a requisição com até 3 tentativas",
											"sendRequestWithRetry(5);",
											"",
											"",
											"function serviceDecription () {",
											"    const descricaoServicos = [",
											"        \"Consultoria especializada para otimização de processos empresariais e aumento de produtividade.\",",
											"        \"Desenvolvimento de soluções de software personalizadas para atender às necessidades específicas do seu negócio.\",",
											"        \"Serviço de entrega rápida de alimentos frescos, com opções de pratos saudáveis e saborosos.\",",
											"        \"Manutenção preventiva e corretiva de equipamentos industriais, garantindo o melhor desempenho e segurança.\",",
											"        \"Consultoria em estratégias de marketing digital para aumentar a visibilidade e engajamento online.\",",
											"        \"Serviços de tradução e interpretação em diversos idiomas, com foco em negócios internacionais.\",",
											"        \"Assessoria jurídica para empresas, oferecendo soluções para questões contratuais e trabalhistas.\",",
											"        \"Design gráfico e criação de identidade visual para marcas, desde o logotipo até materiais promocionais.\",",
											"        \"Serviços de contabilidade e gestão financeira, com foco em reduzir custos e melhorar a saúde financeira.\",",
											"        \"Planejamento e execução de eventos corporativos e sociais, com toda a logística e produção envolvida.\",",
											"        \"Desenvolvimento de aplicativos móveis, com interfaces intuitivas e funcionalidades customizadas para sua empresa.\",",
											"        \"Serviços de limpeza e conservação para empresas, escritórios e estabelecimentos comerciais.\",",
											"        \"Treinamentos e workshops de capacitação profissional, com conteúdo voltado para o desenvolvimento de habilidades técnicas.\",",
											"        \"Fornecimento e instalação de sistemas de energia solar, promovendo a sustentabilidade e redução de custos de energia.\",",
											"        \"Assessoria em importação e exportação, com expertise em logística e regulamentos internacionais.\",",
											"        \"Serviços de gestão de redes sociais para aumentar a presença digital da sua marca e engajar clientes.\",",
											"        \"Consultoria em recursos humanos, ajudando a melhorar a gestão de talentos e o clima organizacional.\",",
											"        \"Planejamento estratégico para crescimento de negócios, com soluções inovadoras e análises de mercado detalhadas.\",",
											"        \"Criação de sites responsivos e otimizados, com foco em usabilidade e experiência do usuário.\",",
											"        \"Serviços de segurança patrimonial, com monitoramento 24h e sistemas de alarme para proteger seu imóvel.\"",
											"    ];",
											"    let randomItem = descricaoServicos[Math.floor(Math.random() * descricaoServicos.length)];",
											"        return randomItem;",
											"",
											"} ",
											"pm.environment.set(\"ServiceDescription\", serviceDecription())",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verificar se o status code é 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Validar userId do registeredBy é o mesmo id do Admin\", function () {",
											"     pm.expect(pm.response.json().newCompany.audit[0].registeredBy.userId).to.eql(pm.environment.get(\"UserIdAuditCompany\"));",
											"});",
											"",
											"pm.test(\"Validar userLogin do registeredBy é o mesmo e-mail do Admin\", function () {",
											"     pm.expect(pm.response.json().newCompany.audit[0].registeredBy.userLogin).to.eql(pm.environment.get(\"UserLoginAuditCompany\"));",
											"});",
											"",
											"pm.environment.set(\"NewCompanyId\", pm.response.json().newCompany._id)",
											"pm.environment.set(\"NewCompanyAuditRegistrationDate\", pm.response.json().newCompany.audit[0].registrationDate)",
											"pm.environment.set(\"NewCompanyAuditId\", pm.response.json().newCompany.audit[0]._id)",
											"",
											"//Salvando o objeto Address",
											"pm.environment.set(\"NewCompanyAddress\", pm.response.json().newCompany.address[0])"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"corporateName\": \"{{CorporateName}}\",\n  \"registerCompany\": \"{{RegisterCompany}}\",\n  \"mail\": \"{{CorporateMail}}\",\n  \"matriz\": \"{{CorporateReason}}\",\n  \"responsibleContact\": \"{{ResponsibleContact}}\",\n  \"telephone\": \"{{Telephone}}\",\n  \"serviceDescription\": \"{{ServiceDescription}}\",\n  \"address\": [\n    {\n      \"zipCode\": \"{{ZipCode}}\",\n      \"city\": \"{{City}}\",\n      \"state\": \"{{State}}\",\n      \"district\": \"{{District}}\",\n      \"street\": \"{{Street}}\",\n      \"number\": \"{{Number}}\",\n      \"complement\": \"\",\n      \"country\": \"{{Country}}\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/api/company/?token={{tokenAcesso}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"company",
										""
									],
									"query": [
										{
											"key": "token",
											"value": "{{tokenAcesso}}"
										}
									]
								},
								"description": "Generated from cURL: curl -X 'POST' \\\n  'https://ron-bugado.qacoders.dev.br/api/company/?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NzlhMzVmN2ViMzViNTQzYzI3NjliYTkiLCJmdWxsTmFtZSI6IkFuZHLDqSBNaW5hdG8iLCJtYWlsIjoiYW5kcmUubWluYXRvQHRlc3QuY29tLmJyIiwicGFzc3dvcmQiOiIkMmIkMTAkL0d3V0dxTFg5di9MNEVmdk9jbEsuLlouaHhWTWlITkQ3UzExZnhpTW1wSXdPZ2RtbTFYYkciLCJhY2Nlc3NQcm9maWxlIjoiQURNSU4iLCJjcGYiOiIxNzk4NTY5MjM5OCIsInN0YXR1cyI6dHJ1ZSwiYXVkaXQiOlt7InJlZ2lzdGVyZWRCeSI6eyJ1c2VySWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJ1c2VyTG9naW4iOiJzeXNhZG1pbkBxYWNvZGVycy5jb20ifSwicmVnaXN0cmF0aW9uRGF0ZSI6InF1YXJ0YS1mZWlyYSwgMjkvMDEvMjAyNSwgMTE6MDY6NDcgQlJUIiwicmVnaXN0cmF0aW9uTnVtYmVyIjoiUWFDb2RlcnMtMjYwIiwiX2lkIjoiNjc5YTM1ZjdlYjM1YjU0M2MyNzY5YmFhIn1dLCJfX3YiOjAsImlhdCI6MTczOTkwNjUzMiwiZXhwIjoxNzM5OTkyOTMyfQ.WMHrGtPB6sK3lx7_W1jI2XTfFDRaVTWHiUac0zM1NnY' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"corporateName\": \"Teste&QA LTDA\",\n  \"registerCompany\": \"12126456000100\",\n  \"mail\": \"testqa@hotmail.com\",\n  \"matriz\": \"lagoa azul\",\n  \"responsibleContact\": \"Marcio do Teste\",\n  \"telephone\": \"11111111111111\",\n  \"serviceDescription\": \"Testes de software e criação de indicadores para manter a qualidade de software\",\n  \"address\": [\n    {\n      \"zipCode\": \"04777001\",\n      \"city\": \"São Paulo\",\n      \"state\": \"SP\",\n      \"district\": \"Centro\",\n      \"street\": \"Avenida Interlagos\",\n      \"number\": \"50\",\n      \"complement\": \"\",\n      \"country\": \"Brasil\"\n    }\n  ]\n}'"
							},
							"response": []
						},
						{
							"name": "Editar CNPJ da empresa enviando  13 caracteres",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validar se o status code é 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Validar mensagem de atualizado com sucesso.\", function () {",
											"     pm.expect(pm.response.json().msg).to.eql(\"Companhia atualizada com sucesso.\");",
											"});",
											"",
											"pm.test(\"Validar se o user id e o mesmo id do Admin\", function () {",
											"     pm.expect(pm.response.json().updatedCompany.audit[0].registeredBy.userId).to.eql(pm.environment.get(\"UserIdAuditCompany\"));",
											"});",
											"",
											"pm.test(\"Validar se o user login e o mesmo user login do Admin\", function () {",
											"     pm.expect(pm.response.json().updatedCompany.audit[0].registeredBy.userLogin).to.eql(pm.environment.get(\"UserLoginAuditCompany\"));",
											"});",
											"",
											"pm.test(\"Validar que o CNPJ e diferente do CNPJ de 13 caracteres enviado no request\", function () {",
											"     pm.expect(pm.response.json().updatedCompany.registerCompany).not.to.eql(pm.environment.get(\"CNPJ13Caracteres\"));",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"corporateName\": \"{{CorporateName}}\",\n  \"registerCompany\": \"{{CNPJ13Caracteres}}\",\n  \"mail\": \"{{CorporateMail}}\",\n  \"matriz\": \"{{CorporateReason}}\",\n  \"responsibleContact\": \"{{ResponsibleContact}}\",\n  \"telephone\": \"{{Telephone}}\",\n  \"serviceDescription\": \"{{ServiceDescription}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/api/company/{{NewCompanyId}}?token={{tokenAcesso}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"company",
										"{{NewCompanyId}}"
									],
									"query": [
										{
											"key": "token",
											"value": "{{tokenAcesso}}"
										}
									]
								},
								"description": "Generated from cURL: curl -X 'PUT' \\\n  'https://ron-bugado.qacoders.dev.br/api/company/67ab5be34b03e1eb32f4e561?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NzlhMzVmN2ViMzViNTQzYzI3NjliYTkiLCJmdWxsTmFtZSI6IkFuZHLDqSBNaW5hdG8iLCJtYWlsIjoiYW5kcmUubWluYXRvQHRlc3QuY29tLmJyIiwicGFzc3dvcmQiOiIkMmIkMTAkL0d3V0dxTFg5di9MNEVmdk9jbEsuLlouaHhWTWlITkQ3UzExZnhpTW1wSXdPZ2RtbTFYYkciLCJhY2Nlc3NQcm9maWxlIjoiQURNSU4iLCJjcGYiOiIxNzk4NTY5MjM5OCIsInN0YXR1cyI6dHJ1ZSwiYXVkaXQiOlt7InJlZ2lzdGVyZWRCeSI6eyJ1c2VySWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJ1c2VyTG9naW4iOiJzeXNhZG1pbkBxYWNvZGVycy5jb20ifSwicmVnaXN0cmF0aW9uRGF0ZSI6InF1YXJ0YS1mZWlyYSwgMjkvMDEvMjAyNSwgMTE6MDY6NDcgQlJUIiwicmVnaXN0cmF0aW9uTnVtYmVyIjoiUWFDb2RlcnMtMjYwIiwiX2lkIjoiNjc5YTM1ZjdlYjM1YjU0M2MyNzY5YmFhIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTY2NSwiZXhwIjoxNzM5MzE2MDY1fQ.UmE4tUczm31wPdJ_wcCn-ZoGmAsmJJHRUBbxde6iUyw' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"corporateName\": \"Grupo KRO Publicidade & Tecnologia\",\n  \"registerCompany\": \"12126456000155\",\n  \"mail\": \"rh@kro.com.br\",\n  \"matriz\": \"Teste de criação de empresa\",\n  \"responsibleContact\": \"Teste de criação de empresa\",\n  \"telephone\": \"551188951407589\",\n  \"serviceDescription\": \"Realizar o teste no cenário para a criação de uma nova empresa\"\n}\n\n'"
							},
							"response": []
						},
						{
							"name": "Editar CNPJ da empresa enviando  15 caracteres",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validar se o status code é 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Validar mensagem de atualizado com sucesso.\", function () {",
											"     pm.expect(pm.response.json().msg).to.eql(\"Companhia atualizada com sucesso.\");",
											"});",
											"",
											"pm.test(\"Validar se o user id e o mesmo id do Admin\", function () {",
											"     pm.expect(pm.response.json().updatedCompany.audit[0].registeredBy.userId).to.eql(pm.environment.get(\"UserIdAuditCompany\"));",
											"});",
											"",
											"pm.test(\"Validar se o user login e o mesmo user login do Admin\", function () {",
											"     pm.expect(pm.response.json().updatedCompany.audit[0].registeredBy.userLogin).to.eql(pm.environment.get(\"UserLoginAuditCompany\"));",
											"});",
											"",
											"pm.test(\"Validar que o CNPJ e diferente do CNPJ de 15 caracteres enviado no request\", function () {",
											"     pm.expect(pm.response.json().updatedCompany.registerCompany).not.to.eql(pm.environment.get(\"CNPJ15Caracteres\"));",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"corporateName\": \"{{CorporateName}}\",\n  \"registerCompany\": \"{{CNPJ15Caracteres}}\",\n  \"mail\": \"{{CorporateMail}}\",\n  \"matriz\": \"{{CorporateReason}}\",\n  \"responsibleContact\": \"{{ResponsibleContact}}\",\n  \"telephone\": \"{{Telephone}}\",\n  \"serviceDescription\": \"{{ServiceDescription}}\"\n}\n\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/api/company/{{NewCompanyId}}?token={{tokenAcesso}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"company",
										"{{NewCompanyId}}"
									],
									"query": [
										{
											"key": "token",
											"value": "{{tokenAcesso}}"
										}
									]
								},
								"description": "Generated from cURL: curl -X 'PUT' \\\n  'https://ron-bugado.qacoders.dev.br/api/company/67ab5be34b03e1eb32f4e561?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NzlhMzVmN2ViMzViNTQzYzI3NjliYTkiLCJmdWxsTmFtZSI6IkFuZHLDqSBNaW5hdG8iLCJtYWlsIjoiYW5kcmUubWluYXRvQHRlc3QuY29tLmJyIiwicGFzc3dvcmQiOiIkMmIkMTAkL0d3V0dxTFg5di9MNEVmdk9jbEsuLlouaHhWTWlITkQ3UzExZnhpTW1wSXdPZ2RtbTFYYkciLCJhY2Nlc3NQcm9maWxlIjoiQURNSU4iLCJjcGYiOiIxNzk4NTY5MjM5OCIsInN0YXR1cyI6dHJ1ZSwiYXVkaXQiOlt7InJlZ2lzdGVyZWRCeSI6eyJ1c2VySWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJ1c2VyTG9naW4iOiJzeXNhZG1pbkBxYWNvZGVycy5jb20ifSwicmVnaXN0cmF0aW9uRGF0ZSI6InF1YXJ0YS1mZWlyYSwgMjkvMDEvMjAyNSwgMTE6MDY6NDcgQlJUIiwicmVnaXN0cmF0aW9uTnVtYmVyIjoiUWFDb2RlcnMtMjYwIiwiX2lkIjoiNjc5YTM1ZjdlYjM1YjU0M2MyNzY5YmFhIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTY2NSwiZXhwIjoxNzM5MzE2MDY1fQ.UmE4tUczm31wPdJ_wcCn-ZoGmAsmJJHRUBbxde6iUyw' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"corporateName\": \"Grupo KRO Publicidade & Tecnologia\",\n  \"registerCompany\": \"12126456000155\",\n  \"mail\": \"rh@kro.com.br\",\n  \"matriz\": \"Teste de criação de empresa\",\n  \"responsibleContact\": \"Teste de criação de empresa\",\n  \"telephone\": \"551188951407589\",\n  \"serviceDescription\": \"Realizar o teste no cenário para a criação de uma nova empresa\"\n}\n\n'"
							},
							"response": []
						},
						{
							"name": "Editar CNPJ da empresa enviando um CNPJ que contenha letras e números",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validar se o status code é 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Validar mensagem de atualizado com sucesso.\", function () {",
											"     pm.expect(pm.response.json().msg).to.eql(\"Companhia atualizada com sucesso.\");",
											"});",
											"",
											"pm.test(\"Validar se o user id e o mesmo id do Admin\", function () {",
											"     pm.expect(pm.response.json().updatedCompany.audit[0].registeredBy.userId).to.eql(pm.environment.get(\"UserIdAuditCompany\"));",
											"});",
											"",
											"pm.test(\"Validar se o user login e o mesmo user login do Admin\", function () {",
											"     pm.expect(pm.response.json().updatedCompany.audit[0].registeredBy.userLogin).to.eql(pm.environment.get(\"UserLoginAuditCompany\"));",
											"});",
											"",
											"pm.test(\"Validar que o CNPJ e diferente do CNPJ com letras enviado no request\", function () {",
											"     pm.expect(pm.response.json().updatedCompany.registerCompany).not.to.eql(pm.environment.get(\"CNPJComLetras\"));",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"corporateName\": \"{{CorporateName}}\",\n  \"registerCompany\": \"{{CNPJComLetras}}\",\n  \"mail\": \"{{CorporateMail}}\",\n  \"matriz\": \"{{CorporateReason}}\",\n  \"responsibleContact\": \"{{ResponsibleContact}}\",\n  \"telephone\": \"{{Telephone}}\",\n  \"serviceDescription\": \"{{ServiceDescription}}\"\n}\n\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/api/company/{{NewCompanyId}}?token={{tokenAcesso}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"company",
										"{{NewCompanyId}}"
									],
									"query": [
										{
											"key": "token",
											"value": "{{tokenAcesso}}"
										}
									]
								},
								"description": "Generated from cURL: curl -X 'PUT' \\\n  'https://ron-bugado.qacoders.dev.br/api/company/67ab5be34b03e1eb32f4e561?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NzlhMzVmN2ViMzViNTQzYzI3NjliYTkiLCJmdWxsTmFtZSI6IkFuZHLDqSBNaW5hdG8iLCJtYWlsIjoiYW5kcmUubWluYXRvQHRlc3QuY29tLmJyIiwicGFzc3dvcmQiOiIkMmIkMTAkL0d3V0dxTFg5di9MNEVmdk9jbEsuLlouaHhWTWlITkQ3UzExZnhpTW1wSXdPZ2RtbTFYYkciLCJhY2Nlc3NQcm9maWxlIjoiQURNSU4iLCJjcGYiOiIxNzk4NTY5MjM5OCIsInN0YXR1cyI6dHJ1ZSwiYXVkaXQiOlt7InJlZ2lzdGVyZWRCeSI6eyJ1c2VySWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJ1c2VyTG9naW4iOiJzeXNhZG1pbkBxYWNvZGVycy5jb20ifSwicmVnaXN0cmF0aW9uRGF0ZSI6InF1YXJ0YS1mZWlyYSwgMjkvMDEvMjAyNSwgMTE6MDY6NDcgQlJUIiwicmVnaXN0cmF0aW9uTnVtYmVyIjoiUWFDb2RlcnMtMjYwIiwiX2lkIjoiNjc5YTM1ZjdlYjM1YjU0M2MyNzY5YmFhIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTY2NSwiZXhwIjoxNzM5MzE2MDY1fQ.UmE4tUczm31wPdJ_wcCn-ZoGmAsmJJHRUBbxde6iUyw' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"corporateName\": \"Grupo KRO Publicidade & Tecnologia\",\n  \"registerCompany\": \"12126456000155\",\n  \"mail\": \"rh@kro.com.br\",\n  \"matriz\": \"Teste de criação de empresa\",\n  \"responsibleContact\": \"Teste de criação de empresa\",\n  \"telephone\": \"551188951407589\",\n  \"serviceDescription\": \"Realizar o teste no cenário para a criação de uma nova empresa\"\n}\n\n'"
							},
							"response": []
						},
						{
							"name": "Editar CNPJ da empresa enviando um valor em branco",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validar se o status code é 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Validar mensagem de atualizado com sucesso.\", function () {",
											"     pm.expect(pm.response.json().msg).to.eql(\"Companhia atualizada com sucesso.\");",
											"});",
											"",
											"pm.test(\"Validar se o user id e o mesmo id do Admin\", function () {",
											"     pm.expect(pm.response.json().updatedCompany.audit[0].registeredBy.userId).to.eql(pm.environment.get(\"UserIdAuditCompany\"));",
											"});",
											"",
											"pm.test(\"Validar se o user login e o mesmo user login do Admin\", function () {",
											"     pm.expect(pm.response.json().updatedCompany.audit[0].registeredBy.userLogin).to.eql(pm.environment.get(\"UserLoginAuditCompany\"));",
											"});",
											"",
											"pm.test(\"Validar que o CNPJ não está com valor em barnco\", function () {",
											"     pm.expect(pm.response.json().updatedCompany.registerCompany).not.to.eql(\"\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"corporateName\": \"{{CorporateName}}\",\n  \"registerCompany\": \"\",\n  \"mail\": \"{{CorporateMail}}\",\n  \"matriz\": \"{{CorporateReason}}\",\n  \"responsibleContact\": \"{{ResponsibleContact}}\",\n  \"telephone\": \"{{Telephone}}\",\n  \"serviceDescription\": \"{{ServiceDescription}}\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/api/company/{{NewCompanyId}}?token={{tokenAcesso}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"company",
										"{{NewCompanyId}}"
									],
									"query": [
										{
											"key": "token",
											"value": "{{tokenAcesso}}"
										}
									]
								},
								"description": "Generated from cURL: curl -X 'PUT' \\\n  'https://ron-bugado.qacoders.dev.br/api/company/67ab5be34b03e1eb32f4e561?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NzlhMzVmN2ViMzViNTQzYzI3NjliYTkiLCJmdWxsTmFtZSI6IkFuZHLDqSBNaW5hdG8iLCJtYWlsIjoiYW5kcmUubWluYXRvQHRlc3QuY29tLmJyIiwicGFzc3dvcmQiOiIkMmIkMTAkL0d3V0dxTFg5di9MNEVmdk9jbEsuLlouaHhWTWlITkQ3UzExZnhpTW1wSXdPZ2RtbTFYYkciLCJhY2Nlc3NQcm9maWxlIjoiQURNSU4iLCJjcGYiOiIxNzk4NTY5MjM5OCIsInN0YXR1cyI6dHJ1ZSwiYXVkaXQiOlt7InJlZ2lzdGVyZWRCeSI6eyJ1c2VySWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJ1c2VyTG9naW4iOiJzeXNhZG1pbkBxYWNvZGVycy5jb20ifSwicmVnaXN0cmF0aW9uRGF0ZSI6InF1YXJ0YS1mZWlyYSwgMjkvMDEvMjAyNSwgMTE6MDY6NDcgQlJUIiwicmVnaXN0cmF0aW9uTnVtYmVyIjoiUWFDb2RlcnMtMjYwIiwiX2lkIjoiNjc5YTM1ZjdlYjM1YjU0M2MyNzY5YmFhIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTY2NSwiZXhwIjoxNzM5MzE2MDY1fQ.UmE4tUczm31wPdJ_wcCn-ZoGmAsmJJHRUBbxde6iUyw' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"corporateName\": \"Grupo KRO Publicidade & Tecnologia\",\n  \"registerCompany\": \"12126456000155\",\n  \"mail\": \"rh@kro.com.br\",\n  \"matriz\": \"Teste de criação de empresa\",\n  \"responsibleContact\": \"Teste de criação de empresa\",\n  \"telephone\": \"551188951407589\",\n  \"serviceDescription\": \"Realizar o teste no cenário para a criação de uma nova empresa\"\n}\n\n'"
							},
							"response": []
						},
						{
							"name": "Listar - Empresas",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// A resposta da requisição",
											"let responseData = pm.response.json();",
											"",
											"// Inverter a ordem dos registros",
											"let reversedData = responseData.reverse();",
											"",
											"// Salvar os dados invertidos para uso posterior",
											"pm.environment.set(\"reversedData\", JSON.stringify(reversedData));",
											"",
											"// Verificar se a inversão funcionou",
											"console.log(reversedData);",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"packages": {},
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{url_base}}/api/company/?token={{tokenAcesso}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"company",
										""
									],
									"query": [
										{
											"key": "token",
											"value": "{{tokenAcesso}}"
										}
									]
								},
								"description": "Generated from cURL: curl -X 'GET' \\\n  'https://ron-bugado.qacoders.dev.br/api/company/?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NzlhMzVmN2ViMzViNTQzYzI3NjliYTkiLCJmdWxsTmFtZSI6IkFuZHLDqSBNaW5hdG8iLCJtYWlsIjoiYW5kcmUubWluYXRvQHRlc3QuY29tLmJyIiwicGFzc3dvcmQiOiIkMmIkMTAkL0d3V0dxTFg5di9MNEVmdk9jbEsuLlouaHhWTWlITkQ3UzExZnhpTW1wSXdPZ2RtbTFYYkciLCJhY2Nlc3NQcm9maWxlIjoiQURNSU4iLCJjcGYiOiIxNzk4NTY5MjM5OCIsInN0YXR1cyI6dHJ1ZSwiYXVkaXQiOlt7InJlZ2lzdGVyZWRCeSI6eyJ1c2VySWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJ1c2VyTG9naW4iOiJzeXNhZG1pbkBxYWNvZGVycy5jb20ifSwicmVnaXN0cmF0aW9uRGF0ZSI6InF1YXJ0YS1mZWlyYSwgMjkvMDEvMjAyNSwgMTE6MDY6NDcgQlJUIiwicmVnaXN0cmF0aW9uTnVtYmVyIjoiUWFDb2RlcnMtMjYwIiwiX2lkIjoiNjc5YTM1ZjdlYjM1YjU0M2MyNzY5YmFhIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyODM4MCwiZXhwIjoxNzM5MzE0NzgwfQ.TX88kOWjwoM9biXDhB3ivJJR8xlFsKEb1XQ1KLY7V34' \\\n  -H 'accept: application/json'"
							},
							"response": []
						}
					]
				},
				{
					"name": "Razão Social",
					"item": [
						{
							"name": "Login de Sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"tokenAcesso\", pm.response.json().token);",
											"pm.environment.set(\"UserIdAuditCompany\", pm.response.json().user._id);",
											"pm.environment.set(\"UserLoginAuditCompany\", pm.response.json().user.mail);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"mail\": \"{{TestUserEmail}}\",\r\n    \"password\": \"{{TestUserPassword}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/api/login/",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"login",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastro de empresa",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function sendRequestWithRetry(retries) {",
											"    pm.sendRequest({",
											"        // Opções da request",
											"        url: 'https://www.4devs.com.br/ferramentas_online.php',",
											"        method: 'POST',",
											"        header: {",
											"            'Content-Type': 'application/x-www-form-urlencoded',",
											"        },",
											"        body: {",
											"            mode: 'raw',",
											"            raw: 'acao=gerar_empresa&pontuacao=N&estado=SP&idade=5',",
											"        }",
											"    }, function (err, response) {",
											"        if (err) {",
											"            console.log('Erro na requisição:', err);",
											"            if (retries > 0) {",
											"                console.log('Tentando novamente...');",
											"                sendRequestWithRetry(retries - 1); // Tenta novamente se falhar",
											"            } else {",
											"                console.log('Número máximo de tentativas atingido.');",
											"            }",
											"        } else {",
											"            // Acessa o corpo da resposta HTML",
											"            var responseBody = response.text();",
											"",
											"            // Função para extrair o valor de um campo baseado no id do input",
											"            function extractData(id) {",
											"                var regex = new RegExp('<input[^>]+id=\"' + id + '\"[^>]+value=\"([^\"]+)\"', 'i');",
											"                var match = responseBody.match(regex);",
											"                return match ? match[1] : null;",
											"            }",
											"",
											"            // Criação do objeto JSON com os dados extraídos",
											"            var extractedData = {",
											"                nome: extractData('nome'),",
											"                cnpj: extractData('cnpj'),",
											"                ie: extractData('ie'),",
											"                data_abertura: extractData('data_abertura'),",
											"                site: extractData('site'),",
											"                email: extractData('email'),",
											"                cep: extractData('cep'),",
											"                endereco: extractData('endereco'),",
											"                numero: extractData('numero'),",
											"                bairro: extractData('bairro'),",
											"                cidade: extractData('cidade'),",
											"                estado: extractData('estado'),",
											"                telefone_fixo: extractData('telefone_fixo'),",
											"                celular: extractData('celular')",
											"            };",
											"",
											"",
											"            // Agora, chamamos a função lastName depois de todo o processamento",
											"            function lastName() {",
											"                var lastName = [",
											"                    \"Silva dos Santos\", \"de Albuquerque Figueiroa\", \"Saviola de Lima\", \"Xavier de Menezes\",",
											"                    \"Oliveira dos Reis\", \"Carvalho Silva\", \"Pereira do Amaral\", \"Costa Lima\", \"dos Santos Rocha\",",
											"                    \"Ferreira de Souza\", \"Costa Ramos\", \"Almeida Martins\", \"Rocha de Oliveira\", \"Souza Lima\",",
											"                    \"Silva Pereira\", \"de Andrade Oliveira\", \"Fonseca Lima\", \"Pinto da Silva\", \"Almeida Costa\",",
											"                    \"Ferreira dos Santos\", \"Figueiredo de Souza\", \"da Silva Nogueira\", \"de Barros Santos\",",
											"                    \"Gomes de Almeida\", \"Lima Pereira\", \"Barbosa da Costa\", \"Rodrigues de Oliveira\", \"da Silva Andrade\",",
											"                    \"Monteiro dos Santos\", \"Martins da Silva\", \"Nogueira de Lima\", \"Soares de Almeida\", \"Tavares da Rocha\",",
											"                    \"Alves de Souza\", \"Mendes da Silva\", \"Pinto de Souza\", \"Bastos de Lima\", \"Silva de Carvalho\",",
											"                    \"Pinto de Almeida\", \"Cardoso da Costa\", \"Torres de Almeida\", \"Oliveira de Figueiredo\", \"de Araújo Lima\",",
											"                    \"Cavalcanti da Rocha\", \"Xavier de Souza\", \"Cunha de Almeida\", \"Lemos da Silva\", \"Santos de Carvalho\",",
											"                    \"Almeida de Lima\", \"da Silva Pinto\", \"Lima de Oliveira\", \"Barbosa de Souza\", \"Costa de Almeida\",",
											"                    \"Figueiredo Lima\", \"Almeida dos Reis\", \"Tavares de Souza\", \"Azevedo de Lima\", \"Ferreira de Almeida\",",
											"                    \"Souza da Costa\", \"Pinto de Lima\", \"Gonçalves de Lima\", \"Bastos da Silva\", \"Nascimento de Almeida\",",
											"                    \"da Silva Souza\", \"Vieira de Oliveira\", \"Ribeiro dos Santos\", \"Silva de Araújo\", \"Costa de Lima\",",
											"                    \"de Castro Nogueira\", \"Cardoso de Almeida\", \"Pereira da Rocha\", \"Silva Tavares\", \"Rocha de Souza\",",
											"                    \"de Carvalho Santos\", \"Borges da Silva\", \"Almeida de Araújo\", \"Lima da Costa\", \"Melo de Almeida\",",
											"                    \"Faria de Lima\", \"Ferreira da Costa\", \"Ramos de Souza\", \"Moreira de Lima\", \"Barbosa de Almeida\",",
											"                    \"Santana de Souza\", \"Rocha de Lima\", \"Duarte de Souza\", \"Lopes de Almeida\", \"Almeida de Rocha\",",
											"                    \"Silva da Costa\", \"Figueiredo dos Santos\", \"Cardoso de Souza\", \"Oliveira de Rocha\", \"Costa de Nogueira\",",
											"                    \"Pinto de Araújo\", \"Tavares de Costa\", \"Martins de Almeida\", \"Nogueira da Rocha\", \"Souza de Almeida\",",
											"                    \"Carvalho da Silva\", \"Pereira de Souza\"",
											"                ];",
											"",
											"                let randomItem = lastName[Math.floor(Math.random() * lastName.length)];",
											"                return randomItem;",
											"            }",
											"",
											"            function gerarNomeResumido(nomeCompleto) {",
											"            // Divide o nome completo em uma lista de palavras",
											"            const partesNome = nomeCompleto.split(' ');",
											"",
											"            // Verifica se o nome tem 2 ou menos palavras",
											"            if (partesNome.length <= 2) {",
											"                return partesNome.join(' ');",
											"            }",
											"            ",
											"            // Pega o primeiro, penúltimo e último nome",
											"            const primeiroNome = partesNome[0];",
											"            const penultimoNome = partesNome[partesNome.length - 2];",
											"            const ultimoNome = partesNome[partesNome.length - 1];",
											"            ",
											"            // Retorna o novo nome formatado",
											"            return `${primeiroNome} ${penultimoNome} ${ultimoNome}`;",
											"        }",
											"",
											"            // // Exemplo de uso",
											"            // const nomeCompleto = \"Erick e Emanuelly Telecom ME\";",
											"            const novoNome = gerarNomeResumido(extractedData.nome);",
											"            console.log(novoNome);",
											"",
											"",
											"            pm.environment.set(\"ResponsibleContact\", extractedData.nome.split(' ')[0] + ' ' + lastName())",
											"            pm.environment.set(\"CorporateName\", novoNome)",
											"            pm.environment.set(\"CorporateMail\", extractedData.email)",
											"            pm.environment.set(\"RegisterCompany\", extractedData.cnpj)",
											"            pm.environment.set(\"Telephone\", extractedData.telefone_fixo + 1234)",
											"            pm.environment.set(\"ZipCode\", extractedData.cep)",
											"            pm.environment.set(\"City\", extractedData.cidade)",
											"            pm.environment.set(\"State\", extractedData.estado)",
											"            pm.environment.set(\"District\", extractedData.bairro)",
											"            pm.environment.set(\"Street\", extractedData.endereco)",
											"            pm.environment.set(\"Number\", extractedData.numero)",
											"            pm.environment.set(\"CorporateReason\", extractedData.nome)",
											"            ",
											"        }",
											"    });",
											"}",
											"",
											"// Inicia a requisição com até 3 tentativas",
											"sendRequestWithRetry(5);",
											"",
											"",
											"function serviceDecription () {",
											"    const descricaoServicos = [",
											"        \"Consultoria especializada para otimização de processos empresariais e aumento de produtividade.\",",
											"        \"Desenvolvimento de soluções de software personalizadas para atender às necessidades específicas do seu negócio.\",",
											"        \"Serviço de entrega rápida de alimentos frescos, com opções de pratos saudáveis e saborosos.\",",
											"        \"Manutenção preventiva e corretiva de equipamentos industriais, garantindo o melhor desempenho e segurança.\",",
											"        \"Consultoria em estratégias de marketing digital para aumentar a visibilidade e engajamento online.\",",
											"        \"Serviços de tradução e interpretação em diversos idiomas, com foco em negócios internacionais.\",",
											"        \"Assessoria jurídica para empresas, oferecendo soluções para questões contratuais e trabalhistas.\",",
											"        \"Design gráfico e criação de identidade visual para marcas, desde o logotipo até materiais promocionais.\",",
											"        \"Serviços de contabilidade e gestão financeira, com foco em reduzir custos e melhorar a saúde financeira.\",",
											"        \"Planejamento e execução de eventos corporativos e sociais, com toda a logística e produção envolvida.\",",
											"        \"Desenvolvimento de aplicativos móveis, com interfaces intuitivas e funcionalidades customizadas para sua empresa.\",",
											"        \"Serviços de limpeza e conservação para empresas, escritórios e estabelecimentos comerciais.\",",
											"        \"Treinamentos e workshops de capacitação profissional, com conteúdo voltado para o desenvolvimento de habilidades técnicas.\",",
											"        \"Fornecimento e instalação de sistemas de energia solar, promovendo a sustentabilidade e redução de custos de energia.\",",
											"        \"Assessoria em importação e exportação, com expertise em logística e regulamentos internacionais.\",",
											"        \"Serviços de gestão de redes sociais para aumentar a presença digital da sua marca e engajar clientes.\",",
											"        \"Consultoria em recursos humanos, ajudando a melhorar a gestão de talentos e o clima organizacional.\",",
											"        \"Planejamento estratégico para crescimento de negócios, com soluções inovadoras e análises de mercado detalhadas.\",",
											"        \"Criação de sites responsivos e otimizados, com foco em usabilidade e experiência do usuário.\",",
											"        \"Serviços de segurança patrimonial, com monitoramento 24h e sistemas de alarme para proteger seu imóvel.\"",
											"    ];",
											"    let randomItem = descricaoServicos[Math.floor(Math.random() * descricaoServicos.length)];",
											"        return randomItem;",
											"",
											"} ",
											"pm.environment.set(\"ServiceDescription\", serviceDecription())",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verificar se o status code é 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Validar userId do registeredBy é o mesmo id do Admin\", function () {",
											"     pm.expect(pm.response.json().newCompany.audit[0].registeredBy.userId).to.eql(pm.environment.get(\"UserIdAuditCompany\"));",
											"});",
											"",
											"pm.test(\"Validar userLogin do registeredBy é o mesmo e-mail do Admin\", function () {",
											"     pm.expect(pm.response.json().newCompany.audit[0].registeredBy.userLogin).to.eql(pm.environment.get(\"UserLoginAuditCompany\"));",
											"});",
											"",
											"pm.environment.set(\"NewCompanyId\", pm.response.json().newCompany._id)",
											"pm.environment.set(\"NewCompanyAuditRegistrationDate\", pm.response.json().newCompany.audit[0].registrationDate)",
											"pm.environment.set(\"NewCompanyAuditId\", pm.response.json().newCompany.audit[0]._id)",
											"",
											"//Salvando o objeto Address",
											"pm.environment.set(\"NewCompanyAddress\", pm.response.json().newCompany.address[0])"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"corporateName\": \"{{CorporateName}}\",\n  \"registerCompany\": \"{{RegisterCompany}}\",\n  \"mail\": \"{{CorporateMail}}\",\n  \"matriz\": \"{{CorporateReason}}\",\n  \"responsibleContact\": \"{{ResponsibleContact}}\",\n  \"telephone\": \"{{Telephone}}\",\n  \"serviceDescription\": \"{{ServiceDescription}}\",\n  \"address\": [\n    {\n      \"zipCode\": \"{{ZipCode}}\",\n      \"city\": \"{{City}}\",\n      \"state\": \"{{State}}\",\n      \"district\": \"{{District}}\",\n      \"street\": \"{{Street}}\",\n      \"number\": \"{{Number}}\",\n      \"complement\": \"\",\n      \"country\": \"{{Country}}\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/api/company/?token={{tokenAcesso}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"company",
										""
									],
									"query": [
										{
											"key": "token",
											"value": "{{tokenAcesso}}"
										}
									]
								},
								"description": "Generated from cURL: curl -X 'POST' \\\n  'https://ron-bugado.qacoders.dev.br/api/company/?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NzlhMzVmN2ViMzViNTQzYzI3NjliYTkiLCJmdWxsTmFtZSI6IkFuZHLDqSBNaW5hdG8iLCJtYWlsIjoiYW5kcmUubWluYXRvQHRlc3QuY29tLmJyIiwicGFzc3dvcmQiOiIkMmIkMTAkL0d3V0dxTFg5di9MNEVmdk9jbEsuLlouaHhWTWlITkQ3UzExZnhpTW1wSXdPZ2RtbTFYYkciLCJhY2Nlc3NQcm9maWxlIjoiQURNSU4iLCJjcGYiOiIxNzk4NTY5MjM5OCIsInN0YXR1cyI6dHJ1ZSwiYXVkaXQiOlt7InJlZ2lzdGVyZWRCeSI6eyJ1c2VySWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJ1c2VyTG9naW4iOiJzeXNhZG1pbkBxYWNvZGVycy5jb20ifSwicmVnaXN0cmF0aW9uRGF0ZSI6InF1YXJ0YS1mZWlyYSwgMjkvMDEvMjAyNSwgMTE6MDY6NDcgQlJUIiwicmVnaXN0cmF0aW9uTnVtYmVyIjoiUWFDb2RlcnMtMjYwIiwiX2lkIjoiNjc5YTM1ZjdlYjM1YjU0M2MyNzY5YmFhIn1dLCJfX3YiOjAsImlhdCI6MTczOTkwNjUzMiwiZXhwIjoxNzM5OTkyOTMyfQ.WMHrGtPB6sK3lx7_W1jI2XTfFDRaVTWHiUac0zM1NnY' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"corporateName\": \"Teste&QA LTDA\",\n  \"registerCompany\": \"12126456000100\",\n  \"mail\": \"testqa@hotmail.com\",\n  \"matriz\": \"lagoa azul\",\n  \"responsibleContact\": \"Marcio do Teste\",\n  \"telephone\": \"11111111111111\",\n  \"serviceDescription\": \"Testes de software e criação de indicadores para manter a qualidade de software\",\n  \"address\": [\n    {\n      \"zipCode\": \"04777001\",\n      \"city\": \"São Paulo\",\n      \"state\": \"SP\",\n      \"district\": \"Centro\",\n      \"street\": \"Avenida Interlagos\",\n      \"number\": \"50\",\n      \"complement\": \"\",\n      \"country\": \"Brasil\"\n    }\n  ]\n}'"
							},
							"response": []
						},
						{
							"name": "Editar Razão Social da empresa para um nome já existente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validar se o status code é 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"corporateName\": \"{{CorporateName}}\",\n  \"registerCompany\": \"{{CNPJ13Caracteres}}\",\n  \"mail\": \"{{CorporateMail}}\",\n  \"matriz\": \"Cláudia e André Joalheria Ltda\",\n  \"responsibleContact\": \"{{ResponsibleContact}}\",\n  \"telephone\": \"{{Telephone}}\",\n  \"serviceDescription\": \"{{ServiceDescription}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/api/company/{{NewCompanyId}}?token={{tokenAcesso}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"company",
										"{{NewCompanyId}}"
									],
									"query": [
										{
											"key": "token",
											"value": "{{tokenAcesso}}"
										}
									]
								},
								"description": "Generated from cURL: curl -X 'PUT' \\\n  'https://ron-bugado.qacoders.dev.br/api/company/67ab5be34b03e1eb32f4e561?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NzlhMzVmN2ViMzViNTQzYzI3NjliYTkiLCJmdWxsTmFtZSI6IkFuZHLDqSBNaW5hdG8iLCJtYWlsIjoiYW5kcmUubWluYXRvQHRlc3QuY29tLmJyIiwicGFzc3dvcmQiOiIkMmIkMTAkL0d3V0dxTFg5di9MNEVmdk9jbEsuLlouaHhWTWlITkQ3UzExZnhpTW1wSXdPZ2RtbTFYYkciLCJhY2Nlc3NQcm9maWxlIjoiQURNSU4iLCJjcGYiOiIxNzk4NTY5MjM5OCIsInN0YXR1cyI6dHJ1ZSwiYXVkaXQiOlt7InJlZ2lzdGVyZWRCeSI6eyJ1c2VySWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJ1c2VyTG9naW4iOiJzeXNhZG1pbkBxYWNvZGVycy5jb20ifSwicmVnaXN0cmF0aW9uRGF0ZSI6InF1YXJ0YS1mZWlyYSwgMjkvMDEvMjAyNSwgMTE6MDY6NDcgQlJUIiwicmVnaXN0cmF0aW9uTnVtYmVyIjoiUWFDb2RlcnMtMjYwIiwiX2lkIjoiNjc5YTM1ZjdlYjM1YjU0M2MyNzY5YmFhIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTY2NSwiZXhwIjoxNzM5MzE2MDY1fQ.UmE4tUczm31wPdJ_wcCn-ZoGmAsmJJHRUBbxde6iUyw' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"corporateName\": \"Grupo KRO Publicidade & Tecnologia\",\n  \"registerCompany\": \"12126456000155\",\n  \"mail\": \"rh@kro.com.br\",\n  \"matriz\": \"Teste de criação de empresa\",\n  \"responsibleContact\": \"Teste de criação de empresa\",\n  \"telephone\": \"551188951407589\",\n  \"serviceDescription\": \"Realizar o teste no cenário para a criação de uma nova empresa\"\n}\n\n'"
							},
							"response": []
						},
						{
							"name": "Editar Razão Social da empresa para um nome com 101 caracteres",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validar se o status code é 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"corporateName\": \"{{CorporateName}}\",\n  \"registerCompany\": \"{{CNPJ13Caracteres}}\",\n  \"mail\": \"{{CorporateMail}}\",\n  \"matriz\": \"{{RazaoSocial101Caracteres}}\",\n  \"responsibleContact\": \"{{ResponsibleContact}}\",\n  \"telephone\": \"{{Telephone}}\",\n  \"serviceDescription\": \"{{ServiceDescription}}\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/api/company/{{NewCompanyId}}?token={{tokenAcesso}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"company",
										"{{NewCompanyId}}"
									],
									"query": [
										{
											"key": "token",
											"value": "{{tokenAcesso}}"
										}
									]
								},
								"description": "Generated from cURL: curl -X 'PUT' \\\n  'https://ron-bugado.qacoders.dev.br/api/company/67ab5be34b03e1eb32f4e561?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NzlhMzVmN2ViMzViNTQzYzI3NjliYTkiLCJmdWxsTmFtZSI6IkFuZHLDqSBNaW5hdG8iLCJtYWlsIjoiYW5kcmUubWluYXRvQHRlc3QuY29tLmJyIiwicGFzc3dvcmQiOiIkMmIkMTAkL0d3V0dxTFg5di9MNEVmdk9jbEsuLlouaHhWTWlITkQ3UzExZnhpTW1wSXdPZ2RtbTFYYkciLCJhY2Nlc3NQcm9maWxlIjoiQURNSU4iLCJjcGYiOiIxNzk4NTY5MjM5OCIsInN0YXR1cyI6dHJ1ZSwiYXVkaXQiOlt7InJlZ2lzdGVyZWRCeSI6eyJ1c2VySWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJ1c2VyTG9naW4iOiJzeXNhZG1pbkBxYWNvZGVycy5jb20ifSwicmVnaXN0cmF0aW9uRGF0ZSI6InF1YXJ0YS1mZWlyYSwgMjkvMDEvMjAyNSwgMTE6MDY6NDcgQlJUIiwicmVnaXN0cmF0aW9uTnVtYmVyIjoiUWFDb2RlcnMtMjYwIiwiX2lkIjoiNjc5YTM1ZjdlYjM1YjU0M2MyNzY5YmFhIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTY2NSwiZXhwIjoxNzM5MzE2MDY1fQ.UmE4tUczm31wPdJ_wcCn-ZoGmAsmJJHRUBbxde6iUyw' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"corporateName\": \"Grupo KRO Publicidade & Tecnologia\",\n  \"registerCompany\": \"12126456000155\",\n  \"mail\": \"rh@kro.com.br\",\n  \"matriz\": \"Teste de criação de empresa\",\n  \"responsibleContact\": \"Teste de criação de empresa\",\n  \"telephone\": \"551188951407589\",\n  \"serviceDescription\": \"Realizar o teste no cenário para a criação de uma nova empresa\"\n}\n\n'"
							},
							"response": []
						},
						{
							"name": "Listar - Empresas",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// A resposta da requisição",
											"let responseData = pm.response.json();",
											"",
											"// Inverter a ordem dos registros",
											"let reversedData = responseData.reverse();",
											"",
											"// Salvar os dados invertidos para uso posterior",
											"pm.environment.set(\"reversedData\", JSON.stringify(reversedData));",
											"",
											"// Verificar se a inversão funcionou",
											"console.log(reversedData);",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"packages": {},
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{url_base}}/api/company/?token={{tokenAcesso}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"company",
										""
									],
									"query": [
										{
											"key": "token",
											"value": "{{tokenAcesso}}"
										}
									]
								},
								"description": "Generated from cURL: curl -X 'GET' \\\n  'https://ron-bugado.qacoders.dev.br/api/company/?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NzlhMzVmN2ViMzViNTQzYzI3NjliYTkiLCJmdWxsTmFtZSI6IkFuZHLDqSBNaW5hdG8iLCJtYWlsIjoiYW5kcmUubWluYXRvQHRlc3QuY29tLmJyIiwicGFzc3dvcmQiOiIkMmIkMTAkL0d3V0dxTFg5di9MNEVmdk9jbEsuLlouaHhWTWlITkQ3UzExZnhpTW1wSXdPZ2RtbTFYYkciLCJhY2Nlc3NQcm9maWxlIjoiQURNSU4iLCJjcGYiOiIxNzk4NTY5MjM5OCIsInN0YXR1cyI6dHJ1ZSwiYXVkaXQiOlt7InJlZ2lzdGVyZWRCeSI6eyJ1c2VySWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJ1c2VyTG9naW4iOiJzeXNhZG1pbkBxYWNvZGVycy5jb20ifSwicmVnaXN0cmF0aW9uRGF0ZSI6InF1YXJ0YS1mZWlyYSwgMjkvMDEvMjAyNSwgMTE6MDY6NDcgQlJUIiwicmVnaXN0cmF0aW9uTnVtYmVyIjoiUWFDb2RlcnMtMjYwIiwiX2lkIjoiNjc5YTM1ZjdlYjM1YjU0M2MyNzY5YmFhIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyODM4MCwiZXhwIjoxNzM5MzE0NzgwfQ.TX88kOWjwoM9biXDhB3ivJJR8xlFsKEb1XQ1KLY7V34' \\\n  -H 'accept: application/json'"
							},
							"response": []
						}
					]
				},
				{
					"name": "Nome Responsável",
					"item": [
						{
							"name": "Login de Sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"tokenAcesso\", pm.response.json().token);",
											"pm.environment.set(\"UserIdAuditCompany\", pm.response.json().user._id);",
											"pm.environment.set(\"UserLoginAuditCompany\", pm.response.json().user.mail);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"mail\": \"{{TestUserEmail}}\",\r\n    \"password\": \"{{TestUserPassword}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/api/login/",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"login",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastro de empresa",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function sendRequestWithRetry(retries) {",
											"    pm.sendRequest({",
											"        // Opções da request",
											"        url: 'https://www.4devs.com.br/ferramentas_online.php',",
											"        method: 'POST',",
											"        header: {",
											"            'Content-Type': 'application/x-www-form-urlencoded',",
											"        },",
											"        body: {",
											"            mode: 'raw',",
											"            raw: 'acao=gerar_empresa&pontuacao=N&estado=SP&idade=5',",
											"        }",
											"    }, function (err, response) {",
											"        if (err) {",
											"            console.log('Erro na requisição:', err);",
											"            if (retries > 0) {",
											"                console.log('Tentando novamente...');",
											"                sendRequestWithRetry(retries - 1); // Tenta novamente se falhar",
											"            } else {",
											"                console.log('Número máximo de tentativas atingido.');",
											"            }",
											"        } else {",
											"            // Acessa o corpo da resposta HTML",
											"            var responseBody = response.text();",
											"",
											"            // Função para extrair o valor de um campo baseado no id do input",
											"            function extractData(id) {",
											"                var regex = new RegExp('<input[^>]+id=\"' + id + '\"[^>]+value=\"([^\"]+)\"', 'i');",
											"                var match = responseBody.match(regex);",
											"                return match ? match[1] : null;",
											"            }",
											"",
											"            // Criação do objeto JSON com os dados extraídos",
											"            var extractedData = {",
											"                nome: extractData('nome'),",
											"                cnpj: extractData('cnpj'),",
											"                ie: extractData('ie'),",
											"                data_abertura: extractData('data_abertura'),",
											"                site: extractData('site'),",
											"                email: extractData('email'),",
											"                cep: extractData('cep'),",
											"                endereco: extractData('endereco'),",
											"                numero: extractData('numero'),",
											"                bairro: extractData('bairro'),",
											"                cidade: extractData('cidade'),",
											"                estado: extractData('estado'),",
											"                telefone_fixo: extractData('telefone_fixo'),",
											"                celular: extractData('celular')",
											"            };",
											"",
											"",
											"            // Agora, chamamos a função lastName depois de todo o processamento",
											"            function lastName() {",
											"                var lastName = [",
											"                    \"Silva dos Santos\", \"de Albuquerque Figueiroa\", \"Saviola de Lima\", \"Xavier de Menezes\",",
											"                    \"Oliveira dos Reis\", \"Carvalho Silva\", \"Pereira do Amaral\", \"Costa Lima\", \"dos Santos Rocha\",",
											"                    \"Ferreira de Souza\", \"Costa Ramos\", \"Almeida Martins\", \"Rocha de Oliveira\", \"Souza Lima\",",
											"                    \"Silva Pereira\", \"de Andrade Oliveira\", \"Fonseca Lima\", \"Pinto da Silva\", \"Almeida Costa\",",
											"                    \"Ferreira dos Santos\", \"Figueiredo de Souza\", \"da Silva Nogueira\", \"de Barros Santos\",",
											"                    \"Gomes de Almeida\", \"Lima Pereira\", \"Barbosa da Costa\", \"Rodrigues de Oliveira\", \"da Silva Andrade\",",
											"                    \"Monteiro dos Santos\", \"Martins da Silva\", \"Nogueira de Lima\", \"Soares de Almeida\", \"Tavares da Rocha\",",
											"                    \"Alves de Souza\", \"Mendes da Silva\", \"Pinto de Souza\", \"Bastos de Lima\", \"Silva de Carvalho\",",
											"                    \"Pinto de Almeida\", \"Cardoso da Costa\", \"Torres de Almeida\", \"Oliveira de Figueiredo\", \"de Araújo Lima\",",
											"                    \"Cavalcanti da Rocha\", \"Xavier de Souza\", \"Cunha de Almeida\", \"Lemos da Silva\", \"Santos de Carvalho\",",
											"                    \"Almeida de Lima\", \"da Silva Pinto\", \"Lima de Oliveira\", \"Barbosa de Souza\", \"Costa de Almeida\",",
											"                    \"Figueiredo Lima\", \"Almeida dos Reis\", \"Tavares de Souza\", \"Azevedo de Lima\", \"Ferreira de Almeida\",",
											"                    \"Souza da Costa\", \"Pinto de Lima\", \"Gonçalves de Lima\", \"Bastos da Silva\", \"Nascimento de Almeida\",",
											"                    \"da Silva Souza\", \"Vieira de Oliveira\", \"Ribeiro dos Santos\", \"Silva de Araújo\", \"Costa de Lima\",",
											"                    \"de Castro Nogueira\", \"Cardoso de Almeida\", \"Pereira da Rocha\", \"Silva Tavares\", \"Rocha de Souza\",",
											"                    \"de Carvalho Santos\", \"Borges da Silva\", \"Almeida de Araújo\", \"Lima da Costa\", \"Melo de Almeida\",",
											"                    \"Faria de Lima\", \"Ferreira da Costa\", \"Ramos de Souza\", \"Moreira de Lima\", \"Barbosa de Almeida\",",
											"                    \"Santana de Souza\", \"Rocha de Lima\", \"Duarte de Souza\", \"Lopes de Almeida\", \"Almeida de Rocha\",",
											"                    \"Silva da Costa\", \"Figueiredo dos Santos\", \"Cardoso de Souza\", \"Oliveira de Rocha\", \"Costa de Nogueira\",",
											"                    \"Pinto de Araújo\", \"Tavares de Costa\", \"Martins de Almeida\", \"Nogueira da Rocha\", \"Souza de Almeida\",",
											"                    \"Carvalho da Silva\", \"Pereira de Souza\"",
											"                ];",
											"",
											"                let randomItem = lastName[Math.floor(Math.random() * lastName.length)];",
											"                return randomItem;",
											"            }",
											"",
											"            function gerarNomeResumido(nomeCompleto) {",
											"            // Divide o nome completo em uma lista de palavras",
											"            const partesNome = nomeCompleto.split(' ');",
											"",
											"            // Verifica se o nome tem 2 ou menos palavras",
											"            if (partesNome.length <= 2) {",
											"                return partesNome.join(' ');",
											"            }",
											"            ",
											"            // Pega o primeiro, penúltimo e último nome",
											"            const primeiroNome = partesNome[0];",
											"            const penultimoNome = partesNome[partesNome.length - 2];",
											"            const ultimoNome = partesNome[partesNome.length - 1];",
											"            ",
											"            // Retorna o novo nome formatado",
											"            return `${primeiroNome} ${penultimoNome} ${ultimoNome}`;",
											"        }",
											"",
											"            // // Exemplo de uso",
											"            // const nomeCompleto = \"Erick e Emanuelly Telecom ME\";",
											"            const novoNome = gerarNomeResumido(extractedData.nome);",
											"            console.log(novoNome);",
											"",
											"",
											"            pm.environment.set(\"ResponsibleContact\", extractedData.nome.split(' ')[0] + ' ' + lastName())",
											"            pm.environment.set(\"CorporateName\", novoNome)",
											"            pm.environment.set(\"CorporateMail\", extractedData.email)",
											"            pm.environment.set(\"RegisterCompany\", extractedData.cnpj)",
											"            pm.environment.set(\"Telephone\", extractedData.telefone_fixo + 1234)",
											"            pm.environment.set(\"ZipCode\", extractedData.cep)",
											"            pm.environment.set(\"City\", extractedData.cidade)",
											"            pm.environment.set(\"State\", extractedData.estado)",
											"            pm.environment.set(\"District\", extractedData.bairro)",
											"            pm.environment.set(\"Street\", extractedData.endereco)",
											"            pm.environment.set(\"Number\", extractedData.numero)",
											"            pm.environment.set(\"CorporateReason\", extractedData.nome)",
											"            ",
											"        }",
											"    });",
											"}",
											"",
											"// Inicia a requisição com até 3 tentativas",
											"sendRequestWithRetry(5);",
											"",
											"",
											"function serviceDecription () {",
											"    const descricaoServicos = [",
											"        \"Consultoria especializada para otimização de processos empresariais e aumento de produtividade.\",",
											"        \"Desenvolvimento de soluções de software personalizadas para atender às necessidades específicas do seu negócio.\",",
											"        \"Serviço de entrega rápida de alimentos frescos, com opções de pratos saudáveis e saborosos.\",",
											"        \"Manutenção preventiva e corretiva de equipamentos industriais, garantindo o melhor desempenho e segurança.\",",
											"        \"Consultoria em estratégias de marketing digital para aumentar a visibilidade e engajamento online.\",",
											"        \"Serviços de tradução e interpretação em diversos idiomas, com foco em negócios internacionais.\",",
											"        \"Assessoria jurídica para empresas, oferecendo soluções para questões contratuais e trabalhistas.\",",
											"        \"Design gráfico e criação de identidade visual para marcas, desde o logotipo até materiais promocionais.\",",
											"        \"Serviços de contabilidade e gestão financeira, com foco em reduzir custos e melhorar a saúde financeira.\",",
											"        \"Planejamento e execução de eventos corporativos e sociais, com toda a logística e produção envolvida.\",",
											"        \"Desenvolvimento de aplicativos móveis, com interfaces intuitivas e funcionalidades customizadas para sua empresa.\",",
											"        \"Serviços de limpeza e conservação para empresas, escritórios e estabelecimentos comerciais.\",",
											"        \"Treinamentos e workshops de capacitação profissional, com conteúdo voltado para o desenvolvimento de habilidades técnicas.\",",
											"        \"Fornecimento e instalação de sistemas de energia solar, promovendo a sustentabilidade e redução de custos de energia.\",",
											"        \"Assessoria em importação e exportação, com expertise em logística e regulamentos internacionais.\",",
											"        \"Serviços de gestão de redes sociais para aumentar a presença digital da sua marca e engajar clientes.\",",
											"        \"Consultoria em recursos humanos, ajudando a melhorar a gestão de talentos e o clima organizacional.\",",
											"        \"Planejamento estratégico para crescimento de negócios, com soluções inovadoras e análises de mercado detalhadas.\",",
											"        \"Criação de sites responsivos e otimizados, com foco em usabilidade e experiência do usuário.\",",
											"        \"Serviços de segurança patrimonial, com monitoramento 24h e sistemas de alarme para proteger seu imóvel.\"",
											"    ];",
											"    let randomItem = descricaoServicos[Math.floor(Math.random() * descricaoServicos.length)];",
											"        return randomItem;",
											"",
											"} ",
											"pm.environment.set(\"ServiceDescription\", serviceDecription())",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verificar se o status code é 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Validar userId do registeredBy é o mesmo id do Admin\", function () {",
											"     pm.expect(pm.response.json().newCompany.audit[0].registeredBy.userId).to.eql(pm.environment.get(\"UserIdAuditCompany\"));",
											"});",
											"",
											"pm.test(\"Validar userLogin do registeredBy é o mesmo e-mail do Admin\", function () {",
											"     pm.expect(pm.response.json().newCompany.audit[0].registeredBy.userLogin).to.eql(pm.environment.get(\"UserLoginAuditCompany\"));",
											"});",
											"",
											"pm.environment.set(\"NewCompanyId\", pm.response.json().newCompany._id)",
											"pm.environment.set(\"NewCompanyAuditRegistrationDate\", pm.response.json().newCompany.audit[0].registrationDate)",
											"pm.environment.set(\"NewCompanyAuditId\", pm.response.json().newCompany.audit[0]._id)",
											"",
											"//Salvando o objeto Address",
											"pm.environment.set(\"NewCompanyAddress\", pm.response.json().newCompany.address[0])"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"corporateName\": \"{{CorporateName}}\",\n  \"registerCompany\": \"{{RegisterCompany}}\",\n  \"mail\": \"{{CorporateMail}}\",\n  \"matriz\": \"{{CorporateReason}}\",\n  \"responsibleContact\": \"{{ResponsibleContact}}\",\n  \"telephone\": \"{{Telephone}}\",\n  \"serviceDescription\": \"{{ServiceDescription}}\",\n  \"address\": [\n    {\n      \"zipCode\": \"{{ZipCode}}\",\n      \"city\": \"{{City}}\",\n      \"state\": \"{{State}}\",\n      \"district\": \"{{District}}\",\n      \"street\": \"{{Street}}\",\n      \"number\": \"{{Number}}\",\n      \"complement\": \"\",\n      \"country\": \"{{Country}}\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/api/company/?token={{tokenAcesso}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"company",
										""
									],
									"query": [
										{
											"key": "token",
											"value": "{{tokenAcesso}}"
										}
									]
								},
								"description": "Generated from cURL: curl -X 'POST' \\\n  'https://ron-bugado.qacoders.dev.br/api/company/?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NzlhMzVmN2ViMzViNTQzYzI3NjliYTkiLCJmdWxsTmFtZSI6IkFuZHLDqSBNaW5hdG8iLCJtYWlsIjoiYW5kcmUubWluYXRvQHRlc3QuY29tLmJyIiwicGFzc3dvcmQiOiIkMmIkMTAkL0d3V0dxTFg5di9MNEVmdk9jbEsuLlouaHhWTWlITkQ3UzExZnhpTW1wSXdPZ2RtbTFYYkciLCJhY2Nlc3NQcm9maWxlIjoiQURNSU4iLCJjcGYiOiIxNzk4NTY5MjM5OCIsInN0YXR1cyI6dHJ1ZSwiYXVkaXQiOlt7InJlZ2lzdGVyZWRCeSI6eyJ1c2VySWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJ1c2VyTG9naW4iOiJzeXNhZG1pbkBxYWNvZGVycy5jb20ifSwicmVnaXN0cmF0aW9uRGF0ZSI6InF1YXJ0YS1mZWlyYSwgMjkvMDEvMjAyNSwgMTE6MDY6NDcgQlJUIiwicmVnaXN0cmF0aW9uTnVtYmVyIjoiUWFDb2RlcnMtMjYwIiwiX2lkIjoiNjc5YTM1ZjdlYjM1YjU0M2MyNzY5YmFhIn1dLCJfX3YiOjAsImlhdCI6MTczOTkwNjUzMiwiZXhwIjoxNzM5OTkyOTMyfQ.WMHrGtPB6sK3lx7_W1jI2XTfFDRaVTWHiUac0zM1NnY' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"corporateName\": \"Teste&QA LTDA\",\n  \"registerCompany\": \"12126456000100\",\n  \"mail\": \"testqa@hotmail.com\",\n  \"matriz\": \"lagoa azul\",\n  \"responsibleContact\": \"Marcio do Teste\",\n  \"telephone\": \"11111111111111\",\n  \"serviceDescription\": \"Testes de software e criação de indicadores para manter a qualidade de software\",\n  \"address\": [\n    {\n      \"zipCode\": \"04777001\",\n      \"city\": \"São Paulo\",\n      \"state\": \"SP\",\n      \"district\": \"Centro\",\n      \"street\": \"Avenida Interlagos\",\n      \"number\": \"50\",\n      \"complement\": \"\",\n      \"country\": \"Brasil\"\n    }\n  ]\n}'"
							},
							"response": []
						},
						{
							"name": "Editar nome do responsável para 100 caracteres",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validar se o status code é 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Validar mensagem de atualizado com sucesso.\", function () {",
											"     pm.expect(pm.response.json().msg).to.eql(\"Companhia atualizada com sucesso.\");",
											"});",
											"",
											"pm.test(\"Validar se o nome do contato e o mesmo do request\", function () {",
											"     pm.expect(pm.response.json().updatedCompany.responsibleContact).to.eql(pm.environment.get(\"FullName100Caracteres\"));",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"corporateName\": \"{{CorporateName}}\",\n  \"registerCompany\": \"{{RegisterCompany}}\",\n  \"mail\": \"{{CorporateMail}}\",\n  \"matriz\": \"{{CorporateReason}}\",\n  \"responsibleContact\": \"{{FullName100Caracteres}}\",\n  \"telephone\": \"{{Telephone}}\",\n  \"serviceDescription\": \"{{ServiceDescription}}\"\n}\n\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/api/company/{{NewCompanyId}}?token={{tokenAcesso}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"company",
										"{{NewCompanyId}}"
									],
									"query": [
										{
											"key": "token",
											"value": "{{tokenAcesso}}"
										}
									]
								},
								"description": "Generated from cURL: curl -X 'PUT' \\\n  'https://ron-bugado.qacoders.dev.br/api/company/67ab5be34b03e1eb32f4e561?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NzlhMzVmN2ViMzViNTQzYzI3NjliYTkiLCJmdWxsTmFtZSI6IkFuZHLDqSBNaW5hdG8iLCJtYWlsIjoiYW5kcmUubWluYXRvQHRlc3QuY29tLmJyIiwicGFzc3dvcmQiOiIkMmIkMTAkL0d3V0dxTFg5di9MNEVmdk9jbEsuLlouaHhWTWlITkQ3UzExZnhpTW1wSXdPZ2RtbTFYYkciLCJhY2Nlc3NQcm9maWxlIjoiQURNSU4iLCJjcGYiOiIxNzk4NTY5MjM5OCIsInN0YXR1cyI6dHJ1ZSwiYXVkaXQiOlt7InJlZ2lzdGVyZWRCeSI6eyJ1c2VySWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJ1c2VyTG9naW4iOiJzeXNhZG1pbkBxYWNvZGVycy5jb20ifSwicmVnaXN0cmF0aW9uRGF0ZSI6InF1YXJ0YS1mZWlyYSwgMjkvMDEvMjAyNSwgMTE6MDY6NDcgQlJUIiwicmVnaXN0cmF0aW9uTnVtYmVyIjoiUWFDb2RlcnMtMjYwIiwiX2lkIjoiNjc5YTM1ZjdlYjM1YjU0M2MyNzY5YmFhIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTY2NSwiZXhwIjoxNzM5MzE2MDY1fQ.UmE4tUczm31wPdJ_wcCn-ZoGmAsmJJHRUBbxde6iUyw' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"corporateName\": \"Grupo KRO Publicidade & Tecnologia\",\n  \"registerCompany\": \"12126456000155\",\n  \"mail\": \"rh@kro.com.br\",\n  \"matriz\": \"Teste de criação de empresa\",\n  \"responsibleContact\": \"Teste de criação de empresa\",\n  \"telephone\": \"551188951407589\",\n  \"serviceDescription\": \"Realizar o teste no cenário para a criação de uma nova empresa\"\n}\n\n'"
							},
							"response": []
						},
						{
							"name": "Editar nome do responsável com 101 caracteres",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validar se o status code é 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"corporateName\": \"{{CorporateName}}\",\n  \"registerCompany\": \"{{RegisterCompany}}\",\n  \"mail\": \"{{CorporateMail}}\",\n  \"matriz\": \"{{CorporateReason}}\",\n  \"responsibleContact\": \"{{FullName101Caracteres}}\",\n  \"telephone\": \"{{Telephone}}\",\n  \"serviceDescription\": \"{{ServiceDescription}}\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/api/company/{{NewCompanyId}}?token={{tokenAcesso}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"company",
										"{{NewCompanyId}}"
									],
									"query": [
										{
											"key": "token",
											"value": "{{tokenAcesso}}"
										}
									]
								},
								"description": "Generated from cURL: curl -X 'PUT' \\\n  'https://ron-bugado.qacoders.dev.br/api/company/67ab5be34b03e1eb32f4e561?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NzlhMzVmN2ViMzViNTQzYzI3NjliYTkiLCJmdWxsTmFtZSI6IkFuZHLDqSBNaW5hdG8iLCJtYWlsIjoiYW5kcmUubWluYXRvQHRlc3QuY29tLmJyIiwicGFzc3dvcmQiOiIkMmIkMTAkL0d3V0dxTFg5di9MNEVmdk9jbEsuLlouaHhWTWlITkQ3UzExZnhpTW1wSXdPZ2RtbTFYYkciLCJhY2Nlc3NQcm9maWxlIjoiQURNSU4iLCJjcGYiOiIxNzk4NTY5MjM5OCIsInN0YXR1cyI6dHJ1ZSwiYXVkaXQiOlt7InJlZ2lzdGVyZWRCeSI6eyJ1c2VySWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJ1c2VyTG9naW4iOiJzeXNhZG1pbkBxYWNvZGVycy5jb20ifSwicmVnaXN0cmF0aW9uRGF0ZSI6InF1YXJ0YS1mZWlyYSwgMjkvMDEvMjAyNSwgMTE6MDY6NDcgQlJUIiwicmVnaXN0cmF0aW9uTnVtYmVyIjoiUWFDb2RlcnMtMjYwIiwiX2lkIjoiNjc5YTM1ZjdlYjM1YjU0M2MyNzY5YmFhIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTY2NSwiZXhwIjoxNzM5MzE2MDY1fQ.UmE4tUczm31wPdJ_wcCn-ZoGmAsmJJHRUBbxde6iUyw' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"corporateName\": \"Grupo KRO Publicidade & Tecnologia\",\n  \"registerCompany\": \"12126456000155\",\n  \"mail\": \"rh@kro.com.br\",\n  \"matriz\": \"Teste de criação de empresa\",\n  \"responsibleContact\": \"Teste de criação de empresa\",\n  \"telephone\": \"551188951407589\",\n  \"serviceDescription\": \"Realizar o teste no cenário para a criação de uma nova empresa\"\n}\n\n'"
							},
							"response": []
						},
						{
							"name": "Editar nome do responsável enviando apenas o primeiro nome",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validar se o status code é 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"corporateName\": \"{{CorporateName}}\",\n  \"registerCompany\": \"{{RegisterCompany}}\",\n  \"mail\": \"{{CorporateMail}}\",\n  \"matriz\": \"{{CorporateReason}}\",\n  \"responsibleContact\": \"Paulo\",\n  \"telephone\": \"{{Telephone}}\",\n  \"serviceDescription\": \"{{ServiceDescription}}\"\n}\n\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/api/company/{{NewCompanyId}}?token={{tokenAcesso}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"company",
										"{{NewCompanyId}}"
									],
									"query": [
										{
											"key": "token",
											"value": "{{tokenAcesso}}"
										}
									]
								},
								"description": "Generated from cURL: curl -X 'PUT' \\\n  'https://ron-bugado.qacoders.dev.br/api/company/67ab5be34b03e1eb32f4e561?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NzlhMzVmN2ViMzViNTQzYzI3NjliYTkiLCJmdWxsTmFtZSI6IkFuZHLDqSBNaW5hdG8iLCJtYWlsIjoiYW5kcmUubWluYXRvQHRlc3QuY29tLmJyIiwicGFzc3dvcmQiOiIkMmIkMTAkL0d3V0dxTFg5di9MNEVmdk9jbEsuLlouaHhWTWlITkQ3UzExZnhpTW1wSXdPZ2RtbTFYYkciLCJhY2Nlc3NQcm9maWxlIjoiQURNSU4iLCJjcGYiOiIxNzk4NTY5MjM5OCIsInN0YXR1cyI6dHJ1ZSwiYXVkaXQiOlt7InJlZ2lzdGVyZWRCeSI6eyJ1c2VySWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJ1c2VyTG9naW4iOiJzeXNhZG1pbkBxYWNvZGVycy5jb20ifSwicmVnaXN0cmF0aW9uRGF0ZSI6InF1YXJ0YS1mZWlyYSwgMjkvMDEvMjAyNSwgMTE6MDY6NDcgQlJUIiwicmVnaXN0cmF0aW9uTnVtYmVyIjoiUWFDb2RlcnMtMjYwIiwiX2lkIjoiNjc5YTM1ZjdlYjM1YjU0M2MyNzY5YmFhIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTY2NSwiZXhwIjoxNzM5MzE2MDY1fQ.UmE4tUczm31wPdJ_wcCn-ZoGmAsmJJHRUBbxde6iUyw' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"corporateName\": \"Grupo KRO Publicidade & Tecnologia\",\n  \"registerCompany\": \"12126456000155\",\n  \"mail\": \"rh@kro.com.br\",\n  \"matriz\": \"Teste de criação de empresa\",\n  \"responsibleContact\": \"Teste de criação de empresa\",\n  \"telephone\": \"551188951407589\",\n  \"serviceDescription\": \"Realizar o teste no cenário para a criação de uma nova empresa\"\n}\n\n'"
							},
							"response": []
						},
						{
							"name": "Listar - Empresas",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// A resposta da requisição",
											"let responseData = pm.response.json();",
											"",
											"// Inverter a ordem dos registros",
											"let reversedData = responseData.reverse();",
											"",
											"// Salvar os dados invertidos para uso posterior",
											"pm.environment.set(\"reversedData\", JSON.stringify(reversedData));",
											"",
											"// Verificar se a inversão funcionou",
											"console.log(reversedData);",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"packages": {},
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{url_base}}/api/company/?token={{tokenAcesso}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"company",
										""
									],
									"query": [
										{
											"key": "token",
											"value": "{{tokenAcesso}}"
										}
									]
								},
								"description": "Generated from cURL: curl -X 'GET' \\\n  'https://ron-bugado.qacoders.dev.br/api/company/?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NzlhMzVmN2ViMzViNTQzYzI3NjliYTkiLCJmdWxsTmFtZSI6IkFuZHLDqSBNaW5hdG8iLCJtYWlsIjoiYW5kcmUubWluYXRvQHRlc3QuY29tLmJyIiwicGFzc3dvcmQiOiIkMmIkMTAkL0d3V0dxTFg5di9MNEVmdk9jbEsuLlouaHhWTWlITkQ3UzExZnhpTW1wSXdPZ2RtbTFYYkciLCJhY2Nlc3NQcm9maWxlIjoiQURNSU4iLCJjcGYiOiIxNzk4NTY5MjM5OCIsInN0YXR1cyI6dHJ1ZSwiYXVkaXQiOlt7InJlZ2lzdGVyZWRCeSI6eyJ1c2VySWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJ1c2VyTG9naW4iOiJzeXNhZG1pbkBxYWNvZGVycy5jb20ifSwicmVnaXN0cmF0aW9uRGF0ZSI6InF1YXJ0YS1mZWlyYSwgMjkvMDEvMjAyNSwgMTE6MDY6NDcgQlJUIiwicmVnaXN0cmF0aW9uTnVtYmVyIjoiUWFDb2RlcnMtMjYwIiwiX2lkIjoiNjc5YTM1ZjdlYjM1YjU0M2MyNzY5YmFhIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyODM4MCwiZXhwIjoxNzM5MzE0NzgwfQ.TX88kOWjwoM9biXDhB3ivJJR8xlFsKEb1XQ1KLY7V34' \\\n  -H 'accept: application/json'"
							},
							"response": []
						}
					]
				},
				{
					"name": "Telefone Contato da empresa",
					"item": [
						{
							"name": "Login de Sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"tokenAcesso\", pm.response.json().token);",
											"pm.environment.set(\"UserIdAuditCompany\", pm.response.json().user._id);",
											"pm.environment.set(\"UserLoginAuditCompany\", pm.response.json().user.mail);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"mail\": \"{{TestUserEmail}}\",\r\n    \"password\": \"{{TestUserPassword}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/api/login/",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"login",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastro de empresa",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function sendRequestWithRetry(retries) {",
											"    pm.sendRequest({",
											"        // Opções da request",
											"        url: 'https://www.4devs.com.br/ferramentas_online.php',",
											"        method: 'POST',",
											"        header: {",
											"            'Content-Type': 'application/x-www-form-urlencoded',",
											"        },",
											"        body: {",
											"            mode: 'raw',",
											"            raw: 'acao=gerar_empresa&pontuacao=N&estado=SP&idade=5',",
											"        }",
											"    }, function (err, response) {",
											"        if (err) {",
											"            console.log('Erro na requisição:', err);",
											"            if (retries > 0) {",
											"                console.log('Tentando novamente...');",
											"                sendRequestWithRetry(retries - 1); // Tenta novamente se falhar",
											"            } else {",
											"                console.log('Número máximo de tentativas atingido.');",
											"            }",
											"        } else {",
											"            // Acessa o corpo da resposta HTML",
											"            var responseBody = response.text();",
											"",
											"            // Função para extrair o valor de um campo baseado no id do input",
											"            function extractData(id) {",
											"                var regex = new RegExp('<input[^>]+id=\"' + id + '\"[^>]+value=\"([^\"]+)\"', 'i');",
											"                var match = responseBody.match(regex);",
											"                return match ? match[1] : null;",
											"            }",
											"",
											"            // Criação do objeto JSON com os dados extraídos",
											"            var extractedData = {",
											"                nome: extractData('nome'),",
											"                cnpj: extractData('cnpj'),",
											"                ie: extractData('ie'),",
											"                data_abertura: extractData('data_abertura'),",
											"                site: extractData('site'),",
											"                email: extractData('email'),",
											"                cep: extractData('cep'),",
											"                endereco: extractData('endereco'),",
											"                numero: extractData('numero'),",
											"                bairro: extractData('bairro'),",
											"                cidade: extractData('cidade'),",
											"                estado: extractData('estado'),",
											"                telefone_fixo: extractData('telefone_fixo'),",
											"                celular: extractData('celular')",
											"            };",
											"",
											"",
											"            // Agora, chamamos a função lastName depois de todo o processamento",
											"            function lastName() {",
											"                var lastName = [",
											"                    \"Silva dos Santos\", \"de Albuquerque Figueiroa\", \"Saviola de Lima\", \"Xavier de Menezes\",",
											"                    \"Oliveira dos Reis\", \"Carvalho Silva\", \"Pereira do Amaral\", \"Costa Lima\", \"dos Santos Rocha\",",
											"                    \"Ferreira de Souza\", \"Costa Ramos\", \"Almeida Martins\", \"Rocha de Oliveira\", \"Souza Lima\",",
											"                    \"Silva Pereira\", \"de Andrade Oliveira\", \"Fonseca Lima\", \"Pinto da Silva\", \"Almeida Costa\",",
											"                    \"Ferreira dos Santos\", \"Figueiredo de Souza\", \"da Silva Nogueira\", \"de Barros Santos\",",
											"                    \"Gomes de Almeida\", \"Lima Pereira\", \"Barbosa da Costa\", \"Rodrigues de Oliveira\", \"da Silva Andrade\",",
											"                    \"Monteiro dos Santos\", \"Martins da Silva\", \"Nogueira de Lima\", \"Soares de Almeida\", \"Tavares da Rocha\",",
											"                    \"Alves de Souza\", \"Mendes da Silva\", \"Pinto de Souza\", \"Bastos de Lima\", \"Silva de Carvalho\",",
											"                    \"Pinto de Almeida\", \"Cardoso da Costa\", \"Torres de Almeida\", \"Oliveira de Figueiredo\", \"de Araújo Lima\",",
											"                    \"Cavalcanti da Rocha\", \"Xavier de Souza\", \"Cunha de Almeida\", \"Lemos da Silva\", \"Santos de Carvalho\",",
											"                    \"Almeida de Lima\", \"da Silva Pinto\", \"Lima de Oliveira\", \"Barbosa de Souza\", \"Costa de Almeida\",",
											"                    \"Figueiredo Lima\", \"Almeida dos Reis\", \"Tavares de Souza\", \"Azevedo de Lima\", \"Ferreira de Almeida\",",
											"                    \"Souza da Costa\", \"Pinto de Lima\", \"Gonçalves de Lima\", \"Bastos da Silva\", \"Nascimento de Almeida\",",
											"                    \"da Silva Souza\", \"Vieira de Oliveira\", \"Ribeiro dos Santos\", \"Silva de Araújo\", \"Costa de Lima\",",
											"                    \"de Castro Nogueira\", \"Cardoso de Almeida\", \"Pereira da Rocha\", \"Silva Tavares\", \"Rocha de Souza\",",
											"                    \"de Carvalho Santos\", \"Borges da Silva\", \"Almeida de Araújo\", \"Lima da Costa\", \"Melo de Almeida\",",
											"                    \"Faria de Lima\", \"Ferreira da Costa\", \"Ramos de Souza\", \"Moreira de Lima\", \"Barbosa de Almeida\",",
											"                    \"Santana de Souza\", \"Rocha de Lima\", \"Duarte de Souza\", \"Lopes de Almeida\", \"Almeida de Rocha\",",
											"                    \"Silva da Costa\", \"Figueiredo dos Santos\", \"Cardoso de Souza\", \"Oliveira de Rocha\", \"Costa de Nogueira\",",
											"                    \"Pinto de Araújo\", \"Tavares de Costa\", \"Martins de Almeida\", \"Nogueira da Rocha\", \"Souza de Almeida\",",
											"                    \"Carvalho da Silva\", \"Pereira de Souza\"",
											"                ];",
											"",
											"                let randomItem = lastName[Math.floor(Math.random() * lastName.length)];",
											"                return randomItem;",
											"            }",
											"",
											"            function gerarNomeResumido(nomeCompleto) {",
											"            // Divide o nome completo em uma lista de palavras",
											"            const partesNome = nomeCompleto.split(' ');",
											"",
											"            // Verifica se o nome tem 2 ou menos palavras",
											"            if (partesNome.length <= 2) {",
											"                return partesNome.join(' ');",
											"            }",
											"            ",
											"            // Pega o primeiro, penúltimo e último nome",
											"            const primeiroNome = partesNome[0];",
											"            const penultimoNome = partesNome[partesNome.length - 2];",
											"            const ultimoNome = partesNome[partesNome.length - 1];",
											"            ",
											"            // Retorna o novo nome formatado",
											"            return `${primeiroNome} ${penultimoNome} ${ultimoNome}`;",
											"        }",
											"",
											"            // // Exemplo de uso",
											"            // const nomeCompleto = \"Erick e Emanuelly Telecom ME\";",
											"            const novoNome = gerarNomeResumido(extractedData.nome);",
											"            console.log(novoNome);",
											"",
											"",
											"            pm.environment.set(\"ResponsibleContact\", extractedData.nome.split(' ')[0] + ' ' + lastName())",
											"            pm.environment.set(\"CorporateName\", novoNome)",
											"            pm.environment.set(\"CorporateMail\", extractedData.email)",
											"            pm.environment.set(\"RegisterCompany\", extractedData.cnpj)",
											"            pm.environment.set(\"Telephone\", extractedData.telefone_fixo + 1234)",
											"            pm.environment.set(\"ZipCode\", extractedData.cep)",
											"            pm.environment.set(\"City\", extractedData.cidade)",
											"            pm.environment.set(\"State\", extractedData.estado)",
											"            pm.environment.set(\"District\", extractedData.bairro)",
											"            pm.environment.set(\"Street\", extractedData.endereco)",
											"            pm.environment.set(\"Number\", extractedData.numero)",
											"            pm.environment.set(\"CorporateReason\", extractedData.nome)",
											"            ",
											"        }",
											"    });",
											"}",
											"",
											"// Inicia a requisição com até 3 tentativas",
											"sendRequestWithRetry(5);",
											"",
											"",
											"function serviceDecription () {",
											"    const descricaoServicos = [",
											"        \"Consultoria especializada para otimização de processos empresariais e aumento de produtividade.\",",
											"        \"Desenvolvimento de soluções de software personalizadas para atender às necessidades específicas do seu negócio.\",",
											"        \"Serviço de entrega rápida de alimentos frescos, com opções de pratos saudáveis e saborosos.\",",
											"        \"Manutenção preventiva e corretiva de equipamentos industriais, garantindo o melhor desempenho e segurança.\",",
											"        \"Consultoria em estratégias de marketing digital para aumentar a visibilidade e engajamento online.\",",
											"        \"Serviços de tradução e interpretação em diversos idiomas, com foco em negócios internacionais.\",",
											"        \"Assessoria jurídica para empresas, oferecendo soluções para questões contratuais e trabalhistas.\",",
											"        \"Design gráfico e criação de identidade visual para marcas, desde o logotipo até materiais promocionais.\",",
											"        \"Serviços de contabilidade e gestão financeira, com foco em reduzir custos e melhorar a saúde financeira.\",",
											"        \"Planejamento e execução de eventos corporativos e sociais, com toda a logística e produção envolvida.\",",
											"        \"Desenvolvimento de aplicativos móveis, com interfaces intuitivas e funcionalidades customizadas para sua empresa.\",",
											"        \"Serviços de limpeza e conservação para empresas, escritórios e estabelecimentos comerciais.\",",
											"        \"Treinamentos e workshops de capacitação profissional, com conteúdo voltado para o desenvolvimento de habilidades técnicas.\",",
											"        \"Fornecimento e instalação de sistemas de energia solar, promovendo a sustentabilidade e redução de custos de energia.\",",
											"        \"Assessoria em importação e exportação, com expertise em logística e regulamentos internacionais.\",",
											"        \"Serviços de gestão de redes sociais para aumentar a presença digital da sua marca e engajar clientes.\",",
											"        \"Consultoria em recursos humanos, ajudando a melhorar a gestão de talentos e o clima organizacional.\",",
											"        \"Planejamento estratégico para crescimento de negócios, com soluções inovadoras e análises de mercado detalhadas.\",",
											"        \"Criação de sites responsivos e otimizados, com foco em usabilidade e experiência do usuário.\",",
											"        \"Serviços de segurança patrimonial, com monitoramento 24h e sistemas de alarme para proteger seu imóvel.\"",
											"    ];",
											"    let randomItem = descricaoServicos[Math.floor(Math.random() * descricaoServicos.length)];",
											"        return randomItem;",
											"",
											"} ",
											"pm.environment.set(\"ServiceDescription\", serviceDecription())",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verificar se o status code é 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Validar userId do registeredBy é o mesmo id do Admin\", function () {",
											"     pm.expect(pm.response.json().newCompany.audit[0].registeredBy.userId).to.eql(pm.environment.get(\"UserIdAuditCompany\"));",
											"});",
											"",
											"pm.test(\"Validar userLogin do registeredBy é o mesmo e-mail do Admin\", function () {",
											"     pm.expect(pm.response.json().newCompany.audit[0].registeredBy.userLogin).to.eql(pm.environment.get(\"UserLoginAuditCompany\"));",
											"});",
											"",
											"pm.environment.set(\"NewCompanyId\", pm.response.json().newCompany._id)",
											"pm.environment.set(\"NewCompanyAuditRegistrationDate\", pm.response.json().newCompany.audit[0].registrationDate)",
											"pm.environment.set(\"NewCompanyAuditId\", pm.response.json().newCompany.audit[0]._id)",
											"",
											"//Salvando o objeto Address",
											"pm.environment.set(\"NewCompanyAddress\", pm.response.json().newCompany.address[0])"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"corporateName\": \"{{CorporateName}}\",\n  \"registerCompany\": \"{{RegisterCompany}}\",\n  \"mail\": \"{{CorporateMail}}\",\n  \"matriz\": \"{{CorporateReason}}\",\n  \"responsibleContact\": \"{{ResponsibleContact}}\",\n  \"telephone\": \"{{Telephone}}\",\n  \"serviceDescription\": \"{{ServiceDescription}}\",\n  \"address\": [\n    {\n      \"zipCode\": \"{{ZipCode}}\",\n      \"city\": \"{{City}}\",\n      \"state\": \"{{State}}\",\n      \"district\": \"{{District}}\",\n      \"street\": \"{{Street}}\",\n      \"number\": \"{{Number}}\",\n      \"complement\": \"\",\n      \"country\": \"{{Country}}\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/api/company/?token={{tokenAcesso}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"company",
										""
									],
									"query": [
										{
											"key": "token",
											"value": "{{tokenAcesso}}"
										}
									]
								},
								"description": "Generated from cURL: curl -X 'POST' \\\n  'https://ron-bugado.qacoders.dev.br/api/company/?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NzlhMzVmN2ViMzViNTQzYzI3NjliYTkiLCJmdWxsTmFtZSI6IkFuZHLDqSBNaW5hdG8iLCJtYWlsIjoiYW5kcmUubWluYXRvQHRlc3QuY29tLmJyIiwicGFzc3dvcmQiOiIkMmIkMTAkL0d3V0dxTFg5di9MNEVmdk9jbEsuLlouaHhWTWlITkQ3UzExZnhpTW1wSXdPZ2RtbTFYYkciLCJhY2Nlc3NQcm9maWxlIjoiQURNSU4iLCJjcGYiOiIxNzk4NTY5MjM5OCIsInN0YXR1cyI6dHJ1ZSwiYXVkaXQiOlt7InJlZ2lzdGVyZWRCeSI6eyJ1c2VySWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJ1c2VyTG9naW4iOiJzeXNhZG1pbkBxYWNvZGVycy5jb20ifSwicmVnaXN0cmF0aW9uRGF0ZSI6InF1YXJ0YS1mZWlyYSwgMjkvMDEvMjAyNSwgMTE6MDY6NDcgQlJUIiwicmVnaXN0cmF0aW9uTnVtYmVyIjoiUWFDb2RlcnMtMjYwIiwiX2lkIjoiNjc5YTM1ZjdlYjM1YjU0M2MyNzY5YmFhIn1dLCJfX3YiOjAsImlhdCI6MTczOTkwNjUzMiwiZXhwIjoxNzM5OTkyOTMyfQ.WMHrGtPB6sK3lx7_W1jI2XTfFDRaVTWHiUac0zM1NnY' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"corporateName\": \"Teste&QA LTDA\",\n  \"registerCompany\": \"12126456000100\",\n  \"mail\": \"testqa@hotmail.com\",\n  \"matriz\": \"lagoa azul\",\n  \"responsibleContact\": \"Marcio do Teste\",\n  \"telephone\": \"11111111111111\",\n  \"serviceDescription\": \"Testes de software e criação de indicadores para manter a qualidade de software\",\n  \"address\": [\n    {\n      \"zipCode\": \"04777001\",\n      \"city\": \"São Paulo\",\n      \"state\": \"SP\",\n      \"district\": \"Centro\",\n      \"street\": \"Avenida Interlagos\",\n      \"number\": \"50\",\n      \"complement\": \"\",\n      \"country\": \"Brasil\"\n    }\n  ]\n}'"
							},
							"response": []
						},
						{
							"name": "Editar cadastro da empresa enviando 15 caracteres no campo telefone",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validar se o status code é 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Validar mensagem de atualizado com sucesso.\", function () {",
											"     pm.expect(pm.response.json().msg).to.eql(\"Companhia atualizada com sucesso.\");",
											"});",
											"",
											"pm.test(\"Validar se o número de telefone e o mesmo do request\", function () {",
											"     pm.expect(pm.response.json().updatedCompany.telephone).to.eql(\"123456789321654\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"corporateName\": \"{{CorporateName}}\",\n    \"registerCompany\": \"{{RegisterCompany}}\",\n    \"mail\": \"{{CorporateMail}}\",\n    \"matriz\": \"{{CorporateReason}}\",\n    \"responsibleContact\": \"{{ResponsibleContact}}\",\n    \"telephone\": \"123456789321654\",\n    \"serviceDescription\": \"{{ServiceDescription}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/api/company/{{NewCompanyId}}?token={{tokenAcesso}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"company",
										"{{NewCompanyId}}"
									],
									"query": [
										{
											"key": "token",
											"value": "{{tokenAcesso}}"
										}
									]
								},
								"description": "Generated from cURL: curl -X 'PUT' \\\n  'https://ron-bugado.qacoders.dev.br/api/company/67ab5be34b03e1eb32f4e561?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NzlhMzVmN2ViMzViNTQzYzI3NjliYTkiLCJmdWxsTmFtZSI6IkFuZHLDqSBNaW5hdG8iLCJtYWlsIjoiYW5kcmUubWluYXRvQHRlc3QuY29tLmJyIiwicGFzc3dvcmQiOiIkMmIkMTAkL0d3V0dxTFg5di9MNEVmdk9jbEsuLlouaHhWTWlITkQ3UzExZnhpTW1wSXdPZ2RtbTFYYkciLCJhY2Nlc3NQcm9maWxlIjoiQURNSU4iLCJjcGYiOiIxNzk4NTY5MjM5OCIsInN0YXR1cyI6dHJ1ZSwiYXVkaXQiOlt7InJlZ2lzdGVyZWRCeSI6eyJ1c2VySWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJ1c2VyTG9naW4iOiJzeXNhZG1pbkBxYWNvZGVycy5jb20ifSwicmVnaXN0cmF0aW9uRGF0ZSI6InF1YXJ0YS1mZWlyYSwgMjkvMDEvMjAyNSwgMTE6MDY6NDcgQlJUIiwicmVnaXN0cmF0aW9uTnVtYmVyIjoiUWFDb2RlcnMtMjYwIiwiX2lkIjoiNjc5YTM1ZjdlYjM1YjU0M2MyNzY5YmFhIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTY2NSwiZXhwIjoxNzM5MzE2MDY1fQ.UmE4tUczm31wPdJ_wcCn-ZoGmAsmJJHRUBbxde6iUyw' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"corporateName\": \"Grupo KRO Publicidade & Tecnologia\",\n  \"registerCompany\": \"12126456000155\",\n  \"mail\": \"rh@kro.com.br\",\n  \"matriz\": \"Teste de criação de empresa\",\n  \"responsibleContact\": \"Teste de criação de empresa\",\n  \"telephone\": \"551188951407589\",\n  \"serviceDescription\": \"Realizar o teste no cenário para a criação de uma nova empresa\"\n}\n\n'"
							},
							"response": []
						},
						{
							"name": "Editar cadastro da empresa enviando 10 caracteres no campo telefone",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validar se o status code é 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Validar mensagem de atualizado com sucesso.\", function () {",
											"     pm.expect(pm.response.json().msg).to.eql(\"Companhia atualizada com sucesso.\");",
											"});",
											"",
											"pm.test(\"Validar se o número de telefone e o mesmo do request\", function () {",
											"     pm.expect(pm.response.json().updatedCompany.telephone).to.eql(\"1234567890\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"corporateName\": \"{{CorporateName}}\",\n    \"registerCompany\": \"{{RegisterCompany}}\",\n    \"mail\": \"{{CorporateMail}}\",\n    \"matriz\": \"{{CorporateReason}}\",\n    \"responsibleContact\": \"{{ResponsibleContact}}\",\n    \"telephone\": \"1234567890\",\n    \"serviceDescription\": \"{{ServiceDescription}}\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/api/company/{{NewCompanyId}}?token={{tokenAcesso}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"company",
										"{{NewCompanyId}}"
									],
									"query": [
										{
											"key": "token",
											"value": "{{tokenAcesso}}"
										}
									]
								},
								"description": "Generated from cURL: curl -X 'PUT' \\\n  'https://ron-bugado.qacoders.dev.br/api/company/67ab5be34b03e1eb32f4e561?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NzlhMzVmN2ViMzViNTQzYzI3NjliYTkiLCJmdWxsTmFtZSI6IkFuZHLDqSBNaW5hdG8iLCJtYWlsIjoiYW5kcmUubWluYXRvQHRlc3QuY29tLmJyIiwicGFzc3dvcmQiOiIkMmIkMTAkL0d3V0dxTFg5di9MNEVmdk9jbEsuLlouaHhWTWlITkQ3UzExZnhpTW1wSXdPZ2RtbTFYYkciLCJhY2Nlc3NQcm9maWxlIjoiQURNSU4iLCJjcGYiOiIxNzk4NTY5MjM5OCIsInN0YXR1cyI6dHJ1ZSwiYXVkaXQiOlt7InJlZ2lzdGVyZWRCeSI6eyJ1c2VySWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJ1c2VyTG9naW4iOiJzeXNhZG1pbkBxYWNvZGVycy5jb20ifSwicmVnaXN0cmF0aW9uRGF0ZSI6InF1YXJ0YS1mZWlyYSwgMjkvMDEvMjAyNSwgMTE6MDY6NDcgQlJUIiwicmVnaXN0cmF0aW9uTnVtYmVyIjoiUWFDb2RlcnMtMjYwIiwiX2lkIjoiNjc5YTM1ZjdlYjM1YjU0M2MyNzY5YmFhIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTY2NSwiZXhwIjoxNzM5MzE2MDY1fQ.UmE4tUczm31wPdJ_wcCn-ZoGmAsmJJHRUBbxde6iUyw' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"corporateName\": \"Grupo KRO Publicidade & Tecnologia\",\n  \"registerCompany\": \"12126456000155\",\n  \"mail\": \"rh@kro.com.br\",\n  \"matriz\": \"Teste de criação de empresa\",\n  \"responsibleContact\": \"Teste de criação de empresa\",\n  \"telephone\": \"551188951407589\",\n  \"serviceDescription\": \"Realizar o teste no cenário para a criação de uma nova empresa\"\n}\n\n'"
							},
							"response": []
						},
						{
							"name": "Editar cadastro da empresa enviando 18 caracteres no campo telefone",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validar se o status code é 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"corporateName\": \"{{CorporateName}}\",\n    \"registerCompany\": \"{{RegisterCompany}}\",\n    \"mail\": \"{{CorporateMail}}\",\n    \"matriz\": \"{{CorporateReason}}\",\n    \"responsibleContact\": \"{{ResponsibleContact}}\",\n    \"telephone\": \"123456789012345678\",\n    \"serviceDescription\": \"{{ServiceDescription}}\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/api/company/{{NewCompanyId}}?token={{tokenAcesso}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"company",
										"{{NewCompanyId}}"
									],
									"query": [
										{
											"key": "token",
											"value": "{{tokenAcesso}}"
										}
									]
								},
								"description": "Generated from cURL: curl -X 'PUT' \\\n  'https://ron-bugado.qacoders.dev.br/api/company/67ab5be34b03e1eb32f4e561?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NzlhMzVmN2ViMzViNTQzYzI3NjliYTkiLCJmdWxsTmFtZSI6IkFuZHLDqSBNaW5hdG8iLCJtYWlsIjoiYW5kcmUubWluYXRvQHRlc3QuY29tLmJyIiwicGFzc3dvcmQiOiIkMmIkMTAkL0d3V0dxTFg5di9MNEVmdk9jbEsuLlouaHhWTWlITkQ3UzExZnhpTW1wSXdPZ2RtbTFYYkciLCJhY2Nlc3NQcm9maWxlIjoiQURNSU4iLCJjcGYiOiIxNzk4NTY5MjM5OCIsInN0YXR1cyI6dHJ1ZSwiYXVkaXQiOlt7InJlZ2lzdGVyZWRCeSI6eyJ1c2VySWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJ1c2VyTG9naW4iOiJzeXNhZG1pbkBxYWNvZGVycy5jb20ifSwicmVnaXN0cmF0aW9uRGF0ZSI6InF1YXJ0YS1mZWlyYSwgMjkvMDEvMjAyNSwgMTE6MDY6NDcgQlJUIiwicmVnaXN0cmF0aW9uTnVtYmVyIjoiUWFDb2RlcnMtMjYwIiwiX2lkIjoiNjc5YTM1ZjdlYjM1YjU0M2MyNzY5YmFhIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTY2NSwiZXhwIjoxNzM5MzE2MDY1fQ.UmE4tUczm31wPdJ_wcCn-ZoGmAsmJJHRUBbxde6iUyw' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"corporateName\": \"Grupo KRO Publicidade & Tecnologia\",\n  \"registerCompany\": \"12126456000155\",\n  \"mail\": \"rh@kro.com.br\",\n  \"matriz\": \"Teste de criação de empresa\",\n  \"responsibleContact\": \"Teste de criação de empresa\",\n  \"telephone\": \"551188951407589\",\n  \"serviceDescription\": \"Realizar o teste no cenário para a criação de uma nova empresa\"\n}\n\n'"
							},
							"response": []
						},
						{
							"name": "Listar - Empresas",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// A resposta da requisição",
											"let responseData = pm.response.json();",
											"",
											"// Inverter a ordem dos registros",
											"let reversedData = responseData.reverse();",
											"",
											"// Salvar os dados invertidos para uso posterior",
											"pm.environment.set(\"reversedData\", JSON.stringify(reversedData));",
											"",
											"// Verificar se a inversão funcionou",
											"console.log(reversedData);",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"packages": {},
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{url_base}}/api/company/?token={{tokenAcesso}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"company",
										""
									],
									"query": [
										{
											"key": "token",
											"value": "{{tokenAcesso}}"
										}
									]
								},
								"description": "Generated from cURL: curl -X 'GET' \\\n  'https://ron-bugado.qacoders.dev.br/api/company/?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NzlhMzVmN2ViMzViNTQzYzI3NjliYTkiLCJmdWxsTmFtZSI6IkFuZHLDqSBNaW5hdG8iLCJtYWlsIjoiYW5kcmUubWluYXRvQHRlc3QuY29tLmJyIiwicGFzc3dvcmQiOiIkMmIkMTAkL0d3V0dxTFg5di9MNEVmdk9jbEsuLlouaHhWTWlITkQ3UzExZnhpTW1wSXdPZ2RtbTFYYkciLCJhY2Nlc3NQcm9maWxlIjoiQURNSU4iLCJjcGYiOiIxNzk4NTY5MjM5OCIsInN0YXR1cyI6dHJ1ZSwiYXVkaXQiOlt7InJlZ2lzdGVyZWRCeSI6eyJ1c2VySWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJ1c2VyTG9naW4iOiJzeXNhZG1pbkBxYWNvZGVycy5jb20ifSwicmVnaXN0cmF0aW9uRGF0ZSI6InF1YXJ0YS1mZWlyYSwgMjkvMDEvMjAyNSwgMTE6MDY6NDcgQlJUIiwicmVnaXN0cmF0aW9uTnVtYmVyIjoiUWFDb2RlcnMtMjYwIiwiX2lkIjoiNjc5YTM1ZjdlYjM1YjU0M2MyNzY5YmFhIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyODM4MCwiZXhwIjoxNzM5MzE0NzgwfQ.TX88kOWjwoM9biXDhB3ivJJR8xlFsKEb1XQ1KLY7V34' \\\n  -H 'accept: application/json'"
							},
							"response": []
						}
					]
				},
				{
					"name": "E-mail",
					"item": [
						{
							"name": "Login de Sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"tokenAcesso\", pm.response.json().token);",
											"pm.environment.set(\"UserIdAuditCompany\", pm.response.json().user._id);",
											"pm.environment.set(\"UserLoginAuditCompany\", pm.response.json().user.mail);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"mail\": \"{{TestUserEmail}}\",\r\n    \"password\": \"{{TestUserPassword}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/api/login/",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"login",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastro de empresa",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function sendRequestWithRetry(retries) {",
											"    pm.sendRequest({",
											"        // Opções da request",
											"        url: 'https://www.4devs.com.br/ferramentas_online.php',",
											"        method: 'POST',",
											"        header: {",
											"            'Content-Type': 'application/x-www-form-urlencoded',",
											"        },",
											"        body: {",
											"            mode: 'raw',",
											"            raw: 'acao=gerar_empresa&pontuacao=N&estado=SP&idade=5',",
											"        }",
											"    }, function (err, response) {",
											"        if (err) {",
											"            console.log('Erro na requisição:', err);",
											"            if (retries > 0) {",
											"                console.log('Tentando novamente...');",
											"                sendRequestWithRetry(retries - 1); // Tenta novamente se falhar",
											"            } else {",
											"                console.log('Número máximo de tentativas atingido.');",
											"            }",
											"        } else {",
											"            // Acessa o corpo da resposta HTML",
											"            var responseBody = response.text();",
											"",
											"            // Função para extrair o valor de um campo baseado no id do input",
											"            function extractData(id) {",
											"                var regex = new RegExp('<input[^>]+id=\"' + id + '\"[^>]+value=\"([^\"]+)\"', 'i');",
											"                var match = responseBody.match(regex);",
											"                return match ? match[1] : null;",
											"            }",
											"",
											"            // Criação do objeto JSON com os dados extraídos",
											"            var extractedData = {",
											"                nome: extractData('nome'),",
											"                cnpj: extractData('cnpj'),",
											"                ie: extractData('ie'),",
											"                data_abertura: extractData('data_abertura'),",
											"                site: extractData('site'),",
											"                email: extractData('email'),",
											"                cep: extractData('cep'),",
											"                endereco: extractData('endereco'),",
											"                numero: extractData('numero'),",
											"                bairro: extractData('bairro'),",
											"                cidade: extractData('cidade'),",
											"                estado: extractData('estado'),",
											"                telefone_fixo: extractData('telefone_fixo'),",
											"                celular: extractData('celular')",
											"            };",
											"",
											"",
											"            // Agora, chamamos a função lastName depois de todo o processamento",
											"            function lastName() {",
											"                var lastName = [",
											"                    \"Silva dos Santos\", \"de Albuquerque Figueiroa\", \"Saviola de Lima\", \"Xavier de Menezes\",",
											"                    \"Oliveira dos Reis\", \"Carvalho Silva\", \"Pereira do Amaral\", \"Costa Lima\", \"dos Santos Rocha\",",
											"                    \"Ferreira de Souza\", \"Costa Ramos\", \"Almeida Martins\", \"Rocha de Oliveira\", \"Souza Lima\",",
											"                    \"Silva Pereira\", \"de Andrade Oliveira\", \"Fonseca Lima\", \"Pinto da Silva\", \"Almeida Costa\",",
											"                    \"Ferreira dos Santos\", \"Figueiredo de Souza\", \"da Silva Nogueira\", \"de Barros Santos\",",
											"                    \"Gomes de Almeida\", \"Lima Pereira\", \"Barbosa da Costa\", \"Rodrigues de Oliveira\", \"da Silva Andrade\",",
											"                    \"Monteiro dos Santos\", \"Martins da Silva\", \"Nogueira de Lima\", \"Soares de Almeida\", \"Tavares da Rocha\",",
											"                    \"Alves de Souza\", \"Mendes da Silva\", \"Pinto de Souza\", \"Bastos de Lima\", \"Silva de Carvalho\",",
											"                    \"Pinto de Almeida\", \"Cardoso da Costa\", \"Torres de Almeida\", \"Oliveira de Figueiredo\", \"de Araújo Lima\",",
											"                    \"Cavalcanti da Rocha\", \"Xavier de Souza\", \"Cunha de Almeida\", \"Lemos da Silva\", \"Santos de Carvalho\",",
											"                    \"Almeida de Lima\", \"da Silva Pinto\", \"Lima de Oliveira\", \"Barbosa de Souza\", \"Costa de Almeida\",",
											"                    \"Figueiredo Lima\", \"Almeida dos Reis\", \"Tavares de Souza\", \"Azevedo de Lima\", \"Ferreira de Almeida\",",
											"                    \"Souza da Costa\", \"Pinto de Lima\", \"Gonçalves de Lima\", \"Bastos da Silva\", \"Nascimento de Almeida\",",
											"                    \"da Silva Souza\", \"Vieira de Oliveira\", \"Ribeiro dos Santos\", \"Silva de Araújo\", \"Costa de Lima\",",
											"                    \"de Castro Nogueira\", \"Cardoso de Almeida\", \"Pereira da Rocha\", \"Silva Tavares\", \"Rocha de Souza\",",
											"                    \"de Carvalho Santos\", \"Borges da Silva\", \"Almeida de Araújo\", \"Lima da Costa\", \"Melo de Almeida\",",
											"                    \"Faria de Lima\", \"Ferreira da Costa\", \"Ramos de Souza\", \"Moreira de Lima\", \"Barbosa de Almeida\",",
											"                    \"Santana de Souza\", \"Rocha de Lima\", \"Duarte de Souza\", \"Lopes de Almeida\", \"Almeida de Rocha\",",
											"                    \"Silva da Costa\", \"Figueiredo dos Santos\", \"Cardoso de Souza\", \"Oliveira de Rocha\", \"Costa de Nogueira\",",
											"                    \"Pinto de Araújo\", \"Tavares de Costa\", \"Martins de Almeida\", \"Nogueira da Rocha\", \"Souza de Almeida\",",
											"                    \"Carvalho da Silva\", \"Pereira de Souza\"",
											"                ];",
											"",
											"                let randomItem = lastName[Math.floor(Math.random() * lastName.length)];",
											"                return randomItem;",
											"            }",
											"",
											"            function gerarNomeResumido(nomeCompleto) {",
											"            // Divide o nome completo em uma lista de palavras",
											"            const partesNome = nomeCompleto.split(' ');",
											"",
											"            // Verifica se o nome tem 2 ou menos palavras",
											"            if (partesNome.length <= 2) {",
											"                return partesNome.join(' ');",
											"            }",
											"            ",
											"            // Pega o primeiro, penúltimo e último nome",
											"            const primeiroNome = partesNome[0];",
											"            const penultimoNome = partesNome[partesNome.length - 2];",
											"            const ultimoNome = partesNome[partesNome.length - 1];",
											"            ",
											"            // Retorna o novo nome formatado",
											"            return `${primeiroNome} ${penultimoNome} ${ultimoNome}`;",
											"        }",
											"",
											"            // // Exemplo de uso",
											"            // const nomeCompleto = \"Erick e Emanuelly Telecom ME\";",
											"            const novoNome = gerarNomeResumido(extractedData.nome);",
											"            console.log(novoNome);",
											"",
											"",
											"            pm.environment.set(\"ResponsibleContact\", extractedData.nome.split(' ')[0] + ' ' + lastName())",
											"            pm.environment.set(\"CorporateName\", novoNome)",
											"            pm.environment.set(\"CorporateMail\", extractedData.email)",
											"            pm.environment.set(\"RegisterCompany\", extractedData.cnpj)",
											"            pm.environment.set(\"Telephone\", extractedData.telefone_fixo + 1234)",
											"            pm.environment.set(\"ZipCode\", extractedData.cep)",
											"            pm.environment.set(\"City\", extractedData.cidade)",
											"            pm.environment.set(\"State\", extractedData.estado)",
											"            pm.environment.set(\"District\", extractedData.bairro)",
											"            pm.environment.set(\"Street\", extractedData.endereco)",
											"            pm.environment.set(\"Number\", extractedData.numero)",
											"            pm.environment.set(\"CorporateReason\", extractedData.nome)",
											"            ",
											"        }",
											"    });",
											"}",
											"",
											"// Inicia a requisição com até 3 tentativas",
											"sendRequestWithRetry(5);",
											"",
											"",
											"function serviceDecription () {",
											"    const descricaoServicos = [",
											"        \"Consultoria especializada para otimização de processos empresariais e aumento de produtividade.\",",
											"        \"Desenvolvimento de soluções de software personalizadas para atender às necessidades específicas do seu negócio.\",",
											"        \"Serviço de entrega rápida de alimentos frescos, com opções de pratos saudáveis e saborosos.\",",
											"        \"Manutenção preventiva e corretiva de equipamentos industriais, garantindo o melhor desempenho e segurança.\",",
											"        \"Consultoria em estratégias de marketing digital para aumentar a visibilidade e engajamento online.\",",
											"        \"Serviços de tradução e interpretação em diversos idiomas, com foco em negócios internacionais.\",",
											"        \"Assessoria jurídica para empresas, oferecendo soluções para questões contratuais e trabalhistas.\",",
											"        \"Design gráfico e criação de identidade visual para marcas, desde o logotipo até materiais promocionais.\",",
											"        \"Serviços de contabilidade e gestão financeira, com foco em reduzir custos e melhorar a saúde financeira.\",",
											"        \"Planejamento e execução de eventos corporativos e sociais, com toda a logística e produção envolvida.\",",
											"        \"Desenvolvimento de aplicativos móveis, com interfaces intuitivas e funcionalidades customizadas para sua empresa.\",",
											"        \"Serviços de limpeza e conservação para empresas, escritórios e estabelecimentos comerciais.\",",
											"        \"Treinamentos e workshops de capacitação profissional, com conteúdo voltado para o desenvolvimento de habilidades técnicas.\",",
											"        \"Fornecimento e instalação de sistemas de energia solar, promovendo a sustentabilidade e redução de custos de energia.\",",
											"        \"Assessoria em importação e exportação, com expertise em logística e regulamentos internacionais.\",",
											"        \"Serviços de gestão de redes sociais para aumentar a presença digital da sua marca e engajar clientes.\",",
											"        \"Consultoria em recursos humanos, ajudando a melhorar a gestão de talentos e o clima organizacional.\",",
											"        \"Planejamento estratégico para crescimento de negócios, com soluções inovadoras e análises de mercado detalhadas.\",",
											"        \"Criação de sites responsivos e otimizados, com foco em usabilidade e experiência do usuário.\",",
											"        \"Serviços de segurança patrimonial, com monitoramento 24h e sistemas de alarme para proteger seu imóvel.\"",
											"    ];",
											"    let randomItem = descricaoServicos[Math.floor(Math.random() * descricaoServicos.length)];",
											"        return randomItem;",
											"",
											"} ",
											"pm.environment.set(\"ServiceDescription\", serviceDecription())",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verificar se o status code é 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Validar userId do registeredBy é o mesmo id do Admin\", function () {",
											"     pm.expect(pm.response.json().newCompany.audit[0].registeredBy.userId).to.eql(pm.environment.get(\"UserIdAuditCompany\"));",
											"});",
											"",
											"pm.test(\"Validar userLogin do registeredBy é o mesmo e-mail do Admin\", function () {",
											"     pm.expect(pm.response.json().newCompany.audit[0].registeredBy.userLogin).to.eql(pm.environment.get(\"UserLoginAuditCompany\"));",
											"});",
											"",
											"pm.environment.set(\"NewCompanyId\", pm.response.json().newCompany._id)",
											"pm.environment.set(\"NewCompanyAuditRegistrationDate\", pm.response.json().newCompany.audit[0].registrationDate)",
											"pm.environment.set(\"NewCompanyAuditId\", pm.response.json().newCompany.audit[0]._id)",
											"",
											"//Salvando o objeto Address",
											"pm.environment.set(\"NewCompanyAddress\", pm.response.json().newCompany.address[0])"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"corporateName\": \"{{CorporateName}}\",\n  \"registerCompany\": \"{{RegisterCompany}}\",\n  \"mail\": \"{{CorporateMail}}\",\n  \"matriz\": \"{{CorporateReason}}\",\n  \"responsibleContact\": \"{{ResponsibleContact}}\",\n  \"telephone\": \"{{Telephone}}\",\n  \"serviceDescription\": \"{{ServiceDescription}}\",\n  \"address\": [\n    {\n      \"zipCode\": \"{{ZipCode}}\",\n      \"city\": \"{{City}}\",\n      \"state\": \"{{State}}\",\n      \"district\": \"{{District}}\",\n      \"street\": \"{{Street}}\",\n      \"number\": \"{{Number}}\",\n      \"complement\": \"\",\n      \"country\": \"{{Country}}\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/api/company/?token={{tokenAcesso}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"company",
										""
									],
									"query": [
										{
											"key": "token",
											"value": "{{tokenAcesso}}"
										}
									]
								},
								"description": "Generated from cURL: curl -X 'POST' \\\n  'https://ron-bugado.qacoders.dev.br/api/company/?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NzlhMzVmN2ViMzViNTQzYzI3NjliYTkiLCJmdWxsTmFtZSI6IkFuZHLDqSBNaW5hdG8iLCJtYWlsIjoiYW5kcmUubWluYXRvQHRlc3QuY29tLmJyIiwicGFzc3dvcmQiOiIkMmIkMTAkL0d3V0dxTFg5di9MNEVmdk9jbEsuLlouaHhWTWlITkQ3UzExZnhpTW1wSXdPZ2RtbTFYYkciLCJhY2Nlc3NQcm9maWxlIjoiQURNSU4iLCJjcGYiOiIxNzk4NTY5MjM5OCIsInN0YXR1cyI6dHJ1ZSwiYXVkaXQiOlt7InJlZ2lzdGVyZWRCeSI6eyJ1c2VySWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJ1c2VyTG9naW4iOiJzeXNhZG1pbkBxYWNvZGVycy5jb20ifSwicmVnaXN0cmF0aW9uRGF0ZSI6InF1YXJ0YS1mZWlyYSwgMjkvMDEvMjAyNSwgMTE6MDY6NDcgQlJUIiwicmVnaXN0cmF0aW9uTnVtYmVyIjoiUWFDb2RlcnMtMjYwIiwiX2lkIjoiNjc5YTM1ZjdlYjM1YjU0M2MyNzY5YmFhIn1dLCJfX3YiOjAsImlhdCI6MTczOTkwNjUzMiwiZXhwIjoxNzM5OTkyOTMyfQ.WMHrGtPB6sK3lx7_W1jI2XTfFDRaVTWHiUac0zM1NnY' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"corporateName\": \"Teste&QA LTDA\",\n  \"registerCompany\": \"12126456000100\",\n  \"mail\": \"testqa@hotmail.com\",\n  \"matriz\": \"lagoa azul\",\n  \"responsibleContact\": \"Marcio do Teste\",\n  \"telephone\": \"11111111111111\",\n  \"serviceDescription\": \"Testes de software e criação de indicadores para manter a qualidade de software\",\n  \"address\": [\n    {\n      \"zipCode\": \"04777001\",\n      \"city\": \"São Paulo\",\n      \"state\": \"SP\",\n      \"district\": \"Centro\",\n      \"street\": \"Avenida Interlagos\",\n      \"number\": \"50\",\n      \"complement\": \"\",\n      \"country\": \"Brasil\"\n    }\n  ]\n}'"
							},
							"response": []
						},
						{
							"name": "Editar dados da empresa enviando email formato inválido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validar se o status code é 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"corporateName\": \"{{CorporateName}}\",\n    \"registerCompany\": \"{{RegisterCompany}}\",\n    \"mail\": \"formatoinvalido@gmail.com.#*br\",\n    \"matriz\": \"{{CorporateReason}}\",\n    \"responsibleContact\": \"{{ResponsibleContact}}\",\n    \"telephone\": \"{{Telephone}}\",\n    \"serviceDescription\": \"{{ServiceDescription}}\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/api/company/{{NewCompanyId}}?token={{tokenAcesso}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"company",
										"{{NewCompanyId}}"
									],
									"query": [
										{
											"key": "token",
											"value": "{{tokenAcesso}}"
										}
									]
								},
								"description": "Generated from cURL: curl -X 'PUT' \\\n  'https://ron-bugado.qacoders.dev.br/api/company/67ab5be34b03e1eb32f4e561?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NzlhMzVmN2ViMzViNTQzYzI3NjliYTkiLCJmdWxsTmFtZSI6IkFuZHLDqSBNaW5hdG8iLCJtYWlsIjoiYW5kcmUubWluYXRvQHRlc3QuY29tLmJyIiwicGFzc3dvcmQiOiIkMmIkMTAkL0d3V0dxTFg5di9MNEVmdk9jbEsuLlouaHhWTWlITkQ3UzExZnhpTW1wSXdPZ2RtbTFYYkciLCJhY2Nlc3NQcm9maWxlIjoiQURNSU4iLCJjcGYiOiIxNzk4NTY5MjM5OCIsInN0YXR1cyI6dHJ1ZSwiYXVkaXQiOlt7InJlZ2lzdGVyZWRCeSI6eyJ1c2VySWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJ1c2VyTG9naW4iOiJzeXNhZG1pbkBxYWNvZGVycy5jb20ifSwicmVnaXN0cmF0aW9uRGF0ZSI6InF1YXJ0YS1mZWlyYSwgMjkvMDEvMjAyNSwgMTE6MDY6NDcgQlJUIiwicmVnaXN0cmF0aW9uTnVtYmVyIjoiUWFDb2RlcnMtMjYwIiwiX2lkIjoiNjc5YTM1ZjdlYjM1YjU0M2MyNzY5YmFhIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTY2NSwiZXhwIjoxNzM5MzE2MDY1fQ.UmE4tUczm31wPdJ_wcCn-ZoGmAsmJJHRUBbxde6iUyw' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"corporateName\": \"Grupo KRO Publicidade & Tecnologia\",\n  \"registerCompany\": \"12126456000155\",\n  \"mail\": \"rh@kro.com.br\",\n  \"matriz\": \"Teste de criação de empresa\",\n  \"responsibleContact\": \"Teste de criação de empresa\",\n  \"telephone\": \"551188951407589\",\n  \"serviceDescription\": \"Realizar o teste no cenário para a criação de uma nova empresa\"\n}\n\n'"
							},
							"response": []
						},
						{
							"name": "Listar - Empresas Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// A resposta da requisição",
											"let responseData = pm.response.json();",
											"",
											"// Inverter a ordem dos registros",
											"let reversedData = responseData.reverse();",
											"",
											"// Salvar os dados invertidos para uso posterior",
											"pm.environment.set(\"reversedData\", JSON.stringify(reversedData));",
											"",
											"// Verificar se a inversão funcionou",
											"console.log(reversedData);",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"packages": {},
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{url_base}}/api/company/?token={{tokenAcesso}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"company",
										""
									],
									"query": [
										{
											"key": "token",
											"value": "{{tokenAcesso}}"
										}
									]
								},
								"description": "Generated from cURL: curl -X 'GET' \\\n  'https://ron-bugado.qacoders.dev.br/api/company/?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NzlhMzVmN2ViMzViNTQzYzI3NjliYTkiLCJmdWxsTmFtZSI6IkFuZHLDqSBNaW5hdG8iLCJtYWlsIjoiYW5kcmUubWluYXRvQHRlc3QuY29tLmJyIiwicGFzc3dvcmQiOiIkMmIkMTAkL0d3V0dxTFg5di9MNEVmdk9jbEsuLlouaHhWTWlITkQ3UzExZnhpTW1wSXdPZ2RtbTFYYkciLCJhY2Nlc3NQcm9maWxlIjoiQURNSU4iLCJjcGYiOiIxNzk4NTY5MjM5OCIsInN0YXR1cyI6dHJ1ZSwiYXVkaXQiOlt7InJlZ2lzdGVyZWRCeSI6eyJ1c2VySWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJ1c2VyTG9naW4iOiJzeXNhZG1pbkBxYWNvZGVycy5jb20ifSwicmVnaXN0cmF0aW9uRGF0ZSI6InF1YXJ0YS1mZWlyYSwgMjkvMDEvMjAyNSwgMTE6MDY6NDcgQlJUIiwicmVnaXN0cmF0aW9uTnVtYmVyIjoiUWFDb2RlcnMtMjYwIiwiX2lkIjoiNjc5YTM1ZjdlYjM1YjU0M2MyNzY5YmFhIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyODM4MCwiZXhwIjoxNzM5MzE0NzgwfQ.TX88kOWjwoM9biXDhB3ivJJR8xlFsKEb1XQ1KLY7V34' \\\n  -H 'accept: application/json'"
							},
							"response": []
						}
					]
				},
				{
					"name": "Decrição",
					"item": [
						{
							"name": "Login de Sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"tokenAcesso\", pm.response.json().token);",
											"pm.environment.set(\"UserIdAuditCompany\", pm.response.json().user._id);",
											"pm.environment.set(\"UserLoginAuditCompany\", pm.response.json().user.mail);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"mail\": \"{{TestUserEmail}}\",\r\n    \"password\": \"{{TestUserPassword}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/api/login/",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"login",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastro de empresa",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function sendRequestWithRetry(retries) {",
											"    pm.sendRequest({",
											"        // Opções da request",
											"        url: 'https://www.4devs.com.br/ferramentas_online.php',",
											"        method: 'POST',",
											"        header: {",
											"            'Content-Type': 'application/x-www-form-urlencoded',",
											"        },",
											"        body: {",
											"            mode: 'raw',",
											"            raw: 'acao=gerar_empresa&pontuacao=N&estado=SP&idade=5',",
											"        }",
											"    }, function (err, response) {",
											"        if (err) {",
											"            console.log('Erro na requisição:', err);",
											"            if (retries > 0) {",
											"                console.log('Tentando novamente...');",
											"                sendRequestWithRetry(retries - 1); // Tenta novamente se falhar",
											"            } else {",
											"                console.log('Número máximo de tentativas atingido.');",
											"            }",
											"        } else {",
											"            // Acessa o corpo da resposta HTML",
											"            var responseBody = response.text();",
											"",
											"            // Função para extrair o valor de um campo baseado no id do input",
											"            function extractData(id) {",
											"                var regex = new RegExp('<input[^>]+id=\"' + id + '\"[^>]+value=\"([^\"]+)\"', 'i');",
											"                var match = responseBody.match(regex);",
											"                return match ? match[1] : null;",
											"            }",
											"",
											"            // Criação do objeto JSON com os dados extraídos",
											"            var extractedData = {",
											"                nome: extractData('nome'),",
											"                cnpj: extractData('cnpj'),",
											"                ie: extractData('ie'),",
											"                data_abertura: extractData('data_abertura'),",
											"                site: extractData('site'),",
											"                email: extractData('email'),",
											"                cep: extractData('cep'),",
											"                endereco: extractData('endereco'),",
											"                numero: extractData('numero'),",
											"                bairro: extractData('bairro'),",
											"                cidade: extractData('cidade'),",
											"                estado: extractData('estado'),",
											"                telefone_fixo: extractData('telefone_fixo'),",
											"                celular: extractData('celular')",
											"            };",
											"",
											"",
											"            // Agora, chamamos a função lastName depois de todo o processamento",
											"            function lastName() {",
											"                var lastName = [",
											"                    \"Silva dos Santos\", \"de Albuquerque Figueiroa\", \"Saviola de Lima\", \"Xavier de Menezes\",",
											"                    \"Oliveira dos Reis\", \"Carvalho Silva\", \"Pereira do Amaral\", \"Costa Lima\", \"dos Santos Rocha\",",
											"                    \"Ferreira de Souza\", \"Costa Ramos\", \"Almeida Martins\", \"Rocha de Oliveira\", \"Souza Lima\",",
											"                    \"Silva Pereira\", \"de Andrade Oliveira\", \"Fonseca Lima\", \"Pinto da Silva\", \"Almeida Costa\",",
											"                    \"Ferreira dos Santos\", \"Figueiredo de Souza\", \"da Silva Nogueira\", \"de Barros Santos\",",
											"                    \"Gomes de Almeida\", \"Lima Pereira\", \"Barbosa da Costa\", \"Rodrigues de Oliveira\", \"da Silva Andrade\",",
											"                    \"Monteiro dos Santos\", \"Martins da Silva\", \"Nogueira de Lima\", \"Soares de Almeida\", \"Tavares da Rocha\",",
											"                    \"Alves de Souza\", \"Mendes da Silva\", \"Pinto de Souza\", \"Bastos de Lima\", \"Silva de Carvalho\",",
											"                    \"Pinto de Almeida\", \"Cardoso da Costa\", \"Torres de Almeida\", \"Oliveira de Figueiredo\", \"de Araújo Lima\",",
											"                    \"Cavalcanti da Rocha\", \"Xavier de Souza\", \"Cunha de Almeida\", \"Lemos da Silva\", \"Santos de Carvalho\",",
											"                    \"Almeida de Lima\", \"da Silva Pinto\", \"Lima de Oliveira\", \"Barbosa de Souza\", \"Costa de Almeida\",",
											"                    \"Figueiredo Lima\", \"Almeida dos Reis\", \"Tavares de Souza\", \"Azevedo de Lima\", \"Ferreira de Almeida\",",
											"                    \"Souza da Costa\", \"Pinto de Lima\", \"Gonçalves de Lima\", \"Bastos da Silva\", \"Nascimento de Almeida\",",
											"                    \"da Silva Souza\", \"Vieira de Oliveira\", \"Ribeiro dos Santos\", \"Silva de Araújo\", \"Costa de Lima\",",
											"                    \"de Castro Nogueira\", \"Cardoso de Almeida\", \"Pereira da Rocha\", \"Silva Tavares\", \"Rocha de Souza\",",
											"                    \"de Carvalho Santos\", \"Borges da Silva\", \"Almeida de Araújo\", \"Lima da Costa\", \"Melo de Almeida\",",
											"                    \"Faria de Lima\", \"Ferreira da Costa\", \"Ramos de Souza\", \"Moreira de Lima\", \"Barbosa de Almeida\",",
											"                    \"Santana de Souza\", \"Rocha de Lima\", \"Duarte de Souza\", \"Lopes de Almeida\", \"Almeida de Rocha\",",
											"                    \"Silva da Costa\", \"Figueiredo dos Santos\", \"Cardoso de Souza\", \"Oliveira de Rocha\", \"Costa de Nogueira\",",
											"                    \"Pinto de Araújo\", \"Tavares de Costa\", \"Martins de Almeida\", \"Nogueira da Rocha\", \"Souza de Almeida\",",
											"                    \"Carvalho da Silva\", \"Pereira de Souza\"",
											"                ];",
											"",
											"                let randomItem = lastName[Math.floor(Math.random() * lastName.length)];",
											"                return randomItem;",
											"            }",
											"",
											"            function gerarNomeResumido(nomeCompleto) {",
											"            // Divide o nome completo em uma lista de palavras",
											"            const partesNome = nomeCompleto.split(' ');",
											"",
											"            // Verifica se o nome tem 2 ou menos palavras",
											"            if (partesNome.length <= 2) {",
											"                return partesNome.join(' ');",
											"            }",
											"            ",
											"            // Pega o primeiro, penúltimo e último nome",
											"            const primeiroNome = partesNome[0];",
											"            const penultimoNome = partesNome[partesNome.length - 2];",
											"            const ultimoNome = partesNome[partesNome.length - 1];",
											"            ",
											"            // Retorna o novo nome formatado",
											"            return `${primeiroNome} ${penultimoNome} ${ultimoNome}`;",
											"        }",
											"",
											"            // // Exemplo de uso",
											"            // const nomeCompleto = \"Erick e Emanuelly Telecom ME\";",
											"            const novoNome = gerarNomeResumido(extractedData.nome);",
											"            console.log(novoNome);",
											"",
											"",
											"            pm.environment.set(\"ResponsibleContact\", extractedData.nome.split(' ')[0] + ' ' + lastName())",
											"            pm.environment.set(\"CorporateName\", novoNome)",
											"            pm.environment.set(\"CorporateMail\", extractedData.email)",
											"            pm.environment.set(\"RegisterCompany\", extractedData.cnpj)",
											"            pm.environment.set(\"Telephone\", extractedData.telefone_fixo + 1234)",
											"            pm.environment.set(\"ZipCode\", extractedData.cep)",
											"            pm.environment.set(\"City\", extractedData.cidade)",
											"            pm.environment.set(\"State\", extractedData.estado)",
											"            pm.environment.set(\"District\", extractedData.bairro)",
											"            pm.environment.set(\"Street\", extractedData.endereco)",
											"            pm.environment.set(\"Number\", extractedData.numero)",
											"            pm.environment.set(\"CorporateReason\", extractedData.nome)",
											"            ",
											"        }",
											"    });",
											"}",
											"",
											"// Inicia a requisição com até 3 tentativas",
											"sendRequestWithRetry(5);",
											"",
											"",
											"function serviceDecription () {",
											"    const descricaoServicos = [",
											"        \"Consultoria especializada para otimização de processos empresariais e aumento de produtividade.\",",
											"        \"Desenvolvimento de soluções de software personalizadas para atender às necessidades específicas do seu negócio.\",",
											"        \"Serviço de entrega rápida de alimentos frescos, com opções de pratos saudáveis e saborosos.\",",
											"        \"Manutenção preventiva e corretiva de equipamentos industriais, garantindo o melhor desempenho e segurança.\",",
											"        \"Consultoria em estratégias de marketing digital para aumentar a visibilidade e engajamento online.\",",
											"        \"Serviços de tradução e interpretação em diversos idiomas, com foco em negócios internacionais.\",",
											"        \"Assessoria jurídica para empresas, oferecendo soluções para questões contratuais e trabalhistas.\",",
											"        \"Design gráfico e criação de identidade visual para marcas, desde o logotipo até materiais promocionais.\",",
											"        \"Serviços de contabilidade e gestão financeira, com foco em reduzir custos e melhorar a saúde financeira.\",",
											"        \"Planejamento e execução de eventos corporativos e sociais, com toda a logística e produção envolvida.\",",
											"        \"Desenvolvimento de aplicativos móveis, com interfaces intuitivas e funcionalidades customizadas para sua empresa.\",",
											"        \"Serviços de limpeza e conservação para empresas, escritórios e estabelecimentos comerciais.\",",
											"        \"Treinamentos e workshops de capacitação profissional, com conteúdo voltado para o desenvolvimento de habilidades técnicas.\",",
											"        \"Fornecimento e instalação de sistemas de energia solar, promovendo a sustentabilidade e redução de custos de energia.\",",
											"        \"Assessoria em importação e exportação, com expertise em logística e regulamentos internacionais.\",",
											"        \"Serviços de gestão de redes sociais para aumentar a presença digital da sua marca e engajar clientes.\",",
											"        \"Consultoria em recursos humanos, ajudando a melhorar a gestão de talentos e o clima organizacional.\",",
											"        \"Planejamento estratégico para crescimento de negócios, com soluções inovadoras e análises de mercado detalhadas.\",",
											"        \"Criação de sites responsivos e otimizados, com foco em usabilidade e experiência do usuário.\",",
											"        \"Serviços de segurança patrimonial, com monitoramento 24h e sistemas de alarme para proteger seu imóvel.\"",
											"    ];",
											"    let randomItem = descricaoServicos[Math.floor(Math.random() * descricaoServicos.length)];",
											"        return randomItem;",
											"",
											"} ",
											"pm.environment.set(\"ServiceDescription\", serviceDecription())",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verificar se o status code é 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Validar userId do registeredBy é o mesmo id do Admin\", function () {",
											"     pm.expect(pm.response.json().newCompany.audit[0].registeredBy.userId).to.eql(pm.environment.get(\"UserIdAuditCompany\"));",
											"});",
											"",
											"pm.test(\"Validar userLogin do registeredBy é o mesmo e-mail do Admin\", function () {",
											"     pm.expect(pm.response.json().newCompany.audit[0].registeredBy.userLogin).to.eql(pm.environment.get(\"UserLoginAuditCompany\"));",
											"});",
											"",
											"pm.environment.set(\"NewCompanyId\", pm.response.json().newCompany._id)",
											"pm.environment.set(\"NewCompanyAuditRegistrationDate\", pm.response.json().newCompany.audit[0].registrationDate)",
											"pm.environment.set(\"NewCompanyAuditId\", pm.response.json().newCompany.audit[0]._id)",
											"",
											"//Salvando o objeto Address",
											"pm.environment.set(\"NewCompanyAddress\", pm.response.json().newCompany.address[0])"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"corporateName\": \"{{CorporateName}}\",\n  \"registerCompany\": \"{{RegisterCompany}}\",\n  \"mail\": \"{{CorporateMail}}\",\n  \"matriz\": \"{{CorporateReason}}\",\n  \"responsibleContact\": \"{{ResponsibleContact}}\",\n  \"telephone\": \"{{Telephone}}\",\n  \"serviceDescription\": \"{{ServiceDescription}}\",\n  \"address\": [\n    {\n      \"zipCode\": \"{{ZipCode}}\",\n      \"city\": \"{{City}}\",\n      \"state\": \"{{State}}\",\n      \"district\": \"{{District}}\",\n      \"street\": \"{{Street}}\",\n      \"number\": \"{{Number}}\",\n      \"complement\": \"\",\n      \"country\": \"{{Country}}\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/api/company/?token={{tokenAcesso}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"company",
										""
									],
									"query": [
										{
											"key": "token",
											"value": "{{tokenAcesso}}"
										}
									]
								},
								"description": "Generated from cURL: curl -X 'POST' \\\n  'https://ron-bugado.qacoders.dev.br/api/company/?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NzlhMzVmN2ViMzViNTQzYzI3NjliYTkiLCJmdWxsTmFtZSI6IkFuZHLDqSBNaW5hdG8iLCJtYWlsIjoiYW5kcmUubWluYXRvQHRlc3QuY29tLmJyIiwicGFzc3dvcmQiOiIkMmIkMTAkL0d3V0dxTFg5di9MNEVmdk9jbEsuLlouaHhWTWlITkQ3UzExZnhpTW1wSXdPZ2RtbTFYYkciLCJhY2Nlc3NQcm9maWxlIjoiQURNSU4iLCJjcGYiOiIxNzk4NTY5MjM5OCIsInN0YXR1cyI6dHJ1ZSwiYXVkaXQiOlt7InJlZ2lzdGVyZWRCeSI6eyJ1c2VySWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJ1c2VyTG9naW4iOiJzeXNhZG1pbkBxYWNvZGVycy5jb20ifSwicmVnaXN0cmF0aW9uRGF0ZSI6InF1YXJ0YS1mZWlyYSwgMjkvMDEvMjAyNSwgMTE6MDY6NDcgQlJUIiwicmVnaXN0cmF0aW9uTnVtYmVyIjoiUWFDb2RlcnMtMjYwIiwiX2lkIjoiNjc5YTM1ZjdlYjM1YjU0M2MyNzY5YmFhIn1dLCJfX3YiOjAsImlhdCI6MTczOTkwNjUzMiwiZXhwIjoxNzM5OTkyOTMyfQ.WMHrGtPB6sK3lx7_W1jI2XTfFDRaVTWHiUac0zM1NnY' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"corporateName\": \"Teste&QA LTDA\",\n  \"registerCompany\": \"12126456000100\",\n  \"mail\": \"testqa@hotmail.com\",\n  \"matriz\": \"lagoa azul\",\n  \"responsibleContact\": \"Marcio do Teste\",\n  \"telephone\": \"11111111111111\",\n  \"serviceDescription\": \"Testes de software e criação de indicadores para manter a qualidade de software\",\n  \"address\": [\n    {\n      \"zipCode\": \"04777001\",\n      \"city\": \"São Paulo\",\n      \"state\": \"SP\",\n      \"district\": \"Centro\",\n      \"street\": \"Avenida Interlagos\",\n      \"number\": \"50\",\n      \"complement\": \"\",\n      \"country\": \"Brasil\"\n    }\n  ]\n}'"
							},
							"response": []
						},
						{
							"name": "Editar cadastro da empresa enviando uma descrição alfanumérico",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validar se o status code é 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Validar mensagem de atualizado com sucesso.\", function () {",
											"     pm.expect(pm.response.json().msg).to.eql(\"Companhia atualizada com sucesso.\");",
											"});",
											"",
											"pm.test(\"Validar se a descrição e a mesma do request\", function () {",
											"     pm.expect(pm.response.json().updatedCompany.serviceDescription).to.eql(\"ech21 Solutions é uma empresa inovadora especializada em soluções tecnológicas avançadas para empresas de todos os tamanhos, desde 2021\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"corporateName\": \"{{CorporateName}}\",\n    \"registerCompany\": \"{{RegisterCompany}}\",\n    \"mail\": \"{{CorporateMail}}\",\n    \"matriz\": \"{{CorporateReason}}\",\n    \"responsibleContact\": \"{{ResponsibleContact}}\",\n    \"telephone\": \"{{Telephone}}\",\n    \"serviceDescription\": \"ech21 Solutions é uma empresa inovadora especializada em soluções tecnológicas avançadas para empresas de todos os tamanhos, desde 2021\"\n}\n\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/api/company/{{NewCompanyId}}?token={{tokenAcesso}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"company",
										"{{NewCompanyId}}"
									],
									"query": [
										{
											"key": "token",
											"value": "{{tokenAcesso}}"
										}
									]
								},
								"description": "Generated from cURL: curl -X 'PUT' \\\n  'https://ron-bugado.qacoders.dev.br/api/company/67ab5be34b03e1eb32f4e561?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NzlhMzVmN2ViMzViNTQzYzI3NjliYTkiLCJmdWxsTmFtZSI6IkFuZHLDqSBNaW5hdG8iLCJtYWlsIjoiYW5kcmUubWluYXRvQHRlc3QuY29tLmJyIiwicGFzc3dvcmQiOiIkMmIkMTAkL0d3V0dxTFg5di9MNEVmdk9jbEsuLlouaHhWTWlITkQ3UzExZnhpTW1wSXdPZ2RtbTFYYkciLCJhY2Nlc3NQcm9maWxlIjoiQURNSU4iLCJjcGYiOiIxNzk4NTY5MjM5OCIsInN0YXR1cyI6dHJ1ZSwiYXVkaXQiOlt7InJlZ2lzdGVyZWRCeSI6eyJ1c2VySWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJ1c2VyTG9naW4iOiJzeXNhZG1pbkBxYWNvZGVycy5jb20ifSwicmVnaXN0cmF0aW9uRGF0ZSI6InF1YXJ0YS1mZWlyYSwgMjkvMDEvMjAyNSwgMTE6MDY6NDcgQlJUIiwicmVnaXN0cmF0aW9uTnVtYmVyIjoiUWFDb2RlcnMtMjYwIiwiX2lkIjoiNjc5YTM1ZjdlYjM1YjU0M2MyNzY5YmFhIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTY2NSwiZXhwIjoxNzM5MzE2MDY1fQ.UmE4tUczm31wPdJ_wcCn-ZoGmAsmJJHRUBbxde6iUyw' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"corporateName\": \"Grupo KRO Publicidade & Tecnologia\",\n  \"registerCompany\": \"12126456000155\",\n  \"mail\": \"rh@kro.com.br\",\n  \"matriz\": \"Teste de criação de empresa\",\n  \"responsibleContact\": \"Teste de criação de empresa\",\n  \"telephone\": \"551188951407589\",\n  \"serviceDescription\": \"Realizar o teste no cenário para a criação de uma nova empresa\"\n}\n\n'"
							},
							"response": []
						},
						{
							"name": "Editar cadastro da empresa enviando uma descrição que contenha apenas letras",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validar se o status code é 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Validar mensagem de atualizado com sucesso.\", function () {",
											"     pm.expect(pm.response.json().msg).to.eql(\"Companhia atualizada com sucesso.\");",
											"});",
											"",
											"pm.test(\"Validar se a descrição e a mesma do request\", function () {",
											"     pm.expect(pm.response.json().updatedCompany.serviceDescription).to.eql(\"AlphaX Solutions é uma empresa líder em inovação tecnológica, dedicada a fornecer soluções inteligentes para a transformação digital de empresas.\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"corporateName\": \"{{CorporateName}}\",\n    \"registerCompany\": \"{{RegisterCompany}}\",\n    \"mail\": \"{{CorporateMail}}\",\n    \"matriz\": \"{{CorporateReason}}\",\n    \"responsibleContact\": \"{{ResponsibleContact}}\",\n    \"telephone\": \"{{Telephone}}\",\n    \"serviceDescription\": \"AlphaX Solutions é uma empresa líder em inovação tecnológica, dedicada a fornecer soluções inteligentes para a transformação digital de empresas.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/api/company/{{NewCompanyId}}?token={{tokenAcesso}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"company",
										"{{NewCompanyId}}"
									],
									"query": [
										{
											"key": "token",
											"value": "{{tokenAcesso}}"
										}
									]
								},
								"description": "Generated from cURL: curl -X 'PUT' \\\n  'https://ron-bugado.qacoders.dev.br/api/company/67ab5be34b03e1eb32f4e561?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NzlhMzVmN2ViMzViNTQzYzI3NjliYTkiLCJmdWxsTmFtZSI6IkFuZHLDqSBNaW5hdG8iLCJtYWlsIjoiYW5kcmUubWluYXRvQHRlc3QuY29tLmJyIiwicGFzc3dvcmQiOiIkMmIkMTAkL0d3V0dxTFg5di9MNEVmdk9jbEsuLlouaHhWTWlITkQ3UzExZnhpTW1wSXdPZ2RtbTFYYkciLCJhY2Nlc3NQcm9maWxlIjoiQURNSU4iLCJjcGYiOiIxNzk4NTY5MjM5OCIsInN0YXR1cyI6dHJ1ZSwiYXVkaXQiOlt7InJlZ2lzdGVyZWRCeSI6eyJ1c2VySWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJ1c2VyTG9naW4iOiJzeXNhZG1pbkBxYWNvZGVycy5jb20ifSwicmVnaXN0cmF0aW9uRGF0ZSI6InF1YXJ0YS1mZWlyYSwgMjkvMDEvMjAyNSwgMTE6MDY6NDcgQlJUIiwicmVnaXN0cmF0aW9uTnVtYmVyIjoiUWFDb2RlcnMtMjYwIiwiX2lkIjoiNjc5YTM1ZjdlYjM1YjU0M2MyNzY5YmFhIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTY2NSwiZXhwIjoxNzM5MzE2MDY1fQ.UmE4tUczm31wPdJ_wcCn-ZoGmAsmJJHRUBbxde6iUyw' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"corporateName\": \"Grupo KRO Publicidade & Tecnologia\",\n  \"registerCompany\": \"12126456000155\",\n  \"mail\": \"rh@kro.com.br\",\n  \"matriz\": \"Teste de criação de empresa\",\n  \"responsibleContact\": \"Teste de criação de empresa\",\n  \"telephone\": \"551188951407589\",\n  \"serviceDescription\": \"Realizar o teste no cenário para a criação de uma nova empresa\"\n}\n\n'"
							},
							"response": []
						},
						{
							"name": "Editar cadastro da empresa enviando dados obrigatórios com valores em branco",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validar se o status code é 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"corporateName\": \"\",\n    \"registerCompany\": \"\",\n    \"mail\": \"\",\n    \"matriz\": \"\",\n    \"responsibleContact\": \"\",\n    \"telephone\": \"\",\n    \"serviceDescription\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_base}}/api/company/{{NewCompanyId}}?token={{tokenAcesso}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"company",
										"{{NewCompanyId}}"
									],
									"query": [
										{
											"key": "token",
											"value": "{{tokenAcesso}}"
										}
									]
								},
								"description": "Generated from cURL: curl -X 'PUT' \\\n  'https://ron-bugado.qacoders.dev.br/api/company/67ab5be34b03e1eb32f4e561?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NzlhMzVmN2ViMzViNTQzYzI3NjliYTkiLCJmdWxsTmFtZSI6IkFuZHLDqSBNaW5hdG8iLCJtYWlsIjoiYW5kcmUubWluYXRvQHRlc3QuY29tLmJyIiwicGFzc3dvcmQiOiIkMmIkMTAkL0d3V0dxTFg5di9MNEVmdk9jbEsuLlouaHhWTWlITkQ3UzExZnhpTW1wSXdPZ2RtbTFYYkciLCJhY2Nlc3NQcm9maWxlIjoiQURNSU4iLCJjcGYiOiIxNzk4NTY5MjM5OCIsInN0YXR1cyI6dHJ1ZSwiYXVkaXQiOlt7InJlZ2lzdGVyZWRCeSI6eyJ1c2VySWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJ1c2VyTG9naW4iOiJzeXNhZG1pbkBxYWNvZGVycy5jb20ifSwicmVnaXN0cmF0aW9uRGF0ZSI6InF1YXJ0YS1mZWlyYSwgMjkvMDEvMjAyNSwgMTE6MDY6NDcgQlJUIiwicmVnaXN0cmF0aW9uTnVtYmVyIjoiUWFDb2RlcnMtMjYwIiwiX2lkIjoiNjc5YTM1ZjdlYjM1YjU0M2MyNzY5YmFhIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyOTY2NSwiZXhwIjoxNzM5MzE2MDY1fQ.UmE4tUczm31wPdJ_wcCn-ZoGmAsmJJHRUBbxde6iUyw' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"corporateName\": \"Grupo KRO Publicidade & Tecnologia\",\n  \"registerCompany\": \"12126456000155\",\n  \"mail\": \"rh@kro.com.br\",\n  \"matriz\": \"Teste de criação de empresa\",\n  \"responsibleContact\": \"Teste de criação de empresa\",\n  \"telephone\": \"551188951407589\",\n  \"serviceDescription\": \"Realizar o teste no cenário para a criação de uma nova empresa\"\n}\n\n'"
							},
							"response": []
						},
						{
							"name": "Listar - Empresas",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// A resposta da requisição",
											"let responseData = pm.response.json();",
											"",
											"// Inverter a ordem dos registros",
											"let reversedData = responseData.reverse();",
											"",
											"// Salvar os dados invertidos para uso posterior",
											"pm.environment.set(\"reversedData\", JSON.stringify(reversedData));",
											"",
											"// Verificar se a inversão funcionou",
											"console.log(reversedData);",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"packages": {},
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{url_base}}/api/company/?token={{tokenAcesso}}",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"api",
										"company",
										""
									],
									"query": [
										{
											"key": "token",
											"value": "{{tokenAcesso}}"
										}
									]
								},
								"description": "Generated from cURL: curl -X 'GET' \\\n  'https://ron-bugado.qacoders.dev.br/api/company/?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NzlhMzVmN2ViMzViNTQzYzI3NjliYTkiLCJmdWxsTmFtZSI6IkFuZHLDqSBNaW5hdG8iLCJtYWlsIjoiYW5kcmUubWluYXRvQHRlc3QuY29tLmJyIiwicGFzc3dvcmQiOiIkMmIkMTAkL0d3V0dxTFg5di9MNEVmdk9jbEsuLlouaHhWTWlITkQ3UzExZnhpTW1wSXdPZ2RtbTFYYkciLCJhY2Nlc3NQcm9maWxlIjoiQURNSU4iLCJjcGYiOiIxNzk4NTY5MjM5OCIsInN0YXR1cyI6dHJ1ZSwiYXVkaXQiOlt7InJlZ2lzdGVyZWRCeSI6eyJ1c2VySWQiOiI2NmRiNWQ4NDFkZjU1NDE1MGU2ZDY0YmQiLCJ1c2VyTG9naW4iOiJzeXNhZG1pbkBxYWNvZGVycy5jb20ifSwicmVnaXN0cmF0aW9uRGF0ZSI6InF1YXJ0YS1mZWlyYSwgMjkvMDEvMjAyNSwgMTE6MDY6NDcgQlJUIiwicmVnaXN0cmF0aW9uTnVtYmVyIjoiUWFDb2RlcnMtMjYwIiwiX2lkIjoiNjc5YTM1ZjdlYjM1YjU0M2MyNzY5YmFhIn1dLCJfX3YiOjAsImlhdCI6MTczOTIyODM4MCwiZXhwIjoxNzM5MzE0NzgwfQ.TX88kOWjwoM9biXDhB3ivJJR8xlFsKEb1XQ1KLY7V34' \\\n  -H 'accept: application/json'"
							},
							"response": []
						}
					]
				}
			]
		}
	]
}